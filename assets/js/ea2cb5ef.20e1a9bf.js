"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[324],{30876:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>c});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=u(t),c=a,f=p["".concat(s,".").concat(c)]||p[c]||d[c]||o;return t?r.createElement(f,l(l({ref:n},m),{},{components:t})):r.createElement(f,l({ref:n},m))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},91106:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>u,toc:()=>m});var r=t(7896),a=t(31461),o=(t(67294),t(30876)),l=["components"],i={id:"use-form",category:"State Management",title:"useForm",description:"The useForm is custom hook for managing forms with ease. It takes optional arguments.",pagination_prev:"web/hooks/use-visually-hidden",pagination_next:"web/hooks/use-form-field-Array"},s=void 0,u={unversionedId:"web/hooks/use-form",id:"web/hooks/use-form",isDocsHomePage:!1,title:"useForm",description:"The useForm is custom hook for managing forms with ease. It takes optional arguments.",source:"@site/docs/web/hooks/useForm.md",sourceDirName:"web/hooks",slug:"/web/hooks/use-form",permalink:"/web/hooks/use-form",tags:[],version:"current",frontMatter:{id:"use-form",category:"State Management",title:"useForm",description:"The useForm is custom hook for managing forms with ease. It takes optional arguments.",pagination_prev:"web/hooks/use-visually-hidden",pagination_next:"web/hooks/use-form-field-Array"},sidebar:"docs",previous:{title:"useVisuallyHidden",permalink:"/web/hooks/use-visually-hidden"},next:{title:"useFormFieldArray",permalink:"/web/hooks/use-form-field-Array"}},m=[{value:"Usage",id:"usage",children:[],level:2},{value:"Default Values",id:"default-values",children:[],level:2},{value:"Form State",id:"form-state",children:[],level:2},{value:"Watch",id:"watch",children:[],level:2},{value:"Handle Submit",id:"handle-submit",children:[],level:2},{value:"Validate Model",id:"validate-model",children:[],level:2},{value:"Reset",id:"reset",children:[],level:2},{value:"Set Error",id:"set-error",children:[],level:2},{value:"Clear Errors",id:"clear-errors",children:[],level:2},{value:"Set Value",id:"set-value",children:[],level:2},{value:"Set Focus",id:"set-focus",children:[],level:2},{value:"Get Values",id:"get-values",children:[],level:2},{value:"Trigger",id:"trigger",children:[],level:2},{value:"Cross-Field Validation Example",id:"cross-field-validation-example",children:[],level:2},{value:"Form Input Autofill",id:"form-input-autofill",children:[],level:2},{value:"Autofill Off",id:"autofill-off",children:[],level:2}],d={toc:m};function p(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useForm } from '@abyss/web/hooks/useForm';\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    // Do something on submit\n    alert(`FormData:  ${JSON.stringify(data)}`);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <TextInput\n        dataTestid="firstName"\n        label="First Name"\n        model="firstName"\n        validators={{ required: true }}\n      />\n      <TextInput\n        dataTestid="lastName"\n        label="Last Name"\n        model="lastName"\n        validators={{ required: true }}\n      />\n      <Layout.Space />\n      <Button type="submit">Submit</Button>\n    </FormProvider>\n  );\n};\n')),(0,o.kt)("h2",{id:"default-values"},"Default Values"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  // Default Values Passed into useForm\n  const form = useForm({\n    defaultValues: {\n      firstName: \'John\',\n      lastName: \'Doe\',\n    },\n  });\n\n  const onSubmit = (data) => {\n    alert(`FormData:  ${JSON.stringify(data)}`);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <TextInput\n        label="First Name"\n        model="firstName"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="Last Name"\n        model="lastName"\n        validators={{ required: true }}\n      />\n      <Layout.Space />\n      <Button type="submit">Submit</Button>\n    </FormProvider>\n  );\n};\n')),(0,o.kt)("h2",{id:"form-state"},"Form State"),(0,o.kt)("p",null,"This object contains information about the form state. If you want to subscribe to formState via useEffect, make sure that you place the entire formState in the optional array."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const form = useForm();\n\nconst {\n  errors, // An object with field errors\n  isDirty, // Set to true after the user modifies any of the inputs.\n  isValid, // Set to true if the form doesn't have any errors.\n  isValidating, // Set to true during validation.\n  isSubmitting, // true if the form is currently being submitted. false if otherwise.\n  isSubmitted, // Set to true after the form is submitted.\n  isSubmitSuccessful, //    Indicate the form was successfully submitted without any Promise rejection or Error been threw within the handleSubmit callback.\n  submitCount, //   Number of times the form was submitted.\n  touchedFields, // An object containing all the inputs the user has interacted with.\n  dirtyFields, // An object with the user-modified fields.\n} = form.formState;\n")),(0,o.kt)("h2",{id:"watch"},"Watch"),(0,o.kt)("p",null,"This will watch specified inputs and return their values. It is useful for determining what to render."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    alert(`FormData:  ${JSON.stringify(data)}`);\n  };\n\n  // Watch one field\n  const WatchField = form.watch(\'firstName\');\n\n  // Target specific fields by their names\n  const WatchFields = form.watch([\'firstName\', \'lastName\']);\n\n  // Watch everything by passing no arguments\n  const WatchAllFields = form.watch();\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <TextInput\n          label="First Name"\n          model="firstName"\n          validators={{ required: true }}\n        />\n        <TextInput\n          label="Last Name"\n          model="lastName"\n          validators={{ required: true }}\n        />\n        <Layout.Space />\n        <Button type="submit">Submit</Button>\n      </FormProvider>\n      <div>\n        <p>Watch One Field: {JSON.stringify(WatchField)}</p>\n        <p>Watch Multiple Fields: {JSON.stringify(WatchFields)}</p>\n        <p>Watch All Fields: {JSON.stringify(WatchAllFields)}</p>\n      </div>\n    </React.Fragment>\n  );\n};\n')),(0,o.kt)("h2",{id:"handle-submit"},"Handle Submit"),(0,o.kt)("p",null,"This function will receive the form data if form validation is successful."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      firstName: \'John\',\n      lastName: \'Doe\',\n    },\n  });\n\n  const onSubmit = (data, e) => alert(\'onSubmit\');\n  const onError = (errors, e) => alert(\'onError\');\n\n  return (\n    <FormProvider state={form} onSubmit={form.handleSubmit(onSubmit, onError)}>\n      <TextInput\n        label="First Name"\n        model="firstName"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="Last Name"\n        model="lastName"\n        validators={{ required: true }}\n      />\n      <Layout.Space />\n      <Button type="submit">Submit</Button>\n    </FormProvider>\n  );\n};\n')),(0,o.kt)("h2",{id:"validate-model"},"Validate Model"),(0,o.kt)("p",null,"This function will receive the model data if form validation is successful."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      firstName: \'John\',\n    },\n  });\n\n  const handleValidateFirst = () => {\n    form.validate(\n      \'firstName\',\n      (data) => {\n        alert(`FormData:  ${JSON.stringify(data)}`);\n      },\n      (error) => {\n        delete error.ref;\n        alert(`Error:  ${JSON.stringify(error)}`);\n      }\n    );\n  };\n\n  const handleValidateLast = () => {\n    form.validate(\n      \'lastName\',\n      (data) => {\n        alert(`FormData:  ${JSON.stringify(data)}`);\n      },\n      (error) => {\n        delete error.ref;\n        alert(`Error:  ${JSON.stringify(error)}`);\n      }\n    );\n  };\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="First Name"\n        model="firstName"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="Last Name"\n        model="lastName"\n        validators={{ required: true }}\n      />\n      <Layout.Space />\n      <Layout.Group>\n        <Button type="button" onClick={handleValidateFirst}>\n          Validate First Name\n        </Button>\n        <Button type="button" onClick={handleValidateLast}>\n          Validate Last Name\n        </Button>\n      </Layout.Group>\n    </FormProvider>\n  );\n};\n')),(0,o.kt)("h2",{id:"reset"},"Reset"),(0,o.kt)("p",null,"Reset either the entire form state or part of the form state."),(0,o.kt)("p",null,"When invoking reset({ value }) without supplying defaultValues via useForm, the library will replace defaultValues with a shallow clone value object which you provide (not deepClone)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// \u274c avoid the following with deep nested default values\nconst defaultValues = { object: { deepNest: { file: new File() } } };\nuseForm({ defaultValues });\nreset(defaultValues); // share the same reference\n\n// \u2705 it's safer with the following, as we only doing shallow clone with defaultValues\nuseForm({ deepNest: { file: new File() } });\nreset({ deepNest: { file: new File() } });\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      firstName: \'John\',\n      lastName: \'Doe\',\n    },\n  });\n\n  const reset = () => {\n    form.reset();\n  };\n\n  const resetWithValue = () => {\n    form.reset({ firstName: \'John\' });\n  };\n\n  const resetWithOptions = () => {\n    form.reset(\n      {\n        lastName: \'Doe\',\n      },\n      {\n        keepErrors: true,\n        keepDirty: true,\n        keepIsSubmitted: false,\n        keepTouched: false,\n        keepIsValid: false,\n        keepSubmitCount: false,\n      }\n    );\n  };\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="First Name"\n        model="firstName"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="Last Name"\n        model="lastName"\n        validators={{ required: true }}\n      />\n      <Layout.Space />\n      <Layout.Group>\n        <Button type="button" onClick={reset}>\n          Reset\n        </Button>\n        <Button type="button" onClick={resetWithValue}>\n          Reset With Value\n        </Button>\n        <Button type="button" onClick={resetWithOptions}>\n          Reset With Options\n        </Button>\n      </Layout.Group>\n    </FormProvider>\n  );\n};\n')),(0,o.kt)("h2",{id:"set-error"},"Set Error"),(0,o.kt)("p",null,"The function allows you to manually set one or more errors."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      firstName: 'John',\n      lastName: 'Doe',\n    },\n  });\n\n  // Set single error\n  const setSingleError = () => {\n    form.setError('firstName', {\n      type: 'manual',\n      message: 'There is an error with your name!',\n    });\n  };\n\n  // Set multiple errors\n  const setMultipleErrors = () => {\n    [\n      {\n        type: 'manual',\n        name: 'firstName',\n        message: 'Check first name',\n      },\n      {\n        type: 'manual',\n        name: 'lastName',\n        message: 'Check last name',\n      },\n    ].forEach(({ name, type, message }) => {\n      form.setError(name, { type, message });\n    });\n  };\n\n  // Set error for single field errors\n  React.useEffect(() => {\n    form.setError('firstName', {\n      types: {\n        required: 'This is required',\n        minLength: 'This is minLength',\n      },\n    });\n  }, []);\n\n  return (\n    <FormProvider state={form}>\n      <TextInput label=\"First Name\" model=\"firstName\" />\n      <TextInput label=\"Last Name\" model=\"lastName\" />\n      <Layout.Space />\n      <Layout.Group>\n        <Button type=\"button\" onClick={() => setSingleError()}>\n          Set Single Error\n        </Button>\n        <Button type=\"button\" onClick={() => setMultipleErrors()}>\n          Set Multiple Errors\n        </Button>\n      </Layout.Group>\n    </FormProvider>\n  );\n};\n")),(0,o.kt)("h2",{id:"clear-errors"},"Clear Errors"),(0,o.kt)("p",null,"This function can manually clear errors in the form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      firstName: 'John',\n      lastName: 'Doe',\n      phone: '555-555-5555',\n    },\n  });\n\n  const resetErrors = () => {\n    [\n      {\n        type: 'manual',\n        name: 'firstName',\n        message: 'Required',\n      },\n      {\n        type: 'manual',\n        name: 'lastName',\n        message: 'Required',\n      },\n      {\n        type: 'manual',\n        name: 'phone',\n        message: 'Required',\n      },\n    ].forEach(({ name, type, message }) => {\n      form.setError(name, { type, message });\n    });\n  };\n\n  // Clear single error\n  const clearSingleErrors = () => {\n    form.clearErrors('firstName');\n  };\n\n  // Clear multiple errors\n  const clearMultipleErrors = () => {\n    form.clearErrors(['firstName', 'lastName']);\n  };\n\n  // Clear all errors\n  const clearAllErrors = () => {\n    form.clearErrors();\n  };\n\n  return (\n    <FormProvider state={form}>\n      <TextInput label=\"First Name\" model=\"firstName\" />\n      <TextInput label=\"Last Name\" model=\"lastName\" />\n      <TextInput label=\"Phone\" model=\"phone\" mask=\"phone\" />\n      <Layout.Space />\n      <Layout.Group>\n        <Button type=\"button\" variant=\"outline\" onClick={() => resetErrors()}>\n          Set Errors\n        </Button>\n        <Button type=\"button\" onClick={() => clearSingleErrors()}>\n          Clear Single Error\n        </Button>\n        <Button type=\"button\" onClick={() => clearMultipleErrors()}>\n          Clear Multiple Error\n        </Button>\n        <Button type=\"button\" onClick={() => clearAllErrors()}>\n          Clear All Errors\n        </Button>\n      </Layout.Group>\n    </FormProvider>\n  );\n};\n")),(0,o.kt)("h2",{id:"set-value"},"Set Value"),(0,o.kt)("p",null,"This function allows you to dynamically set the value of a registered field. At the same time, it tries to avoid unnecessary re-rerenders."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const setSingleValue = () => {\n    form.setValue(\'firstName\', \'Bob\');\n  };\n\n  const setValueWithOptions = () => {\n    form.setValue(\'lastName\', \'Luo\', {\n      shouldValidate: true,\n      shouldDirty: true,\n    });\n  };\n\n  return (\n    <FormProvider state={form}>\n      <TextInput label="First Name" model="firstName" />\n      <TextInput label="Last Name" model="lastName" />\n      <Layout.Space />\n      <Layout.Group>\n        <Button type="button" onClick={() => setSingleValue()}>\n          Set Value\n        </Button>\n        <Button type="button" onClick={() => setValueWithOptions()}>\n          Set Value With Options\n        </Button>\n      </Layout.Group>\n    </FormProvider>\n  );\n};\n')),(0,o.kt)("h2",{id:"set-focus"},"Set Focus"),(0,o.kt)("p",null,"This method will allow users to programmatically focus on input. Make sure input's ref is registered into the hook form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const setFocus = () => {\n    form.setFocus(\'firstName\');\n  };\n\n  return (\n    <FormProvider state={form}>\n      <TextInput label="First Name" model="firstName" />\n      <TextInput label="Last Name" model="lastName" />\n      <Layout.Space />\n      <Button type="button" onClick={() => setFocus()}>\n        Set Focus\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,o.kt)("h2",{id:"get-values"},"Get Values"),(0,o.kt)("p",null,"An optimized helper for reading form values. The difference between watch and getValues is that getValues will not trigger re-renders or subscribe to input changes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      firstName: \'John\',\n      lastName: \'Doe\',\n      phone: \'555-555-5555\',\n    },\n  });\n\n  // Read an individual field value by name\n  const singleValue = form.getValues(\'firstName\');\n\n  // Read multiple fields by name\n  const multipleValues = form.getValues([\'firstName\', \'lastName\']);\n\n  // Reads all form values\n  const allValues = form.getValues();\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form}>\n        <TextInput label="First Name" model="firstName" />\n        <TextInput label="Last Name" model="lastName" />\n        <TextInput label="Phone" model="phone" mask="phone" />\n      </FormProvider>\n      <Layout.Space />\n      <p>Single Value: {JSON.stringify(singleValue)}</p>\n      <p>Multiple Values: {JSON.stringify(multipleValues)}</p>\n      <p>All Values: {JSON.stringify(allValues)}</p>\n    </React.Fragment>\n  );\n};\n')),(0,o.kt)("h2",{id:"trigger"},"Trigger"),(0,o.kt)("p",null,"Manually triggers form or input validation. This method is also useful when you have dependant validation (input validation depends on another input's value)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  // Trigger one input to validate\n  const triggerSingle = () => {\n    form.trigger(\'firstName\');\n  };\n\n  // Trigger multiple inputs to validate\n  const triggerMultiple = () => {\n    form.trigger([\'firstName\', \'lastName\']);\n  };\n\n  // Trigger entire form to validate\n  const triggerAll = () => {\n    form.trigger();\n  };\n\n  const clearErrors = () => {\n    form.clearErrors();\n  };\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="First Name"\n        model="firstName"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="Last Name"\n        model="lastName"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="Phone"\n        model="phone"\n        mask="phone"\n        validators={{ required: true }}\n      />\n      <Layout.Space />\n      <Layout.Group>\n        <Button type="button" onClick={() => triggerSingle()}>\n          Trigger Single\n        </Button>\n        <Button type="button" onClick={() => triggerMultiple()}>\n          Trigger Multiple\n        </Button>\n        <Button type="button" onClick={() => triggerAll()}>\n          Trigger All\n        </Button>\n        <Button type="button" variant="outline" onClick={() => clearErrors()}>\n          Clear Errors\n        </Button>\n      </Layout.Group>\n    </FormProvider>\n  );\n};\n')),(0,o.kt)("h2",{id:"cross-field-validation-example"},"Cross-Field Validation Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <TextInput\n        label="First Name"\n        model="firstName"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="Middle Name"\n        model="middleName"\n        validators={{\n          validate: (v) => {\n            const checkValue = form.getValues(\'lastName-check\');\n            if (!checkValue && !v) {\n              return \'Required\';\n            }\n          },\n        }}\n      />\n      <Checkbox\n        label="No Middle Name"\n        model="lastName-check"\n        onChange={() => {\n          form.trigger(\'middleName\');\n        }}\n      />\n      <TextInput\n        label="Last Name"\n        model="lastName"\n        validators={{ required: true }}\n      />\n      <Layout.Space />\n      <Button type="submit">Submit</Button>\n    </FormProvider>\n  );\n};\n')),(0,o.kt)("h2",{id:"form-input-autofill"},"Form Input Autofill"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const inputs = [\n    {\n      label: 'Title',\n      autoComplete: 'honorific-prefix',\n    },\n    {\n      label: 'First Name',\n      autoComplete: 'given-name',\n    },\n    {\n      label: 'Middle Name',\n      autoComplete: 'additional-name',\n    },\n    {\n      label: 'Last Name',\n      autoComplete: 'family-name',\n    },\n    {\n      label: 'Nickname',\n      autoComplete: 'nickname',\n    },\n    {\n      label: 'Email',\n      autoComplete: 'email',\n    },\n    {\n      label: 'Username',\n      autoComplete: 'username',\n    },\n    {\n      label: 'Current Password',\n      autoComplete: 'current-password',\n    },\n    {\n      label: 'New Password',\n      autoComplete: 'new-password',\n    },\n    {\n      label: 'One Time Code',\n      autoComplete: 'one-time-code',\n    },\n    {\n      label: 'Organization Title',\n      autoComplete: 'organization-title',\n    },\n    {\n      label: 'Organization',\n      autoComplete: 'organization',\n    },\n    {\n      label: 'Address',\n      autoComplete: 'street-address',\n    },\n    {\n      label: 'Address Line 1',\n      autoComplete: 'address-line1',\n    },\n    {\n      label: 'Address Line 2',\n      autoComplete: 'address-line2',\n    },\n    {\n      label: 'Country',\n      autoComplete: 'country',\n    },\n    {\n      label: 'Country Name',\n      autoComplete: 'country-name',\n    },\n    {\n      label: 'Postal Code',\n      autoComplete: 'postal-code',\n    },\n    {\n      label: 'Name on Credit Card',\n      autoComplete: 'cc-name',\n    },\n    {\n      label: 'First Name on Credit Card',\n      autoComplete: 'cc-given-name',\n    },\n    {\n      label: 'Middle Name on Credit Card',\n      autoComplete: 'cc-additional-name',\n    },\n    {\n      label: 'Last Name on Credit Card',\n      autoComplete: 'cc-family-name',\n    },\n    {\n      label: 'Credit Card Number',\n      autoComplete: 'cc-number',\n    },\n    {\n      label: 'Credit Card Expiration Date',\n      autoComplete: 'cc-exp',\n    },\n    {\n      label: 'Credit Card Expiration Month',\n      autoComplete: 'cc-exp-month',\n    },\n    {\n      label: 'Credit Card Expiration Year',\n      autoComplete: 'cc-exp-year',\n    },\n    {\n      label: 'Credit Card CSC Code',\n      autoComplete: 'cc-csc',\n    },\n    {\n      label: 'Credit Card Type',\n      autoComplete: 'cc-type',\n    },\n    {\n      label: 'Transation Currency',\n      autoComplete: 'transaction-currency',\n    },\n    {\n      label: 'Transation Amount',\n      autoComplete: 'transaction-amount',\n    },\n    {\n      label: 'Birth Date',\n      autoComplete: 'bday',\n    },\n    {\n      label: 'Birth Day',\n      autoComplete: 'bday-day',\n    },\n    {\n      label: 'Birth Month',\n      autoComplete: 'bday-month',\n    },\n    {\n      label: 'Birth Year',\n      autoComplete: 'bday-year',\n    },\n    {\n      label: 'Gender',\n      autoComplete: 'sex',\n    },\n    {\n      label: 'Phone Number',\n      autoComplete: 'tel',\n    },\n  ];\n\n  const handleSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider\n      state={form}\n      onSubmit={handleSubmit}\n      autoComplete=\"on\"\n      style={{ display: 'flex', flexWrap: 'wrap' }}\n    >\n      {inputs.map((item) => {\n        return (\n          <div key={item.autoComplete} style={{ width: '33%' }}>\n            <TextInput\n              key={item.autoComplete}\n              label={item.label}\n              model={item.autoComplete}\n              autoComplete={item.autoComplete}\n              subText={item.autoComplete}\n              width=\"98%\"\n            />\n          </div>\n        );\n      })}\n      <Layout.Space />\n      <Button type=\"submit\">Submit</Button>\n    </FormProvider>\n  );\n};\n")),(0,o.kt)("h2",{id:"autofill-off"},"Autofill Off"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const handleSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={handleSubmit} autoComplete="off">\n      <TextInput label="First Name" model="name.firstname" autoComplete="off" />\n      <Layout.Space />\n      <Button type="submit">Submit</Button>\n    </FormProvider>\n  );\n};\n')))}p.isMDXComponent=!0}}]);