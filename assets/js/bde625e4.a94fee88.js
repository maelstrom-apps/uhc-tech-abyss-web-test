"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[3166],{88363:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>c,default:()=>k,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var o=t(7896),r=t(31461),a=(t(2784),t(3905)),s=["components"],i={id:"checkbox",category:"Forms",title:"Checkbox",description:"Used to mark an option as true/checked or false/not checked.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=506%3A11843",pagination_prev:"web/ui/progress-bar",pagination_next:"web/ui/checkbox-group"},c=void 0,l={unversionedId:"web/ui/checkbox",id:"web/ui/checkbox",isDocsHomePage:!1,title:"Checkbox",description:"Used to mark an option as true/checked or false/not checked.",source:"@site/docs/web/ui/Checkbox.md",sourceDirName:"web/ui",slug:"/web/ui/checkbox",permalink:"/web/ui/checkbox",tags:[],version:"current",frontMatter:{id:"checkbox",category:"Forms",title:"Checkbox",description:"Used to mark an option as true/checked or false/not checked.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=506%3A11843",pagination_prev:"web/ui/progress-bar",pagination_next:"web/ui/checkbox-group"},sidebar:"docs",previous:{title:"ProgressBar",permalink:"/web/ui/progress-bar"},next:{title:"CheckboxGroup",permalink:"/web/ui/checkbox-group"}},d=[{value:"States",id:"states",children:[],level:2},{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2}],p=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)}},h=p("Tab"),b=p("ExitLink"),u={toc:d};function k(e){var n=e.components,t=(0,r.Z)(e,s);return(0,a.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(h,{label:"Overview",mdxType:"Tab"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Checkbox } from '@abyss/web/ui/Checkbox';\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Checkbox',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'string',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'isIndeterminate',\n      type: 'boolean',\n    },\n  ]\n}\n\n() => {\n  const [isChecked, setChecked] = useState(true);\n\n  return (\n    <Checkbox\n      label=\"I agree\"\n      isChecked={isChecked}\n      onChange={e => setChecked(e.target.checked)}\n    />\n  );\n};\n")),(0,a.kt)("h2",{id:"states"},"States"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("b",null,"Default")," - The default checkbox is unchecked."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("b",null,"isChecked")," - Use the `isChecked` prop to mark a checkbox as checked."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("b",null,"Indeterminate")," - Use the `indeterminate` prop to set the checkbox as indeterminate, which overrides the `checked` prop."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("b",null,"Disabled")," - Use the `isDisabled` prop to disable a checkbox. A disabled checkbox is unusable and un-clickable."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("b",null,"Subtext")," - Use the `subText` prop to insert helpful text below the checkbox."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("b",null,"Error Message")," - Use the `errorMessage` prop to display a custom error message below the checkbox."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("b",null,"Hidden Label")," - Use the `hideLabel` prop to hide the label but retain screen reader accessibility.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      indeterminate: true,\n      \'indeterminate-disabled\': true,\n      disabledchecked: true,\n    },\n  });\n  const [isChecked, setChecked] = useState(true);\n\n  return (\n    <FormProvider state={form}>\n      <Checkbox label="Default Checkbox" />\n      <Checkbox label="Checked Checkbox" isChecked={isChecked} />\n      <Checkbox\n        label="Indeterminate Checkbox"\n        model="indeterminate"\n        isIndeterminate\n      />\n      <Checkbox label="Disabled Checkbox" model="disabled" isDisabled />\n      <Checkbox\n        label="Disabled Checked Checkbox"\n        model="disabledchecked"\n        isChecked\n        isDisabled\n      />\n      <Checkbox\n        label="Disabled Indeterminate Checkbox"\n        model="indeterminate-disabled"\n        isIndeterminate\n        isDisabled\n      />\n      <Checkbox label="Checkbox with Subtext" subText="Subtext Message" />\n      <Checkbox label="Checkbox with Error" errorMessage="Error Message" />\n      <Checkbox\n        label="Hidden Label"\n        subText="Hidden Label (and subtext)"\n        hideLabel\n      />\n    </FormProvider>\n  );\n};\n')),(0,a.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <Checkbox\n        label="Form Checkbox"\n        model="form-checkbox"\n        validators={{ required: true }}\n      />\n      <Button type="submit" size="$sm" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,a.kt)("h2",{id:"usestate"},"useState"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isChecked, setChecked] = useState(true);\n\n  return (\n    <Checkbox\n      label="State Checkbox"\n      isChecked={isChecked}\n      onChange={(e) => setChecked(e.target.checked)}\n    />\n  );\n};\n')),(0,a.kt)("h2",{id:"size"},"Size"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"size")," prop to set the height/width of the checkbox, default is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"md"),". Can use predefined sizes or custom number to set size."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <Checkbox label="xs checkbox" size="xs" model="size-xs" />\n      <Checkbox label="sm checkbox" size="sm" model="size-sm" />\n      <Checkbox label="md checkbox" model="size-md" />\n      <Checkbox label="lg checkbox" size="lg" model="size-lg" />\n      <Checkbox label="xl checkbox" size="xl" model="size-xl" />\n    </FormProvider>\n  );\n};\n')),(0,a.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,a.kt)("p",null,"Use the ",(0,a.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isChecked, setChecked] = React.useState(false);\n\n  return (\n    <Checkbox\n      isChecked={isChecked}\n      onChange={(e) => setChecked(e.target.checked)}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    />\n  );\n};\n'))),(0,a.kt)(h,{label:"Integration",mdxType:"Tab"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Checkbox}\n  rows={[\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired everytime the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    {\n      name: 'isChecked',\n      type: 'boolean',\n      description: 'Flag to turn checkbox on or off',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Label of the checkbox',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'validators',\n      type: 'object',\n      description: 'Rules for checkbox validation',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Height and width of the checkbox',\n    },\n    {\n      name: 'sizes',\n      type: 'object',\n      description: 'Set size options of the checkbox',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the checkbox. If true, the checkbox will be disabled',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the checkbox component',\n    },\n    {\n      name: 'isIndeterminate',\n      type: 'boolean',\n      description: 'Set the checkbox to indeterminate or not',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Set the subtext displayed below the checkbox',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Set the error message displayed below the checkbox',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the checkbox',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description: 'Value of checkbox',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Checkbox}\n  rows={[\n    {\n      name: 'checkbox-root',\n      description: 'Checkbox root element',\n    },\n    {\n      name: 'checkbox',\n      description: 'Checkbox input element',\n    },\n    {\n      name: 'checkbox-icon',\n      description: 'Icon element',\n    },\n    {\n      name: 'checkbox-label',\n      description: 'Label element',\n    },\n  ]}\n/>\n"))),(0,a.kt)(h,{label:"Accessibility",mdxType:"Tab"},"WAI-ARIA supports two types of checkbox widgets:",(0,a.kt)("p",null,"Dual-state: The most common type of checkbox, it allows the user to toggle between two choices -- checked and not checked.\nTri-state: This type of checkbox supports an additional third state known as partially checked.\nOne common use of a tri-state checkbox can be found in software installers where a single tri-state checkbox is used to represent and control the state of an entire group of install options. And, each option in the group can be individually turned on or off with a dual state checkbox."),(0,a.kt)("p",null,"If all options in the group are checked, the overall state is represented by the tri-state checkbox displaying as checked.\nIf some of the options in the group are checked, the overall state is represented with the tri-state checkbox displaying as partially checked.\nIf none of the options in the group are checked, the overall state of the group is represented with the tri-state checkbox displaying as not checked.\nThe user can use the tri-state checkbox to change all options in the group with a single action:"),(0,a.kt)("p",null,"Checking the overall checkbox checks all options in the group.\nUnchecking the overall checkbox will uncheck all options in the group.\nAnd, In some implementations, the system may remember which options were checked the last time the overall status was partially checked. If this feature is provided, activating the overall checkbox a third time recreates that partially checked state where only some options in the group are checked."),(0,a.kt)("p",null,"Adheres to the ",(0,a.kt)(b,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#checkbox",mdxType:"ExitLink"},"Checkbox WAI-ARIA design pattern"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Checkbox',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'string',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'isIndeterminate',\n      type: 'boolean',\n    },\n  ]\n}\n\n() => {\n  const [isChecked, setChecked] = useState(true);\n\n  return (\n    <Checkbox\n      label=\"I agree\"\n      checked={isChecked}\n      onChange={e => setChecked(e.target.checked)}\n    />\n  );\n};\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Space',\n      description:\n        'When the checkbox has focus, pressing the Space key changes the state of the checkbox.',\n    },\n  ]}\n/>\n"))))}k.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>b});var o=t(2784);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),h=l(t),b=r,u=h["".concat(c,".").concat(b)]||h[b]||p[b]||a;return t?o.createElement(u,s(s({ref:n},d),{},{components:t})):o.createElement(u,s({ref:n},d))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=h;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"}}]);