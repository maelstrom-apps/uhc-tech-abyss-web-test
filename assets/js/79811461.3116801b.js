"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[9080],{13149:(e,n,o)=>{o.r(n),o.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>u});var a=o(7896),t=o(31461),r=(o(2784),o(3905)),i=["components"],l={id:"radio-group",category:"Forms",title:"RadioGroup",description:"Provides a set of checkable buttons, known as radio buttons, where no more than one of the buttons can be checked at a time.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11899",pagination_prev:"web/ui/number-input",pagination_next:"web/ui/search-input"},s=void 0,d={unversionedId:"web/ui/radio-group",id:"web/ui/radio-group",isDocsHomePage:!1,title:"RadioGroup",description:"Provides a set of checkable buttons, known as radio buttons, where no more than one of the buttons can be checked at a time.",source:"@site/docs/web/ui/RadioGroup.md",sourceDirName:"web/ui",slug:"/web/ui/radio-group",permalink:"/web/ui/radio-group",tags:[],version:"current",frontMatter:{id:"radio-group",category:"Forms",title:"RadioGroup",description:"Provides a set of checkable buttons, known as radio buttons, where no more than one of the buttons can be checked at a time.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11899",pagination_prev:"web/ui/number-input",pagination_next:"web/ui/search-input"},sidebar:"docs",previous:{title:"NumberInput",permalink:"/web/ui/number-input"},next:{title:"SearchInput",permalink:"/web/ui/search-input"}},u=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Label and Subtext",id:"label-and-subtext",children:[],level:2},{value:"Error Message",id:"error-message",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Display",id:"display",children:[],level:2}],p=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)}},c=p("Tab"),m=p("ExitLink"),b={toc:u};function h(e){var n=e.components,o=(0,t.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},b,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(c,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { RadioGroup } from '@abyss/web/ui/RadioGroup';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'RadioGroup',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'string',\n    },\n    {\n      prop: 'errorMessage',\n      type: 'string',\n    },\n    {\n      prop: 'subText',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'string',\n    },\n    {\n      prop: 'display',\n      type: 'select',\n      options: [\n        { label: 'column', value: 'column' },\n        { label: 'row', value: 'row' },\n      ],\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n  ]\n}\n\n() => {\n  const [radioValue, setRadioValue] = useState('one');\n\n  console.log('radioValue', radioValue);\n\n  return (\n    <RadioGroup\n      label=\"Radio Sandbox\"\n      onChange={(e) => setRadioValue(e.target.value)}\n      value={radioValue}\n      subText=\"This is subtext\"\n    >\n      <RadioGroup.Radio label=\"One\" value=\"one\" />\n      <RadioGroup.Radio label=\"Two\" value=\"two\" />\n      <RadioGroup.Radio label=\"Three\" value=\"three\" />\n      <RadioGroup.Radio label=\"Four\" value=\"four\" />\n    </RadioGroup>\n  );\n};\n")),(0,r.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      \'radio-form\': \'two\',\n    },\n  });\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <RadioGroup\n        label="RadioGroup useForm"\n        model="radio-form"\n        validators={{ required: true }}\n      >\n        <RadioGroup.Radio label="One" value="one" />\n        <RadioGroup.Radio label="Two" value="two" />\n        <RadioGroup.Radio label="Three" value="three" />\n        <RadioGroup.Radio label="Four" value="four" />\n      </RadioGroup>\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [radioValue, setRadioValue] = useState(\'one\');\n\n  console.log(\'radioValue\', radioValue);\n\n  return (\n    <RadioGroup\n      label="Radio useState"\n      onChange={(e) => setRadioValue(e.target.value)}\n      value={radioValue}\n    >\n      <RadioGroup.Radio label="One" value="one" />\n      <RadioGroup.Radio label="Two" value="two" />\n      <RadioGroup.Radio label="Three" value="three" />\n      <RadioGroup.Radio label="Four" value="four" />\n    </RadioGroup>\n  );\n};\n')),(0,r.kt)("h2",{id:"label-and-subtext"},"Label and Subtext"),(0,r.kt)("p",null,"Label is required, but subtext is not. Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," prop to change the displayed label for the group. Pass ",(0,r.kt)("inlineCode",{parentName:"p"},"hideLabel")," to visibly hide label but retain accessibility. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the radio group."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <RadioGroup\n        label="Label and Subtext"\n        subText="Subtext"\n        model="label-visible"\n      >\n        <RadioGroup.Radio label="One" value="one" />\n        <RadioGroup.Radio label="Two" value="two" />\n      </RadioGroup>\n      <RadioGroup label="Label only" model="label-visible">\n        <RadioGroup.Radio label="One" value="one" />\n        <RadioGroup.Radio label="Two" value="two" />\n      </RadioGroup>\n      <RadioGroup\n        label="Hidden Label"\n        hideLabel\n        subText="Subtext only"\n        model="label-hidden"\n      >\n        <RadioGroup.Radio label="One" value="one" />\n        <RadioGroup.Radio label="Two" value="two" />\n      </RadioGroup>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"error-message"},"Error Message"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to display a custom error message below the radio group."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [radioValue, setRadioValue] = useState(\'\');\n\n  return (\n    <RadioGroup\n      label="Error Message"\n      value={radioValue}\n      onChange={(e) => setRadioValue(e.target.value)}\n      errorMessage="Error Message"\n    >\n      <RadioGroup.Radio label="One" value="one" />\n      <RadioGroup.Radio label="Two" value="two" />\n      <RadioGroup.Radio label="Three" value="three" />\n    </RadioGroup>\n  );\n};\n')),(0,r.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [radioValue, setRadioValue] = useState(\'\');\n\n  return (\n    <RadioGroup\n      value={radioValue}\n      onChange={(e) => setRadioValue(e.target.value)}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    >\n      <RadioGroup.Radio label="One" value="one" />\n      <RadioGroup.Radio label="Two" value="two" />\n      <RadioGroup.Radio label="Three" value="three" />\n    </RadioGroup>\n  );\n};\n')),(0,r.kt)("h2",{id:"disabled"},"Disabled"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to disable all radios in the group. Individual radios can be disabled by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"isDisabled")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," in their respective ",(0,r.kt)("inlineCode",{parentName:"p"},"RadioGroup.Radio")," instead of the outer component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({});\n\n  return (\n    <FormProvider state={form}>\n      <RadioGroup isDisabled label="All Radios Disabled" model="disabled">\n        <RadioGroup.Radio value="dogs" label="Disabled 1" />\n        <RadioGroup.Radio value="cats" label="Disabled 2" />\n        <RadioGroup.Radio value="cats1" label="Disabled 3" />\n        <RadioGroup.Radio value="cats2" label="Disabled 4" />\n      </RadioGroup>\n\n      <RadioGroup label="Individual Radios Disabled" model="disabled2">\n        <RadioGroup.Radio value="dogs" label="Disabled 1" isDisabled />\n        <RadioGroup.Radio value="cats" label="Enabled 1" />\n        <RadioGroup.Radio value="cats1" label="Disabled 2" isDisabled />\n        <RadioGroup.Radio value="cats2" label="Enabled 2" />\n      </RadioGroup>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"display"},"Display"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"display")," prop to set the direction a group of radio buttons appear. The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"'column'"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <RadioGroup label="RadioGroup Column" model="column">\n        <RadioGroup.Radio label="Column A" value="A" />\n        <RadioGroup.Radio label="Column B" value="B" />\n      </RadioGroup>\n      <RadioGroup display="row" label="RadioGroup Row" model="row">\n        <RadioGroup.Radio label="Row A" value="A" />\n        <RadioGroup.Radio label="Row B" value="B" />\n      </RadioGroup>\n    </FormProvider>\n  );\n};\n'))),(0,r.kt)(c,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={RadioGroup}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the radio group component',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Set the label of the radio group',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description: 'Value that is selected',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Set the error message',\n    },\n    {\n      name: 'validators',\n      type: 'shape',\n      description: 'Rules for radio validation',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the radio group',\n    },\n    {\n      name: 'display',\n      type: 'string',\n      description: 'Set the direction a group of radio buttons are displayed',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to set if a radio group is disabled',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired every time the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Set the subtext of radio group',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the radio group',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={RadioGroup.Radio}\n  rows={[\n    {\n      name: 'checked',\n      type: 'boolean',\n      description: 'Flag to see if radio is checked',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element the radio wraps',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to see if radio is disabled',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Set the label of radio',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of radio',\n    },\n    {\n      name: 'sizes',\n      type: 'object',\n      description: 'Dictionary of size keys and their corresponding size value',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description: 'Value of the radio',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={RadioGroup}\n  rows={[\n    {\n      name: 'radio-group-root',\n      description: 'Radio Group root element',\n    },\n    {\n      name: 'radio-group-label',\n      description: 'Radio Group label',\n    },\n    {\n      name: 'radio-group-container',\n      description: 'Radio Group container',\n    },\n    {\n      name: 'radio-group-descriptors',\n      description: 'Radio Group descriptors',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={RadioGroup.Radio}\n  rows={[\n    {\n      name: 'radio-label',\n      description: 'Label',\n    },\n    {\n      name: 'radio-button',\n      description: 'Button',\n    },\n  ]}\n/>\n"))),(0,r.kt)(c,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("p",null,"A radio group is a set of checkable buttons, known as radio buttons, where no more than one of the buttons can be checked at a time. Some implementations may initialize the set with all buttons in the unchecked state in order to force the user to check one of the buttons before moving past a certain point in the workflow."),(0,r.kt)("p",null,"Adheres to the ",(0,r.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#radiobutton",mdxType:"ExitLink"},"Radio Group WAI-ARIA design pattern"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [radioValue, setRadioValue] = useState(\'one\');\n\n  return (\n    <RadioGroup\n      label="Accessibility Practice"\n      onChange={(e) => setRadioValue(e.target.value)}\n      value={radioValue}\n      subText="Utilize the Keyboard Interaction table below to test the components accessibility."\n    >\n      <RadioGroup.Radio label="One" value="one" />\n      <RadioGroup.Radio label="Two" value="two" />\n      <RadioGroup.Radio label="Three" value="three" />\n      <RadioGroup.Radio label="Four" value="four" />\n    </RadioGroup>\n  );\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to either the checked radio item or the first radio item in the group.',\n    },\n    {\n      name: 'Space',\n      description: 'When focus is on an unchecked radio item, checks it.',\n    },\n    {\n      name: 'Enter',\n      description: 'When focus is on an unchecked radio item, checks it.',\n    },\n    {\n      name: 'Arrow Down',\n      description: 'Moves focus to the next radio item in the group.',\n    },\n    {\n      name: 'Arrow Right',\n      description: 'Moves focus to the next radio item in the group.',\n    },\n    {\n      name: 'Arrow Up',\n      description: 'Moves focus to the previous radio item in the group.',\n    },\n    {\n      name: 'Arrow Left',\n      description: 'Moves focus to the previous radio item in the group.',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},3905:(e,n,o)=>{o.d(n,{Zo:()=>u,kt:()=>m});var a=o(2784);function t(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function r(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,a)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?r(Object(o),!0).forEach((function(n){t(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function l(e,n){if(null==e)return{};var o,a,t=function(e,n){if(null==e)return{};var o,a,t={},r=Object.keys(e);for(a=0;a<r.length;a++)o=r[a],n.indexOf(o)>=0||(t[o]=e[o]);return t}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)o=r[a],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var s=a.createContext({}),d=function(e){var n=a.useContext(s),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},u=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var o=e.components,t=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(o),m=t,b=c["".concat(s,".").concat(m)]||c[m]||p[m]||r;return o?a.createElement(b,i(i({ref:n},u),{},{components:o})):a.createElement(b,i({ref:n},u))}));function m(e,n){var o=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=o.length,i=new Array(r);i[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:t,i[1]=l;for(var d=2;d<r;d++)i[d]=o[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,o)}c.displayName="MDXCreateElement"}}]);