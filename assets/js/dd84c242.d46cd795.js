"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[1733],{41123:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>b,frontMatter:()=>s,metadata:()=>u,toc:()=>d});var i=t(7896),o=t(31461),a=(t(2784),t(3905)),r=["components"],s={id:"button",category:"Navigation",title:"Button",description:"Used to trigger an action or event, such as submitting a form, opening a dialog, cancelling an action, or performing a delete operation.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1006",pagination_prev:"web/ui/breadcrumbs",pagination_next:"web/ui/link"},l=void 0,u={unversionedId:"web/ui/button",id:"web/ui/button",isDocsHomePage:!1,title:"Button",description:"Used to trigger an action or event, such as submitting a form, opening a dialog, cancelling an action, or performing a delete operation.",source:"@site/docs/web/ui/Button.md",sourceDirName:"web/ui",slug:"/web/ui/button",permalink:"/web/ui/button",tags:[],version:"current",frontMatter:{id:"button",category:"Navigation",title:"Button",description:"Used to trigger an action or event, such as submitting a form, opening a dialog, cancelling an action, or performing a delete operation.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1006",pagination_prev:"web/ui/breadcrumbs",pagination_next:"web/ui/link"},sidebar:"docs",previous:{title:"Breadcrumbs",permalink:"/web/ui/breadcrumbs"},next:{title:"Link",permalink:"/web/ui/link"}},d=[{value:"Size",id:"size",children:[],level:2},{value:"Variant",id:"variant",children:[],level:2},{value:"Inserting Elements",id:"inserting-elements",children:[],level:2},{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Href",id:"href",children:[],level:2},{value:"Disabled Guidance",id:"disabled-guidance",children:[],level:2},{value:"Loading",id:"loading",children:[],level:2}],p=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)}},c=p("Tab"),m=p("ExitLink"),g={toc:d};function b(e){var n=e.components,t=(0,o.Z)(e,r);return(0,a.kt)("wrapper",(0,i.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(c,{label:"Overview",mdxType:"Tab"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Button } from '@abyss/web/ui/Button';\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Button',\n  inputs: [\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'solid', value: 'solid' },\n        { label: 'outline', value: 'outline' },\n        { label: 'ghost', value: 'ghost' },\n      ],\n    },\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean'\n    },\n  ],\n}\n\n<Button>Click Here!</Button>\n")),(0,a.kt)("h2",{id:"size"},"Size"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"size")," prop to change the size of the button. The default is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"16px")," || ",(0,a.kt)("inlineCode",{parentName:"p"},"$md"),". The size prop can take in px, rem, em and the Abyss standardized $sm, $md, and $lg."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Layout.Group>\n    <Button rounded size="$sm">\n      <IconMaterial icon="home" color="$white" />\n    </Button>\n    <Button rounded size="$md">\n      <IconMaterial icon="home" color="$white" />\n    </Button>\n    <Button rounded size="$lg">\n      <IconMaterial icon="home" color="$white" />\n    </Button>\n  </Layout.Group>\n  <Layout.Group>\n    <Button size="$sm">Small</Button>\n    <Button size="$md">Medium</Button>\n    <Button size="$lg">Large</Button>\n  </Layout.Group>\n  <Layout.Group>\n    <Button size="$sm" variant="outline">\n      Small\n    </Button>\n    <Button size="$md" variant="outline">\n      Medium\n    </Button>\n    <Button size="$lg" variant="outline">\n      Large\n    </Button>\n  </Layout.Group>\n</Layout.Stack>\n')),(0,a.kt)("h2",{id:"variant"},"Variant"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"variant")," prop to change the visual style of the Button. You can set the value to ",(0,a.kt)("inlineCode",{parentName:"p"},"solid"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"outline")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"ghost"),".\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"solid")," variant is for the principal call to action on the page.\nPrimary buttons should only appear once per screen (not including the application header, modal dialog, or side panel). The default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"solid"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Button>Primary Button</Button>\n  <Button variant="outline">Secondary Button</Button>\n  <Button variant="ghost" rounded size="$sm">\n    <IconMaterial icon="home" />\n  </Button>\n</Layout.Group>\n')),(0,a.kt)("h2",{id:"inserting-elements"},"Inserting Elements"),(0,a.kt)("p",null,"Insert elements into the Button component using the ",(0,a.kt)("inlineCode",{parentName:"p"},"before")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"after")," props."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isDisabled, setIsDisabled] = useState(true);\n\n  return (\n    <Layout.Stack>\n      <Layout.Group>\n        <Button\n          variant="outline"\n          before={<IconMaterial icon="arrow_back" color="$primary1" />}\n        >\n          Previous\n        </Button>\n        <Button after={<IconMaterial icon="arrow_forward" color="$white" />}>\n          Next\n        </Button>\n      </Layout.Group>\n      <Layout.Group>\n        <Button\n          variant="outline"\n          isDisabled\n          before={\n            <IconMaterial\n              icon="arrow_back"\n              color={isDisabled ? \'$gray5\' : \'$primary1\'}\n            />\n          }\n        >\n          Previous\n        </Button>\n        <Button\n          isDisabled\n          after={\n            <IconMaterial\n              icon="arrow_forward"\n              color={isDisabled ? \'$gray5\' : \'$white\'}\n            />\n          }\n        >\n          Next\n        </Button>\n      </Layout.Group>\n    </Layout.Stack>\n  );\n};\n')),(0,a.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({});\n\n  const onSubmit = (data) => {\n    console.log('Submitted');\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <Button type=\"submit\">Form Submit</Button>\n    </FormProvider>\n  );\n};\n")),(0,a.kt)("h2",{id:"usestate"},"useState"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const onSubmit = () => {\n    console.log('Submitted');\n  };\n\n  return <Button onClick={onSubmit}>State Submit</Button>;\n};\n")),(0,a.kt)("h2",{id:"href"},"Href"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"href")," prop to change have the button link away to another page when it is clicked"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Button href="/web/ui/Button/">Href button </Button>\n')),(0,a.kt)("h2",{id:"disabled-guidance"},"Disabled Guidance"),(0,a.kt)("p",null,"It is recommended that a screen reader is provided a ",(0,a.kt)("i",null,"reason")," for a button being in a disabled state. For example if a form submit button is disabled because all fields must have valid inputs before the user is allowed to submit the form, it can be helpful to convey this information so the user understands why the button is disabled. Target the disabled button state with the prop ",(0,a.kt)("inlineCode",{parentName:"p"},"isDisabled"),", and use the ",(0,a.kt)("inlineCode",{parentName:"p"},"aria-describedby")," attribute and the ",(0,a.kt)("inlineCode",{parentName:"p"},"VisuallyHidden")," component to point to off-screen content that conveys the reason for the disabled state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<React.Fragment>\n  <Button isDisabled aria-describedby="reason-disabled">\n    Submit\n  </Button>\n  <VisuallyHidden id="reason-disabled">\n    The submit button is disabled because form fields have invalid input.\n  </VisuallyHidden>\n</React.Fragment>\n')),(0,a.kt)("h2",{id:"loading"},"Loading"),(0,a.kt)("p",null,"A UI concept which merges the loading spinner indicator into the action that invokes it. Primarily intended for use with forms where it gives users immediate feedback upon pressing submit."),(0,a.kt)("p",null,"To use the Loading Spinner, the ",(0,a.kt)("inlineCode",{parentName:"p"},"ariaLoadingLabel")," prop is required. Be as descriptive as possible when coming up with a description. Common labels are 'Submitting Form', 'Downloading Files', 'Content is loading', etc."),(0,a.kt)("p",null,"When button is passed the ",(0,a.kt)("inlineCode",{parentName:"p"},"ariaLoadingLabel")," prop, it also takes in the ",(0,a.kt)("inlineCode",{parentName:"p"},"isLoading")," attribute to dynamically toggle the Loading Spinner to populate after the text within button."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Button isLoading={true} ariaLoadingLabel="Downloading Files">\n  Submit\n</Button>\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,"With this feature, the accessibility of spinner changes so when being read by a screen reader, the ",(0,a.kt)(m,{href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions",mdxType:"ExitLink"},"live region")," of the button will be read. Visit the ",(0,a.kt)("a",{parentName:"p",href:"/web/ui/loading-spinner"},"Loading Spinner")," documentation to learn more about this accessibility feature."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const toggleLoading = () => {\n    setIsLoading(!isLoading);\n  };\n\n  const onSubmit = () => {\n    console.log('Submit Clicked');\n  };\n\n  return (\n    <Layout.Group>\n      <Button onClick={toggleLoading}>Toggle Loading</Button>\n      <Button\n        isLoading={isLoading}\n        ariaLoadingLabel=\"Downloading Files\"\n        onClick={onSubmit}\n      >\n        Submit\n      </Button>\n    </Layout.Group>\n  );\n};\n"))),(0,a.kt)(c,{label:"Integration",mdxType:"Tab"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Button}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the button component',\n    },\n    {\n      name: 'variant',\n      type: \"'solid' | 'outline' | 'ghost'\",\n      description: 'Change the button style',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to disable the button',\n    },\n    {\n      name: 'before',\n      type: 'ReactNode',\n      description: 'Insert element into button component before children',\n    },\n    {\n      name: 'after',\n      type: 'ReactNode',\n      description: 'Insert element into button component after children',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the button',\n    },\n    {\n      name: 'sizes',\n      type: 'object',\n      description: 'Default size options',\n    },\n    {\n      name: 'orientation',\n      type: \"'horizontal' | 'vertical'\",\n      description: 'Orientation of the ripple effect on click',\n    },\n    {\n      name: 'href',\n      type: 'string',\n      description: 'Link to route to on click',\n    },\n    {\n      name: 'isLoading',\n      type: 'boolean',\n      description:\n        'Flag to disable/enable loading spinner inside button. \"ariaLoadingLabel\" is required to use \"isLoading\"',\n    },\n    {\n      name: 'isAnimated',\n      type: 'boolean',\n      description: 'Flag to disable/enable ripple effect on button click',\n    },\n    {\n      name: 'ariaLoadingLabel',\n      type: 'string',\n      description:\n        'Text to describe what is happening while the loading spinner is active inside the Button component',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Button}\n  rows={[\n    {\n      name: 'button-root',\n      description: 'Button root element',\n    },\n    {\n      name: 'button-link',\n      description: 'Link element',\n    },\n  ]}\n/>\n"))),(0,a.kt)(c,{label:"Accessibility",mdxType:"Tab"},(0,a.kt)("p",null,'A button is a widget that enables users to trigger an action or event, such as submitting a form, opening a dialog, canceling an action, or performing a delete operation. A common convention for informing users that a button launches a dialog is to append "\u2026" (ellipsis) to the button label, e.g., "Save as\u2026".'),(0,a.kt)("p",null,"Adheres to the ",(0,a.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#button",mdxType:"ExitLink"},"Button WAI-ARIA design pattern"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Button',\n  inputs: [\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'solid', value: 'solid' },\n        { label: 'outline', value: 'outline' },\n        { label: 'ghost', value: 'ghost' },\n      ],\n    },\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean'\n    },\n  ],\n}\n\n<Button>Click Here!</Button>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Space',\n      description: 'Activates the button',\n    },\n    {\n      name: 'Enter',\n      description: 'Activates the button',\n    },\n  ]}\n/>\n")),(0,a.kt)("h3",null,"Disabled Accessibility Guidance"),(0,a.kt)("p",null,"It is recommended that a screen reader is provided a ",(0,a.kt)("i",null,"reason")," for a button being in a disabled state. For example if a form submit button is disabled because all fields must have valid inputs before the user is allowed to submit the form, it can be helpful to convey this information so the user understands why the button is disabled. Target the disabled button state with the prop ",(0,a.kt)("inlineCode",{parentName:"p"},"isDisabled"),", and use the ",(0,a.kt)("inlineCode",{parentName:"p"},"aria-describedby")," attribute and the ",(0,a.kt)("inlineCode",{parentName:"p"},"VisuallyHidden")," component to point to off-screen content that conveys the reason for the disabled state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<React.Fragment>\n  <Button isDisabled aria-describedby="reason-disabled">\n    Submit\n  </Button>\n  <VisuallyHidden id="reason-disabled">\n    The submit button is disabled because form fields have invalid input.\n  </VisuallyHidden>\n</React.Fragment>\n')),(0,a.kt)("h3",null,"Loading State Button"),(0,a.kt)("p",null,"For a loading state, button pulls in the Loading Spinner component and renders a status message to convey the action of loading without taking focus."),(0,a.kt)("p",null,"Loading Spinner is programmed through the ",(0,a.kt)("inlineCode",{parentName:"p"},"ariaLoadingLabel")," property, and has been tested using a screen reader to present a status message to assistive technology without receiving focus."),(0,a.kt)("p",null,"Following the requirements of WAI-ARIA, Loading Spinner follows the requirements ",(0,a.kt)(m,{href:"https://www.w3.org/WAI/WCAG21/Understanding/status-messages.html",mdxType:"ExitLink"},"4.1.3: Status Messages"),". Status messages are defined by WCAG as messages that provide information on the success or results of a user action, but do not change the users context (i.e. take focus)."),(0,a.kt)("p",null,"The Toggle Loading button below can be used to toggle the loading state of the Submit button for screen readers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const toggleLoading = () => {\n    setIsLoading(!isLoading);\n  };\n\n  const onSubmit = () => {\n    console.log('Submit Clicked');\n  };\n\n  return (\n    <Layout.Group>\n      <Button onClick={toggleLoading}>Toggle Loading</Button>\n      <Button\n        isLoading={isLoading}\n        ariaLoadingLabel=\"Downloading Files\"\n        onClick={onSubmit}\n      >\n        Submit\n      </Button>\n    </Layout.Group>\n  );\n};\n")),(0,a.kt)("h3",null,"Triggering Elements"),(0,a.kt)("p",null,'Use the aria-haspopup attribute on buttons or other triggering elements that open content like dialogs, listboxes, trees, menus, grids, etc.\xa0 Use a corresponding value that indicates what kind of popup will be displayed when the trigger element is activated. In turn, the element that pops up must be of the role indicated. For example use aria-haspop="dialog" on buttons that open modal dialogs. Be sure to include role="dialog" on the containing element of the dialog itself, too.'),(0,a.kt)("p",null,"See the docs on 'haspop' for more details:",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-haspopup"},"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-haspopup"),"\naria-haspopup - Accessibility | MDN\nThe aria-haspopup attribute indicates the availability and type of interactive popup element that can be triggered by the element on which the attribute is set.")))}b.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var i=t(2784);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),u=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=u(e.components);return i.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(t),m=o,g=c["".concat(l,".").concat(m)]||c[m]||p[m]||a;return t?i.createElement(g,r(r({ref:n},d),{},{components:t})):i.createElement(g,r({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var u=2;u<a;u++)r[u]=t[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"}}]);