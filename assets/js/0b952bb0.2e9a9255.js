"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[7126],{70384:(e,n,o)=>{o.r(n),o.d(n,{contentTitle:()=>l,default:()=>A,frontMatter:()=>a,metadata:()=>d,toc:()=>s});var t=o(7896),i=o(31461),r=(o(2784),o(3905)),c=["components"],a={id:"accordion",category:"Content",title:"Accordion",description:"A vertically stacked list of headers that reveal or hide associated sections of content.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1188",pagination_prev:null,pagination_next:"web/ui/card"},l=void 0,d={unversionedId:"web/ui/accordion",id:"web/ui/accordion",isDocsHomePage:!1,title:"Accordion",description:"A vertically stacked list of headers that reveal or hide associated sections of content.",source:"@site/docs/web/ui/Accordion.md",sourceDirName:"web/ui",slug:"/web/ui/accordion",permalink:"/web/ui/accordion",tags:[],version:"current",frontMatter:{id:"accordion",category:"Content",title:"Accordion",description:"A vertically stacked list of headers that reveal or hide associated sections of content.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1188",pagination_prev:null,pagination_next:"web/ui/card"},sidebar:"docs",next:{title:"Card",permalink:"/web/ui/card"}},s=[{value:"Type Multiple",id:"type-multiple",children:[],level:2},{value:"Default Value - Single",id:"default-value---single",children:[],level:2},{value:"Default Value - Multiple",id:"default-value---multiple",children:[],level:2},{value:"Collapsible",id:"collapsible",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"onValueChange",id:"onvaluechange",children:[],level:2}],p=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)}},u=p("Tab"),m=p("ExitLink"),g={toc:s};function A(e){var n=e.components,o=(0,i.Z)(e,c);return(0,r.kt)("wrapper",(0,t.Z)({},g,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Accordion } from '@abyss/web/ui/Accordion';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Accordion',\n  inputs: [\n    {\n      prop: 'type',\n      type: 'select',\n      options: [\n        { label: 'single', value: 'single' },\n        { label: 'multiple', value: 'multiple' },\n      ],\n    },\n    {\n      prop: 'defaultValue',\n      type: 'select',\n      options: [\n        { label: 'none', value: '' },\n        { label: 'sandbox-1', value: 'sandbox-1' },\n        { label: 'sandbox-2', value: 'sandbox-2' },\n        { label: 'sandbox-3', value: 'sandbox-3' },\n      ],\n    },\n    {\n      prop: 'isCollapsible',\n      type: 'boolean',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n  ]\n}\n\n<Accordion>\n  <Accordion.Item value=\"sandbox-1\">\n    <Accordion.Trigger>Sandbox Accordion 1</Accordion.Trigger>\n    <Accordion.Content>\n      SUPRISE - Sandbox Accordion 1\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value=\"sandbox-2\">\n    <Accordion.Trigger>Sandbox Accordion 2</Accordion.Trigger>\n    <Accordion.Content>\n      SURPRISE - Sandbox Accordion 2\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value=\"sandbox-3\">\n    <Accordion.Trigger>Sandbox Accordion 3</Accordion.Trigger>\n    <Accordion.Content>\n      SURPRISE - Sandbox Accordion 3\n    </Accordion.Content>\n  </Accordion.Item>\n</Accordion>\n")),(0,r.kt)("h2",{id:"type-multiple"},"Type Multiple"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," property to set the accordion to either have ",(0,r.kt)("inlineCode",{parentName:"p"},"single")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"multiple")," open items. The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"single"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Accordion type="multiple" isCollapsible>\n  <Accordion.Item value="item-1">\n    <Accordion.Trigger>Is it accessible?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It adheres to the WAI-ARAI design pattern.\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value="item-2">\n    <Accordion.Trigger>Is it unstyled?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It\'s unstyled by default, giving you freedom over the look and feel.\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value="item-3">\n    <Accordion.Trigger>Can it be animated?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes! You can animate the Accordion with CSS or JavaScript.\n    </Accordion.Content>\n  </Accordion.Item>\n</Accordion>\n')),(0,r.kt)("h2",{id:"default-value---single"},"Default Value - Single"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValue")," property to set an initial accordion to be open based on its ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," property. When type is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"single")," pass in a string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Accordion defaultValue="item-1" isCollapsible>\n  <Accordion.Item value="item-1">\n    <Accordion.Trigger>Is it accessible?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It adheres to the WAI-ARAI design pattern.\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value="item-2">\n    <Accordion.Trigger>Is it unstyled?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It\'s unstyled by default, giving you freedom over the look and feel.\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value="item-3">\n    <Accordion.Trigger>Can it be animated?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes! You can animate the Accordion with CSS or JavaScript.\n    </Accordion.Content>\n  </Accordion.Item>\n</Accordion>\n')),(0,r.kt)("h2",{id:"default-value---multiple"},"Default Value - Multiple"),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," of the accordion is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"multiple")," pass in a string array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Accordion\n  type="multiple"\n  defaultValue={[\'item-1\', \'item-2\', \'item-3\']}\n  isCollapsible\n>\n  <Accordion.Item value="item-1">\n    <Accordion.Trigger>Is it accessible?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It adheres to the WAI-ARAI design pattern.\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value="item-2">\n    <Accordion.Trigger>Is it unstyled?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It\'s unstyled by default, giving you freedom over the look and feel.\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value="item-3">\n    <Accordion.Trigger>Can it be animated?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes! You can animate the Accordion with CSS or JavaScript.\n    </Accordion.Content>\n  </Accordion.Item>\n</Accordion>\n')),(0,r.kt)("h2",{id:"collapsible"},"Collapsible"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"isCollapsible")," property allows closing content when clicking the trigger for an open item. When ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," you are allowed to collapse all items. When ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," one item will always remain open. The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group grow>\n  <Accordion type="single" defaultValue="item-1" isCollapsible>\n    <Accordion.Item value="item-1">\n      <Accordion.Trigger>Collapsible Accordion Item 1</Accordion.Trigger>\n      <Accordion.Content>Accordion Content 1</Accordion.Content>\n    </Accordion.Item>\n\n    <Accordion.Item value="item-2">\n      <Accordion.Trigger>Collapsible Accordion Item 2</Accordion.Trigger>\n      <Accordion.Content>Accordion Content 2</Accordion.Content>\n    </Accordion.Item>\n  </Accordion>\n  <Accordion type="single" defaultValue="item-1">\n    <Accordion.Item value="item-1">\n      <Accordion.Trigger>Default Accordion Item 1</Accordion.Trigger>\n      <Accordion.Content>Accordion Content 1</Accordion.Content>\n    </Accordion.Item>\n\n    <Accordion.Item value="item-2">\n      <Accordion.Trigger>Default Accordion Item 2</Accordion.Trigger>\n      <Accordion.Content>Accordion Content Item 2</Accordion.Content>\n    </Accordion.Item>\n  </Accordion>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"disabled"},"Disabled"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"isDisabled")," property to disable the entire ",(0,r.kt)("inlineCode",{parentName:"p"},"Accordion")," or individual levels. The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group grow>\n  <Accordion type="single" defaultValue="item-1" isCollapsible>\n    <Accordion.Item value="item-1">\n      <Accordion.Trigger>Item is not disabled</Accordion.Trigger>\n      <Accordion.Content>Not disabled</Accordion.Content>\n    </Accordion.Item>\n\n    <Accordion.Item isDisabled value="item-2">\n      <Accordion.Trigger>Item disabled</Accordion.Trigger>\n      <Accordion.Content>Disabled</Accordion.Content>\n    </Accordion.Item>\n\n    <Accordion.Item value="item-3">\n      <Accordion.Trigger>Item is not disabled</Accordion.Trigger>\n      <Accordion.Content>Not disabled</Accordion.Content>\n    </Accordion.Item>\n  </Accordion>\n\n  <Accordion type="single" defaultValue="item-1" isDisabled>\n    <Accordion.Item value="item-1">\n      <Accordion.Trigger>Entire Accordion Is Disabled</Accordion.Trigger>\n      <Accordion.Content>Disabled</Accordion.Content>\n    </Accordion.Item>\n\n    <Accordion.Item value="item-2">\n      <Accordion.Trigger>Entire Accordion Is Disabled</Accordion.Trigger>\n      <Accordion.Content>Disabled</Accordion.Content>\n    </Accordion.Item>\n  </Accordion>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"onvaluechange"},"onValueChange"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"onValueChange")," property is an event handler that is called when the expanded state of any item changes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [multiValue, setMultiValue] = useState([]);\n  const [singleValue, setSingleValue] = useState(\'\');\n\n  const onValueChangeMulti = (e) => {\n    console.log(\'Multi Value\', e);\n    setMultiValue(e);\n  };\n\n  const onValueChangeSingle = (e) => {\n    console.log(\'Single Value\', e);\n    setSingleValue(e);\n  };\n\n  return (\n    <Layout.Group grow>\n      <Accordion\n        type="single"\n        defaultValue="item-1"\n        onValueChange={onValueChangeSingle}\n      >\n        <Accordion.Item value="item-1">\n          <Accordion.Trigger>Single Accordion Item 1</Accordion.Trigger>\n          <Accordion.Content>Accordion Content 1</Accordion.Content>\n        </Accordion.Item>\n\n        <Accordion.Item value="item-2">\n          <Accordion.Trigger>Single Accordion Item 2</Accordion.Trigger>\n          <Accordion.Content>Accordion Content 2</Accordion.Content>\n        </Accordion.Item>\n\n        <Accordion.Item value="item-3">\n          <Accordion.Trigger>Single Accordion Item 3</Accordion.Trigger>\n          <Accordion.Content>Accordion Content 3</Accordion.Content>\n        </Accordion.Item>\n      </Accordion>\n\n      <Accordion\n        type="multiple"\n        defaultValue={[\'item-1\']}\n        onValueChange={onValueChangeMulti}\n      >\n        <Accordion.Item value="item-1">\n          <Accordion.Trigger>Multiple Accordion Item 1</Accordion.Trigger>\n          <Accordion.Content>Accordion Content 1</Accordion.Content>\n        </Accordion.Item>\n\n        <Accordion.Item value="item-2">\n          <Accordion.Trigger>Multiple Accordion Item 2</Accordion.Trigger>\n          <Accordion.Content>Accordion Content 2</Accordion.Content>\n        </Accordion.Item>\n\n        <Accordion.Item value="item-3">\n          <Accordion.Trigger>Multiple Accordion Item 3</Accordion.Trigger>\n          <Accordion.Content>Accordion Content 3</Accordion.Content>\n        </Accordion.Item>\n      </Accordion>\n    </Layout.Group>\n  );\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Accordion}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The children element of the accordion',\n    },\n    {\n      name: 'onValueChange',\n      type: 'function',\n      description:\n        'Event handler called when the expanded state of an item changes',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: \"Used to disable the accordion so that it can't be opened\",\n    },\n    {\n      name: 'isCollapsible',\n      type: 'boolean',\n      description: 'Used to make the accordion collapsible',\n    },\n    {\n      name: 'defaultValue',\n      type: 'string | array[string]',\n      description: 'Used to set an initial item or items to be open',\n    },\n    {\n      name: 'type',\n      type: \"'single' | 'multiple'\",\n      description:\n        'Used to set the amount of items able to be opened at one time',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Accordion.Item}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The children element of the accordion item',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: \"Used to disable the item so that it can't be opened\",\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Accordion.Trigger}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The children element of the accordion trigger',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Accordion.Content}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The children element of the accordion content',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Accordion}\n  rows={[\n    {\n      name: 'accordion-root',\n      description: 'Root element',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("p",null,"An accordion is a vertically stacked set of interactive headings that each contain a title, content snippet, or thumbnail representing a section of content. The headings function as controls that enable users to reveal or hide their associated sections of content. Accordions are commonly used to reduce the need to scroll when presenting multiple sections of content on a single page."),(0,r.kt)("p",null,"Adheres to the ",(0,r.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#accordion",mdxType:"ExitLink"},"Accordion WAI-ARIA design pattern"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Accordion defaultValue="item-1" isCollapsible>\n  <Accordion.Item value="item-1">\n    <Accordion.Trigger>Is it accessible?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It adheres to the WAI-ARAI design pattern.\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value="item-2">\n    <Accordion.Trigger>Is it unstyled?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It\'s unstyled by default, giving you freedom over the look and feel.\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value="item-3">\n    <Accordion.Trigger>Can it be animated?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes! You can animate the Accordion with CSS or JavaScript.\n    </Accordion.Content>\n  </Accordion.Item>\n</Accordion>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to the next focusable element; all focusable elements in the accordion are included in the page Tab sequence.',\n    },\n    {\n      name: 'Shift + Tab',\n      description:\n        'Moves focus to the previous focusable element; all focusable elements in the accordion are included in the page Tab sequence.',\n    },\n    {\n      name: 'Enter or Space',\n      description:\n        'When focus is on the accordion header for a collapsed or expanded panel, pressing Enter or Space will expand or collapse the panel respectively.',\n    },\n    {\n      name: 'Arrow Down',\n      description:\n        'If focus is on an accordion header, moves focus to the next accordion header. If focus is on the last accordion header, either does nothing or moves focus to the first accordion header.',\n    },\n    {\n      name: 'Arrow Up',\n      description:\n        'If focus is on an accordion header, moves focus to the previous accordion header. If focus is on the first accordion header, either does nothing or moves focus to the last accordion header.',\n    },\n  ]}\n/>\n"))))}A.isMDXComponent=!0},3905:(e,n,o)=>{o.d(n,{Zo:()=>s,kt:()=>m});var t=o(2784);function i(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function r(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function c(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?r(Object(o),!0).forEach((function(n){i(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function a(e,n){if(null==e)return{};var o,t,i=function(e,n){if(null==e)return{};var o,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||(i[o]=e[o]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}var l=t.createContext({}),d=function(e){var n=t.useContext(l),o=n;return e&&(o="function"==typeof e?e(n):c(c({},n),e)),o},s=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var o=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),u=d(o),m=i,g=u["".concat(l,".").concat(m)]||u[m]||p[m]||r;return o?t.createElement(g,c(c({ref:n},s),{},{components:o})):t.createElement(g,c({ref:n},s))}));function m(e,n){var o=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=o.length,c=new Array(r);c[0]=u;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,c[1]=a;for(var d=2;d<r;d++)c[d]=o[d];return t.createElement.apply(null,c)}return t.createElement.apply(null,o)}u.displayName="MDXCreateElement"}}]);