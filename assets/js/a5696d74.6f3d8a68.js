"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[9931],{33193:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var a=t(7896),o=t(31461),r=(t(2784),t(3905)),i=["components"],l={id:"search-input",category:"Forms",title:"SearchInput",description:"Provides an input field for searching content within a site to find specific items.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=641%3A11899",pagination_prev:"web/ui/radio-group",pagination_next:"web/ui/select-input"},s=void 0,c={unversionedId:"web/ui/search-input",id:"web/ui/search-input",isDocsHomePage:!1,title:"SearchInput",description:"Provides an input field for searching content within a site to find specific items.",source:"@site/docs/web/ui/SearchInput.md",sourceDirName:"web/ui",slug:"/web/ui/search-input",permalink:"/web/ui/search-input",tags:[],version:"current",frontMatter:{id:"search-input",category:"Forms",title:"SearchInput",description:"Provides an input field for searching content within a site to find specific items.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=641%3A11899",pagination_prev:"web/ui/radio-group",pagination_next:"web/ui/select-input"},sidebar:"docs",previous:{title:"RadioGroup",permalink:"/web/ui/radio-group"},next:{title:"SelectInput",permalink:"/web/ui/select-input"}},u=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Section Headers",id:"section-headers",children:[],level:2},{value:"Fuse.js",id:"fusejs",children:[{value:"Fuse Data",id:"fuse-data",children:[],level:3},{value:"Fuse Keys",id:"fuse-keys",children:[],level:3},{value:"Fuse Controlled",id:"fuse-controlled",children:[],level:3},{value:"Fuse Uncontrolled",id:"fuse-uncontrolled",children:[],level:3}],level:2},{value:"Custom Filtering",id:"custom-filtering",children:[],level:2},{value:"API Filtering with Debounce",id:"api-filtering-with-debounce",children:[],level:2},{value:"Result Limit",id:"result-limit",children:[],level:2},{value:"Local Storage",id:"local-storage",children:[],level:2},{value:"Clearable",id:"clearable",children:[],level:2},{value:"Custom Result Render",id:"custom-result-render",children:[],level:2},{value:"Add Elements inside Input",id:"add-elements-inside-input",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Subtext",id:"subtext",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Rounded",id:"rounded",children:[],level:2},{value:"openOnFocus",id:"openonfocus",children:[],level:2},{value:"onClickSearchButton",id:"onclicksearchbutton",children:[],level:2},{value:"onInputChange",id:"oninputchange",children:[],level:2},{value:"Disable Search Result Items",id:"disable-search-result-items",children:[],level:2},{value:"Enable Outside Scroll",id:"enable-outside-scroll",children:[],level:2}],p=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)}},d=p("Tab"),h=p("ExitLink"),m={toc:u};function g(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(d,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { SearchInput } from '@abyss/web/ui/SearchInput';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'SearchInput',\n  inputs: [\n    {\n      prop: 'placeholder',\n      type: 'string',\n    },\n    {\n      prop: 'height',\n      type: 'string',\n    },\n    {\n      prop: 'width',\n      type: 'string',\n    },\n    {\n      prop: 'uniqueStorageId',\n      type: 'string',\n    },\n    {\n      prop: 'label',\n      type: 'string',\n    },\n    {\n      prop: 'resultLimit',\n      type: 'number',\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n        {\n      prop: 'rounded',\n      type: 'boolean',\n    },\n    {\n      prop: 'isClearable',\n      type: 'boolean',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n  ],\n}\n\n() => {\n  const MockData = utils.useSearchInputMock();\n  const [value, setValue] = React.useState('');\n\n  const handleSearch = (data) => {\n    console.log('Searched', data);\n  };\n\n  return (\n    <SearchInput\n      placeholder=\"Search Sandbox...\"\n      uniqueStorageId=\"search-input-sandbox\"\n      label=\"Search Sandbox\"\n      hideLabel\n      value={value}\n      onChange={setValue}\n      onSearch={handleSearch}\n      onClear={() => setValue('')}\n      options={MockData}\n      keys={['value']}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder="Search useForm..."\n        model="search-input-form"\n        label="useForm"\n        hideLabel\n        onClickSearchButton={() => {}}\n        options={MockData}\n        onSearch={handleSearch}\n        keys={[\'value\']}\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const MockData = utils.useSearchInputMock();\n  const [value, setValue] = React.useState('');\n\n  const handleSearch = (data) => {\n    console.log('Searched', data);\n  };\n\n  return (\n    <SearchInput\n      placeholder=\"Search useState...\"\n      uniqueStorageId=\"search-input-state\"\n      value={value}\n      label=\"useState\"\n      hideLabel\n      onChange={setValue}\n      onSearch={handleSearch}\n      onClear={() => setValue('')}\n      isClearable\n      options={MockData}\n      keys={['value']}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"section-headers"},"Section Headers"),(0,r.kt)("p",null,"To create section headers in the list, pass objects into the ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," array that have the ",(0,r.kt)("inlineCode",{parentName:"p"},"section")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"items")," properties. ",(0,r.kt)("inlineCode",{parentName:"p"},"section")," specifies the name of the section, which will be bolded and unselectable, while ",(0,r.kt)("inlineCode",{parentName:"p"},"items")," should contain the options within that section (with the same ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"label")," format as normal), which will appear indented."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState('');\n\n  return (\n    <SearchInput\n      label=\"Section Headers Example\"\n      hideLabel\n      placeholder=\"Search...\"\n      value={value}\n      onChange={setValue}\n      onClear={() => setValue('')}\n      openOnFocus\n      options={[\n        { value: '1', label: 'This option is not under any section' },\n        {\n          section: 'Section Header',\n          items: [\n            { value: '11', label: 'Option 1' },\n            { value: '21', label: 'Option 2' },\n          ],\n        },\n        {\n          section: 'Other Section Header',\n          items: [\n            { value: '31', label: 'Option 3' },\n            { value: '41', label: 'Option 4' },\n          ],\n        },\n        ,\n      ]}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"fusejs"},"Fuse.js"),(0,r.kt)("p",null,"Search Bar filtering uses the ",(0,r.kt)(h,{href:"https://fusejs.io",mdxType:"ExitLink"},"Fuse.js")," library to fuzzy filter results. What is fuzzy searching?... Generally speaking, fuzzy searching (more formally known as approximate string matching) is the technique of finding strings that are approximately equal to a given pattern (rather than exactly)."),(0,r.kt)("h3",{id:"fuse-data"},"Fuse Data"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," prop is the information that fuse will filter on and display in the search dropdown. ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," are required keys in each of the objects. You can search on any value(s) in the object, see Fuse Keys below. Required when using fuse."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log('Searched!', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        keys={['value', 'link', 'tags']}\n        placeholder=\"Search...\"\n        model=\"search\"\n        label=\"Fuse Data\"\n        hideLabel\n        options={MockData}\n        onSearch={handleSearch}\n      />\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h3",{id:"fuse-keys"},"Fuse Keys"),(0,r.kt)("p",null,"List of keys that will be searched. This supports nested paths, weighted search, searching in arrays of objects. Required when using fuse."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log('Searched', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        keys={['value', 'link', 'tags']}\n        placeholder=\"Search...\"\n        label=\"Fuse Keys\"\n        hideLabel\n        model=\"search\"\n        options={MockData}\n        onSearch={handleSearch}\n      />\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h3",{id:"fuse-controlled"},"Fuse Controlled"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const MockData = utils.useSearchInputMock();\n  const [value, setValue] = React.useState('');\n\n  const handleSearch = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <SearchInput\n      placeholder=\"Search...\"\n      label=\"Search With Fuse.js\"\n      value={value}\n      onChange={setValue}\n      onClear={() => setValue('')}\n      options={MockData}\n      keys={['value']}\n      onSearch={handleSearch}\n    />\n  );\n};\n")),(0,r.kt)("h3",{id:"fuse-uncontrolled"},"Fuse Uncontrolled"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder="Search..."\n        model="search"\n        label="Fuse Uncontrolled"\n        hideLabel\n        options={MockData}\n        onSearch={handleSearch}\n        keys={[\'value\']}\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"custom-filtering"},"Custom Filtering"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"customFilter")," prop to override the fuse.js filtering. The results returned from your customFilter function should be passed into the ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const [results, setResults] = React.useState([]);\n\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  const customFilter = (currentValue) => {\n    if (currentValue) {\n      const updatedList = MockData.filter((item) => {\n        return item.value.toUpperCase().includes(currentValue.toUpperCase());\n      });\n      setResults(updatedList);\n      return updatedList;\n    }\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder="Search..."\n        model="search"\n        label="Custom Filtering"\n        hideLabel\n        customFilter={customFilter}\n        onSearch={handleSearch}\n        options={results}\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"api-filtering-with-debounce"},"API Filtering with Debounce"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"apiFiltering")," prop to override the fuse.js filtering and supply a custom function to make asynchronous calls to an API. Both current value and selected value results will be passed to the apiFiltering callback. The results from your api should be passed into the ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," prop. If ",(0,r.kt)("inlineCode",{parentName:"p"},"debounceTime")," is not passed a default debounce time of 1000ms will be applied."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log('Searched', data);\n  };\n\n  const apiFilter = (currentValue, selectedValue) => {\n    console.log('currentValue', currentValue);\n    console.log('selectedValue', selectedValue);\n    setLoading(true);\n    utils.useSearchInputMockApi(currentValue).then((response) => {\n      setLoading(false);\n      setResults(response);\n    });\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder=\"Search...\"\n        model=\"search\"\n        label=\"Api Filtering\"\n        onInputChange={(inputValue, isArrowKeyDown) => {\n          if (!isArrowKeyDown) {\n            setLoading(true);\n          }\n        }}\n        hideLabel\n        apiFiltering={apiFilter}\n        onSearch={handleSearch}\n        options={results}\n        isLoading={loading}\n        debounceTime={1200}\n      />\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h2",{id:"result-limit"},"Result Limit"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"resultLimit")," to choose how many results are shown at a time. The default limit is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"6"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        resultLimit={3}\n        placeholder="Search..."\n        model="search"\n        label="Result Limit"\n        hideLabel\n        options={MockData}\n        onSearch={handleSearch}\n        keys={[\'value\']}\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"local-storage"},"Local Storage"),(0,r.kt)("p",null,"To automatically store the users recent searches pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"uniqueStorageId")," prop to have the config stored locally."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder="Search..."\n        model="search"\n        label="Local Storage"\n        hideLabel\n        options={MockData}\n        onSearch={handleSearch}\n        keys={[\'value\']}\n        uniqueStorageId="search-input-storage-id"\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"clearable"},"Clearable"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"isClearable")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to display a clear button in the input field. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onClear")," prop to handle the clear action for controlled inputs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        resultLimit={3}\n        label="Clearable"\n        hideLabel\n        placeholder="Search..."\n        model="search"\n        options={MockData}\n        isClearable\n        onSearch={handleSearch}\n        keys={[\'value\']}\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"custom-result-render"},"Custom Result Render"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"customRender")," prop to customize the render of each option item."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        resultLimit={3}\n        label="Custom Render"\n        hideLabel\n        placeholder="Search..."\n        model="search"\n        options={MockData}\n        onSearch={handleSearch}\n        keys={[\'value\']}\n        customRender={(item) => {\n          return (\n            <div>\n              <b>Custom Render: </b>\n              {item.value}\n            </div>\n          );\n        }}\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"add-elements-inside-input"},"Add Elements inside Input"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"inputLeftElement")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"inputRightElement")," props to add elements to the inside of the search input field. The recommended usage is for inserting icons."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder="Search..."\n        model="search-input-form"\n        label="useForm"\n        hideLabel\n        isClearable\n        onClickSearchButton={() => {}}\n        inputLeftElement={\n          <IconMaterial icon="star" size="18px" color="$gray6" />\n        }\n        inputRightElement={<IconMaterial icon="check" size="18px" />}\n        options={MockData}\n        onSearch={handleSearch}\n        keys={[\'value\']}\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"label"},"Label"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," prop to customize the label. To hide the input label set ",(0,r.kt)("inlineCode",{parentName:"p"},"hideLabel")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <Layout.Stack grow space={25}>\n        <SearchInput\n          label="Custom Label"\n          placeholder="Visible Label"\n          model="label-search"\n          options={MockData}\n          onSearch={handleSearch}\n          keys={[\'value\']}\n        />\n        <SearchInput\n          label="Custom Label"\n          placeholder="Hidden Label"\n          model="label-search"\n          options={MockData}\n          onSearch={handleSearch}\n          hideLabel\n          keys={[\'value\']}\n        />\n      </Layout.Stack>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"subtext"},"Subtext"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the search input field."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        options={MockData}\n        onSearch={handleSearch}\n        isClearable\n        keys={[\'value\']}\n        placeholder="Search..."\n        label="Subtext"\n        model="subText"\n        subText="Custom Subtext"\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const [value, setValue] = React.useState(\'\');\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <SearchInput\n      value={value}\n      onChange={setValue}\n      onSearch={handleSearch}\n      onClear={() => setValue(\'\')}\n      isClearable\n      options={MockData}\n      keys={[\'value\']}\n      placeholder="Search..."\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    />\n  );\n};\n')),(0,r.kt)("h2",{id:"rounded"},"Rounded"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"rounded")," prop to change the style of the ",(0,r.kt)("inlineCode",{parentName:"p"},"SearchInput")," from squared to rounded. The default is squared and set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder="Search..."\n        model="search-rounded"\n        label="Rounded"\n        hideLabel\n        options={MockData}\n        onSearch={handleSearch}\n        keys={[\'value\']}\n        rounded\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"openonfocus"},"openOnFocus"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"openOnFocus")," prop to open the drop-down menu when the search input field is focused."),(0,r.kt)("p",null,"By default the menu will not open until either a value is entered into the input field or ",(0,r.kt)("inlineCode",{parentName:"p"},"uniqueStorageId")," is used and recent searches are present."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder="Focus to open..."\n        model="search-input-open-on-focus"\n        label="Open On Focus"\n        hideLabel\n        onClickSearchButton={() => {}}\n        options={MockData}\n        keys={[\'value\']}\n        openOnFocus\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"onclicksearchbutton"},"onClickSearchButton"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"onClickSearchButton")," prop to make the spyglass clickable in the search. It gets passed a function and can be used to submit the search query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        resultLimit={3}\n        label="Clearable"\n        hideLabel\n        placeholder="Search..."\n        model="search"\n        options={MockData}\n        onClickSearchButton={handleSearch}\n        isClearable\n        onSearch={handleSearch}\n        keys={[\'value\']}\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"oninputchange"},"onInputChange"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"onInputChange")," prop is an event handler called when the value of text input changes. The callback returns both the value of the input as well a flag if the value was updated via an arrow key up or down."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const onInputChange = (value, isArrowKeyDown) => {\n    console.log('value', value);\n    console.log('isArrowKeyDown', isArrowKeyDown);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        label=\"Clearable\"\n        hideLabel\n        placeholder=\"Search...\"\n        model=\"search\"\n        options={MockData}\n        onInputChange={onInputChange}\n        isClearable\n        keys={['value']}\n      />\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h2",{id:"disable-search-result-items"},"Disable Search Result Items"),(0,r.kt)("p",null,"Disable an individual search result item by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"isDisabled")," key to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," within the object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const MockData = [\n    {\n      label: 'UnitedHealthcare Claim Estimator',\n      value: 'UnitedHealthcare Claim Estimator',\n    },\n    {\n      label: 'UnitedHealthcare CommunityCare',\n      value: 'UnitedHealthcare CommunityCare',\n      isDisabled: true,\n    },\n    {\n      label: 'UnitedHealthcare Oxford',\n      value: 'UnitedHealthcare Oxford',\n    },\n  ];\n\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log('Searched', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        label=\"Disabled Items\"\n        hideLabel\n        placeholder=\"Search...\"\n        model=\"search\"\n        options={MockData}\n        onSearch={handleSearch}\n        keys={['value']}\n      />\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h2",{id:"enable-outside-scroll"},"Enable Outside Scroll"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"enableOutsideScroll")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to Enable scroll outside of the search input component while the option list is open. Default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        label="Remove scroll"\n        hideLabel\n        placeholder="Search..."\n        model="search"\n        options={MockData}\n        onSearch={handleSearch}\n        enableOutsideScroll\n      />\n    </FormProvider>\n  );\n};\n'))),(0,r.kt)(d,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={SearchInput}\n  rows={[\n    {\n      name: 'placeholder',\n      type: 'string',\n      description: 'Description of expected value',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to disable search bar',\n    },\n    {\n      name: 'isClearable',\n      type: 'boolean',\n      description: 'Flag to display clear button',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Search input label',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Text displayed below the search input field',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Error message displayed below the search input field',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the search input field',\n    },\n    {\n      name: 'value',\n      type: 'number | string',\n      description: 'Value of search bar',\n    },\n    {\n      name: 'onSubmit',\n      type: 'function',\n      description: 'Callback fired when search is submitted',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired when search is changed',\n    },\n    {\n      name: 'onInputChange',\n      type: 'function',\n      description: 'Callback fired when the value of the text input changes.',\n    },\n    {\n      name: 'onSearch',\n      type: 'function',\n      description: 'Callback fired when search item is selected',\n    },\n    {\n      name: 'customFilter',\n      type: 'function',\n      description: 'Custom Filter used for Fuse',\n    },\n    {\n      name: 'apiFiltering',\n      type: 'function',\n      description: 'Api Filter used for fetching results from an api',\n    },\n    {\n      name: 'onClear',\n      type: 'function',\n      description: 'Callback fired every time search bar clears',\n    },\n    {\n      name: 'customRender',\n      type: 'function',\n      description: 'Custom render for results',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'width',\n      type: 'number | string',\n      description: 'Set width of SearchInput',\n    },\n    {\n      name: 'height',\n      type: 'number | string',\n      description: 'Set height of SearchInput',\n    },\n    {\n      name: 'uniqueStorageId',\n      type: 'string',\n      description: \"Used to store user's recent searches\",\n    },\n    {\n      name: 'options',\n      type: 'array[object]',\n      description: 'Data filtered on by Fuse',\n    },\n    {\n      name: 'fuseConfig',\n      type: 'shape',\n      description: 'Configs for Fuse',\n    },\n    {\n      name: 'keys',\n      type: 'array[string]',\n      description: 'Keys used by Fuse',\n    },\n    {\n      name: 'resultLimit',\n      type: 'number',\n      description: 'Set the limit of number of results',\n    },\n    {\n      name: 'debounceTime',\n      type: 'number',\n      description:\n        'Set the length of time that the Search recommendations should debounce by (in milliseconds)',\n    },\n    {\n      name: 'onClickSearchButton',\n      type: 'function',\n      description:\n        'Toggles whether the spyglass for the search is a button or a decoration. The function passed determines what the spyglass will do when clicked.',\n    },\n    {\n      name: 'enableOutsideScroll',\n      type: 'boolean',\n      default: 'false',\n      description: 'Flag to enable scroll on all outside elements',\n    },\n    {\n      name: 'rounded',\n      type: 'boolean',\n      description: 'Change the search input style from squared to rounded',\n    },\n    {\n      name: 'inputLeftElement',\n      type: 'ReactNode',\n      description: 'Add element to left of inside search input',\n    },\n    {\n      name: 'inputRightElement',\n      type: 'ReactNode',\n      description: 'Add element to right of inside search input',\n    },\n    {\n      name: 'openOnFocus',\n      type: 'boolean',\n      description: 'Drop-down menu will open on focus of search input field',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={SearchInput}\n  rows={[\n    {\n      name: 'search-input-root',\n      description: 'Search input root element',\n    },\n    {\n      name: 'search-input-label',\n      description: 'Search input label element',\n    },\n    {\n      name: 'search-input-input-container',\n      description: 'Search input input container element',\n    },\n    {\n      name: 'search-input-left-element-wrapper',\n      description: 'Wrapper for left input element',\n    },\n    {\n      name: 'search-input-left-element',\n      description: 'Input left element',\n    },\n    {\n      name: 'search-input-right-element-wrapper',\n      description: 'Wrapper for right input element',\n    },\n    {\n      name: 'search-input-right-element',\n      description: 'Input right element',\n    },\n    {\n      name: 'search-input-icon-container',\n      description: 'Search input icon container element',\n    },\n    {\n      name: 'search-input-icon',\n      description: 'Search input icon element',\n    },\n    {\n      name: 'search-input-input',\n      description: 'Search input input element',\n    },\n    {\n      name: 'search-input-loading-container',\n      description: 'Search input loading container element',\n    },\n    {\n      name: 'search-input-loading-spinner',\n      description: 'Search input loading spinner element',\n    },\n    {\n      name: 'search-input-clear',\n      description: 'Search input clear button element',\n    },\n    {\n      name: 'search-input-element-wrapper',\n      description: 'Search input clear/icon element wrapper',\n    },\n    {\n      name: 'search-input-descriptors',\n      description: 'Search input descriptors element',\n    },\n    {\n      name: 'search-input-option-list',\n      description: 'Search Input option list element',\n    },\n    {\n      name: 'search-input-no-options',\n      description: 'Search Input no-options list element',\n    },\n    {\n      name: 'search-input-section',\n      description: 'Search input section header option element',\n    },\n    {\n      name: 'search-input-option',\n      description: 'Search input option element',\n    },\n    {\n      name: 'search-input-local-storage-option-container',\n      description: 'Search input local storage option element container',\n    },\n    {\n      name: 'search-input-option-icon',\n      description: 'Search input option icon element',\n    },\n    {\n      name: 'search-input-option-content',\n      description: 'Search input option content element',\n    },\n  ]}\n/>\n"))),(0,r.kt)(d,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("p",null,"A combobox is a widget made up of the combination of two distinct elements: 1) a single-line textbox, and 2) an associated pop-up element for helping users set the value of the textbox. The popup may be a listbox, grid, tree, or dialog. Many implementations also include a third optional element -- a graphical button adjacent to the textbox, indicating the availability of the popup. Activating the button displays the popup if suggestions are available."),(0,r.kt)("p",null,"Adheres to the ",(0,r.kt)(h,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#combobox",mdxType:"ExitLink"},"Combo box WAI-ARIA design pattern"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        resultLimit={3}\n        label="Clearable"\n        hideLabel\n        placeholder="Search..."\n        model="search"\n        options={MockData}\n        isClearable\n        onSearch={handleSearch}\n        keys={[\'value\']}\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Textbox\"\n  rows={[\n    {\n      name: 'Down Arrow',\n      description:\n        'If the listbox is displayed: Moves focus to the second suggested value. Note that the first value is automatically selected. If the listbox is not displayed: opens the listbox and moves focus to the first value.',\n    },\n    {\n      name: 'Up Arrow',\n      description:\n        'If the listbox is displayed, moves focus to the last suggested value. If the listbox is not displayed, opens the listbox and moves focus to the last value.',\n    },\n    {\n      name: 'Alt + Down Arrow',\n      description:\n        'Opens the listbox without moving focus or changing selection.',\n    },\n    {\n      name: 'Enter',\n      description:\n        'If the listbox is displayed and the first option is automatically selected: Sets the textbox value to the content of the selected option. Closes the listbox.',\n    },\n    {\n      name: 'Esc',\n      description:\n        'Clears the textbox. If the listbox is displayed, closes it.',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Listbox\"\n  rows={[\n    {\n      name: 'Enter',\n      description:\n        'Sets the textbox value to the content of the focused option in the listbox. Closes the listbox. Sets focus on the textbox.',\n    },\n    {\n      name: 'Esc',\n      description:\n        'Closes the listbox. Sets focus on the textbox. Clears the textbox.',\n    },\n    {\n      name: 'Down Arrow',\n      description:\n        'Moves focus to the next option. If focus is on the last option, moves focus to the first option.',\n    },\n    {\n      name: 'Up Arrow',\n      description:\n        'Moves focus to the previous option. If focus is on the first option, moves focus to the last option.',\n    },\n    {\n      name: 'Right Arrow',\n      description:\n        'Moves focus to the textbox and moves the editing cursor one character to the right.',\n    },\n    {\n      name: 'Left Arrow',\n      description:\n        'Moves focus to the textbox and moves the editing cursor one character to the left.',\n    },\n    {\n      name: 'Home',\n      description:\n        'Moves focus to the textbox and places the editing cursor at the beginning of the field.',\n    },\n    {\n      name: 'End',\n      description:\n        'Moves focus to the textbox and places the editing cursor at the end of the field.',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(2784);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),h=o,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||r;return t?a.createElement(m,i(i({ref:n},u),{},{components:t})):a.createElement(m,i({ref:n},u))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);