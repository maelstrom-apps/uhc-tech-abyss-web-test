"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[7912],{5091:(n,e,t)=>{t.r(e),t.d(e,{contentTitle:()=>d,default:()=>g,frontMatter:()=>l,metadata:()=>u,toc:()=>s});var a,o=t(7896),r=t(31461),i=(t(2784),t(3905)),p=["components"],l={id:"layout",category:"Layout",title:"Layout",description:"Used to layout UI elements horizontally or vertically",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A26376",pagination_prev:"web/ui/grid",pagination_next:"web/ui/media-query"},d=void 0,u={unversionedId:"web/ui/layout",id:"web/ui/layout",isDocsHomePage:!1,title:"Layout",description:"Used to layout UI elements horizontally or vertically",source:"@site/docs/web/ui/Layout.md",sourceDirName:"web/ui",slug:"/web/ui/layout",permalink:"/web/ui/layout",tags:[],version:"current",frontMatter:{id:"layout",category:"Layout",title:"Layout",description:"Used to layout UI elements horizontally or vertically",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A26376",pagination_prev:"web/ui/grid",pagination_next:"web/ui/media-query"},sidebar:"docs",previous:{title:"Grid",permalink:"/web/ui/grid"},next:{title:"MediaQuery",permalink:"/web/ui/media-query"}},s=[{value:"Layout.Group",id:"layoutgroup",children:[],level:2},{value:"Layout.Stack",id:"layoutstack",children:[],level:2},{value:"Combine Layout.Group and Layout.Stack",id:"combine-layoutgroup-and-layoutstack",children:[],level:2},{value:"Layout.Group and Layout.Stack Props",id:"layoutgroup-and-layoutstack-props",children:[{value:"Space",id:"space",children:[],level:3},{value:"AlignLayout",id:"alignlayout",children:[],level:3},{value:"AlignItems",id:"alignitems",children:[],level:3},{value:"Grow",id:"grow",children:[],level:3}],level:2}],c=(a="Tab",function(n){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}),m={toc:s};function g(n){var e=n.components,t=(0,r.Z)(n,p);return(0,i.kt)("wrapper",(0,o.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)(c,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Layout } from '@abyss/web/ui/Layout';\n")),(0,i.kt)("h2",{id:"layoutgroup"},"Layout.Group"),(0,i.kt)("p",null,"Used to align elements in a row."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Layout.Group',\n  inputs: [\n    {\n      prop: 'space',\n      type: 'number',\n    },\n    {\n      prop: 'alignLayout',\n      type: 'select',\n      options: [\n        { label: 'left', value: 'left' },\n        { label: 'center', value: 'center' },\n        { label: 'right', value: 'right' },\n      ],\n    },\n    {\n      prop: 'alignItems',\n      type: 'select',\n      options: [\n        { label: 'top', value: 'top' },\n        { label: 'center', value: 'center' },\n        { label: 'bottom', value: 'bottom' },\n      ],\n    },\n    {\n      prop: 'grow',\n      type: 'boolean',\n    },\n  ],\n}\n\n<Layout.Group>\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Group 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Group 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Group 3\n    </div>\n</Layout.Group>\n")),(0,i.kt)("h2",{id:"layoutstack"},"Layout.Stack"),(0,i.kt)("p",null,"Used to align elements in a column."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Layout.Stack',\n  inputs: [\n    {\n      prop: 'space',\n      type: 'number',\n    },\n    {\n      prop: 'alignLayout',\n      type: 'select',\n      options: [\n        { label: 'left', value: 'left' },\n        { label: 'center', value: 'center' },\n        { label: 'right', value: 'right' },\n      ],\n    },\n    {\n      prop: 'alignItems',\n      type: 'select',\n      options: [\n        { label: 'left', value: 'left' },\n        { label: 'center', value: 'center' },\n        { label: 'right', value: 'right' },\n      ],\n    },\n    {\n      prop: 'grow',\n      type: 'boolean',\n    },\n  ],\n}\n\n<Layout.Stack>\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Stack Sandbox 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stack Sandbox 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Stack Sandbox 3\n    </div>\n</Layout.Stack>\n")),(0,i.kt)("h2",{id:"combine-layoutgroup-and-layoutstack"},"Combine Layout.Group and Layout.Stack"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"Stack")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Group")," together to make simple sets of rows and columns"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <h3>Stack</h3>\n  <Layout.Stack>\n    <Layout.Group>\n      <Button>Group 1</Button>\n      <Button>Group 1</Button>\n      <Button>Group 1</Button>\n    </Layout.Group>\n    <Layout.Group>\n      <Button>Group 2</Button>\n      <Button>Group 2</Button>\n      <Button>Group 2</Button>\n    </Layout.Group>\n  </Layout.Stack>\n</React.Fragment>\n")),(0,i.kt)("h2",{id:"layoutgroup-and-layoutstack-props"},"Layout.Group and Layout.Stack Props"),(0,i.kt)("h3",{id:"space"},"Space"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"space")," property to set the spacing for a ",(0,i.kt)("inlineCode",{parentName:"p"},"Group")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Stack"),". The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"8"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Grid>\n  <Grid.Col span="100%">\n    <h3>Group</h3>\n    <Layout.Group>\n      <Button>Group 1</Button>\n      <Button>Group 2</Button>\n      <Button>Group 3</Button>\n    </Layout.Group>\n  </Grid.Col>\n  <Grid.Col span="100%">\n    <h3>Group - 20px space</h3>\n    <Layout.Group space={20}>\n      <Button>Group 1</Button>\n      <Button>Group 2</Button>\n      <Button>Group 3</Button>\n    </Layout.Group>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Grid>\n  <Grid.Col>\n    <h3>Stack</h3>\n    <Layout.Stack>\n      <Button>Stack 1</Button>\n      <Button>Stack 2</Button>\n      <Button>Stack 3</Button>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <h3>Stack - 20px space</h3>\n    <Layout.Stack space={20}>\n      <Button>Stack 1</Button>\n      <Button>Stack 2</Button>\n      <Button>Stack 3</Button>\n    </Layout.Stack>\n  </Grid.Col>\n</Grid>\n")),(0,i.kt)("h3",{id:"alignlayout"},"AlignLayout"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"alignLayout")," property to indicate the horizontal alignment of the items in a ",(0,i.kt)("inlineCode",{parentName:"p"},"Group")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Stack"),". For a Group, the possible options are ",(0,i.kt)("inlineCode",{parentName:"p"},"top"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"center"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"bottom"),". For a Stack, the possible options are ",(0,i.kt)("inlineCode",{parentName:"p"},"left"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"center"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"right"),". The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"center")," in both cases."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <h3>Group - top align - Default</h3>\n  <Layout.Group>\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Group Top 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Group Top 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Group Top 3\n    </div>\n  </Layout.Group>\n  <h3>Group - center align</h3>\n  <Layout.Group alignLayout=\"center\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Group Default\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Group Default\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Group Default\n    </div>\n  </Layout.Group>\n  <h3>Group - bottom align</h3>\n  <Layout.Group alignLayout=\"right\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Group Bottom 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Group Bottom 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Group Bottom 3\n    </div>\n  </Layout.Group>\n</React.Fragment>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <h3>Stack - left align</h3>\n  <Layout.Stack alignLayout=\"left\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Stack Left 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stack Left 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Stack Left 3\n    </div>\n  </Layout.Stack>\n  <h3>Stack - center align - Default</h3>\n  <Layout.Stack alignLayout=\"center\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Stack Default\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stack Default\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Stack Default\n    </div>\n  </Layout.Stack>\n  <h3>Stack - right align</h3>\n  <Layout.Stack alignLayout=\"right\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Stack Right 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stack Right 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Stack Right 3\n    </div>\n  </Layout.Stack>\n</React.Fragment>\n")),(0,i.kt)("h3",{id:"alignitems"},"AlignItems"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"alignItems")," property to indicate the alignment of the items in a ",(0,i.kt)("inlineCode",{parentName:"p"},"Group")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Stack"),". For a ",(0,i.kt)("inlineCode",{parentName:"p"},"Group")," the vertical alignment is adjusted, whereas for a ",(0,i.kt)("inlineCode",{parentName:"p"},"Stack")," the horizontal alignment is adjusted. For a Group, the possible options are ",(0,i.kt)("inlineCode",{parentName:"p"},"top"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"center"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"bottom"),". For a Stack, the possible options are ",(0,i.kt)("inlineCode",{parentName:"p"},"left"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"center"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"right"),". The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"center")," in both cases."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <h3>Group - top align</h3>\n  <Layout.Group alignItems=\"top\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Group Top 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Group Top 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Group Top 3\n    </div>\n  </Layout.Group>\n  <h3>Group - center align - Default</h3>\n  <Layout.Group>\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Group Default\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Group Default\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Group Default\n    </div>\n  </Layout.Group>\n  <h3>Group - bottom align</h3>\n  <Layout.Group alignItems=\"bottom\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Group Bottom 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Group Bottom 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Group Bottom 3\n    </div>\n  </Layout.Group>\n</React.Fragment>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <h3>Stack - left align</h3>\n  <Layout.Stack alignItems=\"left\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Stack Left 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stack Left 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Stack Left 3\n    </div>\n  </Layout.Stack>\n  <h3>Stack - center align - Default</h3>\n  <Layout.Stack alignItems=\"center\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Stack Default\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stack Default\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Stack Default\n    </div>\n  </Layout.Stack>\n  <h3>Stack - right align</h3>\n  <Layout.Stack alignItems=\"right\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Stack Right 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stack Right 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Stack Right 3\n    </div>\n  </Layout.Stack>\n</React.Fragment>\n")),(0,i.kt)("h3",{id:"grow"},"Grow"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"grow")," property indicate whether the grouped components should be stretched to fill the space horizontally. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <h3>Group - default</h3>\n  <Layout.Group>\n    <Button>Item 1</Button>\n    <Button>Item 2</Button>\n    <Button>Item 3</Button>\n  </Layout.Group>\n  <h3>Group - grow</h3>\n  <Layout.Group grow>\n    <Button css={{ width: '100%' }}>Item 1</Button>\n    <Button css={{ width: '100%' }}>Item 2</Button>\n    <Button css={{ width: '100%' }}>Item 3</Button>\n  </Layout.Group>\n</React.Fragment>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <h3>Stack - default</h3>\n  <Layout.Stack>\n    <Button>Item 1</Button>\n    <Button>Item 2</Button>\n    <Button>Item 3</Button>\n  </Layout.Stack>\n  <h3>Stack - grow</h3>\n  <Layout.Stack grow>\n    <Button css={{ width: '100%' }}>Item 1</Button>\n    <Button css={{ width: '100%' }}>Item 2</Button>\n    <Button css={{ width: '100%' }}>Item 3</Button>\n  </Layout.Stack>\n</React.Fragment>\n"))),(0,i.kt)(c,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Layout.Group}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element the group wraps',\n    },\n    {\n      name: 'width',\n      type: 'number | string',\n      description: 'Set the width of the group',\n    },\n    {\n      name: 'alignItems',\n      type: 'top | center | bottom',\n      description: 'Adjust the vertical alignment of items in the group',\n    },\n    {\n      name: 'alignLayout',\n      type: 'left | center | right',\n      description: 'Set the position of the group',\n    },\n    {\n      name: 'grow',\n      type: 'boolean',\n      description: 'Flag to stretch grouped components to fit evenly or not',\n    },\n    {\n      name: 'space',\n      type: 'number',\n      description: 'Distance between elements in the Group component',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Layout.Stack}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element the stack wraps',\n    },\n    {\n      name: 'width',\n      type: 'number | string',\n      description: 'Set the width of the stack',\n    },\n    {\n      name: 'alignItems',\n      type: 'left | center | right',\n      description: 'Adjust the horizontal alignment of items in the stack',\n    },\n    {\n      name: 'alignLayout',\n      type: 'left | center | right',\n      description: 'Set the position of the stack',\n    },\n    {\n      name: 'grow',\n      type: 'boolean',\n      description: 'Flag to stretch grouped components to fit evenly or not',\n    },\n    {\n      name: 'space',\n      type: 'number',\n      description: 'Distance between elements in the Group component',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Layout.MediaQuery}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element the group wraps',\n    },\n    {\n      name: 'smallerThan',\n      type: 'number | string',\n      description:\n        'Pixel amount the window width must be smaller than in order for the children to render',\n    },\n    {\n      name: 'largerThan',\n      type: 'number | string',\n      description:\n        'Pixel amount the window width must be greater than or equal to in order for the children to render',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Layout.Group}\n  rows={[\n    {\n      name: 'layout-group',\n      description: 'Group root element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Layout.Stack}\n  rows={[\n    {\n      name: 'layout-stack',\n      description: 'Stack root element',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>m});var a=t(2784);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function p(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=a.createContext({}),d=function(n){var e=a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},u=function(n){var e=d(n.components);return a.createElement(l.Provider,{value:e},n.children)},s={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,l=n.parentName,u=p(n,["components","mdxType","originalType","parentName"]),c=d(t),m=o,g=c["".concat(l,".").concat(m)]||c[m]||s[m]||r;return t?a.createElement(g,i(i({ref:e},u),{},{components:t})):a.createElement(g,i({ref:e},u))}));function m(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,i=new Array(r);i[0]=c;var p={};for(var l in e)hasOwnProperty.call(e,l)&&(p[l]=e[l]);p.originalType=n,p.mdxType="string"==typeof n?n:o,i[1]=p;for(var d=2;d<r;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"}}]);