"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[1697],{96021:(e,n,o)=>{o.r(n),o.d(n,{contentTitle:()=>u,default:()=>b,frontMatter:()=>g,metadata:()=>s,toc:()=>p});var l,a=o(7896),t=o(31461),r=(o(2784),o(3905)),i=["components"],g={id:"toggle-group",category:"Forms",title:"ToggleGroup",description:"Combines checkboxes to give multiple options for selection.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=24220%3A104321&t",pagination_prev:"web/ui/time-input",pagination_next:"web/ui/toggle-switch"},u=void 0,s={unversionedId:"web/ui/toggle-group",id:"web/ui/toggle-group",isDocsHomePage:!1,title:"ToggleGroup",description:"Combines checkboxes to give multiple options for selection.",source:"@site/docs/web/ui/ToggleGroup.md",sourceDirName:"web/ui",slug:"/web/ui/toggle-group",permalink:"/web/ui/toggle-group",tags:[],version:"current",frontMatter:{id:"toggle-group",category:"Forms",title:"ToggleGroup",description:"Combines checkboxes to give multiple options for selection.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=24220%3A104321&t",pagination_prev:"web/ui/time-input",pagination_next:"web/ui/toggle-switch"},sidebar:"docs",previous:{title:"TimeInput",permalink:"/web/ui/time-input"},next:{title:"ToggleSwitch",permalink:"/web/ui/toggle-switch"}},p=[{value:"Usage",id:"usage",children:[],level:2},{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Label and Subtext",id:"label-and-subtext",children:[],level:2},{value:"Error Message",id:"error-message",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Rounded",id:"rounded",children:[],level:2},{value:"Border Radius",id:"border-radius",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Display",id:"display",children:[],level:2}],d=(l="Tab",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),c={toc:p};function b(e){var n=e.components,o=(0,t.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(d,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ToggleGroup } from '@abyss/web/ui/ToggleGroup';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},'{\n  component: \'ToggleGroup\',\n  inputs: [\n    {\n      prop: \'label\',\n      type: \'string\',\n    },\n    {\n      prop: \'errorMessage\',\n      type: \'string\',\n    },\n    {\n      prop: \'subText\',\n      type: \'string\',\n    },\n    {\n      prop: \'borderRadius\',\n      type: \'size\',\n    },\n    {\n      prop: \'display\',\n      type: \'select\',\n      defaultValue: \'row\',\n      options: [\n        { label: \'column\', value: \'column\' },\n        { label: \'row\', value: \'row\' },\n      ],\n    },\n    {\n      prop: \'hideLabel\',\n      type: \'boolean\',\n    },\n     {\n      prop: \'rounded\',\n      type: \'boolean\',\n    },\n  ]\n}\n\n() => {\n  const [value, setValue] = useState([\'sun\']);\n\n  console.log(\'value\', value);\n\n  return (\n    <ToggleGroup\n      label="ToggleGroup Sandbox"\n      onChange={(value) => setValue(value)}\n      value={value}\n      subText="This is subtext"\n    >\n      <ToggleGroup.Toggle label="Sun" value="sun" ariaLabel="Sunday"/>\n      <ToggleGroup.Toggle label="Mon" value="mon" ariaLabel="Monday"/>\n      <ToggleGroup.Toggle label="Tue" value="tue" ariaLabel="Tuesday"/>\n      <ToggleGroup.Toggle label="Wed" value="wed" ariaLabel="Wednesday"/>\n      <ToggleGroup.Toggle label="Thu" value="thu" ariaLabel="Thursday"/>\n      <ToggleGroup.Toggle label="Fri" value="fri" ariaLabel="Friday"/>\n      <ToggleGroup.Toggle label="Sat" value="sat" ariaLabel="Saturday"/>\n    </ToggleGroup>\n  );\n};\n')),(0,r.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      \'toggleGroup-form\': [\'home\'],\n    },\n  });\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <ToggleGroup\n        label="ToggleGroup useForm"\n        model="toggleGroup-form"\n        validators={{ required: true }}\n      >\n        <ToggleGroup.Toggle label="One" value="one" />\n        <ToggleGroup.Toggle\n          label={<IconMaterial icon="home" />}\n          value="home"\n          ariaLabel="home"\n        />\n        <ToggleGroup.Toggle label="Three" value="three" />\n        <ToggleGroup.Toggle label="Four" value="four" />\n      </ToggleGroup>\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState([\'one\']);\n\n  console.log(\'value\', value);\n\n  return (\n    <ToggleGroup\n      label="ToggleGroup useState"\n      onChange={(value) => setValue(value)}\n      value={value}\n    >\n      <ToggleGroup.Toggle label="One" value="one" />\n      <ToggleGroup.Toggle\n        label={<IconMaterial icon="home" />}\n        value="home"\n        ariaLabel="home"\n      />\n      <ToggleGroup.Toggle label="Three" value="three" />\n      <ToggleGroup.Toggle label="Four" value="four" />\n    </ToggleGroup>\n  );\n};\n')),(0,r.kt)("h2",{id:"label-and-subtext"},"Label and Subtext"),(0,r.kt)("p",null,"Label is required, but subtext is not. Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," prop to change the displayed label for the group. Pass ",(0,r.kt)("inlineCode",{parentName:"p"},"hideLabel")," to visibly hide label but retain accessibility. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the ",(0,r.kt)("inlineCode",{parentName:"p"},"Toggle Group"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <ToggleGroup\n        label="Label and Subtext"\n        subText="Subtext"\n        model="label-visible-1"\n      >\n        <ToggleGroup.Toggle label="One" value="one" />\n        <ToggleGroup.Toggle label="Two" value="two" />\n      </ToggleGroup>\n      <ToggleGroup label="Label only" model="label-visible-2">\n        <ToggleGroup.Toggle label="One" value="one" />\n        <ToggleGroup.Toggle label="Two" value="two" />\n      </ToggleGroup>\n      <ToggleGroup\n        label="Hidden Label"\n        hideLabel\n        subText="Subtext only"\n        model="label-hidden"\n      >\n        <ToggleGroup.Toggle label="One" value="one" />\n        <ToggleGroup.Toggle label="Two" value="two" />\n      </ToggleGroup>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"error-message"},"Error Message"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to display a custom error message below the toggle group."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\'\');\n\n  return (\n    <ToggleGroup\n      label="Error Message"\n      value={value}\n      onChange={(value) => setValue(value)}\n      errorMessage="Error Message"\n    >\n      <ToggleGroup.Toggle label="One" value="one" />\n      <ToggleGroup.Toggle label="Two" value="two" />\n      <ToggleGroup.Toggle label="Three" value="three" />\n    </ToggleGroup>\n  );\n};\n')),(0,r.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\'\');\n\n  return (\n    <ToggleGroup\n      value={value}\n      onChange={(value) => setValue(value)}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    >\n      <ToggleGroup.Toggle label="One" value="one" />\n      <ToggleGroup.Toggle label="Two" value="two" />\n      <ToggleGroup.Toggle label="Three" value="three" />\n    </ToggleGroup>\n  );\n};\n')),(0,r.kt)("h2",{id:"rounded"},"Rounded"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"rounded")," prop to change the style of the ToggleGroup from Rectangle to ",(0,r.kt)("inlineCode",{parentName:"p"},"rounded"),". The default is squared and set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\'\');\n\n  return (\n    <ToggleGroup\n      value={value}\n      onChange={(value) => setValue(value)}\n      label="Rounded Display"\n      rounded\n    >\n      <ToggleGroup.Toggle label="1" value="one" />\n      <ToggleGroup.Toggle\n        label={<IconMaterial icon="home" />}\n        value="home"\n        ariaLabel="home"\n      />\n      <ToggleGroup.Toggle label="2" value="two" />\n    </ToggleGroup>\n  );\n};\n')),(0,r.kt)("h2",{id:"border-radius"},"Border Radius"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"borderRadius")," prop to set to set the border radius of the container, as well as the selected toggle item. There are two preset values you can use, ",(0,r.kt)("inlineCode",{parentName:"p"},"$md"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"$lg"),", or you can input a custom value. The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"$md"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [mediumGroupValue, setMediumGroupValue] = useState([\'one\']);\n  const [largeGroupValue, setLargeGroupValue] = useState([\'one\']);\n\n  return (\n    <React.Fragment>\n      <ToggleGroup\n        label="Medium Border Radius - Default"\n        onChange={(value) => setMediumGroupValue(value)}\n        value={mediumGroupValue}\n      >\n        <ToggleGroup.Toggle label="One" value="one" />\n        <ToggleGroup.Toggle label="Two" value="two" />\n        <ToggleGroup.Toggle label="Three" value="three" />\n      </ToggleGroup>\n\n      <ToggleGroup\n        label="Large Border Radius"\n        onChange={(value) => setLargeGroupValue(value)}\n        value={largeGroupValue}\n        borderRadius="$lg"\n      >\n        <ToggleGroup.Toggle label="One" value="one" />\n        <ToggleGroup.Toggle label="Two" value="two" />\n        <ToggleGroup.Toggle label="Three" value="three" />\n      </ToggleGroup>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"disabled"},"Disabled"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to disable all toggle items in the group. Individual toggle items can be disabled by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"isDisabled")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," in their respective ",(0,r.kt)("inlineCode",{parentName:"p"},"ToggleGroup.Toggle")," instead of the outer component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({});\n\n  return (\n    <FormProvider state={form}>\n      <ToggleGroup\n        isDisabled\n        label="All Items Disabled"\n        model="disabled"\n        display="row"\n      >\n        <ToggleGroup.Toggle value="Disabled 1" label="Disabled 1" />\n        <ToggleGroup.Toggle value="Disabled 2" label="Disabled 2" />\n        <ToggleGroup.Toggle value="Disabled 3" label="Disabled 3" />\n        <ToggleGroup.Toggle value="Disabled 4" label="Disabled 4" />\n      </ToggleGroup>\n\n      <ToggleGroup\n        label="Individual Items Disabled"\n        model="disabled2"\n        display="row"\n      >\n        <ToggleGroup.Toggle value="Disabled 1" label="Disabled 1" isDisabled />\n        <ToggleGroup.Toggle value="Enabled 1" label="Enabled 1" />\n        <ToggleGroup.Toggle value="Disabled 2" label="Disabled 2" isDisabled />\n        <ToggleGroup.Toggle value="Enabled 2" label="Enabled 2" />\n      </ToggleGroup>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"display"},"Display"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"display")," prop to set the direction in which the toggle group appears. The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"'column'"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <ToggleGroup label="ToggleGroup Row" model="column">\n        <ToggleGroup.Toggle label="Column A" value="A" />\n        <ToggleGroup.Toggle label="Column B" value="B" />\n      </ToggleGroup>\n\n      <ToggleGroup label="ToggleGroup Column" model="row" display="column">\n        <ToggleGroup.Toggle label="Row A" value="Row A" />\n        <ToggleGroup.Toggle label="Row B" value="Row B" />\n      </ToggleGroup>\n    </FormProvider>\n  );\n};\n'))),(0,r.kt)(d,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ToggleGroup}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the ToggleGroup component',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Set the label of the ToggleGroup',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description: 'Value(s) selected',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Set the error message',\n    },\n    {\n      name: 'validators',\n      type: 'shape',\n      description: 'Rules for validation',\n    },\n    {\n      name: 'display',\n      type: \"'row' | 'column'\",\n      description: 'Set the direction in which the toggle group is displayed',\n    },\n    {\n      name: 'borderRadius',\n      type: 'number | string',\n      description:\n        \"Set the border radius of the container and the selected toggle item's background\",\n    },\n    {\n      name: 'borderRadiuses',\n      type: 'object',\n      description: 'Set border radius options',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'rounded',\n      type: 'boolean',\n      description: \"Change the toggle group's style from rectangle to rounded\",\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to disable all toggle items',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired when the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired when the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired when the component is unfocused',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Set the subtext of the ToggleGroup',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the ToggleGroup',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ToggleGroup.Toggle}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element the ToggleGroup.Toggle wraps',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to disable Toggle',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Set the label of Toggle',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description: 'Value of the Toggle',\n    },\n    {\n      name: 'ariaLabel',\n      type: 'string',\n      description: `'aria-label' for Toggle with abbreviated word or icon`,\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={ToggleGroup}\n  rows={[\n    {\n      name: 'toggle-group-root',\n      description: 'ToggleGroup root element',\n    },\n    {\n      name: 'toggle-group-label',\n      description: 'ToggleGroup label',\n    },\n    {\n      name: 'toggle-group-container',\n      description: 'ToggleGroup container',\n    },\n    {\n      name: 'toggle-group-descriptors',\n      description: 'ToggleGroup descriptors',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={ToggleGroup.Toggle}\n  rows={[\n    {\n      name: 'toggle-input-root',\n      description: 'Toggle input root',\n    },\n    {\n      name: 'toggle-input-checkbox',\n      description: 'Toggle input type',\n    },\n    {\n      name: 'toggle-input-label',\n      description: 'Toggle input label',\n    },\n  ]}\n/>\n"))),(0,r.kt)(d,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("p",null,"ToggleGroup at its core functions like a CheckBox Group."),(0,r.kt)("p",null,"A CheckBox group is a set of checkable checkboxes, where more than one of the checkboxes can be checked at a time. Some implementations may initialize the set with all checkboxes in the unchecked state in order to force the user to check one of the checkboxes before moving past a certain point in the workflow."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ariaLabel")," prop in ",(0,r.kt)("inlineCode",{parentName:"p"},"ToggleGroup.Toggle"),' when using abbreviated words or icons. This will include an "aria-label" for screen readers.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState([\'one\']);\n\n  return (\n    <ToggleGroup\n      label="Accessibility Practice"\n      onChange={(value) => setValue(value)}\n      value={value}\n      subText="Utilize the Keyboard Interaction table below to test the components accessibility."\n    >\n      <ToggleGroup.Toggle label="Sun" value="sun" ariaLabel="Sunday" />\n      <ToggleGroup.Toggle label="Mon" value="mon" ariaLabel="Monday" />\n      <ToggleGroup.Toggle label="Tue" value="tue" ariaLabel="Tuesday" />\n      <ToggleGroup.Toggle label="Wed" value="wed" ariaLabel="Wednesday" />\n      <ToggleGroup.Toggle label="Thu" value="thu" ariaLabel="Thursday" />\n      <ToggleGroup.Toggle label="Fri" value="fri" ariaLabel="Friday" />\n      <ToggleGroup.Toggle label="Sat" value="sat" ariaLabel="Saturday" />\n    </ToggleGroup>\n  );\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to first element and then next items in the group Tab sequence',\n    },\n    {\n      name: 'Space',\n      description: 'When focus is on an unchecked checkbox item, checks it.',\n    },\n  ]}\n/>\n"))))}b.isMDXComponent=!0},3905:(e,n,o)=>{o.d(n,{Zo:()=>s,kt:()=>c});var l=o(2784);function a(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function t(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,l)}return o}function r(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?t(Object(o),!0).forEach((function(n){a(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):t(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function i(e,n){if(null==e)return{};var o,l,a=function(e,n){if(null==e)return{};var o,l,a={},t=Object.keys(e);for(l=0;l<t.length;l++)o=t[l],n.indexOf(o)>=0||(a[o]=e[o]);return a}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(l=0;l<t.length;l++)o=t[l],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var g=l.createContext({}),u=function(e){var n=l.useContext(g),o=n;return e&&(o="function"==typeof e?e(n):r(r({},n),e)),o},s=function(e){var n=u(e.components);return l.createElement(g.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},d=l.forwardRef((function(e,n){var o=e.components,a=e.mdxType,t=e.originalType,g=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=u(o),c=a,b=d["".concat(g,".").concat(c)]||d[c]||p[c]||t;return o?l.createElement(b,r(r({ref:n},s),{},{components:o})):l.createElement(b,r({ref:n},s))}));function c(e,n){var o=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var t=o.length,r=new Array(t);r[0]=d;var i={};for(var g in n)hasOwnProperty.call(n,g)&&(i[g]=n[g]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var u=2;u<t;u++)r[u]=o[u];return l.createElement.apply(null,r)}return l.createElement.apply(null,o)}d.displayName="MDXCreateElement"}}]);