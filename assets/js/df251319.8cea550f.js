"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[2732],{67815:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>s,default:()=>y,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"icon-material",category:"Media",title:"IconMaterial",description:"Used to implement material icons and adapt their properties.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A82",pagination_prev:"web/ui/icon",pagination_next:"web/ui/action-nav"},s=void 0,c={unversionedId:"web/ui/icon-material",id:"web/ui/icon-material",isDocsHomePage:!1,title:"IconMaterial",description:"Used to implement material icons and adapt their properties.",source:"@site/docs/web/ui/IconMaterial.md",sourceDirName:"web/ui",slug:"/web/ui/icon-material",permalink:"/web/ui/icon-material",tags:[],version:"current",frontMatter:{id:"icon-material",category:"Media",title:"IconMaterial",description:"Used to implement material icons and adapt their properties.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A82",pagination_prev:"web/ui/icon",pagination_next:"web/ui/action-nav"},sidebar:"docs",previous:{title:"Icon",permalink:"/web/ui/icon"},next:{title:"ActionNav",permalink:"/web/ui/action-nav"}},d=[{value:"Icons",id:"icons",children:[],level:2},{value:"Colors",id:"colors",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Material Icon Variants",id:"material-icon-variants",children:[],level:2}],p=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=p("Tab"),m=p("ExitLink"),h=p("IconLibrary"),g={toc:d};function y(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { IconMaterial } from '@abyss/web/ui/IconMaterial';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'IconMaterial',\n  inputs: [\n    {\n      prop: 'icon',\n      type: 'string',\n    },\n    {\n      prop: 'color',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'string',\n    },\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'filled', value: 'filled' },\n        { label: 'outlined', value: 'outlined' },\n      ],\n    },\n  ]\n}\n\n<IconMaterial icon=\"home\" size=\"24px\" variant=\"filled\" color=\"$interactive1\" />\n\n")),(0,i.kt)("h2",{id:"icons"},"Icons"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"icon")," property to adjust which icon is being selected."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial icon="bookmarks" size={24} />\n  <IconMaterial icon="face" size={24} />\n  <IconMaterial icon="home" size={24} />\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"colors"},"Colors"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"color")," property to adjust the color of a Google material icon. Theme colors can be found in the ",(0,i.kt)("a",{parentName:"p",href:"/foundations/colors"},"Colors")," documentation section or a hex code can be used. The default color is set to the theme ",(0,i.kt)("inlineCode",{parentName:"p"},"'interactive1'"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial icon="home" size={24} />\n  <IconMaterial icon="home" size={24} color="$success1" />\n  <IconMaterial icon="home" size={24} color="$error1" />\n  <IconMaterial icon="home" size={24} color="$primary1" />\n  <IconMaterial icon="home" size={24} color="#00ff00" />\n  <IconMaterial icon="home" size={24} color="violet" />\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," property to adjust the size of an icon by setting it to a specific number. The default size is set to 24."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial icon="home" size={16} />\n  <IconMaterial icon="home" size={20} />\n  <IconMaterial icon="home" />\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"material-icon-variants"},"Material Icon Variants"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," property to change the style of Material icons. The default variant is ",(0,i.kt)("inlineCode",{parentName:"p"},"filled"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Grid columns={5} span={{ md: \'50%\', lg: \'20%\' }}>\n  <Grid.Col>\n    <Box padding="$sm" color="$white">\n      <Layout.Stack grow space={0}>\n        <div style={{ lineHeight: 2 }}>filled</div>\n        <div style={{ lineHeight: 2 }}>outlined</div>\n      </Layout.Stack>\n    </Box>\n  </Grid.Col>\n  <Grid.Col>\n    <Box padding="$sm" color="$white">\n      <Layout.Stack grow space={2}>\n        <IconMaterial icon="health_and_safety" size={24} variant="filled" />\n        <IconMaterial icon="health_and_safety" size={24} variant="outlined" />\n      </Layout.Stack>\n    </Box>\n  </Grid.Col>\n  <Grid.Col>\n    <Box padding="$sm" color="$tint3">\n      <Layout.Stack grow space={2}>\n        <IconMaterial icon="health_and_safety" size={24} variant="filled" />\n        <IconMaterial icon="health_and_safety" size={24} variant="outlined" />\n      </Layout.Stack>\n    </Box>\n  </Grid.Col>\n  <Grid.Col>\n    <Box padding="$sm" color="$tint4">\n      <Layout.Stack grow space={2}>\n        <IconMaterial icon="health_and_safety" size={24} variant="filled" />\n        <IconMaterial icon="health_and_safety" size={24} variant="outlined" />\n      </Layout.Stack>\n    </Box>\n  </Grid.Col>\n  <Grid.Col>\n    <Box padding="$sm" color="$primary1">\n      <Layout.Stack grow space={2}>\n        <IconMaterial\n          icon="health_and_safety"\n          size={24}\n          variant="filled"\n          color="white"\n        />\n        <IconMaterial\n          icon="health_and_safety"\n          size={24}\n          variant="outlined"\n          color="white"\n        />\n      </Layout.Stack>\n    </Box>\n  </Grid.Col>\n</Grid>\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Icon}\n  rows={[\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the icon',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The svg content of the icon',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the icon',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the icon',\n    },\n    {\n      name: 'isScreenReadable',\n      type: 'boolean',\n      description:\n        'Indicate whether the icon is screen readable or not. If the icon is Screen Readable, then provide a title',\n    },\n    {\n      name: 'onProcessSVG',\n      type: 'function',\n      description: 'The svg content of the icon',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description:\n        '(not currently functioning) Pre programmed sizes for the icons',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={IconMaterial}\n  rows={[\n    {\n      name: 'icon',\n      type: 'string',\n      description: 'Name of the material icon',\n    },\n    {\n      name: 'variant',\n      type: 'filled | outlined',\n      description: 'The style variation of the material icon.',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the material icon',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the material icon',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the material icon',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Icon}\n  rows={[\n    {\n      name: 'icon-root',\n      description: 'Icon root element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={IconMaterial}\n  rows={[\n    {\n      name: 'icon-material-root',\n      description: 'Icon Material root element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("h2",null,"Meaningful or Control Icons"),(0,i.kt)("p",null,"If the icon is being used in a setting where it is the only element providing meaning, then that same meaning should be conveyed to screen reader users. The below implementation provides examples of situations in which the property ",(0,i.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," should be set to true and the ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," property is required and should describe the purpose of the image."),(0,i.kt)("p",null,"Example 1: An alert icon is used to convey a sense of urgency; there is adjacent text (\u201cThere is a data outage\u201d) but the text doesn't include any words that convey urgency. So, in this case, the icon should have a text alternative such as \u201cAlert\u201d or \u201cWarning\u201d."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand title="alert" icon="alert" isScreenReadable={true} size={24} />\n  <div>There is a data outage</div>\n</Layout.Group>\n')),(0,i.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog. There is no adjacent text, so the icon should have a text alternative of \u201cclose\u201d or \u201cclose window\u201d.",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial title="close" icon="close" isScreenReadable={true} size={24} />\n</Layout.Group>\n')),(0,i.kt)("h2",null,"Decorative Icons"),(0,i.kt)("p",null,"If the icon is being used in a setting in which it just a decorative element (which is the default case for icons), then the icon should be ignored by screen readers. The below implementation provides example of which situations would be classified as decorative. Since the default of ",(0,i.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," is set to false no specific changes need to be made for decorative icons."),(0,i.kt)("p",null,"Example 1: An alert icon is used next to an urgent message and the word \u201cAlert\u201d is included in the adjacent text. In this case, the icon becomes decorative in nature and should be ignored by screen readers."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="alert" size={24} />\n  <div>Alert: There is a data outage</div>\n</Layout.Group>\n')),(0,i.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog; the word \u201cClose\u201d appears to the right of the button. In this case, the icon should be considered decorative and ignored by screen readers.",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial icon="close" size={24} />\n  <div>Close</div>\n</Layout.Group>\n'))),(0,i.kt)(u,{label:"Material Icons",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<h2>Material Icons</h2>\n")),(0,i.kt)("br",null),"Abyss uses Google's Material Design System iconography that are simple, modern, friendly, and sometimes quirky. Each icon is created using Google's design guidelines to depict in simple and minimal forms the universal concepts used commonly throughout user interfaces. Ensuring readability and clarity at both large and small sizes, these icons have been optimized for common platforms and display resolutions.",(0,i.kt)("p",null,"The source for these design icons can be found in the ",(0,i.kt)(m,{href:"https://fonts.google.com/icons)",mdxType:"ExitLink"},"Material Icons Library"),"."),(0,i.kt)(h,{brand:"material",mdxType:"IconLibrary"})))}y.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(2784);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return t?a.createElement(h,r(r({ref:n},d),{},{components:t})):a.createElement(h,r({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);