"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[1991],{2582:(e,n,l)=>{l.r(n),l.d(n,{contentTitle:()=>p,default:()=>b,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var t,a=l(7896),o=l(31461),r=(l(2784),l(3905)),s=["components"],i={id:"checkbox-tree",category:"Forms",title:"CheckboxTree",description:"Allows a user to select one or multiple items from an expandable/collapsible tree",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A23398",pagination_prev:"web/ui/checkbox-group",pagination_next:"web/ui/content-editor"},p=void 0,c={unversionedId:"web/ui/checkbox-tree",id:"web/ui/checkbox-tree",isDocsHomePage:!1,title:"CheckboxTree",description:"Allows a user to select one or multiple items from an expandable/collapsible tree",source:"@site/docs/web/ui/CheckboxTree.md",sourceDirName:"web/ui",slug:"/web/ui/checkbox-tree",permalink:"/web/ui/checkbox-tree",tags:[],version:"current",frontMatter:{id:"checkbox-tree",category:"Forms",title:"CheckboxTree",description:"Allows a user to select one or multiple items from an expandable/collapsible tree",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A23398",pagination_prev:"web/ui/checkbox-group",pagination_next:"web/ui/content-editor"},sidebar:"docs",previous:{title:"CheckboxGroup",permalink:"/web/ui/checkbox-group"},next:{title:"ContentEditor",permalink:"/web/ui/content-editor"}},d=[{value:"Usage",id:"usage",children:[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:3},{value:"useState",id:"usestate",children:[],level:3},{value:"Manage Other Props with useState",id:"manage-other-props-with-usestate",children:[],level:3}],level:2},{value:"Nodes",id:"nodes",children:[{value:"Label",id:"label",children:[],level:3},{value:"Value",id:"value",children:[],level:3},{value:"Children",id:"children",children:[],level:3},{value:"Disabled",id:"disabled",children:[],level:3},{value:"Show Checkbox",id:"show-checkbox",children:[],level:3},{value:"Title",id:"title",children:[],level:3}],level:2},{value:"Checked",id:"checked",children:[],level:2},{value:"onCheck",id:"oncheck",children:[],level:2},{value:"onClick",id:"onclick",children:[],level:2},{value:"Validation",id:"validation",children:[],level:2},{value:"Label",id:"label-1",children:[],level:2},{value:"Subtext",id:"subtext",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Disabled",id:"disabled-1",children:[],level:2},{value:"showExpandAll",id:"showexpandall",children:[],level:2},{value:"Only Leaf Checkboxes",id:"only-leaf-checkboxes",children:[],level:2},{value:"Check Model",id:"check-model",children:[],level:2}],u=(t="Tab",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),h={toc:d};function b(e){var n=e.components,l=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},h,l,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { CheckboxTree } from '@abyss/web/ui/CheckboxTree';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'CheckboxTree',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'string',\n    },\n    {\n      prop: 'subText',\n      type: 'string',\n    },\n    {\n      prop: 'id',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'string',\n    },\n    {\n      prop: 'disabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'onlyLeafCheckboxes',\n      type: 'boolean',\n    },\n    {\n      prop: 'showExpandAll',\n      type: 'boolean',\n    },\n    {\n      prop: 'allExpanded',\n      type: 'boolean',\n    },\n  ]\n}\n\n() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n              children: [\n                {\n                  value: '/app/Http/Controllers/WelcomeController.js',\n                  label: 'WelcomeController.js',\n                },\n              ],\n            },\n            {\n              value: '/app/Http/routes.js',\n              label: 'routes.js',\n            },\n          ],\n        },\n        {\n          value: '/app/Providers',\n          label: 'Providers',\n          children: [\n            {\n              value: '/app/Providers/EventServiceProvider.js',\n              label: 'EventServiceProvider.js',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      value: '/config',\n      label: 'config',\n      children: [\n        {\n          value: '/config/app.js',\n          label: 'app.js',\n        },\n        {\n          value: '/config/database.js',\n          label: 'database.js',\n        },\n      ],\n    },\n    {\n      value: '/public',\n      label: 'public',\n      children: [\n        {\n          value: '/public/assets/',\n          label: 'assets',\n          children: [\n            {\n              value: '/public/assets/style.css',\n              label: 'style.css',\n            },\n          ],\n        },\n        {\n          value: '/public/index.html',\n          label: 'index.html',\n        },\n      ],\n    },\n    {\n      value: '/.env',\n      label: '.env',\n    },\n    {\n      value: '/.gitignore',\n      label: '.gitignore',\n    },\n    {\n      value: '/README.md',\n      label: 'README.md',\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n\n  return (\n    <CheckboxTree\n      label=\"Test Label\"\n      subText=\"Test Subtext\"\n      id=\"checkbox tree container\"\n      nodes={nodes}\n      checked={checked}\n      onCheck={(checked) => setChecked(checked)}\n      onClick={(expanded) => setClick(expanded)}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"The list of which nodes are currently checked can be managed in two ways, the ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," hook and the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook:"),(0,r.kt)("h3",{id:"useform-recommended"},"useForm (Recommended)"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      'checkbox-form': ['/app/Http/Controllers/WelcomeController.js'],\n    },\n  });\n  const onSubmit = (data) => {\n    console.log('submitted', data);\n  };\n\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <CheckboxTree\n        label=\"useForm Example\"\n        nodes={nodes}\n        model=\"checkbox-form\"\n        allExpanded\n      />\n      <Button type=\"submit\" size=\"$sm\" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h3",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const [checked, setChecked] = useState([\n    '/app/Http/Controllers/WelcomeController.js',\n  ]);\n\n  const onSubmit = () => {\n    console.log('Submitted', checked);\n  };\n\n  return (\n    <React.Fragment>\n      <CheckboxTree\n        label=\"useState Example\"\n        nodes={nodes}\n        checked={checked}\n        onCheck={(e) => {\n          setChecked(e);\n        }}\n        allExpanded\n      />\n      <Button onClick={onSubmit} style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h3",{id:"manage-other-props-with-usestate"},"Manage Other Props with useState"),(0,r.kt)("p",null,"Note that whether you use ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," to manage the list of checked nodes, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," to modify the other props. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      'checkbox-form': ['/app/Http/Controllers/WelcomeController.js'],\n    },\n  });\n  const onSubmit = (data) => {\n    console.log('submitted', data);\n  };\n\n  const initialNodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const [nodes, setNodes] = useState(initialNodes);\n  const [disabled, setDisabled] = useState(false);\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <CheckboxTree\n        label=\"Extra useState Functionality\"\n        nodes={nodes}\n        disabled={disabled}\n        model=\"checkbox-form\"\n        allExpanded\n      />\n      <Button type=\"submit\" size=\"$sm\" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n      <Button onClick={() => setDisabled(!disabled)} style={{ marginTop: 16 }}>\n        Toggle Disabled\n      </Button>\n      <Button\n        onClick={() => setNodes(nodes.slice(0, -1))}\n        style={{ marginTop: 16 }}\n      >\n        Remove Last Node\n      </Button>\n      <Button\n        onClick={() =>\n          setNodes([\n            ...nodes,\n            {\n              value: `Node #${nodes.length + 1}`,\n              label: `Node #${nodes.length + 1}`,\n            },\n          ])\n        }\n        style={{ marginTop: 16 }}\n      >\n        Add Node\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h2",{id:"nodes"},"Nodes"),(0,r.kt)("p",null,"The CheckboxTree is made up of nodes, which are specified by passing a list of the node objects into the ",(0,r.kt)("inlineCode",{parentName:"p"},"nodes")," prop. This property is required. Each node has the following properties:"),(0,r.kt)("h3",{id:"label"},"Label"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," prop to set what will appear on the tree for this node. This does not need to match the node's ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," property. This property is required."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      label: 'This is the label prop',\n      value: 'This value can be different than the label',\n    },\n  ];\n\n  return <CheckboxTree label=\"Label Example\" nodes={nodes} />;\n};\n")),(0,r.kt)("h3",{id:"value"},"Value"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," prop to set a unique identifier for the node. No two nodes in the tree can have the same ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),". This property is required."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: 'Readme 1',\n      label: '/README.md',\n    },\n    {\n      value: 'Readme 2',\n      label: '/README.md',\n    },\n  ];\n\n  return (\n    <CheckboxTree label=\"Same Display Name, Different Values\" nodes={nodes} />\n  );\n};\n")),(0,r.kt)("h3",{id:"children"},"Children"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"children")," prop to create an array of child nodes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  return <CheckboxTree label=\"Children Example\" nodes={nodes} allExpanded />;\n};\n")),(0,r.kt)("h3",{id:"disabled"},"Disabled"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"disabled")," prop to disable a node, preventing it from being checked or clicked on. Its default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n              disabled: true,\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  return (\n    <CheckboxTree label=\"Disabled Node Example\" nodes={nodes} allExpanded />\n  );\n};\n")),(0,r.kt)("h3",{id:"show-checkbox"},"Show Checkbox"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showCheckbox")," prop to show or hide a checkbox. Its default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'This node has showCheckbox set to false',\n              showCheckbox: false,\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'This node has showCheckbox as its default (true)',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  return (\n    <CheckboxTree label=\"Show Checkbox Disabled\" nodes={nodes} allExpanded />\n  );\n};\n")),(0,r.kt)("h3",{id:"title"},"Title"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," prop to a custom title attribute for the node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'Custom title prop',\n      title: 'This is the title prop',\n    },\n  ];\n\n  return <CheckboxTree label=\"Title Example\" nodes={nodes} showExpandAll />;\n};\n")),(0,r.kt)("h2",{id:"checked"},"Checked"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"checked")," prop to specify which nodes are checked. If you are using ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," to manage checked nodes, you do not need to pass a value for this property; if you are using ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," for checked nodes, make sure to update your ",(0,r.kt)("inlineCode",{parentName:"p"},"checked")," prop when nodes are checked (using the ",(0,r.kt)("inlineCode",{parentName:"p"},"onCheck")," prop), or else the tree will not update properly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n        },\n      ],\n    },\n\n    {\n      value: '/README.md',\n      label: 'README.md',\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n  return (\n    <CheckboxTree\n      label=\"Checked Example\"\n      nodes={nodes}\n      checked={checked}\n      onCheck={(checked) => setChecked(checked)}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"oncheck"},"onCheck"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onCheck")," fuction to trigger a custom function when a checkbox is checked. You can use this to update your checked state from useState, or to do something else entirely."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n              children: [\n                {\n                  value: '/app/Http/Controllers/WelcomeController.js',\n                  label: 'WelcomeController.js',\n                },\n              ],\n            },\n            {\n              value: '/app/Http/routes.js',\n              label: 'routes.js',\n            },\n          ],\n        },\n        {\n          value: '/app/Providers',\n          label: 'Providers',\n          children: [\n            {\n              value: '/app/Providers/EventServiceProvider.js',\n              label: 'EventServiceProvider.js',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      value: '/config',\n      label: 'config',\n      children: [\n        {\n          value: '/config/app.js',\n          label: 'app.js',\n        },\n        {\n          value: '/config/database.js',\n          label: 'database.js',\n        },\n      ],\n    },\n    {\n      value: '/public',\n      label: 'public',\n      children: [\n        {\n          value: '/public/assets/',\n          label: 'assets',\n          children: [\n            {\n              value: '/public/assets/style.css',\n              label: 'style.css',\n            },\n          ],\n        },\n        {\n          value: '/public/index.html',\n          label: 'index.html',\n        },\n      ],\n    },\n    {\n      value: '/.env',\n      label: '.env',\n    },\n    {\n      value: '/.gitignore',\n      label: '.gitignore',\n    },\n    {\n      value: '/README.md',\n      label: 'README.md',\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n  return (\n    <CheckboxTree\n      label=\"onCheck Example\"\n      nodes={nodes}\n      checked={checked}\n      onCheck={(checked) => {\n        setChecked(checked);\n        console.log(\n          'A node was just checked.  Now the checked nodes are: ',\n          checked\n        );\n      }}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"onclick"},"onClick"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick")," prop to trigger a custom function when the label of a node is clicked. When a function is given for ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick"),", clicking the label will no longer check the node by default, you will need to click the checkbox directly (unless in your ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick")," function you check the node). The callback function is passed the object of the node that was clicked."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/node1',\n      label: 'Click me to see a message logged to the console',\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n  return (\n    <React.Fragment>\n      <CheckboxTree\n        label=\"onClick Example\"\n        nodes={nodes}\n        checked={checked}\n        onClick={(e) => console.log('This node was just clicked: ', e)}\n      />\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"validation"},"Validation"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"validators")," prop to specify 1) if at least one option is required to be checked, and 2) custom validations, specified by a callback function that is passed in the selected nodes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      'checkbox-form': ['/README.md'],\n    },\n  });\n  const onSubmit = (data) => {\n    console.log('submitted', data);\n  };\n\n  const nodes = [\n    {\n      value: '/.env',\n      label: '.env',\n    },\n    {\n      value: '/.gitignore',\n      label: '.gitignore',\n    },\n    {\n      value: '/README.md',\n      label: 'README.md',\n    },\n  ];\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <CheckboxTree\n        label=\"Validation Example - Must check at least two options\"\n        nodes={nodes}\n        allExpanded\n        model=\"checkbox-form\"\n        validators={{\n          required: true,\n          validate: (value) =>\n            (value && value.length >= 2) || 'Select At Least 2 Options',\n        }}\n      />\n      <Button type=\"submit\" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h2",{id:"label-1"},"Label"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," prop to add a display label that will appear above the tree."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/README.md',\n      label: '/README.md',\n    },\n  ];\n\n  return <CheckboxTree label=\"This is the label prop\" nodes={nodes} />;\n};\n")),(0,r.kt)("h2",{id:"subtext"},"Subtext"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"subText")," prop to insert helpful text below the label."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n    },\n  ];\n\n  return (\n    <CheckboxTree\n      label=\"Custom Group Label\"\n      subText=\"This is the subText prop\"\n      nodes={nodes}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const nodes = [\n    {\n      value: \'/app\',\n      label: \'app\',\n    },\n  ];\n\n  return (\n    <CheckboxTree\n      nodes={nodes}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    />\n  );\n};\n')),(0,r.kt)("h2",{id:"size"},"Size"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," prop to set the height/width of the checkboxes. The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"md"),". Can use predefined sizes or a custom number to set size."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n  return (\n    <CheckboxTree\n      label=\"Small Checkbox Tree\"\n      nodes={nodes}\n      checked={checked}\n      allExpanded\n      size=\"sm\"\n    />\n  );\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  return (\n    <CheckboxTree label=\"Default Checkbox Tree\" nodes={nodes} allExpanded />\n  );\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n  return (\n    <CheckboxTree\n      label=\"Large Checkbox Tree\"\n      nodes={nodes}\n      checked={checked}\n      allExpanded\n      size=\"lg\"\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"disabled-1"},"Disabled"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"disabled")," prop to disable all nodes. The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  return (\n    <CheckboxTree\n      label=\"Tree Disabled Example\"\n      nodes={nodes}\n      allExpanded\n      disabled\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"showexpandall"},"showExpandAll"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showExpandAll")," prop to show two buttons for expanding and collapsing all nodes. The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n              children: [\n                {\n                  value: '/app/Http/Controllers/WelcomeController.js',\n                  label: 'WelcomeController.js',\n                },\n              ],\n            },\n            {\n              value: '/app/Http/routes.js',\n              label: 'routes.js',\n            },\n          ],\n        },\n        {\n          value: '/app/Providers',\n          label: 'Providers',\n          children: [\n            {\n              value: '/app/Providers/EventServiceProvider.js',\n              label: 'EventServiceProvider.js',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      value: '/config',\n      label: 'config',\n      children: [\n        {\n          value: '/config/app.js',\n          label: 'app.js',\n        },\n        {\n          value: '/config/database.js',\n          label: 'database.js',\n        },\n      ],\n    },\n    {\n      value: '/public',\n      label: 'public',\n      children: [\n        {\n          value: '/public/assets/',\n          label: 'assets',\n          children: [\n            {\n              value: '/public/assets/style.css',\n              label: 'style.css',\n            },\n          ],\n        },\n        {\n          value: '/public/index.html',\n          label: 'index.html',\n        },\n      ],\n    },\n    {\n      value: '/.env',\n      label: '.env',\n    },\n    {\n      value: '/.gitignore',\n      label: '.gitignore',\n    },\n    {\n      value: '/README.md',\n      label: 'README.md',\n    },\n  ];\n\n  return (\n    <CheckboxTree\n      label=\"Show Expand All Example - Click the buttons on the right\"\n      nodes={nodes}\n      showExpandAll\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"only-leaf-checkboxes"},"Only Leaf Checkboxes"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onlyLeafCheckboxes")," prop to alter the tree such that checkboxes only show for leaf nodes. The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n              children: [\n                {\n                  value: '/app/Http/Controllers/WelcomeController.js',\n                  label: 'WelcomeController.js',\n                },\n              ],\n            },\n            {\n              value: '/app/Http/routes.js',\n              label: 'routes.js',\n            },\n          ],\n        },\n        {\n          value: '/app/Providers',\n          label: 'Providers',\n          children: [\n            {\n              value: '/app/Providers/EventServiceProvider.js',\n              label: 'EventServiceProvider.js',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      value: '/config',\n      label: 'config',\n      children: [\n        {\n          value: '/config/app.js',\n          label: 'app.js',\n        },\n        {\n          value: '/config/database.js',\n          label: 'database.js',\n        },\n      ],\n    },\n    {\n      value: '/public',\n      label: 'public',\n      children: [\n        {\n          value: '/public/assets/',\n          label: 'assets',\n          children: [\n            {\n              value: '/public/assets/style.css',\n              label: 'style.css',\n            },\n          ],\n        },\n        {\n          value: '/public/index.html',\n          label: 'index.html',\n        },\n      ],\n    },\n    {\n      value: '/.env',\n      label: '.env',\n    },\n    {\n      value: '/.gitignore',\n      label: '.gitignore',\n    },\n    {\n      value: '/README.md',\n      label: 'README.md',\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n  return (\n    <CheckboxTree\n      label=\"Only Leaf Checkboxes Example\"\n      nodes={nodes}\n      checked={checked}\n      allExpanded\n      onlyLeafCheckboxes\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"check-model"},"Check Model"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"checkModel")," prop to especify which checked nodes should be stored in the checked array. Possible values are ",(0,r.kt)("inlineCode",{parentName:"p"},"leaf")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"all"),"; when it is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"leaf"),", only checked leaf nodes will be stored in the checked array (no parents), while ",(0,r.kt)("inlineCode",{parentName:"p"},"all")," will contain all checked nodes. The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"leaf"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app - Click me to see that only leaf nodes are printed below',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n  return (\n    <React.Fragment>\n      <CheckboxTree\n        label=\"CheckModel Example - Leaf\"\n        nodes={nodes}\n        checked={checked}\n        onCheck={(checked) => setChecked(checked)}\n        allExpanded\n      />\n      <Text>Checked nodes: {checked.join(', ')}</Text>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app - Click me to see that all nodes are printed below',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n  return (\n    <React.Fragment>\n      <CheckboxTree\n        label=\"CheckModel Example - All\"\n        nodes={nodes}\n        checked={checked}\n        onCheck={(checked) => setChecked(checked)}\n        checkModel=\"all\"\n        allExpanded\n      />\n      <Text>Checked nodes: {checked.join(', ')}</Text>\n    </React.Fragment>\n  );\n};\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={CheckboxTree}\n  rows={[\n    {\n      name: 'nodes',\n      type: 'array',\n      description: 'Required. Specifies the tree nodes and their children',\n    },\n    {\n      name: 'disabled',\n      type: 'bool',\n      description: 'Disables all nodes',\n    },\n    {\n      name: 'checkModel',\n      type: '\"leaf\" | \"all\"',\n      description:\n        'Specifies whether all checked nodes will be stored in the checked array, or just the leaf nodes',\n    },\n    {\n      name: 'checked',\n      type: 'array',\n      description: 'Specifies the checked nodes',\n    },\n    {\n      name: 'onlyLeafCheckboxes',\n      type: 'bool',\n      description: 'If true, checkboxes will only be shown for leaf nodes',\n    },\n    {\n      name: 'showExpandAll',\n      type: 'bool',\n      description: 'Show buttons for expanding and collapsing all nodes',\n    },\n    {\n      name: 'onClick',\n      type: 'function',\n      description: \"Callback fired everytime a node's label is clicked\",\n    },\n    {\n      name: 'onCheck',\n      type: 'function',\n      description: 'Callback fired everytime the a node is checked',\n    },\n    {\n      name: 'size',\n      type: 'string',\n      description: 'Set the height/width of the checkboxes',\n    },\n    {\n      name: 'allExpanded',\n      type: 'bool',\n      description:\n        'If true, the checkbox tree will be fully expanded and cannot be collapsed',\n    },\n    {\n      name: 'validators',\n      type: 'object',\n      description: 'Rules for checkbox validation',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Checkbox tree label',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Error message to be displayed below the label',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Text displayed below the label',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the label',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={CheckboxTree}\n  rows={[\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Required. Label of the node',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description: 'Required. Unique identifier of the node',\n    },\n    {\n      name: 'children',\n      type: 'array',\n      description: 'Child nodes of this node',\n    },\n    {\n      name: 'disabled',\n      type: 'bool',\n      description: 'Disables the node',\n    },\n    {\n      name: 'showCheckbox',\n      type: 'bool',\n      description: 'Shows the checkbox next to the node',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={CheckboxTree}\n  rows={[\n    {\n      name: 'expand-collapse-all-container',\n      description: 'Collapse container',\n    },\n    {\n      name: 'expand-all-btn',\n      description: 'Expand All button',\n    },\n    {\n      name: 'collapse-all-btn',\n      description: 'Collapse All button',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={CheckboxTree}\n  rows={[\n    {\n      name: 'checkbox-tree-tree-node',\n      description: 'Checkbox tree node',\n    },\n    {\n      name: 'checkbox-tree-expand-all-container',\n      description: 'Checkbox tree expand container',\n    },\n    {\n      name: 'checkbox-tree-expand-all-icon',\n      description: 'Checkbox tree icon element',\n    },\n    {\n      name: 'checkbox-tree-label',\n      description: 'Label element',\n    },\n    {\n      name: 'checkbox-tree-descriptors',\n      description: 'Descriptor element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={CheckboxTree}\n  rows={[\n    {\n      name: 'checkbox-node-label',\n      description: 'Checkbox node label element',\n    },\n    {\n      name: 'select-input-icon-container',\n      description: 'Icon container',\n    },\n    {\n      name: 'bare-node-label',\n      description: 'Node label element',\n    },\n    {\n      name: 'expand-button-container',\n      description: 'Expand button Container',\n    },\n    {\n      name: 'expand-button-icon',\n      description: 'Expand Button Icon',\n    },\n\n    ,\n  ]}\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Space',\n      description:\n        'When the checkbox has focus, pressing the Space key changes the state of the checkbox.',\n    },\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to the checkbox item and can be used to move down the checkbox tree',\n    },\n  ]}\n/>\n"))))}b.isMDXComponent=!0},3905:(e,n,l)=>{l.d(n,{Zo:()=>c,kt:()=>h});var t=l(2784);function a(e,n,l){return n in e?Object.defineProperty(e,n,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[n]=l,e}function o(e,n){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),l.push.apply(l,t)}return l}function r(e){for(var n=1;n<arguments.length;n++){var l=null!=arguments[n]?arguments[n]:{};n%2?o(Object(l),!0).forEach((function(n){a(e,n,l[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):o(Object(l)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(l,n))}))}return e}function s(e,n){if(null==e)return{};var l,t,a=function(e,n){if(null==e)return{};var l,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)l=o[t],n.indexOf(l)>=0||(a[l]=e[l]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)l=o[t],n.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(a[l]=e[l])}return a}var i=t.createContext({}),p=function(e){var n=t.useContext(i),l=n;return e&&(l="function"==typeof e?e(n):r(r({},n),e)),l},c=function(e){var n=p(e.components);return t.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var l=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(l),h=a,b=u["".concat(i,".").concat(h)]||u[h]||d[h]||o;return l?t.createElement(b,r(r({ref:n},c),{},{components:l})):t.createElement(b,r({ref:n},c))}));function h(e,n){var l=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=l.length,r=new Array(o);r[0]=u;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var p=2;p<o;p++)r[p]=l[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,l)}u.displayName="MDXCreateElement"}}]);