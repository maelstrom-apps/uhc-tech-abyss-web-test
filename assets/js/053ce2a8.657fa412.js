"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[7391],{30876:(e,t,r)=>{r.d(t,{Zo:()=>i,kt:()=>g});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),u=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},i=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),m=u(r),g=a,d=m["".concat(p,".").concat(g)]||m[g]||c[g]||o;return r?n.createElement(d,l(l({ref:t},i),{},{components:r})):n.createElement(d,l({ref:t},i))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var u=2;u<o;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},47554:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>p,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>i});var n=r(7896),a=r(31461),o=(r(67294),r(30876)),l=["components"],s={id:"graphql-requests",title:"GraphQL Requests"},p=void 0,u={unversionedId:"developers/tutorials/graphql-requests",id:"developers/tutorials/graphql-requests",isDocsHomePage:!1,title:"GraphQL Requests",description:"---",source:"@site/docs/developers/tutorials/8-graphql-requests.md",sourceDirName:"developers/tutorials",slug:"/developers/tutorials/graphql-requests",permalink:"/developers/tutorials/graphql-requests",tags:[],version:"current",sidebarPosition:8,frontMatter:{id:"graphql-requests",title:"GraphQL Requests"},sidebar:"docs",previous:{title:"GraphQL Endpoints",permalink:"/developers/tutorials/graphql-endpoints"},next:{title:"Overview",permalink:"/parcels/overview"}},i=[{value:"Step 1: Running Your Full-Stack Application",id:"step-1-running-your-full-stack-application",children:[],level:3},{value:"Step 2: Create a Query Page",id:"step-2-create-a-query-page",children:[],level:3},{value:"Step 2: Creating A Client Query",id:"step-2-creating-a-client-query",children:[],level:3},{value:"Step 4: Querying From Your App",id:"step-4-querying-from-your-app",children:[],level:3},{value:"Step 5: Running Query On Webpage",id:"step-5-running-query-on-webpage",children:[],level:3}],c={toc:i};function m(e){var t=e.components,r=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," ",(0,o.kt)("br",null),"We would appreciate any feedback on our tutorial guide. If you are stuck at any time, make sure to contact the Abyss Admiral assigned to your team. If they cannot help, send a help request on our ",(0,o.kt)("a",{parentName:"p",href:"/contact-us/"},"Contact Page"),"."),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Before starting, be sure to complete the ",(0,o.kt)("a",{parentName:"p",href:"/developers/tutorials/create-abyss-app/"},"Create Abyss App")," tutorial."),(0,o.kt)("h3",{id:"step-1-running-your-full-stack-application"},"Step 1: Running Your Full-Stack Application"),(0,o.kt)("p",null,"Make sure you have completed all previous tutorial pages successfully. ",(0,o.kt)("a",{parentName:"p",href:"/developers/tutorials/create-graphql-api/"},"Create GraphQL API")," is a prerequisite to this tutorial and must be completed beforehand."),(0,o.kt)("p",null,"In your Terminal, navigate into the ",(0,o.kt)("strong",{parentName:"p"},"my-new-app")," folder. Once there, run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")),(0,o.kt)("p",null,"This command will start parallel servers for both the Web & API products on your localhost."),(0,o.kt)("h3",{id:"step-2-create-a-query-page"},"Step 2: Create a Query Page"),(0,o.kt)("p",null,"In Visual Studio Code, open ",(0,o.kt)("strong",{parentName:"p"},"my-new-app")," project. From here, navigate into ",(0,o.kt)("strong",{parentName:"p"},"products/web/src/routes"),", and create a new folder, name ",(0,o.kt)("strong",{parentName:"p"},'"QueryPage"'),". Within this new folder, we'll be creating two new files, named ",(0,o.kt)("strong",{parentName:"p"},'"index.js"')," and ",(0,o.kt)("strong",{parentName:"p"},'"QueryPage.jsx"'),"."),(0,o.kt)("p",null,"Remember to connect your page to the router in ",(0,o.kt)("strong",{parentName:"p"},"products/web/src/routes/Routes.jsx")," by including a new Route shown below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Router.Route path="/query-page" element={<QueryPage />} />\n')),(0,o.kt)("p",null,"You may reference the ",(0,o.kt)("a",{parentName:"p",href:"/developers/tutorials/page-routing/"},"Page Routing")," tutorial for more information on creating pages."),(0,o.kt)("h3",{id:"step-2-creating-a-client-query"},"Step 2: Creating A Client Query"),(0,o.kt)("p",null,"A query fetches requested data from the API server. In order to receive information on certain data we want from our GraphQL API, we must create a query from our web client."),(0,o.kt)("p",null,"In this step, we are using the previous built query from our Apollo sandbox in order to search and receive the data being requested. By using the ",(0,o.kt)("strong",{parentName:"p"},"msid")," as an ID variable for our query, we should be able to retrieve a person's name, email, company, and location."),(0,o.kt)("p",null,"Navigate to ",(0,o.kt)("strong",{parentName:"p"},"products/web/src"),". Create a folder named ",(0,o.kt)("strong",{parentName:"p"},'"hooks"')," in the ",(0,o.kt)("strong",{parentName:"p"},"src")," folder. In your newly created ",(0,o.kt)("strong",{parentName:"p"},"hooks")," folder, create a folder called ",(0,o.kt)("strong",{parentName:"p"},'"usePersonSearch"'),". In the ",(0,o.kt)("strong",{parentName:"p"},"usePersonSearch")," folder, create the following files: ",(0,o.kt)("strong",{parentName:"p"},'"GetPerson.gql"'),", ",(0,o.kt)("strong",{parentName:"p"},'"index.js"')," and ",(0,o.kt)("strong",{parentName:"p"},'"usePersonSearch.js"'),"."),(0,o.kt)("p",null,"Insert the following code in the ",(0,o.kt)("strong",{parentName:"p"},"GetPerson.gql")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"query Person($personId: ID!) {\n  person(msid: $personId) {\n    name\n    email\n    company\n    location\n  }\n}\n")),(0,o.kt)("p",null,"Insert the following code in the ",(0,o.kt)("strong",{parentName:"p"},"index.js")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"export { usePersonSearch } from './usePersonSearch';\n")),(0,o.kt)("p",null,"Insert the following code in the ",(0,o.kt)("strong",{parentName:"p"},"usePersonSearch.js")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { useQuery } from '@abyss/web/hooks/useQuery';\nimport GetPerson from './GetPerson.gql';\n\nexport const usePersonSearch = (options) => {\n  return useQuery(GetPerson, {\n    ...options,\n    url: '/api/graphql',\n    accessor: 'person',\n    initialState: {\n      name: '',\n      email: '',\n      company: '',\n      location: '',\n    },\n  });\n};\n")),(0,o.kt)("h3",{id:"step-4-querying-from-your-app"},"Step 4: Querying From Your App"),(0,o.kt)("p",null,"Now, we will be calling the query from within our application. We will be integrating a submit button and search box to run our query search."),(0,o.kt)("p",null,"Navigate to ",(0,o.kt)("strong",{parentName:"p"},"products/web/src/routes/QueryPage/QueryPage.jsx"),". Replace the current code in ",(0,o.kt)("strong",{parentName:"p"},"QueryPage.jsx")," with the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState } from 'react';\nimport { Button } from '@abyss/web/ui/Button';\nimport { TextInput } from '@abyss/web/ui/TextInput';\nimport { usePersonSearch } from '@src/hooks/usePersonSearch';\n\nexport const QueryPage = () => {\n  const [searchValue, setSearchValue] = useState();\n  const [personSearchResult, getPersonSearch] = usePersonSearch();\n  const { person } = personSearchResult.data;\n\n  const handleSearch = () => {\n    getPersonSearch({\n      variables: {\n        personId: searchValue,\n      },\n    });\n  };\n\n  const handleChange = (e) => {\n    setSearchValue(e.target.value);\n  };\n\n  return (\n    <React.Fragment>\n      <TextInput\n        label=\"Search MSID\"\n        value={searchValue}\n        onChange={handleChange}\n      />\n      <Button onClick={handleSearch}>Search</Button>\n      <ul>\n        <li>Name: {person?.name}</li>\n        <li>Email: {person?.email}</li>\n        <li>Company: {person?.company}</li>\n        <li>Location: {person?.location}</li>\n      </ul>\n    </React.Fragment>\n  );\n};\n")),(0,o.kt)("h3",{id:"step-5-running-query-on-webpage"},"Step 5: Running Query On Webpage"),(0,o.kt)("p",null,"Your page should look like this. Insert your ",(0,o.kt)("strong",{parentName:"p"},"msid")," in the text input box, then click the ",(0,o.kt)("strong",{parentName:"p"},"Search")," button to run the query and get the relevant data."),(0,o.kt)("center",null,(0,o.kt)("img",{src:"/img/graphics/Connect_GraphQL_API.png",alt:"drawing",width:"600"})," "),(0,o.kt)("br",null),(0,o.kt)("p",null,"Great job, you have successfully connected to a GraphQL API!"),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Congratulations! You have completed all the tutorials and are an Abyss expert. You are ready to venture off on your own Abyss path and start your journey!")),(0,o.kt)("hr",null))}m.isMDXComponent=!0}}]);