"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[4678],{75116:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var r=n(7896),a=n(31461),i=(n(2784),n(3905)),o=["components"],s={id:"breadcrumbs",category:"Navigation",title:"Breadcrumbs",description:"Used to separate nodes and assist navigation.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A999",pagination_prev:"web/ui/action-nav",pagination_next:"web/ui/button"},l=void 0,c={unversionedId:"web/ui/breadcrumbs",id:"web/ui/breadcrumbs",isDocsHomePage:!1,title:"Breadcrumbs",description:"Used to separate nodes and assist navigation.",source:"@site/docs/web/ui/Breadcrumbs.md",sourceDirName:"web/ui",slug:"/web/ui/breadcrumbs",permalink:"/web/ui/breadcrumbs",tags:[],version:"current",frontMatter:{id:"breadcrumbs",category:"Navigation",title:"Breadcrumbs",description:"Used to separate nodes and assist navigation.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A999",pagination_prev:"web/ui/action-nav",pagination_next:"web/ui/button"},sidebar:"docs",previous:{title:"ActionNav",permalink:"/web/ui/action-nav"},next:{title:"Button",permalink:"/web/ui/button"}},d=[{value:"Usage",id:"usage",children:[],level:2},{value:"Comparator",id:"comparator",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Space",id:"space",children:[],level:2}],u=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)}},m=u("Tab"),p=u("ExitLink"),b={toc:d};function g(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(m,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Breadcrumbs } from '@abyss/web/ui/Breadcrumbs';\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Integrate Breadcrumbs with Router by using Links and Router Routes. The breadcrumbs will know what breadcrumb items to display based on the URL of the current location."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const Page = ({ title }) => {\n    return (\n      <div>\n        <Router.MetaTags>\n          <title>{title}</title>\n          <meta name=\"description\" content={title + 'Page'} />\n        </Router.MetaTags>\n        <Heading css={{ 'abyss-heading-root': { margin: '16px 0px' } }}>\n          {title} Page\n        </Heading>\n      </div>\n    );\n  };\n\n  return (\n    <RouterProvider type=\"memory\">\n      <React.Fragment>\n        <Breadcrumbs\n          divider=\"/\"\n          items={[\n            { title: 'Home', href: '/' },\n            { title: 'Getting Started', href: '/getting-started/' },\n            { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n          ]}\n        />\n\n        <Router.Routes>\n          <Router.Route path=\"/\" element={<Page title=\"Home\" />} />\n          <Router.Route\n            path=\"/getting-started/\"\n            element={<Page title=\"Getting Started\" />}\n          />\n          <Router.Route\n            path=\"/web/ui/breadcrumbs/\"\n            element={<Page title=\"Breadcrumbs\" />}\n          />\n        </Router.Routes>\n        <Card>\n          <Card.Title>\n            Click on these links to mimic the use of breadcrumb navigation{' '}\n          </Card.Title>\n          <Card.Section>\n            <ul style={{ display: 'inline-flex' }}>\n              <li style={{ marginRight: '15px' }}>\n                <Link href=\"/\">Home Page</Link>\n              </li>\n              <li style={{ marginRight: '15px' }}>\n                <Link href=\"/getting-started/\">Getting Started</Link>\n              </li>\n              <li style={{ marginRight: '15px' }}>\n                <Link href=\"/web/ui/breadcrumbs/\">Breadcrumbs</Link>\n              </li>\n            </ul>\n          </Card.Section>\n        </Card>\n      </React.Fragment>\n    </RouterProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"comparator"},"Comparator"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"comparator")," prop takes in a custom callback function to directly handle the determination of what breadcrumbs are displayed. This function is called as part of a ",(0,i.kt)("inlineCode",{parentName:"p"},"findIndex()")," loop through the breadcrumb items and includes two arguments, the breadcrumb item href and current location object. This function must return a value of ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,"Note: if this prop is not utilized the default comparison is between the breadcrumb item href and the current location pathname."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const Page = ({ title }) => {\n    return (\n      <div>\n        <Router.MetaTags>\n          <title>{title}</title>\n          <meta name=\"description\" content={title + 'Page'} />\n        </Router.MetaTags>\n        <Heading css={{ 'abyss-heading-root': { margin: '16px 0px' } }}>\n          {title} Page\n        </Heading>\n      </div>\n    );\n  };\n\n  const customComparator = (href, location) => {\n    console.log('breadcrumb item href', href);\n    console.log('current location object', location);\n    return href.includes(location.hash) && href.includes(location.pathname);\n  };\n\n  return (\n    <RouterProvider type=\"memory\">\n      <React.Fragment>\n        <Breadcrumbs\n          divider=\"/\"\n          items={[\n            { title: 'Home', href: '/' },\n            { title: 'Getting Started', href: '/getting-started/' },\n            { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs#space' },\n          ]}\n          comparator={customComparator}\n        />\n\n        <Router.Routes>\n          <Router.Route path=\"/\" element={<Page title=\"Home\" />} />\n          <Router.Route\n            path=\"/getting-started/\"\n            element={<Page title=\"Getting Started\" />}\n          />\n          <Router.Route\n            path=\"/web/ui/breadcrumbs/\"\n            element={<Page title=\"Breadcrumbs\" />}\n          />\n        </Router.Routes>\n        <Card>\n          <Card.Title>\n            Click on these links to mimic the use of breadcrumb navigation{' '}\n          </Card.Title>\n          <Card.Section>\n            <ul style={{ display: 'inline-flex' }}>\n              <li style={{ marginRight: '15px' }}>\n                <Link href=\"/\">Home Page</Link>\n              </li>\n              <li style={{ marginRight: '15px' }}>\n                <Link href=\"/getting-started/\">Getting Started</Link>\n              </li>\n              <li style={{ marginRight: '15px' }}>\n                <Link href=\"/web/ui/breadcrumbs#space\">Breadcrumbs</Link>\n              </li>\n            </ul>\n          </Card.Section>\n        </Card>\n      </React.Fragment>\n    </RouterProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," prop to change the overall size of the breadcrumb."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <React.Fragment>\n      <Breadcrumbs\n        divider=\"/\"\n        size=\"$sm\"\n        items={[\n          { title: 'Home', href: '/' },\n          {\n            title: 'Getting Started',\n            href: '/developers/getting-started/',\n          },\n          { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n        ]}\n      />\n      <Breadcrumbs\n        size=\"$md\"\n        items={[\n          { title: 'Home', href: '/' },\n          {\n            title: 'Getting Started',\n            href: '/developers/getting-started/',\n          },\n          { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n        ]}\n      />\n      <Breadcrumbs\n        size=\"$lg\"\n        items={[\n          { title: 'Home', href: '/' },\n          {\n            title: 'Getting Started',\n            href: '/developers/getting-started/',\n          },\n          { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n        ]}\n      />\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"space"},"Space"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"space")," prop to add space between the nodes and divider."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <Breadcrumbs\n    items={[\n      { title: 'Home', href: '/' },\n      { title: 'Getting Started', href: '/developers/getting-started/' },\n      { title: 'Breadcrumbs', href: '/web/ui/Breadcrumbs/' },\n    ]}\n  />\n  <Breadcrumbs\n    space=\"16px\"\n    items={[\n      { title: 'Home', href: '/' },\n      { title: 'Getting Started', href: '/developers/getting-started/' },\n      { title: 'Breadcrumbs', href: '/web/ui/Breadcrumbs/' },\n    ]}\n  />\n  <Breadcrumbs\n    space=\"24px\"\n    items={[\n      { title: 'Home', href: '/' },\n      { title: 'Getting Started', href: '/developers/getting-started/' },\n      { title: 'Breadcrumbs', href: '/web/ui/Breadcrumbs/' },\n    ]}\n  />\n</React.Fragment>\n"))),(0,i.kt)(m,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Breadcrumbs}\n  rows={[\n    {\n      name: 'items',\n      type: 'array[shape]',\n      description:\n        'List of the individual breadcrumb items. { title: string, href: string }',\n    },\n    {\n      name: 'divider',\n      type: 'ReactNode | string',\n      description: 'Used to separate breadcrumb items',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the breadcrumbs',\n    },\n    {\n      name: 'sizes',\n      type: 'object',\n      description: 'Default size options of the breadcrumbs',\n    },\n    {\n      name: 'space',\n      type: 'number | string',\n      description: 'Set the space between breadcrumbs',\n    },\n    {\n      name: 'comparator',\n      type: 'function',\n      description:\n        'Callback function used to determine which breadcrumbs should be displayed',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Breadcrumbs}\n  rows={[\n    {\n      name: 'breadcrumbs-root',\n      description: 'Breadcrumbs List root element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(m,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"A breadcrumb trail consists of a list of links to the parent pages of the current page in hierarchical order. It helps users find their place within a website or web application. Breadcrumbs are often placed horizontally before a page's main content."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(p,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#breadcrumb",mdxType:"ExitLink"},"Breadcrumb WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <Breadcrumbs\n      divider=\"/\"\n      items={[\n        { title: 'Home', href: '/' },\n        { title: 'Getting Started', href: '/developers/getting-started/' },\n        { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n      ]}\n    />\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Not Applicable',\n      description: 'Not Applicable',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),p=a,b=m["".concat(l,".").concat(p)]||m[p]||u[p]||i;return n?r.createElement(b,o(o({ref:t},d),{},{components:n})):r.createElement(b,o({ref:t},d))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);