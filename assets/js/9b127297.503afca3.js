"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[3688],{86612:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var i=t(7896),r=t(31461),a=(t(2784),t(3905)),o=["components"],l={id:"alert",category:"Feedback",title:"Alert",description:"Provides a brief message about the app processes.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A985",pagination_prev:"web/ui/table",pagination_next:"web/ui/progress-bar"},s=void 0,c={unversionedId:"web/ui/alert",id:"web/ui/alert",isDocsHomePage:!1,title:"Alert",description:"Provides a brief message about the app processes.",source:"@site/docs/web/ui/Alert.md",sourceDirName:"web/ui",slug:"/web/ui/alert",permalink:"/web/ui/alert",tags:[],version:"current",frontMatter:{id:"alert",category:"Feedback",title:"Alert",description:"Provides a brief message about the app processes.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A985",pagination_prev:"web/ui/table",pagination_next:"web/ui/progress-bar"},sidebar:"docs",previous:{title:"Table",permalink:"/web/ui/table"},next:{title:"ProgressBar",permalink:"/web/ui/progress-bar"}},p=[{value:"Children",id:"children",children:[],level:2},{value:"Variants",id:"variants",children:[],level:2},{value:"Change Icon",id:"change-icon",children:[],level:2},{value:"Hide Icon",id:"hide-icon",children:[],level:2},{value:"Title",id:"title",children:[],level:2},{value:"Icon Screen Readable and Icon Title",id:"icon-screen-readable-and-icon-title",children:[],level:2},{value:"Inline Text",id:"inline-text",children:[],level:2},{value:"onClose",id:"onclose",children:[],level:2},{value:"onAction",id:"onaction",children:[],level:2},{value:"actionHref",id:"actionhref",children:[],level:2},{value:"Error Code",id:"error-code",children:[],level:2},{value:"Timezone",id:"timezone",children:[{value:"Meaningful or Control Icons",id:"meaningful-or-control-icons",children:[],level:4},{value:"Decorative Icons",id:"decorative-icons",children:[],level:4},{value:"Close Button Guidance",id:"close-button-guidance",children:[],level:4}],level:2}],d=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)}},u=d("Tab"),m=d("ExitLink"),h={toc:p};function g(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(u,{label:"Overview",mdxType:"Tab"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Alert } from '@abyss/web/ui/Alert';\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Alert',\n  inputs: [\n    {\n      prop: 'title',\n      type: 'string',\n    },\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'inlineText',\n      type: 'string',\n    },\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'error', value: 'error' },\n        { label: 'success', value: 'success' },\n        { label: 'info', value: 'info' },\n        { label: 'warning', value: 'warning' },\n      ],\n    },\n    {\n      prop: 'hideIcon',\n      type: 'boolean',\n    },\n  ]\n}\n\n<Alert title=\"Alert Sandbox Title\" variant=\"success\">\n  Alert Sandbox Content\n</Alert>\n")),(0,a.kt)("h2",{id:"children"},"Children"),(0,a.kt)("p",null,"Add Children to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Alert")," component by simply placing elements between the ",(0,a.kt)("inlineCode",{parentName:"p"},"Alert")," tags. Children should be used for adding description text or any additional content you'd like to display below the title."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert title="Alert With Children" variant="success">\n  Description text or whatever additional content you\u2019d like to display below\n  the title goes here.\n</Alert>\n')),(0,a.kt)("h2",{id:"variants"},"Variants"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"variant")," property to change the style of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Alert"),". Available variants include ",(0,a.kt)("inlineCode",{parentName:"p"},"'error'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'success'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'warning'")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"'info'"),". The default is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"'error'")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack grow>\n  <Alert title="Error Alert" />\n  <Alert title="Success Alert" variant="success" />\n  <Alert title="Info Alert" variant="info" />\n  <Alert title="Warning Alert" variant="warning" />\n</Layout.Stack>\n')),(0,a.kt)("h2",{id:"change-icon"},"Change Icon"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"icon")," property to pass in a specific ",(0,a.kt)("inlineCode",{parentName:"p"},"Icon")," component."),(0,a.kt)("p",null,"If the icon is being used in a setting in which it is just a decorative element (which is the default case for icons), then the icon should be ignored by screen readers. The implementation below provides an example of a situation that would be classified as decorative. Since the default of ",(0,a.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," is set to false no specific changes need to be made for decorative icons. Find further guidance on material icons in the ",(0,a.kt)("a",{parentName:"p",href:"/web/ui/icon-material"},"Material Icons Tab"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert\n  icon={<IconMaterial icon="search" />}\n  title="Search Information"\n  variant="info"\n  onClose={() => {}}\n/>\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,"If the icon is being used in a setting where it is the only element providing meaning, then that same meaning should be conveyed to screen reader users. The implementation below provides an example in which the property ",(0,a.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," should be set to true and the ",(0,a.kt)("inlineCode",{parentName:"p"},"title")," property is required and should describe the purpose of the image. Find further guidance on material icons in the ",(0,a.kt)("a",{parentName:"p",href:"/web/ui/icon-material"},"Material Icons Tab"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert\n  icon={\n    <IconMaterial icon="search" isScreenReadable={true} title="Search Info" />\n  }\n  title="Text"\n  variant="info"\n  onClose={() => {}}\n/>\n')),(0,a.kt)("h2",{id:"hide-icon"},"Hide Icon"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"hideIcon")," property to disable the ",(0,a.kt)("inlineCode",{parentName:"p"},"Template"),". The default is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert hideIcon title="Icon Hidden" />\n')),(0,a.kt)("h2",{id:"title"},"Title"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"title")," property to set the title for the alert."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert title="Error" />\n')),(0,a.kt)("h2",{id:"icon-screen-readable-and-icon-title"},"Icon Screen Readable and Icon Title"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"isIconScreenReadable")," property to make the alert variant icon discoverable by assistive technology. The ",(0,a.kt)("inlineCode",{parentName:"p"},"isIconScreenReable")," property should be used if the meaning of the alert is not given using adjacent text, and the decorative variant icon becomes meaningful."),(0,a.kt)("p",null,"If the variant icon becomes meaningful, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"iconTitle")," property to set a title for the variant icon that conveys the meaning or content that is displayed visually.\nFor more information on meaningful and decorative icons can be found under the accessibility tab."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack grow>\n  <Alert\n    isIconScreenReadable={true}\n    iconTitle="error loading content"\n    title="Nondescript Title"\n  />\n  <Alert\n    isIconScreenReadable={true}\n    iconTitle="Server maintenance"\n    title="Nondescript Title"\n    variant="warning"\n  />\n</Layout.Stack>\n')),(0,a.kt)("h2",{id:"inline-text"},"Inline Text"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"inlineText")," property to utilize a single line alert. ",(0,a.kt)("inlineCode",{parentName:"p"},"inlineText")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"children")," cannot be used in conjunction."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert title="Inline Text" inlineText="Alert with inline text" />\n')),(0,a.kt)("h2",{id:"onclose"},"onClose"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"onClose")," property to handle the action when close button is triggered. The ",(0,a.kt)("inlineCode",{parentName:"p"},"onClose")," property is always required."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isVisible, setIsVisible] = useState(true);\n  const buttonRef = useRef();\n  const toggleVisibility = () => {\n    setIsVisible(!isVisible);\n  };\n  return (\n    <Layout.Stack grow>\n      <Button onClick={toggleVisibility} ref={buttonRef}>\n        Toggle Alert\n      </Button>\n      <Alert\n        title="Alert With onClose Function"\n        isVisible={isVisible}\n        onClose={() => {\n          setIsVisible(false);\n          if (buttonRef.current) {\n            buttonRef.current.focus();\n          }\n        }}\n      />\n    </Layout.Stack>\n  );\n};\n')),(0,a.kt)("h2",{id:"onaction"},"onAction"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"onAction")," property to handle a custom event when the action button is triggered. Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"actionText")," property to set the text inside the action button."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert\n  title="Warning with Action Button"\n  variant="warning"\n  onAction={() => {\n    console.log(\'Action Triggered\');\n  }}\n  onClose={() => {\n    console.log(\'Close Triggered\');\n  }}\n  actionText="Custom Action"\n  inlineText="Action button with custom event"\n/>\n')),(0,a.kt)("h2",{id:"actionhref"},"actionHref"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"actionHref")," property to link away to another page when it is clicked. Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"actionText")," property to set the text inside the action link. When using an href if the link is external or the ",(0,a.kt)("inlineCode",{parentName:"p"},"openNewWindow")," prop is set to true the action link will open in a new window."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack grow>\n  <Alert\n    title="Success with Action Button"\n    variant="success"\n    actionHref="/overview"\n    actionText="Link"\n    inlineText="Action button with link"\n    onClose={() => {\n      console.log(\'Close Triggered\');\n    }}\n  />\n  <Alert\n    title="Success with Action Button"\n    variant="success"\n    actionHref="https://www.google.com"\n    actionText="Link"\n    inlineText="Action button with link open in new window"\n    onClose={() => {\n      console.log(\'Close Triggered\');\n    }}\n  />\n</Layout.Stack>\n')),(0,a.kt)("h2",{id:"error-code"},"Error Code"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"errorCode")," property to display an error code that is appended with the current date/time."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert errorCode="404" title="Error" />\n')),(0,a.kt)("h2",{id:"timezone"},"Timezone"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"timezone")," property to change the timezone of the alert timestamp. The default is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"'America/Chicago'"),". A comprehensive list of valid timezones can be found ",(0,a.kt)(m,{href:"https://www.iplocate.com/en/resources/timezones",mdxType:"ExitLink"},"here"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack grow>\n  <Alert\n    title="Alert With America/Chicago Timezone (Default)"\n    errorCode="404"\n  />\n  <Alert\n    timezone="Europe/London"\n    title="Alert With Europe/London Timezone"\n    errorCode="404"\n  />\n  <Alert\n    timezone="America/New_York"\n    title="Alert With America/New_York Timezone"\n    errorCode="404"\n  />\n</Layout.Stack>\n'))),(0,a.kt)(u,{label:"Integration",mdxType:"Tab"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Alert}\n  rows={[\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Sets the tile for the alert',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the alert component',\n    },\n    {\n      name: 'variant',\n      type: \"'info' | 'success' | 'error' | 'warning'\",\n      description: 'Change the alert style',\n    },\n    {\n      name: 'timezone',\n      type: 'string',\n      description: 'Set the timezone for the errorCode message date/time',\n    },\n    {\n      name: 'errorCode',\n      type: 'string',\n      description:\n        'Set the error code to be displayed in the alert. Current date/time is appended to errorCode',\n    },\n    {\n      name: 'onClose',\n      type: 'function',\n      description: 'Callback fired when the alert is closed, always required',\n    },\n    {\n      name: 'onAction',\n      type: 'function',\n      description: 'Callback fired when the alert is closed',\n    },\n    {\n      name: 'actionText',\n      type: 'string',\n      description: 'Set the onAction text',\n    },\n    {\n      name: 'actionHref',\n      type: 'string',\n      description: 'Set link to route onAction',\n    },\n    {\n      name: 'openNewWindow',\n      type: 'bool',\n      description: 'Flag to have links open in a new window',\n    },\n    {\n      name: 'inlineText',\n      type: 'string',\n      description: 'Set the inline text to utilize a single line alert',\n    },\n    {\n      name: 'icon',\n      type: 'ReactNode',\n      description: 'Change the default icon',\n    },\n    {\n      name: 'hideIcon',\n      type: 'boolean',\n      description: 'Flag to show or hide icon',\n    },\n    {\n      name: 'isVisible',\n      type: 'boolean',\n      description: 'Flag to show or hide Alert',\n    },\n    {\n      name: 'openNewWindow',\n      type: 'bool',\n      description: 'Flag to have links open in a new window',\n    },\n    {\n      name: 'ariaLive',\n      type: \"'polite' | 'assertive' \",\n      description:\n        'Sets the priority with which screen reader should treat updates to live regions',\n    },\n    {\n      name: 'isIconScreenReadable',\n      type: 'bool',\n      description:\n        'Indicate whether the icon is screen readable or not. If the icon is Screen Readable, then provide an iconTitle',\n    },\n    {\n      name: 'iconTitle',\n      type: 'string'\n        'set the title for the icon variant when using isIconScreenReadable',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Alert.Title}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the alert title component',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Alert.Icon}\n  rows={[\n    {\n      name: 'variant',\n      type: \"'info' | 'success' | 'error' | 'warning'\",\n      description: 'Change the alert style',\n      default: '-',\n    },\n    {\n      name: 'variants',\n      type: 'object',\n      description: 'Default variant styles',\n    },\n    {\n      name: 'size',\n      type: 'number',\n      description: 'Size of the icon',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Alert}\n  rows={[\n    {\n      name: 'alert-root',\n      description: 'Alert root element',\n    },\n    {\n      name: 'alert-container',\n      description: 'Alert element container',\n    },\n    {\n      name: 'alert-header-container',\n      description: 'Header element container',\n    },\n    {\n      name: 'alert-header-section',\n      description: 'Alert header element',\n    },\n    {\n      name: 'alert-header-text-container',\n      description: 'Alert text container for title and inline text',\n    },\n    {\n      name: 'alert-title',\n      description: 'Alert title',\n    },\n    {\n      name: 'alert-inline-text',\n      description: 'Alert inline text element',\n    },\n    {\n      name: 'alert-body',\n      description: 'Alert body element',\n    },\n    {\n      name: 'alert-icon-container',\n      description: 'Icon element container',\n    },\n    {\n      name: 'alert-timestamp',\n      description: 'Timestamp',\n    },\n    {\n      name: 'alert-close-button',\n      description: 'Close button',\n    },\n    {\n      name: 'alert-action-button',\n      description: 'Action button',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Alert.Title}\n  rows={[\n    {\n      name: 'alert-title-section',\n      description: 'Title element',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Alert.Icon}\n  rows={[\n    {\n      name: 'alert-icon',\n      description: 'Icon element',\n    },\n  ]}\n/>\n"))),(0,a.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,a.kt)("p",null,"An alert is an element that displays a brief, important message in a way that attracts the user's attention without interrupting the user's task. Dynamically rendered alerts are automatically announced by most screen readers, and in some operating systems, they may trigger an alert sound. It is important to note that, at this time, screen readers do not inform users of alerts that are present on the page before page load completes."),(0,a.kt)("p",null,"Adheres to the ",(0,a.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#alert",mdxType:"ExitLink"},"Alert WAI-ARIA design pattern"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack grow>\n  <Alert title="Error Alert" variant="error" onClose={() => {}} />\n  <Alert title="Success Alert" variant="success" onClose={() => {}} />\n  <Alert title="Info Alert" variant="info" onClose={() => {}} />\n  <Alert title="Warning Alert" variant="warning" onClose={() => {}} />\n</Layout.Stack>\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description: 'Puts focus on the Button inside of the Alert',\n    },\n    {\n      name: 'Enter',\n      description:\n        'When focus is on the Button, pressing enter will press the button inside the alert',\n    },\n    {\n      name: 'Space',\n      description:\n        'When focus is on the Button, pressing space will press the button inside the alert',\n    },\n  ]}\n/>\n")),(0,a.kt)("h4",{id:"meaningful-or-control-icons"},"Meaningful or Control Icons"),(0,a.kt)("p",null,"In the alert below, the icon conveys information that is not conveyed by title text. The icon is considered meaningful (not decorative) and must have a text alternative."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert title="There is a bug!" variant="error" />\n')),(0,a.kt)("h4",{id:"decorative-icons"},"Decorative Icons"),(0,a.kt)("p",null,"In the alert below, since these is sufficient text next to the icon, the icon is considered decorative and and does not need to be exposed to assistive technology."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert title="Warning Alert" variant="warning" />\n')),(0,a.kt)("h4",{id:"close-button-guidance"},"Close Button Guidance"),(0,a.kt)("p",null,"Keyboard operation: if the \u201cclose\u201d button is used on the alert, it must be keyboard accessible. A keyboard only user must be able to tab to the button, and activate it with the space bar and the enter key. When the alert is closed, focus must be placed back to the element that caused it to open or where it previously was on the page."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert title="Alert With Close Button" onClose={() => {}} />\n')),(0,a.kt)("p",null,"Note: per the WAI ARIA specification, when the \u201calert\u201d role is used, the user should not be required to close the alert. In this case, it is assumed that the close button is provided as a convenience and the user is not explicitly required to close the alert.")))}g.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var i=t(2784);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return t?i.createElement(h,o(o({ref:n},p),{},{components:t})):i.createElement(h,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);