"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[1514],{81952:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>u,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=t(7896),r=t(31461),i=(t(2784),t(3905)),o=["components"],l={id:"number-input",category:"Forms",title:"NumberInput",description:"Allows users to enter a number into a UI.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Web?node-id=27439%3A98953&t=Iu5BWycxQYfuWOkt-0",pagination_prev:"web/ui/file-upload",pagination_next:"web/ui/radio-group"},u=void 0,s={unversionedId:"web/ui/number-input",id:"web/ui/number-input",isDocsHomePage:!1,title:"NumberInput",description:"Allows users to enter a number into a UI.",source:"@site/docs/web/ui/NumberInput.md",sourceDirName:"web/ui",slug:"/web/ui/number-input",permalink:"/web/ui/number-input",tags:[],version:"current",frontMatter:{id:"number-input",category:"Forms",title:"NumberInput",description:"Allows users to enter a number into a UI.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Web?node-id=27439%3A98953&t=Iu5BWycxQYfuWOkt-0",pagination_prev:"web/ui/file-upload",pagination_next:"web/ui/radio-group"},sidebar:"docs",previous:{title:"FileUpload",permalink:"/web/ui/file-upload"},next:{title:"RadioGroup",permalink:"/web/ui/radio-group"}},p=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Step Value",id:"step-value",children:[],level:2},{value:"Min and Max Values",id:"min-and-max-values",children:[],level:2},{value:"Validation",id:"validation",children:[],level:2},{value:"Mask Config",id:"mask-config",children:[],level:2},{value:"Decimal Step Value",id:"decimal-step-value",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Highlighted",id:"highlighted",children:[],level:2}],m=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},d=m("Tab"),c=m("ExitLink"),b={toc:p};function g(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(d,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { NumberInput } from '@abyss/web/ui/NumberInput';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'NumberInput',\n  inputs: [\n    {\n      prop: 'errorMessage',\n      type: 'string',\n    },\n    {\n      prop: 'stepValue',\n      type: 'number',\n    },\n    {\n      prop: 'minValue',\n      type: 'number',\n      defaultValue: '0'\n    },\n    {\n      prop: 'maxValue',\n      type: 'number',\n      defaultValue: '10'\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n  ]\n}\n\n() => {\n  const [value, setValue] = useState('5');\n\n  return (\n    <NumberInput\n      label=\"NumberInput Sandbox\"\n      value={value}\n      onChange={(e) => setValue(e)}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm")," hook for handling NumberInput lets the DOM handle form data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      numberForm: \'2\',\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <NumberInput\n        label="NumberInput useForm"\n        model="numberForm"\n        validators={{ required: true }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"usestate"},"useState"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('5');\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <NumberInput\n        label=\"NumberInput useState\"\n        value={value}\n        onChange={(e) => setValue(e)}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"step-value"},"Step Value"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"stepValue")," prop to increase and decrease the value by given step. The default value is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"1")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('0');\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <NumberInput\n        label=\"Step Value\"\n        value={value}\n        onChange={(e) => setValue(e)}\n        stepValue={4}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"min-and-max-values"},"Min and Max Values"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"minValue")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"maxValue")," props to apply min/max limits to the number input field. The default minValue is ",(0,i.kt)("inlineCode",{parentName:"p"},"-9007199254740991")," and maxValue is ",(0,i.kt)("inlineCode",{parentName:"p"},"9007199254740991"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('0');\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <NumberInput\n        label=\"Min/Max Value\"\n        value={value}\n        onChange={(e) => setValue(e)}\n        minValue={-5}\n        maxValue={5}\n      />\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"validation"},"Validation"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"validators")," prop to display a custom error message below the number input field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      numberErrorForm: \'\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <NumberInput\n        label="Custom Error"\n        model="numberErrorForm"\n        validators={{ required: \'Custom Error Message\' }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"mask-config"},"Mask Config"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"maskConfig")," prop to pass a masking configuration to the number input field. The default value for ",(0,i.kt)("inlineCode",{parentName:"p"},"thousandSeparator")," is ",(0,i.kt)("inlineCode",{parentName:"p"},",")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"decimalScale")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,i.kt)("p",null,"Please visit this ",(0,i.kt)(c,{href:"https://github.com/s-yadav/react-number-format/blob/master/documentation/v4.md",mdxType:"ExitLink"},"link")," for documentation on additional configuration settings."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('0.05');\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <NumberInput\n        label=\"Mask Config\"\n        value={value}\n        onChange={(e) => setValue(e)}\n        maskConfig={{\n          decimalScale: 2,\n        }}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"decimal-step-value"},"Decimal Step Value"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"decimalScale")," prop within ",(0,i.kt)("inlineCode",{parentName:"p"},"maskConfig")," and set to a value greater than ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," to allow decimal values within the number input field. The ",(0,i.kt)("inlineCode",{parentName:"p"},"stepValue")," prop can also be used to increase/decrease by decimal values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('0.75');\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <NumberInput\n        label=\"Decimal Step\"\n        value={value}\n        onChange={(e) => setValue(e)}\n        maskConfig={{\n          decimalScale: 2, //allow decimals and define limits to decimal scale\n          fixedDecimalScale: true, // add 0s to match given decimalScale\n        }}\n        stepValue={0.05}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"label"},"Label"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," prop to display a label above the input. To hide the input label set ",(0,i.kt)("inlineCode",{parentName:"p"},"hideLabel")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      'custom-label': '',\n      'custom-hidden-label': '',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <NumberInput label=\"Custom Label\" model=\"custom-label\" />\n      <NumberInput label=\"Hidden Label\" model=\"custom-hidden-label\" hideLabel />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\'0\');\n\n  const onSubmit = () => {\n    console.log(\'value\', value);\n  };\n\n  return (\n    <React.Fragment>\n      <NumberInput\n        value={value}\n        onChange={(e) => setValue(e)}\n        stepValue={4}\n        label="Descriptors Display"\n        errorMessage="Error Message"\n        descriptorsDisplay="column"\n      />\n      <Button onClick={onSubmit} style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"highlighted"},"Highlighted"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"highlighted")," prop to enable the background color for the number input field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('888');\n\n  return (\n    <NumberInput\n      label=\"Highlighted\"\n      value={value}\n      onChange={(e) => setValue(e)}\n      highlighted\n    />\n  );\n};\n"))),(0,i.kt)(d,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={NumberInput}\n  rows={[\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Label for input field',\n    },\n    {\n      name: 'placeholder',\n      type: 'string',\n      description:\n        'Short description displayed in the input before the user enters a value',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the input. If true, the input will be disabled',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description: 'Value of the number input',\n    },\n    {\n      name: 'validators',\n      type: 'object',\n      description: 'Set rules for the input field to be valid',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired every time the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired every time the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired every time the component is unfocused',\n    },\n    {\n      name: 'onKeyDown',\n      type: 'function',\n      description:\n        'Callback fired every time a key is pressed while focused in the component',\n    },\n    {\n      name: 'onPaste',\n      type: 'function',\n      description:\n        'Callback fired every time something is pasted into the component',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'maskConfig',\n      type: 'shape',\n      description:\n        'Set configs for mask utilized by the react-number-format library',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Error message to be displayed below number input field',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Set the text displayed below input field',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below number input field',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to show or hide label',\n    },\n    {\n      name: 'stepValue',\n      type: 'number',\n      description: 'Step value for number input',\n    },\n    {\n      name: 'minValue',\n      type: 'number',\n      description: 'Minimum value for number input',\n    },\n    {\n      name: 'maxValue',\n      type: 'number',\n      description: 'Maximum value for number input',\n    },\n    {\n      name: 'highlighted',\n      type: 'boolean',\n      description: 'Render input with highlighted background',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={NumberInput}\n  rows={[\n    {\n      name: 'number-input-root',\n      description: 'NumberInput root element',\n    },\n    {\n      name: 'number-input-label',\n      description: 'FormInput label',\n    },\n    {\n      name: 'number-input-wrapper',\n      description: 'Wrapper For Number Input',\n    },\n    {\n      name: 'number-input-descriptors',\n      description: 'Descriptor for FormInput',\n    },\n    {\n      name: 'number-input-span',\n      description: 'Hidden span element for auto width adjustment',\n    },\n    {\n      name: 'number-picker-input',\n      description: 'Number Input Element',\n    },\n    {\n      name: 'number-input-decrement-button',\n      description: 'Number Input Decrement Button Element',\n    },\n    {\n      name: 'number-input-increment-button',\n      description: 'Number Input Increment Button Element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(d,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("h2",null,"NumberInput is a spinbutton"),(0,i.kt)("p",null,"NumberInput is an implementation of the HTML5 ",(0,i.kt)(c,{href:"https://www.w3schools.com/tags/att_input_type_number.asp",mdxType:"ExitLink"},(0,i.kt)("inlineCode",{parentName:"p"},"<input type=\u201dnumber\u201d>"))," and WAI-ARIA ",(0,i.kt)(c,{href:"https://www.w3.org/WAI/ARIA/apg/patterns/spinbutton/",mdxType:"ExitLink"},"spinbutton pattern")," ."),(0,i.kt)("h2",null,"Spinbutton \u201csingle field\u201d implementation"),(0,i.kt)("p",null,"Standard spinbutton functionality (both in HTML5 and WAI-ARIA) is provided by the up and down arrows. This makes the increment and decrement buttons redundant for keyboard operation. This same approach is applied in NumberInput."),(0,i.kt)("b",null,"This is why in NumberInput the visible [-] and [+] do not receive keyboard focus."),(0,i.kt)("br",null),(0,i.kt)("br",null),"If they received focus the field would:",(0,i.kt)("li",null,"become a grouping of one field and two buttons -- making it a non-standard for spinbutton"),(0,i.kt)("li",null,"more cumbersome to use -- adding extra tab stops for unnecessary buttons"),(0,i.kt)("li",null,"require lengthier announcements for grouping and value"),(0,i.kt)("h2",null,"Button behavior on click: set focus to field"),(0,i.kt)("p",null,"The buttons do remain clickable/tappable for mouse/touch operation. When selected, NumberInput sets focus to the field to provide missing context to the announced button."),(0,i.kt)("p",null,"This provides the expected behavior for HTML5 type=\u201dinput\u201d when clicking the same control onHover. It also improves on the ",(0,i.kt)(c,{href:"https://www.w3.org/WAI/ARIA/apg/patterns/spinbutton/examples/datepicker-spinbuttons/",mdxType:"ExitLink"},"WAI-ARIA example")," that only announces the button and provides no context for what it controls."),(0,i.kt)("p",null,"A known potential issue with this implementation is that the full description of the field is announced on each click which can be lengthy. This should not be a significant issue to any sighted mouse users that also use screen readers who choose to use them since new clicks interrupt announcements of previous ones."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'NumberInput',\n  inputs: [\n    {\n      prop: 'stepValue',\n      type: 'number',\n    },\n    {\n      prop: 'minValue',\n      type: 'number',\n      defaultValue: '0'\n    },\n    {\n      prop: 'maxValue',\n      type: 'number',\n      defaultValue: '10'\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n  ]\n}\n\n() => {\n  const [value, setValue] = useState('1');\n\n  return (\n    <NumberInput\n      label=\"NumberInput Sandbox\"\n      value={value}\n      onChange={(e) => setValue(e)}\n    />\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Up Arrow',\n      description: 'Increment value',\n    },\n    {\n      name: 'Down Arrow',\n      description: 'Decrement value',\n    },\n    {\n      name: 'Home',\n      description: 'Start of text field (currently does not set min value)',\n    },\n    {\n      name: 'End',\n      description: 'End of text field (currently does not set max. value)',\n    },\n    {\n      name: 'Page Up',\n      description: 'Currently not supported',\n    },\n    {\n      name: 'Page Down',\n      description: 'Currently not supported',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>c});var a=t(2784);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),s=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(u.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),c=r,b=d["".concat(u,".").concat(c)]||d[c]||m[c]||i;return t?a.createElement(b,o(o({ref:n},p),{},{components:t})):a.createElement(b,o({ref:n},p))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);