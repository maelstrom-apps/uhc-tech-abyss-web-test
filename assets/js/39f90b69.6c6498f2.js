"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[4883],{30876:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>m});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var c=r.createContext({}),l=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},p=function(n){var e=l(n.components);return r.createElement(c.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,c=n.parentName,p=s(n,["components","mdxType","originalType","parentName"]),u=l(t),m=o,b=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(b,i(i({ref:e},p),{},{components:t})):r.createElement(b,i({ref:e},p))}));function m(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=n,s.mdxType="string"==typeof n?n:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},43775:(n,e,t)=>{t.r(e),t.d(e,{contentTitle:()=>l,default:()=>b,frontMatter:()=>c,metadata:()=>p,toc:()=>d});var r,o=t(7896),a=t(31461),i=(t(67294),t(30876)),s=["components"],c={id:"service-sandbox",category:"Data Display",title:"ServiceSandbox",description:"Provides a sandbox to test service endpoints.",pagination_prev:"web/ui/search-results",pagination_next:"web/ui/status-indicator"},l=void 0,p={unversionedId:"web/ui/service-sandbox",id:"web/ui/service-sandbox",isDocsHomePage:!1,title:"ServiceSandbox",description:"Provides a sandbox to test service endpoints.",source:"@site/docs/web/ui/ServiceSandbox.md",sourceDirName:"web/ui",slug:"/web/ui/service-sandbox",permalink:"/web/ui/service-sandbox",tags:[],version:"current",frontMatter:{id:"service-sandbox",category:"Data Display",title:"ServiceSandbox",description:"Provides a sandbox to test service endpoints.",pagination_prev:"web/ui/search-results",pagination_next:"web/ui/status-indicator"},sidebar:"docs",previous:{title:"SearchResults",permalink:"/web/ui/search-results"},next:{title:"StatusIndicator",permalink:"/web/ui/status-indicator"}},d=[{value:"JSON Response",id:"json-response",children:[],level:2},{value:"Image Response",id:"image-response",children:[],level:2},{value:"PDF Response",id:"pdf-response",children:[],level:2},{value:"File Upload",id:"file-upload",children:[],level:2}],u=(r="Tab",function(n){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}),m={toc:d};function b(n){var e=n.components,t=(0,a.Z)(n,s);return(0,i.kt)("wrapper",(0,o.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ServiceSandbox } from '@abyss/web/ui/ServiceSandbox';\n")),(0,i.kt)("h2",{id:"json-response"},"JSON Response"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const onSend = (url, options, callback) => {\n    console.log('url', url);\n    console.log('options', options);\n    console.log('callback return response', callback);\n  };\n\n  return (\n    <ServiceSandbox\n      url=\"http://localhost:8080/Claims/api/claim/action/v1.0\"\n      method=\"get\"\n      parameters={[\n        {\n          in: 'query',\n          key: 'transactionId',\n          description: 'transactionId',\n          type: 'string',\n        },\n        {\n          in: 'query',\n          key: 'tin',\n          description: 'tin',\n          type: 'string',\n        },\n        {\n          in: 'header',\n          key: 'Authorization',\n          description: 'Bearer token',\n          type: 'string',\n        },\n        {\n          in: 'header',\n          key: 'env',\n          description: 'Environment',\n          type: 'string',\n        },\n      ]}\n      responses={[\n        {\n          response: '200',\n          description: 'OK',\n          parameters: {\n            query: {\n              transactionId: '12345-123391-129910-1192010',\n              tin: '12345678',\n            },\n            header: {\n              Authorization: 'Bearer MRLATzo9a4CWw6TaGFFTVX3cY66Ll1OD',\n              env: 'sandbox',\n            },\n          },\n        },\n        {\n          response: '400',\n          description: 'Error',\n          parameters: {\n            query: {\n              transactionId: '00000',\n              tin: '12345678',\n            },\n            header: {\n              Authorization: 'Bearer MRLATzo9a4CWw6TaGFFTVX3cY66Ll1OD',\n              env: 'sandbox',\n            },\n          },\n        },\n      ]}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"image-response"},"Image Response"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const onSend = (url, options, callback) => {\n    console.log('url', url);\n    console.log('options', options);\n    console.log('callback return response', callback);\n  };\n\n  return (\n    <ServiceSandbox\n      url=\"http://localhost:8080/Eligibility/api/extended/memberIdCardV2/image\"\n      method=\"get\"\n      parameters={[\n        {\n          in: 'query',\n          key: 'transactionId',\n          description: 'transactionId',\n          type: 'string',\n        },\n        {\n          in: 'header',\n          key: 'Authorization',\n          description: 'Bearer token',\n          type: 'string',\n        },\n      ]}\n      responses={[\n        {\n          response: '200',\n          description: 'OK',\n          parameters: {\n            query: {\n              transactionId: '12345678-567899',\n            },\n            header: {\n              Authorization: 'Bearer MRLATzo9a4CWw6TaGFFTVX3cY66Ll1OD',\n              env: 'sandbox',\n            },\n          },\n        },\n        {\n          response: '400',\n          description: 'Error',\n          parameters: {\n            query: {\n              transactionId: '000000',\n            },\n            header: {\n              Authorization: 'Bearer MRLATzo9a4CWw6TaGFFTVX3cY66Ll1OD',\n              env: 'sandbox',\n            },\n          },\n        },\n      ]}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"pdf-response"},"PDF Response"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const onSend = (url, options, callback) => {\n    console.log('url', url);\n    console.log('options', options);\n    console.log('callback return response', callback);\n  };\n\n  return (\n    <ServiceSandbox\n      url=\"http://localhost:8080/Claims/api/attachment/v1.0\"\n      method=\"get\"\n      parameters={[\n        {\n          in: 'query',\n          key: 'attachmentId',\n          description: 'attachmentId',\n          type: 'string',\n        },\n        {\n          in: 'query',\n          key: 'tin',\n          description: 'tin',\n          type: 'string',\n        },\n        {\n          in: 'header',\n          key: 'Authorization',\n          description: 'Bearer token',\n          type: 'string',\n        },\n      ]}\n      responses={[\n        {\n          response: '200',\n          description: 'OK',\n          parameters: {\n            query: {\n              attachmentId:\n                '12345678-12345-489e-8739-f6db8149f5c4%7Cu_prov_attch_2021-01',\n              tin: '12345678',\n            },\n            header: {\n              Authorization: 'Bearer MRLATzo9a4CWw6TaGFFTVX3cY66Ll1OD',\n              env: 'sandbox',\n            },\n          },\n        },\n        {\n          response: '400',\n          description: 'Error',\n          parameters: {\n            query: {\n              attachmentId: '000000',\n              tin: '12345678',\n            },\n            header: {\n              Authorization: 'Bearer MRLATzo9a4CWw6TaGFFTVX3cY66Ll1OD',\n              env: 'sandbox',\n            },\n          },\n        },\n      ]}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"file-upload"},"File Upload"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const onSend = (url, options, callback) => {\n    console.log('url', url);\n    console.log('options', options);\n    console.log('callback return response', callback);\n  };\n\n  return (\n    <ServiceSandbox\n      url=\"http://localhost:8080/priorAuth/v1.0/attachment/upload/v1.0\"\n      method=\"post\"\n      parameters={[\n        {\n          in: 'header',\n          key: 'tin',\n          required: true,\n          description: 'tin',\n          type: 'string',\n        },\n        {\n          in: 'header',\n          key: 'client_id',\n          required: true,\n          description: 'Client ID',\n          type: 'string',\n        },\n        {\n          in: 'formData',\n          key: 'files',\n          description: 'file',\n          required: true,\n          type: 'file',\n        },\n        {\n          in: 'formData',\n          key: 'attachmentsRequest',\n          description: 'attachmentsRequest',\n          type: 'string',\n        },\n      ]}\n      responses={[\n        {\n          response: '200',\n          description: 'OK',\n          parameters: {\n            header: {\n              tin: '12345678',\n              client_id: '9999999',\n            },\n            formData: {\n              attachmentsRequest: 'metadata',\n            },\n          },\n        },\n        {\n          response: '400',\n          description: 'Error',\n          parameters: {\n            header: {\n              tin: '0000000',\n              client_id: '0000000',\n            },\n            formData: {\n              attachmentsRequest: 'metadata',\n            },\n          },\n        },\n      ]}\n    />\n  );\n};\n"))))}b.isMDXComponent=!0}}]);