"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[4825],{30876:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var o=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=i,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return t?o.createElement(h,r(r({ref:n},p),{},{components:t})):o.createElement(h,r({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var l=2;l<a;l++)r[l]=t[l];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},53711:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>p,toc:()=>d});var o,i=t(7896),a=t(31461),r=(t(67294),t(30876)),s=["components"],c={id:"icon",category:"Media",title:"Icon",description:"Used to implement icons and adapt their properties.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A10709",pagination_prev:"web/ui/floating-section",pagination_next:"web/ui/icon-material"},l=void 0,p={unversionedId:"web/ui/icon",id:"web/ui/icon",isDocsHomePage:!1,title:"Icon",description:"Used to implement icons and adapt their properties.",source:"@site/docs/web/ui/Icon.md",sourceDirName:"web/ui",slug:"/web/ui/icon",permalink:"/web/ui/icon",tags:[],version:"current",frontMatter:{id:"icon",category:"Media",title:"Icon",description:"Used to implement icons and adapt their properties.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A10709",pagination_prev:"web/ui/floating-section",pagination_next:"web/ui/icon-material"},sidebar:"docs",previous:{title:"FloatingSection",permalink:"/web/ui/floating-section"},next:{title:"IconMaterial",permalink:"/web/ui/icon-material"}},d=[{value:"Usage",id:"usage",children:[],level:2},{value:"Colors",id:"colors",children:[],level:2},{value:"Size",id:"size",children:[],level:2}],u=(o="Tab",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:d};function h(e){var n=e.components,t=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Icon } from '@abyss/web/ui/Icon';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Icon',\n  inputs: [\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'title',\n      type: 'string',\n    },\n    {\n      prop: 'color',\n      type: 'string',\n    },\n    {\n      prop: 'isScreenReadable',\n      type: 'boolean',\n    },\n  ]\n}\n\n() => {\n  const customIcon = (\n    <svg height=\"24\" width=\"24\" viewBox=\"0 0 16 16\">\n      <path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\" />\n    </svg>\n  );\n\n  return (\n    <Icon size=\"24px\" title=\"github\">{customIcon}</Icon>\n  );\n};\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Icon")," to implement custom SVG icons"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Icon title="github" size="$md">\n    <svg height="24" width="24" viewBox="0 0 16 16">\n      <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z" />\n    </svg>\n  </Icon>\n  <Icon title="figma" size="$md">\n    <svg viewBox="-60 0 500 500">\n      <path d="M14 95.7924C14 42.8877 56.8878 0 109.793 0H274.161C327.066 0 369.954 42.8877 369.954 95.7924C369.954 129.292 352.758 158.776 326.711 175.897C352.758 193.019 369.954 222.502 369.954 256.002C369.954 308.907 327.066 351.795 274.161 351.795H272.081C247.279 351.795 224.678 342.369 207.666 326.904V415.167C207.666 468.777 163.657 512 110.309 512C57.5361 512 14 469.243 14 416.207C14 382.709 31.1945 353.227 57.2392 336.105C31.1945 318.983 14 289.5 14 256.002C14 222.502 31.196 193.019 57.2425 175.897C31.196 158.776 14 129.292 14 95.7924ZM176.288 191.587H109.793C74.2172 191.587 45.3778 220.427 45.3778 256.002C45.3778 291.44 73.9948 320.194 109.381 320.416C109.518 320.415 109.655 320.415 109.793 320.415H176.288V191.587ZM207.666 256.002C207.666 291.577 236.505 320.417 272.081 320.417H274.161C309.737 320.417 338.576 291.577 338.576 256.002C338.576 220.427 309.737 191.587 274.161 191.587H272.081C236.505 191.587 207.666 220.427 207.666 256.002ZM109.793 351.795C109.655 351.795 109.518 351.794 109.381 351.794C73.9948 352.015 45.3778 380.769 45.3778 416.207C45.3778 451.652 74.6025 480.622 110.309 480.622C146.591 480.622 176.288 451.186 176.288 415.167V351.795H109.793ZM109.793 31.3778C74.2172 31.3778 45.3778 60.2173 45.3778 95.7924C45.3778 131.368 74.2172 160.207 109.793 160.207H176.288V31.3778H109.793ZM207.666 160.207H274.161C309.737 160.207 338.576 131.368 338.576 95.7924C338.576 60.2173 309.737 31.3778 274.161 31.3778H207.666V160.207Z" />\n    </svg>\n  </Icon>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"colors"},"Colors"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"color")," property to adjust the color of a Google material icon. Theme colors can be found in the ",(0,r.kt)("a",{parentName:"p",href:"/foundations/colors"},"Colors")," documentation section or a hex code can be used. The default color is set to the theme ",(0,r.kt)("inlineCode",{parentName:"p"},"'interactive1'"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Icon title="github" size="$md" color="$primary1">\n    <svg height="24" width="24" viewBox="0 0 16 16">\n      <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z" />\n    </svg>\n  </Icon>\n  <Icon title="github" size="$md" color="#00ff00">\n    <svg height="24" width="24" viewBox="0 0 16 16">\n      <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z" />\n    </svg>\n  </Icon>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"size"},"Size"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," property to adjust the size of an icon by setting it to a specific preset size or number. The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"24px")," || ",(0,r.kt)("inlineCode",{parentName:"p"},"$md"),". The size prop can take in px, and the Abyss standardized $sm, $md, and $lg."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const customIcon = (\n    <svg height="24" width="24" viewBox="0 0 16 16">\n      <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z" />\n    </svg>\n  );\n\n  return (\n    <Layout.Group>\n      <Icon title="github">{customIcon}</Icon>\n      <Icon title="github" size="$md">\n        {customIcon}\n      </Icon>\n      <Icon title="github" size={24}>\n        {customIcon}\n      </Icon>\n    </Layout.Group>\n  );\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Icon}\n  rows={[\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the icon',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The svg content of the icon',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the icon',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the icon',\n    },\n    {\n      name: 'isScreenReadable',\n      type: 'boolean',\n      description:\n        'Indicate whether the icon is screen readable or not. If the icon is Screen Readable, then provide a title',\n    },\n    {\n      name: 'onProcessSVG',\n      type: 'function',\n      description: 'The svg content of the icon',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description:\n        '(not currently functioning) Pre programmed sizes for the icons',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Icon}\n  rows={[\n    {\n      name: 'icon-root',\n      description: 'Icon root element',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("h2",null,"Meaningful or Control Icons"),(0,r.kt)("p",null,"If the icon is being used in a setting where it is the only element providing meaning, then that same meaning should be conveyed to screen reader users. The below implementation provides examples of situations in which the property ",(0,r.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," should be set to true and the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," property is required and should describe the purpose of the image."),(0,r.kt)("p",null,"Example 1: An alert icon is used to convey a sense of urgency; there is adjacent text (\u201cThere is a data outage\u201d) but the text doesn't include any words that convey urgency. So, in this case, the icon should have a text alternative such as \u201cAlert\u201d or \u201cWarning\u201d."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand title="alert" icon="alert" isScreenReadable={true} size={24} />\n  <div>There is a data outage</div>\n</Layout.Group>\n')),(0,r.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog. There is no adjacent text, so the icon should have a text alternative of \u201cclose\u201d or \u201cclose window\u201d.",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial title="close" icon="close" isScreenReadable={true} size={24} />\n</Layout.Group>\n')),(0,r.kt)("h2",null,"Decorative Icons"),(0,r.kt)("p",null,"If the icon is being used in a setting in which it just a decorative element (which is the default case for icons), then the icon should be ignored by screen readers. The below implementation provides example of which situations would be classified as decorative. Since the default of ",(0,r.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," is set to false no specific changes need to be made for decorative icons."),(0,r.kt)("p",null,"Example 1: An alert icon is used next to an urgent message and the word \u201cAlert\u201d is included in the adjacent text. In this case, the icon becomes decorative in nature and should be ignored by screen readers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="alert" size={24} />\n  <div>Alert: There is a data outage</div>\n</Layout.Group>\n')),(0,r.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog; the word \u201cClose\u201d appears to the right of the button. In this case, the icon should be considered decorative and ignored by screen readers.",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial icon="close" size={24} />\n  <div>Close</div>\n</Layout.Group>\n'))))}h.isMDXComponent=!0}}]);