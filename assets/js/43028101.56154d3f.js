"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[5549],{73610:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>s,default:()=>f,frontMatter:()=>c,metadata:()=>p,toc:()=>d});var a,o=t(7896),r=t(31461),i=(t(2784),t(3905)),l=["components"],c={id:"indicator",category:"Data Display",title:"Indicator",description:"Adds an indicator to wrapped elements.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/branch/sabyctxmnS57eNFcPZQAbi/Abyss-Design-System",pagination_prev:"web/ui/data-table",pagination_next:"web/ui/search-results"},s=void 0,p={unversionedId:"web/ui/indicator",id:"web/ui/indicator",isDocsHomePage:!1,title:"Indicator",description:"Adds an indicator to wrapped elements.",source:"@site/docs/web/ui/Indicator.md",sourceDirName:"web/ui",slug:"/web/ui/indicator",permalink:"/web/ui/indicator",tags:[],version:"current",frontMatter:{id:"indicator",category:"Data Display",title:"Indicator",description:"Adds an indicator to wrapped elements.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/branch/sabyctxmnS57eNFcPZQAbi/Abyss-Design-System",pagination_prev:"web/ui/data-table",pagination_next:"web/ui/search-results"},sidebar:"docs",previous:{title:"DataTable",permalink:"/web/ui/data-table"},next:{title:"SearchResults",permalink:"/web/ui/search-results"}},d=[{value:"Size",id:"size",children:[],level:2},{value:"Offset",id:"offset",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Overflow Count",id:"overflow-count",children:[],level:2},{value:"With Border",id:"with-border",children:[],level:2},{value:"Show Zero",id:"show-zero",children:[],level:2},{value:"Color",id:"color",children:[{value:"Character Limit",id:"character-limit",children:[],level:4},{value:"Offset",id:"offset-1",children:[],level:4},{value:"Color Contrast",id:"color-contrast",children:[],level:4}],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),m={toc:d};function f(e){var n=e.components,t=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Indicator } from '@abyss/web/ui/Indicator';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Indicator',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'label',\n    },\n    {\n      prop: 'offset',\n      type: 'number',\n    },\n    {\n      prop: 'overflowCount',\n      type: 'number',\n    },\n    {\n      prop: 'position',\n      type: 'select',\n      options: [\n        { label: 'top-start', value: 'top-start' },\n        { label: 'top-end', value: 'top-end' },\n        { label: 'bottom-start', value: 'bottom-start' },\n        { label: 'bottom-end', value: 'bottom-end' },\n      ]\n    },\n     {\n      prop: 'size',\n      type: 'select',\n      options: [\n        { label: 'small', value: 'small' },\n        { label: 'large', value: 'large' },\n      ]\n    },\n    {\n      prop: 'color',\n      type: 'string',\n    },\n    {\n      prop: 'showZero',\n      type: 'boolean',\n    },\n    {\n      prop: 'withBorder',\n      type: 'boolean',\n    },\n  ]\n}\n\n() => {\nreturn (\n<Indicator label={5}>\n    <Badge>\n        Indicator Sandbox\n    </Badge>\n</Indicator>\n  );\n};\n")),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," prop to change the size of the Indicator to ",(0,i.kt)("inlineCode",{parentName:"p"},"small")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"large"),". The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"small"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group space={30}>\n  <Indicator size="small" label={5}>\n    <IconMaterial icon="mail" size={48} />\n  </Indicator>\n  <Indicator size="large" label={5}>\n    <IconMaterial icon="mail" size={48} />\n  </Indicator>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"offset"},"Offset"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"offset")," prop to change the position of the Indicator. It is useful when Indicator component is used with children that have border radius."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group space={30}>\n  <Indicator size="small" label={10}>\n    <IconMaterial icon="face" size="xl" />\n  </Indicator>\n  <Indicator size="small" label={10} offset={10}>\n    <IconMaterial icon="face" size="xl" />\n  </Indicator>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"label"},"Label"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," prop to pass either ",(0,i.kt)("inlineCode",{parentName:"p"},"number")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group space={30}>\n  <Indicator size="large" label={\'New\'} offset={10}>\n    <IconMaterial icon="face" size="xl" />\n  </Indicator>\n  <Indicator size="large" label={20} offset={10}>\n    <IconMaterial icon="face" size="xl" />\n  </Indicator>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"overflow-count"},"Overflow Count"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"overflowCount")," prop to show the Indicator with ",(0,i.kt)("inlineCode",{parentName:"p"},"+")," symbol after the specified overflow Indicator value. Default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"99"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [count, setCount] = useState(100);\n\n  return (\n    <Layout.Stack>\n      <Layout.Group space={30}>\n        <Indicator size="small" label={count} offset={10}>\n          <IconMaterial icon="face" size="xl" />\n        </Indicator>\n        <Indicator size="small" label={count} overflowCount={10} offset={10}>\n          <IconMaterial icon="face" size="xl" />\n        </Indicator>\n        <Indicator size="small" label={count} overflowCount={100} offset={10}>\n          <IconMaterial icon="face" size="xl" />\n        </Indicator>\n      </Layout.Group>\n\n      <Layout.Group space={30}>\n        <Button onClick={() => setCount((old) => old + 1)}>Increment</Button>\n        <Button\n          variant="outline"\n          onClick={() => setCount((old) => (old > 0 ? old - 1 : old))}\n        >\n          Decrement\n        </Button>\n      </Layout.Group>\n    </Layout.Stack>\n  );\n};\n')),(0,i.kt)("h2",{id:"with-border"},"With Border"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"withBorder")," prop to apply border around indicator. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group space={30}>\n  <Indicator size="large" label={20} offset={10} withBorder>\n    <IconMaterial icon="face" size="xl" />\n  </Indicator>\n  <Indicator size="large" label={10} offset={10}>\n    <IconMaterial icon="face" size="xl" />\n  </Indicator>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"show-zero"},"Show Zero"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"showZero={false}")," prop to hide the Indicator when label is ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),". The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group space={30}>\n  <Indicator label={0}>\n    <IconMaterial icon="mail" size={48} />\n  </Indicator>\n  <Indicator label={0} showZero={false}>\n    <IconMaterial icon="mail" size={48} />\n  </Indicator>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"color"},"Color"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"color")," prop to change color for indicator. Default value is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"'$error1'"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group space={30}>\n  <Indicator label={8} color="green">\n    <IconMaterial icon="mail" size={48} />\n  </Indicator>\n  <Indicator label={100} color="$gray9">\n    <IconMaterial icon="mail" size={48} />\n  </Indicator>\n</Layout.Group>\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Indicator}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the indicator component',\n    },\n    {\n      name: 'position',\n      type: \"'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' \",\n      description: 'Changes the indicator position',\n    },\n    {\n      name: 'size',\n      type: \" 'small' | 'large' \",\n      description: 'Size of Indicator',\n    },\n    {\n      name: 'label',\n      type: 'number | string',\n      description: 'Label of indicator component',\n    },\n    {\n      name: 'overflowCount',\n      type: 'number',\n      description: 'Over Flow count display for indicator',\n    },\n    {\n      name: 'showZero',\n      type: 'boolean',\n      description: 'Flag to hide label when value is 0',\n    },\n    {\n      name: 'offset',\n      type: 'number',\n      description:\n        'Change the indicator default position based on the position variant',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Color for indicator',\n    },\n    {\n      name: 'withBorder',\n      type: 'boolean',\n      description: 'Flag to show border around indicator',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Indicator}\n  rows={[\n    {\n      name: 'indicator-root',\n      description: 'Indicator root element',\n    },\n    {\n      name: 'indicator-container',\n      description: 'Indicator container element',\n    },\n    {\n      name: 'indicator-label',\n      description: 'Indicator label element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},"Indicator is not focusable, used as an indicator to wrapped elements.",(0,i.kt)("h4",{id:"character-limit"},"Character Limit"),(0,i.kt)("p",null,"While there is no explicit limit on the number of text characters that can be used in the indicator, be mindful that the wider the indicator, the greater the risk of blocking surrounding information from view."),(0,i.kt)("h4",{id:"offset-1"},"Offset"),(0,i.kt)("p",null,"Like the character limit, be cognizant of the indicator positioning in relation to the element it is paired with, particularly with icons that are sized dynamically. Avoid fixed values or large offsets that could potentially overlap or cover the paired icon or surrounding content."),(0,i.kt)("h4",{id:"color-contrast"},"Color Contrast"),(0,i.kt)("p",null,"As with all components, the color contrast of the text within the indicator to the background color must be at least 4.5:1. Additionally, the background circle shape must have a minimum of 3:1 color contrast with the icon/element it's attached to as well as the surrounding background. Please find link for\ncolor contrast guide ",(0,i.kt)("a",{parentName:"p",href:"/accessibility/#color-contrast"},"Color Contrast"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Indicator label={100}>\n  <IconMaterial icon="mail" size={48} />\n</Indicator>\n'))))}f.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(2784);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=o,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(f,i(i({ref:n},p),{},{components:t})):a.createElement(f,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);