"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[1286],{30876:(n,e,o)=>{o.d(e,{Zo:()=>d,kt:()=>p});var t=o(67294);function a(n,e,o){return e in n?Object.defineProperty(n,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[e]=o,n}function r(n,e){var o=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.push.apply(o,t)}return o}function l(n){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?r(Object(o),!0).forEach((function(e){a(n,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(o,e))}))}return n}function i(n,e){if(null==n)return{};var o,t,a=function(n,e){if(null==n)return{};var o,t,a={},r=Object.keys(n);for(t=0;t<r.length;t++)o=r[t],e.indexOf(o)>=0||(a[o]=n[o]);return a}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(t=0;t<r.length;t++)o=r[t],e.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(n,o)&&(a[o]=n[o])}return a}var s=t.createContext({}),c=function(n){var e=t.useContext(s),o=e;return n&&(o="function"==typeof n?n(e):l(l({},e),n)),o},d=function(n){var e=c(n.components);return t.createElement(s.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},m=t.forwardRef((function(n,e){var o=n.components,a=n.mdxType,r=n.originalType,s=n.parentName,d=i(n,["components","mdxType","originalType","parentName"]),m=c(o),p=a,k=m["".concat(s,".").concat(p)]||m[p]||u[p]||r;return o?t.createElement(k,l(l({ref:e},d),{},{components:o})):t.createElement(k,l({ref:e},d))}));function p(n,e){var o=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var r=o.length,l=new Array(r);l[0]=m;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=n,i.mdxType="string"==typeof n?n:a,l[1]=i;for(var c=2;c<r;c++)l[c]=o[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,o)}m.displayName="MDXCreateElement"},90802:(n,e,o)=>{o.r(e),o.d(e,{contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var t=o(7896),a=o(31461),r=(o(67294),o(30876)),l=["components"],i={id:"dropdown-menu",category:"Content",title:"DropdownMenu",description:"Displays a menu triggered by a button, such as a set of actions or functions.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=9141%3A35044",pagination_prev:"web/ui/drag-and-drop",pagination_next:"web/ui/page-body"},s=void 0,c={unversionedId:"web/ui/dropdown-menu",id:"web/ui/dropdown-menu",isDocsHomePage:!1,title:"DropdownMenu",description:"Displays a menu triggered by a button, such as a set of actions or functions.",source:"@site/docs/web/ui/DropdownMenu.md",sourceDirName:"web/ui",slug:"/web/ui/dropdown-menu",permalink:"/web/ui/dropdown-menu",tags:[],version:"current",frontMatter:{id:"dropdown-menu",category:"Content",title:"DropdownMenu",description:"Displays a menu triggered by a button, such as a set of actions or functions.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=9141%3A35044",pagination_prev:"web/ui/drag-and-drop",pagination_next:"web/ui/page-body"},sidebar:"docs",previous:{title:"DragAndDrop",permalink:"/web/ui/drag-and-drop"},next:{title:"PageBody",permalink:"/web/ui/page-body"}},d=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Inserting icons",id:"inserting-icons",children:[],level:2},{value:"Outline",id:"outline",children:[],level:2},{value:"Variant",id:"variant",children:[],level:2},{value:"Menu Items",id:"menu-items",children:[],level:2},{value:"onClick",id:"onclick",children:[],level:2},{value:"onChange",id:"onchange",children:[],level:2},{value:"disabled",id:"disabled",children:[],level:2},{value:"isSeparated",id:"isseparated",children:[],level:2}],u=function(n){return function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}},m=u("Tab"),p=u("ExitLink"),k={toc:d};function h(n){var e=n.components,o=(0,a.Z)(n,l);return(0,r.kt)("wrapper",(0,t.Z)({},k,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)(m,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { DropdownMenu } from '@abyss/web/ui/DropdownMenu';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [bookmarksChecked, setBookmarksChecked] = useState(true);\n  const [urlsChecked, setUrlsChecked] = useState(false);\n  const [person, setPerson] = useState('Pedro');\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n    },\n    {\n      title: 'Sub menu',\n      subMenu: [\n        {\n          title: 'Save As...',\n          icon: <IconMaterial icon=\"save\" />,\n          onClick: () => {\n            console.log('Clicked Save As');\n          },\n        },\n        {\n          checkboxes: [\n            {\n              label: 'Show Full Urls',\n              value: 'Show Full Urls',\n              checked: urlsChecked,\n              onChange: setUrlsChecked,\n            },\n          ],\n        },\n        {\n          label: 'Radio Group',\n          value: person,\n          onChange: setPerson,\n          radios: [\n            {\n              label: 'Pedro Duarte',\n              value: 'Pedro',\n            },\n            { label: 'Tom Hanks', value: 'Tom' },\n          ],\n        },\n      ],\n    },\n    {\n      checkboxes: [\n        {\n          label: 'Show Bookmarks',\n          value: 'Show Bookmarks',\n          checked: bookmarksChecked,\n          onChange: setBookmarksChecked,\n        },\n        {\n          label: 'Show Full Urls',\n          value: 'Show Full Urls',\n          checked: urlsChecked,\n          onChange: setUrlsChecked,\n        },\n      ],\n    },\n    {\n      label: 'Radio Group',\n      value: person,\n      onChange: setPerson,\n      radios: [\n        {\n          label: 'Pedro Duarte',\n          value: 'Pedro',\n        },\n        { label: 'Tom Hanks', value: 'Tom' },\n      ],\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <DropdownMenu\n        outline\n        label=\"Options\"\n        after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n        menuItems={menuItems}\n      />\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      'dropdown-menu-radios': 'Tom',\n      'dropdown-menu-sub-radios': 'Pedro',\n      'dropdown-menu-sub-checkbox': true,\n      'dropdown-menu-checkboxes-1': true,\n      'dropdown-menu-checkboxes-2': false,\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('submitted', data);\n  };\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n    },\n    {\n      title: 'Sub menu',\n      subMenu: [\n        {\n          title: 'Save As...',\n          icon: <IconMaterial icon=\"save\" />,\n          onClick: () => {\n            console.log('Clicked Save As');\n          },\n        },\n        {\n          checkboxes: [\n            {\n              model: 'dropdown-menu-sub-checkbox',\n              label: 'Show Full Urls',\n              value: 'Show Full Urls',\n            },\n          ],\n        },\n        {\n          model: 'dropdown-menu-sub-radios',\n          label: 'Radio Group',\n          radios: [\n            {\n              label: 'Pedro Duarte',\n              value: 'Pedro',\n            },\n            { label: 'Tom Hanks', value: 'Tom' },\n          ],\n        },\n      ],\n    },\n    {\n      checkboxes: [\n        {\n          model: 'dropdown-menu-checkboxes-1',\n          label: 'Show Bookmarks',\n          value: 'Show Bookmarks',\n        },\n        {\n          model: 'dropdown-menu-checkboxes-2',\n          label: 'Show Full Urls',\n          value: 'Show Full Urls',\n        },\n      ],\n    },\n    {\n      label: 'Radio Group',\n      model: 'dropdown-menu-radios',\n      radios: [\n        {\n          label: 'Pedro Duarte',\n          value: 'Pedro',\n        },\n        { label: 'Tom Hanks', value: 'Tom' },\n      ],\n    },\n  ];\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <Layout.Group>\n        <DropdownMenu\n          outline\n          label=\"Options\"\n          after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n          menuItems={menuItems}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </Layout.Group>\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h2",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [bookmarksChecked, setBookmarksChecked] = useState(true);\n  const [urlsChecked, setUrlsChecked] = useState(false);\n  const [person, setPerson] = useState('Pedro');\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n    },\n    {\n      title: 'Sub menu',\n      subMenu: [\n        {\n          title: 'Save As...',\n          icon: <IconMaterial icon=\"save\" />,\n          onClick: () => {\n            console.log('Clicked Save As');\n          },\n        },\n        {\n          checkboxes: [\n            {\n              label: 'Show Full Urls',\n              value: 'Show Full Urls',\n              checked: urlsChecked,\n              onChange: setUrlsChecked,\n            },\n          ],\n        },\n        {\n          label: 'Radio Group',\n          value: person,\n          onChange: setPerson,\n          radios: [\n            {\n              label: 'Pedro Duarte',\n              value: 'Pedro',\n            },\n            { label: 'Tom Hanks', value: 'Tom' },\n          ],\n        },\n      ],\n    },\n    {\n      checkboxes: [\n        {\n          label: 'Show Bookmarks',\n          value: 'Show Bookmarks',\n          checked: bookmarksChecked,\n          onChange: setBookmarksChecked,\n        },\n        {\n          label: 'Show Full Urls',\n          value: 'Show Full Urls',\n          checked: urlsChecked,\n          onChange: setUrlsChecked,\n        },\n      ],\n    },\n    {\n      label: 'Radio Group',\n      value: person,\n      onChange: setPerson,\n      radios: [\n        {\n          label: 'Pedro Duarte',\n          value: 'Pedro',\n        },\n        { label: 'Tom Hanks', value: 'Tom' },\n      ],\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <DropdownMenu\n        outline\n        label=\"Options\"\n        after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n        menuItems={menuItems}\n      />\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"label"},"Label"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," prop to insert text or icon elements into the Dropdown menu button. You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"hideLabel")," prop to hide the label if you are using icons only. ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," is required."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const menuItems = [\n    {\n      title: \'New Window\',\n      onClick: () => {\n        console.log(\'Clicked New Window!\');\n      },\n    },\n    {\n      title: \'Open New Tab\',\n      onClick: () => {\n        console.log(\'Open New Tab!\');\n      },\n    },\n    {\n      title: \'Save As...\',\n      onClick: () => {\n        console.log(\'Save As...\');\n      },\n      icon: <IconMaterial icon="save" />,\n    },\n  ];\n\n  const customIcon = (\n    <svg height="24" width="24" viewBox="0 0 16 16">\n      <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z" />\n    </svg>\n  );\n\n  return (\n    <Layout.Group>\n      <DropdownMenu outline label="Label" menuItems={menuItems} />\n      <DropdownMenu\n        outline\n        css={{\n          \'abyss-dropdown-menu-trigger\': {\n            color: \'red\',\n            border: \'1px solid red\',\n          },\n        }}\n        label="Custom Label"\n        menuItems={menuItems}\n      />\n      <DropdownMenu\n        outline\n        label="Table Actions"\n        hideLabel\n        after={<IconMaterial icon="more_vert" />}\n        menuItems={menuItems}\n      />\n      <DropdownMenu\n        outline\n        label="Github Action"\n        hideLabel\n        after={<Icon title="github">{customIcon}</Icon>}\n        menuItems={menuItems}\n      />\n    </Layout.Group>\n  );\n};\n')),(0,r.kt)("h2",{id:"inserting-icons"},"Inserting icons"),(0,r.kt)("p",null,"Insert icons into the Dropdown menu button using the ",(0,r.kt)("inlineCode",{parentName:"p"},"before")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"after")," props."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const menuItems = [\n    {\n      title: \'New Window\',\n      onClick: () => {\n        console.log(\'Clicked New Window!\');\n      },\n    },\n    {\n      title: \'Open New Tab\',\n      onClick: () => {\n        console.log(\'Open New Tab!\');\n      },\n    },\n    {\n      title: \'Save As...\',\n      onClick: () => {\n        console.log(\'Save As...\');\n      },\n      icon: <IconMaterial icon="save" />,\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <DropdownMenu\n          outline\n          label="Save As..."\n          before={<IconMaterial icon="save" />}\n          menuItems={menuItems}\n        />\n        <DropdownMenu\n          outline\n          label="Filter"\n          after={<IconMaterial icon="filter_alt" />}\n          menuItems={menuItems}\n        />\n        <DropdownMenu\n          outline\n          label="Download"\n          before={<IconMaterial icon="download" />}\n          after={<IconMaterial icon="keyboard_arrow_down" />}\n          menuItems={menuItems}\n        />\n        <DropdownMenu\n          label="Download"\n          variant="filled"\n          before={<IconMaterial icon="download" />}\n          after={<IconMaterial icon="keyboard_arrow_down" />}\n          menuItems={menuItems}\n        />\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"outline"},"Outline"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"outline")," prop to turn on the outline of the Dropdown menu. The default is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"Note")),": An ",(0,r.kt)("inlineCode",{parentName:"p"},"outline")," should be added if the dropdown menu is used on a background that does not meet the 3:1 color contrast ratio."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [bookmarksChecked, setBookmarksChecked] = useState(true);\n  const [urlsChecked, setUrlsChecked] = useState(false);\n  const [person, setPerson] = useState('Pedro');\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n      disabled: false,\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n      isSeparated: true,\n    },\n    {\n      title: 'Sub menu',\n      subMenu: [\n        {\n          title: 'Save As...',\n          icon: <IconMaterial icon=\"save\" />,\n          onClick: () => {\n            console.log('Clicked Save As');\n          },\n        },\n        {\n          checkboxes: [\n            {\n              label: 'Show Full Urls',\n              value: 'Show Full Urls',\n              checked: urlsChecked,\n              onChange: setUrlsChecked,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      checkboxes: [\n        {\n          label: 'Show Bookmarks',\n          value: 'Show Bookmarks',\n          checked: bookmarksChecked,\n          onChange: setBookmarksChecked,\n        },\n        {\n          label: 'Show Full Urls',\n          value: 'Show Full Urls',\n          checked: urlsChecked,\n          onChange: setUrlsChecked,\n        },\n      ],\n    },\n    {\n      label: 'Radio Group',\n      value: person,\n      onChange: setPerson,\n      radios: [\n        { label: 'Pedro Duarte', value: 'Pedro' },\n        { label: 'Tom Hanks', value: 'Tom' },\n      ],\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <DropdownMenu\n          outline\n          label=\"Options\"\n          after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n          menuItems={menuItems}\n        />\n        <DropdownMenu\n          label=\"Options\"\n          after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n          menuItems={menuItems}\n        />\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"variant"},"Variant"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"variant")," prop to change the visual style of the Dropdown menu. You can set the value to ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"filled"),". The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [bookmarksChecked, setBookmarksChecked] = useState(true);\n  const [urlsChecked, setUrlsChecked] = useState(false);\n  const [person, setPerson] = useState('Pedro');\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n      disabled: false,\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n      isSeparated: true,\n    },\n    {\n      title: 'Sub menu',\n      subMenu: [\n        {\n          title: 'Save As...',\n          icon: <IconMaterial icon=\"save\" />,\n          onClick: () => {\n            console.log('Clicked Save As');\n          },\n        },\n        {\n          checkboxes: [\n            {\n              label: 'Show Full Urls',\n              value: 'Show Full Urls',\n              checked: urlsChecked,\n              onChange: setUrlsChecked,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      checkboxes: [\n        {\n          label: 'Show Bookmarks',\n          value: 'Show Bookmarks',\n          checked: bookmarksChecked,\n          onChange: setBookmarksChecked,\n        },\n        {\n          label: 'Show Full Urls',\n          value: 'Show Full Urls',\n          checked: urlsChecked,\n          onChange: setUrlsChecked,\n        },\n      ],\n    },\n    {\n      label: 'Radio Group',\n      value: person,\n      onChange: setPerson,\n      radios: [\n        { label: 'Pedro Duarte', value: 'Pedro' },\n        { label: 'Tom Hanks', value: 'Tom' },\n      ],\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <DropdownMenu\n          outline\n          label=\"Options\"\n          after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n          menuItems={menuItems}\n        />\n        <DropdownMenu\n          outline\n          variant=\"filled\"\n          label=\"Options\"\n          after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n          menuItems={menuItems}\n        />\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"menu-items"},"Menu Items"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"menuItems")," prop to specify what will be displayed in the Dropdown. The prop requires an array of objects that have the following form for each item types:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Action Item:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  title: string,\n  icon: node,  //optional\n  onClick: func,\n}\n")),(0,r.kt)("br",null),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Checkboxes:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  checkboxes: Array,\n}\n\n// Checkbox item\n  checkboxes: [\n    {\n      label: string,\n      value: string,\n      checked: bool, // useState\n      onChange: func, // useState\n      model: string, // useForm\n    },\n  ];\n")),(0,r.kt)("br",null),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Radio-Group:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  label: string,\n  value: string, // useState\n  onChange: func, // useState\n  model: string, // useForm\n  radios: Array,\n}\n\n// Radio item\n  radios: [\n    {\n      label: string,\n      value: string,\n    }\n  ]\n")),(0,r.kt)("br",null),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Sub-Menu:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  title: string,\n  subMenu: Array,\n}\n  // Sub-menu\n  subMenu: [\n    {\n      //Radio-Group\n      //Checkboxes\n      //Action Item\n      //Sub-Menu\n    }\n  ]\n\n")),(0,r.kt)("h2",{id:"onclick"},"onClick"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick")," function to trigger a custom function when the menu item is clicked."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('New Window!');\n      },\n    },\n    {\n      title: 'Open New Tab',\n      onClick: () => {\n        console.log('Open New Tab!');\n      },\n    },\n    {\n      title: 'Save As...',\n      onClick: () => {\n        console.log('Save As...');\n      },\n      icon: <IconMaterial icon=\"save\" />,\n      disabled: true,\n    },\n  ];\n\n  return (\n    <DropdownMenu\n      outline\n      label=\"Options\"\n      menuItems={menuItems}\n      after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"onchange"},"onChange"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onChange")," fuction to trigger a custom function when a checkbox or a radio item is clicked. You can use this to update your checked state, or to do something else entirely."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [bookmarksChecked, setBookmarksChecked] = useState(true);\n  const [urlsChecked, setUrlsChecked] = useState(false);\n  const [person, setPerson] = useState('Pedro');\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n      isSeparated: true,\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n      isSeparated: true,\n    },\n    {\n      title: 'Sub menu',\n      subMenu: [\n        {\n          title: 'Save As...',\n          icon: <IconMaterial icon=\"save\" />,\n          onClick: () => {\n            console.log('Clicked Save As');\n          },\n        },\n        {\n          checkboxes: [\n            {\n              label: 'Show Full Urls',\n              value: 'Show Full Urls',\n              checked: urlsChecked,\n              onChange: setUrlsChecked,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      checkboxes: [\n        {\n          label: 'Show Bookmarks',\n          value: 'Show Bookmarks',\n          checked: bookmarksChecked,\n          onChange: setBookmarksChecked,\n        },\n        {\n          label: 'Show Full Urls',\n          value: 'Show Full Urls',\n          checked: urlsChecked,\n          onChange: setUrlsChecked,\n        },\n      ],\n    },\n    {\n      label: 'Radio Group',\n      value: person,\n      onChange: setPerson,\n      radios: [\n        { label: 'Pedro Duarte', value: 'Pedro' },\n        { label: 'Tom Hanks', value: 'Tom' },\n      ],\n    },\n  ];\n\n  return (\n    <DropdownMenu\n      outline\n      label=\"Options\"\n      menuItems={menuItems}\n      after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"disabled"},"disabled"),(0,r.kt)("p",null,"When ",(0,r.kt)("inlineCode",{parentName:"p"},"disabled")," flag is ",(0,r.kt)("strong",{parentName:"p"},"true"),", it prevents the user from interacting with the menu item."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('New Window!');\n      },\n    },\n    {\n      title: 'Open New Tab',\n      onClick: () => {\n        console.log('Open New Tab!');\n      },\n    },\n    {\n      title: 'Save As...',\n      onClick: () => {\n        console.log('Save As...');\n      },\n      icon: <IconMaterial icon=\"save\" />,\n      disabled: true,\n    },\n  ];\n\n  return (\n    <DropdownMenu\n      outline\n      label=\"Options\"\n      menuItems={menuItems}\n      after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"isseparated"},"isSeparated"),(0,r.kt)("p",null,"When ",(0,r.kt)("inlineCode",{parentName:"p"},"isSeparated")," flag is ",(0,r.kt)("strong",{parentName:"p"},"true"),", it renders a horizontal divider that separates the menu item. The ",(0,r.kt)("em",{parentName:"p"},"checkbox")," and ",(0,r.kt)("em",{parentName:"p"},"radio")," group automatically renders a divider before and after the item so no ",(0,r.kt)("inlineCode",{parentName:"p"},"isSeparated")," flag is required for checkboxes and radio items. Divider is not render before and after the first and the last item respectively."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [bookmarksChecked, setBookmarksChecked] = useState(true);\n  const [urlsChecked, setUrlsChecked] = useState(false);\n  const [person, setPerson] = useState('Pedro');\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n      isSeparated: true,\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n      isSeparated: true,\n    },\n    {\n      title: 'Sub menu',\n      subMenu: [\n        {\n          title: 'Save As...',\n          icon: <IconMaterial icon=\"save\" />,\n          onClick: () => {\n            console.log('Clicked Save As');\n          },\n        },\n        {\n          checkboxes: [\n            {\n              label: 'Show Full Urls',\n              value: 'Show Full Urls',\n              checked: urlsChecked,\n              onChange: setUrlsChecked,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      checkboxes: [\n        {\n          label: 'Show Bookmarks',\n          value: 'Show Bookmarks',\n          checked: bookmarksChecked,\n          onChange: setBookmarksChecked,\n        },\n        {\n          label: 'Show Full Urls',\n          value: 'Show Full Urls',\n          checked: urlsChecked,\n          onChange: setUrlsChecked,\n        },\n      ],\n    },\n    {\n      label: 'Radio Group',\n      value: person,\n      onChange: setPerson,\n      radios: [\n        { label: 'Pedro Duarte', value: 'Pedro' },\n        { label: 'Tom Hanks', value: 'Tom' },\n      ],\n    },\n  ];\n\n  return (\n    <DropdownMenu\n      outline\n      label=\"Options\"\n      menuItems={menuItems}\n      after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n    />\n  );\n};\n"))),(0,r.kt)(m,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={DropdownMenu}\n  rows={[\n    {\n      name: 'menuItems',\n      type: 'array[shape]',\n      description: 'The items that will be displayed in the Dropdown menu',\n    },\n    {\n      name: 'width',\n      type: 'number',\n      description: 'The minimum width of the Dropdown menu content',\n    },\n    {\n      name: 'outline',\n      type: 'boolean',\n      description: 'Add an outline to the Dropdown menu.',\n    },\n    {\n      name: 'variant',\n      type: \"'default' | 'filled'\",\n      description: 'The variant for the Dropdown menu appearance',\n    },\n    {\n      name: 'label',\n      type: 'ReactNode',\n      description:\n        'The label/icon that will be rendered in the Dropdown menu button',\n    },\n    {\n      name: 'before',\n      type: 'ReactNode',\n      description: 'Insert icon into Dropdown menu button before label',\n    },\n    {\n      name: 'after',\n      type: 'ReactNode',\n      description: 'Insert icon into Dropdown menu button after label',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Hide the label if using icons only',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={DropdownMenu}\n  rows={[\n    {\n      name: 'dropdown-menu-root',\n      description: 'Dropdown menu root element',\n    },\n    {\n      name: 'dropdown-menu-content',\n      description: 'Dropdown menu content',\n    },\n    {\n      name: 'dropdown-menu-item',\n      description: 'Dropdown menu item',\n    },\n    {\n      name: 'dropdown-menu-item-icon-container',\n      description: 'Dropdown menu item icon container',\n    },\n    {\n      name: 'dropdown-menu-checkbox',\n      description: 'Dropdown menu checkbox',\n    },\n    {\n      name: 'dropdown-menu-checkbox-checkmark-container',\n      description: 'Dropdown menu checkbox checkmark container',\n    },\n    {\n      name: 'dropdown-menu-checkbox-checkmark',\n      description: 'Dropdown menu checkbox checkmark',\n    },\n    {\n      name: 'dropdown-menu-radio-group-label',\n      description: 'Dropdown menu radio group label',\n    },\n    {\n      name: 'dropdown-menu-radio-group',\n      description: 'Dropdown menu radio group',\n    },\n    {\n      name: 'dropdown-menu-radio',\n      description: 'Dropdown menu radio',\n    },\n    {\n      name: 'dropdown-menu-radio-dot-container',\n      description: 'Dropdown menu radio dot container',\n    },\n    {\n      name: 'dropdown-menu-radio-dot',\n      description: 'Dropdown menu radio dot',\n    },\n    {\n      name: 'dropdown-menu-item-separator',\n      description: 'Dropdown menu item separator',\n    },\n    {\n      name: 'dropdown-menu-sub-trigger-item',\n      description: 'Dropdown menu submenu trigger',\n    },\n    {\n      name: 'dropdown-menu-sub-trigger-icon-container',\n      description: 'Dropdown menu submenu trigger icon container',\n    },\n    {\n      name: 'dropdown-menu-sub-trigger-icon',\n      description: 'Dropdown menu submenu trigger icon',\n    },\n    {\n      name: 'dropdown-menu-trigger',\n      description: 'Dropdown menu trigger',\n    },\n  ]}\n/>\n"))),(0,r.kt)(m,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("p",null,"Adheres to the []",(0,r.kt)(p,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton",mdxType:"ExitLink"},"Menu Button WAI-ARIA design pattern")," and uses ",(0,r.kt)(p,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#kbd_roving_tabindex",mdxType:"ExitLink"},"roving tabindex")," to manage focus movement among menu items."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [bookmarksChecked, setBookmarksChecked] = useState(true);\n  const [urlsChecked, setUrlsChecked] = useState(false);\n  const [person, setPerson] = useState('Pedro');\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n    },\n    {\n      title: 'Sub menu',\n      subMenu: [\n        {\n          title: 'Save As...',\n          icon: <IconMaterial icon=\"save\" />,\n          onClick: () => {\n            console.log('Clicked Save As');\n          },\n        },\n        {\n          checkboxes: [\n            {\n              label: 'Show Full Urls',\n              value: 'Show Full Urls',\n              checked: urlsChecked,\n              onChange: setUrlsChecked,\n            },\n          ],\n        },\n        {\n          label: 'Radio Group',\n          value: person,\n          onChange: setPerson,\n          radios: [\n            {\n              label: 'Pedro Duarte',\n              value: 'Pedro',\n            },\n            { label: 'Tom Hanks', value: 'Tom' },\n          ],\n        },\n      ],\n    },\n    {\n      checkboxes: [\n        {\n          label: 'Show Bookmarks',\n          value: 'Show Bookmarks',\n          checked: bookmarksChecked,\n          onChange: setBookmarksChecked,\n        },\n        {\n          label: 'Show Full Urls',\n          value: 'Show Full Urls',\n          checked: urlsChecked,\n          onChange: setUrlsChecked,\n        },\n      ],\n    },\n    {\n      label: 'Radio Group',\n      value: person,\n      onChange: setPerson,\n      radios: [\n        {\n          label: 'Pedro Duarte',\n          value: 'Pedro',\n        },\n        { label: 'Tom Hanks', value: 'Tom' },\n      ],\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <DropdownMenu\n        outline\n        label=\"Options\"\n        after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n        menuItems={menuItems}\n      />\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description: 'Moves focus to the next focusable element.',\n    },\n    {\n      name: 'Enter',\n      description:\n        'If focus is on a Dropdown menu button, opens the relevant Dropdown menu. If focus is on a menu item with a trigger, opens the relevant sub-menu.',\n    },\n    {\n      name: 'Space',\n      description:\n        'If focus is on a Dropdown menu button, opens the relevant Dropdown menu. If focus is on a menu item with a trigger, opens the relevant sub-menu.',\n    },\n    {\n      name: 'Escape',\n      description:\n        'Closes open Dropdown menu and moves focus to its Dropdown menu button.',\n    },\n    {\n      name: 'Up Arrow',\n      description: 'Focuses the previous menu item.',\n    },\n    {\n      name: 'Down Arrow',\n      description: 'Focuses the next menu item.',\n    },\n    {\n      name: 'Right Arrow',\n      description:\n        'Opens a sub-menu if focus is on a menu item with a trigger.',\n    },\n    {\n      name: 'Left Arrow',\n      description: 'Closes a sub-menu if open.',\n    },\n    {\n      name: 'Home',\n      description: 'Moves focus to the first item in the Dropdown menu.',\n    },\n    {\n      name: 'End',\n      description: 'Moves focus to the last item in the Dropdown menu.',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0}}]);