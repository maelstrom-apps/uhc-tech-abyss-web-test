"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[7160],{93093:(e,n,a)=>{a.r(n),a.d(n,{contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>u});var t,l=a(7896),o=a(31461),i=(a(2784),a(3905)),s=["components"],r={id:"data-table",category:"Data Display",title:"DataTable",description:"Displays a matrix of information with columns, rows, and information that can operate dynamically.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3139%3A23110",pagination_prev:"web/ui/code-highlighter",pagination_next:"web/ui/indicator"},d=void 0,c={unversionedId:"web/ui/data-table",id:"web/ui/data-table",isDocsHomePage:!1,title:"DataTable",description:"Displays a matrix of information with columns, rows, and information that can operate dynamically.",source:"@site/docs/web/ui/DataTable.md",sourceDirName:"web/ui",slug:"/web/ui/data-table",permalink:"/web/ui/data-table",tags:[],version:"current",frontMatter:{id:"data-table",category:"Data Display",title:"DataTable",description:"Displays a matrix of information with columns, rows, and information that can operate dynamically.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3139%3A23110",pagination_prev:"web/ui/code-highlighter",pagination_next:"web/ui/indicator"},sidebar:"docs",previous:{title:"CodeHighlighter",permalink:"/web/ui/code-highlighter"},next:{title:"Indicator",permalink:"/web/ui/indicator"}},u=[{value:"Usage",id:"usage",children:[],level:2},{value:"Table Settings",id:"table-settings",children:[],level:2},{value:"Resize Columns",id:"resize-columns",children:[],level:2},{value:"Minimum Column Width",id:"minimum-column-width",children:[],level:2},{value:"Overriding Default Column Widths",id:"overriding-default-column-widths",children:[],level:2},{value:"Fullscreen",id:"fullscreen",children:[],level:2},{value:"Display Settings",id:"display-settings",children:[],level:2},{value:"Download Table",id:"download-table",children:[{value:"Remove CSV Columns",id:"remove-csv-columns",children:[],level:3}],level:2},{value:"Update Table Data",id:"update-table-data",children:[],level:2},{value:"Column Sort",id:"column-sort",children:[],level:2},{value:"SortType",id:"sorttype",children:[],level:2},{value:"Bulk Actions",id:"bulk-actions",children:[],level:2},{value:"Individual Actions",id:"individual-actions",children:[],level:2},{value:"Custom Table Header Section",id:"custom-table-header-section",children:[],level:2},{value:"Custom Table Header Buttons",id:"custom-table-header-buttons",children:[],level:2},{value:"Selection",id:"selection",children:[],level:2},{value:"Single Selection",id:"single-selection",children:[],level:2},{value:"Expansion Rows",id:"expansion-rows",children:[],level:2},{value:"Filtering",id:"filtering",children:[{value:"Global Filtering",id:"global-filtering",children:[],level:3},{value:"Column Filtering",id:"column-filtering",children:[{value:"Initial Filters",id:"initial-filters",children:[],level:4},{value:"Column Filter Types",id:"column-filter-types",children:[],level:4},{value:"Remove Filter Columns",id:"remove-filter-columns",children:[],level:4}],level:3}],level:2},{value:"Custom Headers",id:"custom-headers",children:[],level:2},{value:"Custom Cells",id:"custom-cells",children:[],level:2},{value:"Custom CSV",id:"custom-csv",children:[],level:2},{value:"Data Test ID",id:"data-test-id",children:[],level:2},{value:"Pagination",id:"pagination",children:[{value:"Page Size Options",id:"page-size-options",children:[],level:3},{value:"Hide Top Pagination",id:"hide-top-pagination",children:[],level:3},{value:"Hide Bottom Pagination",id:"hide-bottom-pagination",children:[],level:3},{value:"Pagination Result Count Override",id:"pagination-result-count-override",children:[],level:3}],level:2},{value:"Server-Side Pagination",id:"server-side-pagination",children:[{value:"API Pagination Call",id:"api-pagination-call",children:[],level:3},{value:"API Query Options",id:"api-query-options",children:[],level:3},{value:"Manual Global Filter",id:"manual-global-filter",children:[],level:3},{value:"Manual Column Filters",id:"manual-column-filters",children:[],level:3},{value:"Manual Sort By",id:"manual-sort-by",children:[],level:3},{value:"Custom Row IDs",id:"custom-row-ids",children:[],level:3},{value:"Triggering Data Refresh",id:"triggering-data-refresh",children:[{value:"Disable On Load",id:"disable-on-load",children:[],level:4}],level:3}],level:2},{value:"Custom Messaging",id:"custom-messaging",children:[{value:"No Data Message",id:"no-data-message",children:[],level:3},{value:"Error Message",id:"error-message",children:[],level:3}],level:2}],p=(t="Tab",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),m={toc:u};function h(e){var n=e.components,a=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,l.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(p,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { DataTable } from '@abyss/web/ui/DataTable';\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"The data table's features are ideal for organizing and displaying data in a UI. The column headers can sort data in ascending or descending order, rows can be expanded to progressively disclose information, and single or batch actions can be taken on rows."),(0,i.kt)("p",null,"The data table toolbar gives a location for primary buttons, search, filtering, table display settings, and other utilities."),(0,i.kt)("p",null,"Data tables should be used to organize and display data. They are ideal if your user must navigate to a specific piece of data to complete a task or if you need to display all of a user's resources."),(0,i.kt)("p",null,"Data tables should be not be used when a more complex display of the data or interactions are required or as a replacement for a spreadsheet application."),(0,i.kt)("p",null,"Data tables should be placed in a page's main content area and given plenty of space to display data without truncation. Avoid placing data tables inside modals or smaller containers where the information can feel cramped or needs truncation."),(0,i.kt)("p",null,"The data table ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," prop is required and applied as an aria-label to the root ",(0,i.kt)("inlineCode",{parentName:"p"},"<table>")," element but if you'd like to hide the title header pass in the ",(0,i.kt)("inlineCode",{parentName:"p"},"hideTitleHeader")," prop."),(0,i.kt)("p",null,"Below is an example of data table component that utilizes other Abyss components like ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/badge"},"Badge"),", ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/icon-material"},"Icon"),", and ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/link"},"Link")," as a cell item."),(0,i.kt)("p",null,"For data table cells that overflow you can use leverage the ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/link"},"Link")," and ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/Drawer"},"Drawer")," component to display additional data. The ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/Drawer"},"Drawer")," components content is fully customizable, currently represented in list of values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getRandomVariant = () => {\n    const variants = [`success`, `warning`, `error`, `info`, `neutral`];\n    const random = Math.floor(Math.random() * 5);\n    return variants[random];\n  };\n\n  const getRandomBool = () => {\n    return Math.random() < 0.5;\n  };\n\n  const getOverFlowData = (row) => {\n    let value;\n    if (row % 2 === 0) {\n      value = [];\n      for (let i = 0; i < 10; i++) {\n        const random = Math.floor(Math.random() * (row * (i + 2)));\n        const temp = 160409583 + i + 1 + random;\n        value.push(temp);\n      }\n    } else {\n      const random = Math.floor(Math.random() * row);\n      value = 161585930 + random;\n    }\n    return value;\n  };\n\n  const createData = (count) => {\n    const data = [];\n    for (let i = 0; i < count; i++) {\n      const variant = getRandomVariant();\n      data.push({\n        col1: `Col 1/Row ${i + 1}`,\n        col2: 'Table Data',\n        col3: 'Table Data',\n        col4: getOverFlowData(i + 1),\n        col5: variant,\n        col6: 'Table Data',\n        col7: getRandomBool(),\n      });\n    }\n    return data;\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: (\n          <React.Fragment>\n            <div>Table Data 1</div>\n            <a href=\"https://www.google.com\">What is this?</a>\n          </React.Fragment>\n        ),\n        accessor: 'col1',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Table Data 2',\n        accessor: 'col2',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        disableSortBy: true,\n        canReorderColumn: false,\n        Cell: ({ value }) => {\n          return (\n            <Layout.Group>\n              <IconMaterial icon=\"bookmarks\" size=\"sm\" />\n              {value}\n            </Layout.Group>\n          );\n        },\n      },\n      {\n        Header: 'Table Data 3',\n        accessor: 'col3',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        label: 'Table Data 3',\n        Cell: ({ value }) => {\n          return <Link href=\"https://www.google.com\">{value}</Link>;\n        },\n      },\n      {\n        Header: 'Overflow Data',\n        accessor: 'col4',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        disableSortBy: true,\n        canReorderColumn: false,\n        Cell: ({ value, row }) => {\n          const isArray = Array.isArray(value);\n          if (isArray && !value.length) return '';\n          return (\n            <Layout.Group css={{ justifyContent: 'space-between' }}>\n              {isArray ? value[0] : value}\n              {isArray && (\n                <Link\n                  size=\"$sm\"\n                  onClick={() => drawer.open({ value })}\n                  aria-haspopup=\"dialog\"\n                >\n                  See All\n                </Link>\n              )}\n            </Layout.Group>\n          );\n        },\n      },\n      {\n        Header: 'Table Data 5',\n        accessor: 'col5',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        disableSortBy: true,\n        canReorderColumn: false,\n        Cell: ({ value }) => {\n          const badgeLabel = value.charAt(0).toUpperCase() + value.slice(1);\n          return <Badge variant={value}>{badgeLabel} Badge</Badge>;\n        },\n      },\n      {\n        Header: 'Table Data 6',\n        accessor: 'col6',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        disableSortBy: true,\n        canReorderColumn: false,\n        Cell: ({ value }) => {\n          return (\n            <Layout.Group css={{ justifyContent: 'space-between' }}>\n              {value}\n              <IconMaterial icon=\"info\" size=\"sm\" />\n            </Layout.Group>\n          );\n        },\n      },\n      {\n        Header: 'Favorite',\n        accessor: 'col7',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        disableSortBy: true,\n        canReorderColumn: false,\n        sortType: 'basic',\n        minWidth: 100,\n        width: 100,\n        disableResizing: true,\n        Cell: ({ value, cellActions, row, ...props }) => {\n          return (\n            <label for={row.id}>\n              <VisuallyHidden>Add To Favorites</VisuallyHidden>\n              <input\n                id={row.id}\n                type=\"checkbox\"\n                onChange={() => {\n                  cellActions.modifyRow(row, { col7: !value });\n                }}\n                style={{\n                  height: '25px',\n                  overflow: 'hidden',\n                  position: 'absolute',\n                  width: '25px',\n                  cursor: 'pointer',\n                }}\n              />\n              <IconMaterial icon={value ? 'star' : 'star_border'} size=\"md\" />\n            </label>\n          );\n        },\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => [...createData(200)], []);\n\n  const bulkActions = [\n    {\n      onClick: ({ deleteRows }) => {\n        deleteRows();\n      },\n      icon: <IconMaterial icon=\"delete\" />,\n      label: 'Delete Rows',\n      isSeparated: true,\n    },\n    {\n      onClick: ({ modifyRows }) => {\n        modifyRows({ col1: 'Modified Cell' });\n      },\n      label: 'Modify Cells',\n    },\n    {\n      onClick: ({ modifyRows }) => {\n        modifyRows({\n          col1: `Modified Col 1`,\n          col2: `Modified Col 2`,\n          col3: `Modified Col 3`,\n        });\n      },\n      label: 'Modify Rows',\n      icon: <IconMaterial icon=\"mark_as_unread\" />,\n      isSingle: true,\n    },\n  ];\n\n  const individualActions = [\n    {\n      onClick: ({ deleteRow, row }) => {\n        deleteRow(row);\n      },\n      checkDisabled: (row) => {\n        return row.index % 4 === 0;\n      },\n      icon: <IconMaterial icon=\"delete\" />,\n      label: 'Delete Row',\n      isSeparated: true,\n    },\n    {\n      onClick: ({ modifyRow, row }) => {\n        modifyRow(row, { col1: 'Modified Cell' });\n      },\n      label: 'Modify Cell',\n    },\n    {\n      onClick: ({ modifyRow, row }) => {\n        modifyRow(row, {\n          col1: `Modified Col 1`,\n          col2: `Modified Col 2`,\n          col3: `Modified Col 3`,\n        });\n      },\n      label: 'Modify Row',\n      icon: <IconMaterial icon=\"mark_as_unread\" />,\n    },\n  ];\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    showSelection: true,\n    bulkActions,\n    individualActions,\n    showPagination: true,\n    showGlobalFilter: true,\n    showTableSettings: true,\n    showFullscreenButton: true,\n    showDownloadButton: true,\n    showFilterDataset: true,\n    showColumnVisibilityConfig: true,\n    additionalPaginationText: '(Can insert extra text here)',\n    uniqueStorageId: 'data-table-usage',\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n    onColumnVisibilityOpen: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  const drawer = useOverlay('cellOverflow-drawer');\n  const { data: drawerData } = drawer.getState();\n\n  return (\n    <React.Fragment>\n      <DataTable title=\"Data Table Example\" tableState={dataTableProps} />\n      <Drawer title=\"Cell Overflow Data\" model=\"cellOverflow-drawer\">\n        <Drawer.Section>\n          {drawerData &&\n            drawerData.value.map((item) => {\n              return (\n                <p key={item} style={{ marginBottom: 30 }}>\n                  {item}\n                </p>\n              );\n            })}\n        </Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"table-settings"},"Table Settings"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"showColumnVisibilityConfig")," prop to allow the users to customize the visibility and order of the columns. You can restrict the users ability to toggle visibility and reorder columns by passing in the ",(0,i.kt)("inlineCode",{parentName:"p"},"canToggleVisibility")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"canReorderColumn")," respectively in the column config. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"isHiddenByDefault")," column prop to have a set of columns that are hidden by default that the user can toggle on/off. Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"showColumn")," set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to override the ",(0,i.kt)("inlineCode",{parentName:"p"},"isHiddenByDefault")," config."),(0,i.kt)("p",null,"If you need the current configuration of the columns pass a callback function to the ",(0,i.kt)("inlineCode",{parentName:"p"},"onColumnVisibilityClose")," prop to receive the most recent columns on close of the column management drawer. To automatically store the column order and visibility, pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"uniqueStorageId")," prop to have the config stored locally."),(0,i.kt)("p",null,"If you need the current configuration of the columns pass a callback function to the ",(0,i.kt)("inlineCode",{parentName:"p"},"onColumnVisibilityOpen")," prop to receive the most recent columns on open of the column management drawer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(5, 4);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n        canReorderColumn: false,\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n        canToggleVisibilty: true,\n        isHiddenByDefault: true,\n        showColumn: true,\n        disableSortBy: true,\n        canReorderColumn: false,\n      },\n      {\n        Header: 'Column 3',\n        accessor: 'col3',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        canReorderColumn: true,\n        label: 'HSA',\n      },\n      {\n        Header: 'Column 4',\n        accessor: 'col4',\n        canToggleVisibilty: true,\n        isHiddenByDefault: true,\n        disableSortBy: true,\n        canReorderColumn: true,\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    showColumnVisibilityConfig: true,\n    showPagination: false,\n    uniqueStorageId: 'data-table-local-storage',\n    onColumnVisibilityClose: (columns) => console.log('columns', columns),\n    onColumnVisibilityOpen: (columns) => console.log('columns', columns),\n  });\n\n  const handleOnClick = () => {\n    dataTableProps.setColumns(newColumns, true);\n    dataTableProps.setData(newData, true);\n  };\n\n  return <DataTable title=\"Column Settings\" tableState={dataTableProps} />;\n};\n")),(0,i.kt)("h2",{id:"resize-columns"},"Resize Columns"),(0,i.kt)("p",null,"You can resize columns in the table by clicking and dragging the divider between two column headers. To disable resizing across the entire table, pass ",(0,i.kt)("inlineCode",{parentName:"p"},"disableResizing: true")," into the table options, or to prevent a specific column from being resized, pass ",(0,i.kt)("inlineCode",{parentName:"p"},"disableResizing: true")," into its respective column object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(100, 3);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Non-resizable column',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n        disableResizing: true,\n      },\n      {\n        Header: 'Resizable Column 1',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Resizable Column 2',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n      },\n    ],\n    []\n  );\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showTableSettings: true,\n    pageSizeOptions: [5, 10, 15],\n  });\n\n  return (\n    <DataTable title=\"Resize Columns\" tableState={dataTablePropsPagination} />\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(100, 3);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Table Resizing Disabled',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Non-resizable Column 2',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Non-resizable Column 3',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n      },\n    ],\n    []\n  );\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    disableResizing: true,\n    showTableSettings: true,\n    pageSizeOptions: [5, 10, 15],\n  });\n\n  return (\n    <DataTable\n      title=\"Resizing Disabled\"\n      tableState={dataTablePropsPagination}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"minimum-column-width"},"Minimum Column Width"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"minColumnWidth")," prop to set the minimum column width for columns in the table. The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"150")," pixels."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(100, 3);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Min Width: 300px (1)',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Min Width: 300px (2)',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Min Width: 300px (3)',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n      },\n    ],\n    []\n  );\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    minColumnWidth: 300,\n    pageSizeOptions: [5, 10, 15],\n  });\n\n  return (\n    <DataTable\n      title=\"Minimum Column Width\"\n      tableState={dataTablePropsPagination}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"overriding-default-column-widths"},"Overriding Default Column Widths"),(0,i.kt)("p",null,"Each individual column can receive the ",(0,i.kt)("inlineCode",{parentName:"p"},"minWidth"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"width"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"maxWidth")," properties to set their minimum, default, and maximum widths respectively."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(100, 5);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Default column widths',\n        accessor: 'col1',\n      },\n      {\n        Header: 'Min Width: 300px',\n        accessor: 'col2',\n        minWidth: 300,\n      },\n      {\n        Header: 'Starting Width: 250px',\n        accessor: 'col3',\n        width: 250,\n      },\n      {\n        Header: 'Max Width: 200px',\n        accessor: 'col4',\n        maxWidth: 200,\n      },\n    ],\n    []\n  );\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    pageSizeOptions: [5, 10, 15],\n  });\n\n  return (\n    <DataTable\n      title=\"Overriding Column Widths\"\n      tableState={dataTablePropsPagination}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"fullscreen"},"Fullscreen"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"showFullscreenButton")," prop to show a button that will render the table in fullscreen when clicked. The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(100, 3);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Column 3',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n      },\n    ],\n    []\n  );\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showFullscreenButton: true,\n    pageSizeOptions: [10, 20, 30],\n  });\n\n  return (\n    <DataTable\n      title=\"Fullscreen Button\"\n      tableState={dataTablePropsPagination}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"display-settings"},"Display Settings"),(0,i.kt)("p",null,"A dropdown menu for table configuration settings will be present above the table, allowing the user to hide empty columns and resize cells to ",(0,i.kt)("inlineCode",{parentName:"p"},"Comfortable")," (48px) ",(0,i.kt)("inlineCode",{parentName:"p"},"Cozy")," (40px) or ",(0,i.kt)("inlineCode",{parentName:"p"},"Compact")," (34px). The default cell height is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"Comfortable"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getRandomVariant = () => {\n    const variants = [`success`, `warning`, `error`, `info`, `neutral`];\n    const random = Math.floor(Math.random() * 5);\n    return variants[random];\n  };\n\n  const createData = (count) => {\n    const data = [];\n    for (let i = 0; i < count; i++) {\n      const variant = getRandomVariant();\n      data.push({\n        col1: `Col 1/Row ${i + 1}`,\n        col2: 'Table Data',\n        col3: null,\n        col4: variant,\n        col5: null,\n      });\n    }\n    return data;\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Table Data 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Table Data 2',\n        accessor: 'col2',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        disableSortBy: true,\n        canReorderColumn: false,\n        Cell: ({ value }) => {\n          return (\n            <Layout.Group>\n              <IconMaterial icon=\"bookmarks\" size=\"sm\" />\n              {value}\n            </Layout.Group>\n          );\n        },\n      },\n      {\n        Header: 'Table Data 3',\n        accessor: 'col3',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        label: 'Table Data 3',\n      },\n      {\n        Header: 'Table Data 4',\n        accessor: 'col4',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        disableSortBy: true,\n        canReorderColumn: false,\n        Cell: ({ value }) => {\n          const badgeLabel = value.charAt(0).toUpperCase() + value.slice(1);\n          return <Badge variant={value}>{badgeLabel} Badge</Badge>;\n        },\n      },\n      {\n        Header: 'Table Data 5',\n        accessor: 'col5',\n        canToggleVisibilty: true,\n        isHiddenByDefault: true,\n        disableSortBy: true,\n        canReorderColumn: false,\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => [...createData(10)], []);\n\n  const actions = [\n    {\n      onClick: ({ deleteRows }) => {\n        deleteRows();\n      },\n      icon: <IconMaterial icon=\"delete\" />,\n      label: 'Delete Row',\n    },\n    {\n      onClick: ({ modifyRows }) => {\n        modifyRows({ col1: 'Modified Cell' });\n      },\n      label: 'Modify Cell',\n    },\n    {\n      onClick: ({ modifyRows }) => {\n        modifyRows({\n          col1: `Modified Col 1`,\n          col2: `Modified Col 2`,\n          col3: `Modified Col 3`,\n        });\n      },\n      label: 'Modify Row',\n      icon: <IconMaterial icon=\"mark_as_unread\" />,\n      isSingle: true,\n    },\n  ];\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialData: data,\n    initialColumns: columns,\n    showSelection: true,\n    actions,\n    showPagination: false,\n    showTableSettings: true,\n    additionalPaginationText: '(Can insert extra text here)',\n    uniqueStorageId: 'data-table-usage',\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return (\n    <DataTable title=\"Configuration Settings\" tableState={dataTableProps} />\n  );\n};\n")),(0,i.kt)("h2",{id:"download-table"},"Download Table"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"showDownloadButton")," prop to show a dropdown menu that allows you to download the table data. The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"#custom-csv"},"Custom CSV")," for more information on how to apply custom rendering to the table data csv file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(1000, 3);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Column 3',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n      },\n    ],\n    []\n  );\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showDownloadButton: true,\n    pageSizeOptions: [10, 20, 30],\n    showGlobalFilter: true,\n  });\n\n  return (\n    <DataTable title=\"Download Button\" tableState={dataTablePropsPagination} />\n  );\n};\n")),(0,i.kt)("h3",{id:"remove-csv-columns"},"Remove CSV Columns"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"removeCsvColumns")," prop to remove columns from the csv download. The ",(0,i.kt)("inlineCode",{parentName:"p"},"removeCsvColumns")," prop takes an array containing the accessor values from the columns you would like removed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(1000, 3);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Remove on CSV Download',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n      },\n    ],\n    []\n  );\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showDownloadButton: true,\n    pageSizeOptions: [10, 20, 30],\n    showGlobalFilter: true,\n    removeCsvColumns: ['col3'],\n  });\n\n  return (\n    <DataTable\n      title=\"Remove CSV Download\"\n      tableState={dataTablePropsPagination}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"update-table-data"},"Update Table Data"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"setColumns")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"setData")," methods to update the columns and rows in that table. A second parameter of type ",(0,i.kt)("inlineCode",{parentName:"p"},"boolean")," can be passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"setColumns")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"setData")," to skip page reset, the default is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const { data, columns } = utils.useDocDataTable(5);\n  const { data: newData, columns: newColumns } = utils.useDocDataTable(25);\n\n  const dataTableProps = useDataTable({\n    showColumnSort: true,\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showSelection: true,\n  });\n\n  const handleOnClick = () => {\n    dataTableProps.setColumns(newColumns, true);\n    dataTableProps.setData(newData, true);\n  };\n\n  return (\n    <React.Fragment>\n      <DataTable title="Update Data" tableState={dataTableProps} />\n      <Button onClick={handleOnClick}>Update Data</Button>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"column-sort"},"Column Sort"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"showColumnSort")," prop to either turn off or on the ability for the user to sort columns. Pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"disableSortBy")," prop to the column config to toggle the ability to sort or not sort the columns."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const { data, columns } = utils.useDocDataTable(5);\n\n  const dataTableProps = useDataTable({\n    showColumnSort: false,\n    showPagination: false,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  const dataTablePropsSort = useDataTable({\n    showColumnSort: true,\n    showPagination: false,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return (\n    <Layout.Group>\n      <DataTable title="Base" tableState={dataTableProps} />\n      <DataTable title="Sorting" tableState={dataTablePropsSort} />\n    </Layout.Group>\n  );\n};\n')),(0,i.kt)("h2",{id:"sorttype"},"SortType"),(0,i.kt)("p",null,"Pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"sortType")," prop to the column config to sort the column data. It takes following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"alphanumeric"),": Sorts by mixed alphanumeric values with case-sensitivity.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"alphanumericCaseInsensitive"),": Sorts by mixed alphanumeric values without case-sensitivity."))),(0,i.kt)("p",null,"The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"alphanumericCaseInsensitive"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getRandomVariant = () => {\n    const variants = [1, 3, 'Alpha', 'beta', 'Charlie', 'Theta'];\n    const random = Math.floor(Math.random() * 5);\n    return variants[random];\n  };\n\n  const createData = (count) => {\n    const data = [];\n    for (let i = 0; i < count; i++) {\n      const variant = getRandomVariant();\n      data.push({\n        col1: variant,\n        col2: variant,\n      });\n    }\n    return data;\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Table Data 1',\n        accessor: 'col1',\n        // Default Sort Type\n        sortType: 'alphanumericCaseInsensitive',\n      },\n      {\n        Header: 'Table Data 2',\n        accessor: 'col2',\n        sortType: 'alphanumeric',\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => [...createData(10)], []);\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    showPagination: false,\n  });\n\n  return <DataTable title=\"Data Table Example\" tableState={dataTableProps} />;\n};\n")),(0,i.kt)("h2",{id:"bulk-actions"},"Bulk Actions"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"bulkActions")," prop to add table actions to selected row. Each action's ",(0,i.kt)("inlineCode",{parentName:"p"},"onClick")," function will be passed an object as a parameter, which has the following properties:"),(0,i.kt)("p",null,"Main properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deleteRows")," - a function that deletes the selected rows."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"modifyRows")," - a function to modify multiple cells of the selected rows. Takes one parameter, an object where the keys are column IDs to be modified, and their respective values are what the cells will be changed to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"modifyRow")," - a function similar to modifyRows but allows you to designate the specific rows to modify from the selected group. Takes two parameters, the id of the row to be modified and an object where the keys are column IDs to be modified, and their respective values are what the cells will be changed to.")),(0,i.kt)("p",null,"Other properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getSelectedRowIds")," - a function that returns IDs of the selected rows."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getSelectedRows")," - a function that returns the row object of selected rows. Does not work when ",(0,i.kt)("a",{parentName:"li",href:"#server-side-pagination"},"server-side pagination")," is active."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"clearCache")," - a function that can be called when using ",(0,i.kt)("a",{parentName:"li",href:"#server-side-pagination"},"server-side pagination")," to clear the cached data. This would be useful if you call your API to update the selected rows (using ",(0,i.kt)("inlineCode",{parentName:"li"},"getSelectedRowIds"),"), so you can empty the cache and retrieve the updated data from the API.")),(0,i.kt)("p",null,"Each action must include a label and an icon. Pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"isSingle")," flag into any action to disable the button if the user has more than one row selected. Pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"isSeparated")," flag into any action to create a horizontal divider between that action and the next action."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(200);\n\n  const bulkActions = [\n    {\n      onClick: ({ deleteRows, getSelectedRowIds, clearCache }) => {\n        console.log('Deleting rows: ', getSelectedRowIds());\n        deleteRows();\n      },\n      icon: <IconMaterial icon=\"delete\" />,\n      label: 'Delete Rows',\n      isSeparated: true,\n    },\n    {\n      onClick: ({ modifyRows, getSelectedRowIds, clearCache }) => {\n        console.log('Modifying cells in rows: ', getSelectedRowIds());\n        modifyRows({ col1: 'Modify Cell' });\n      },\n      icon: <IconMaterial icon=\"mark_as_unread\" />,\n      label: 'Modify Cells',\n    },\n    {\n      onClick: ({\n        modifyRows,\n        getSelectedRowIds,\n        clearCache,\n        getSelectedRows,\n      }) => {\n        console.log('getSelectedRows', getSelectedRows());\n        const ids = getSelectedRowIds();\n        modifyRows({\n          col1: `Modified Col1/Row id: ${ids[0]}`,\n          col2: `Modified Col2/Row id: ${ids[0]}`,\n          col3: `Modified Col3/Row id: ${ids[0]}`,\n        });\n      },\n      label: 'Modify Rows',\n      isSingle: true,\n    },\n  ];\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    showSelection: true,\n    defaultSelectedRows: { 1: true, 6: true },\n    bulkActions,\n  });\n\n  return <DataTable title=\"Bulk Actions\" tableState={dataTableProps} />;\n};\n")),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"modifyRow")," whenever you need to control which rows from the selected group should be modified."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isLoading, setLoading] = useState(false);\n\n  const createData = (count) => {\n    const data = [];\n    for (let i = 0; i < count; i++) {\n      data.push({\n        col1: `Col 1/Row ${i + 1}`,\n      });\n    }\n    return data;\n  };\n\n  const data = React.useMemo(() => [...createData(10)], []);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \'Column 1\',\n        accessor: \'col1\',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n        canReorderColumn: false,\n      },\n      {\n        Header: \'Status\',\n        accessor: \'col2\',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n        canReorderColumn: false,\n      },\n    ],\n    []\n  );\n\n  const modifySpecifiedRows = ({\n    getSelectedRowIds,\n    getSelectedRows,\n    modifyRow,\n  }) => {\n    setLoading(true);\n\n    setTimeout(() => {\n      setLoading(false);\n\n      const selectedRowIds = getSelectedRowIds();\n      const selectedRows = getSelectedRows();\n      console.log(\'getSelectedRows\', selectedRows);\n      console.log(\'getSelectedRowIds\', selectedRowIds);\n\n      selectedRows.forEach((row, index) => {\n        const rowId = selectedRowIds[index];\n        if (rowId % 2 === 0) {\n          modifyRow(rowId, {\n            col2: <Badge variant="error">Failed to Complete</Badge>,\n          });\n        } else {\n          modifyRow(rowId, {\n            col2: <Badge variant="success">Completed Successfully</Badge>,\n          });\n        }\n      });\n    }, 1000);\n  };\n\n  const bulkActions = [\n    {\n      onClick: modifySpecifiedRows,\n      label: \'Modify Specified Rows\',\n    },\n  ];\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    showSelection: true,\n    showPagination: false,\n    defaultSelectedRows: { 1: true, 6: true },\n    bulkActions,\n  });\n\n  return (\n    <LoadingOverlay\n      loadingTitle="Please Wait"\n      loadingMessage="Retrieving Information."\n      statusTitle="Status update"\n      statusMessage="Sample message..."\n      ariaLoadingLabel="Example loading aria label"\n      isLoading={isLoading}\n    >\n      <DataTable\n        title="Bulk Actions - Modify Specified Rows"\n        tableState={dataTableProps}\n      />\n    </LoadingOverlay>\n  );\n};\n')),(0,i.kt)("h2",{id:"individual-actions"},"Individual Actions"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"individualActions")," prop to add table actions to individual rows. When ",(0,i.kt)("inlineCode",{parentName:"p"},"individualActions")," is used an 'Actions' column will appear in the table. If an array of action objects is added to ",(0,i.kt)("inlineCode",{parentName:"p"},"individualActions")," each row will have its own ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/dropdown-menu"},"DropDownMenu")," that includes each of the actions within ",(0,i.kt)("inlineCode",{parentName:"p"},"individualActions"),". If only a single action object is added, rather than a dropdown menu the action will be converted to a single button in the style of either a ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/button"},"Button")," or ",(0,i.kt)("a",{parentName:"p",href:"web/ui/link"},"Link")," based on the ",(0,i.kt)("inlineCode",{parentName:"p"},"buttonVariant")," prop value. The single action default style type is link."),(0,i.kt)("p",null,"Each action's ",(0,i.kt)("inlineCode",{parentName:"p"},"onClick")," function will be passed an object as a parameter, which has the following properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"row")," - the row being interacted with. You will almost always want to pass this into ",(0,i.kt)("inlineCode",{parentName:"li"},"deleteRow")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"modifyRow")," as the row being modified / deleted."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"deleteRow")," - a function that deletes a row. Takes one parameter, the row to delete."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"modifyRow")," - a function to modify cells in a row. Takes two parameters; the first one is the row to modify, and the second is an object where the keys are column IDs to be modified, and their respective values are what the cells will be changed to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"clearCache")," - a function that can be called when using ",(0,i.kt)("a",{parentName:"li",href:"#server-side-pagination"},"server-side pagination")," to clear the cached data. This would be useful if you call your API to update the data, so you can empty the cache and retrieve the updated data from the API.")),(0,i.kt)("p",null,"You may provide a ",(0,i.kt)("inlineCode",{parentName:"p"},"checkDisabled")," function to the action, which takes ",(0,i.kt)("inlineCode",{parentName:"p"},"row")," as a parameter and must return ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". If it returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the action will be disabled for that row. Use this function to determine if an action should be disabled; for example, if your table has emails as data and a specific email is marked as read, you would want to disable the action to mark it as read (using ",(0,i.kt)("inlineCode",{parentName:"p"},"checkDisabled")," to check the read / unread field in the row data)."),(0,i.kt)("p",null,"Each action must include a label and an icon. Pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"isSeparated")," flag into any action to create a horizontal divider between that action and the next action."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(100);\n\n  const individualActions = [\n    {\n      onClick: ({ deleteRow, row }) => {\n        deleteRow(row);\n        console.log('deleted row: ', row);\n      },\n      checkDisabled: (row) => {\n        return row.index % 4 === 0;\n      },\n      icon: <IconMaterial icon=\"delete\" />,\n      label: 'Delete Row',\n      isSeparated: true,\n    },\n    {\n      onClick: ({ modifyRow, row }) => {\n        modifyRow(row, { col1: 'Modified Cell' });\n      },\n      label: 'Modify Cell',\n    },\n    {\n      onClick: ({ modifyRow, row }) => {\n        modifyRow(row, {\n          col1: `Modified Col 1`,\n          col2: `Modified Col 2`,\n          col3: `Modified Col 3`,\n        });\n      },\n      label: 'Modify Row',\n      icon: <IconMaterial icon=\"mark_as_unread\" />,\n    },\n  ];\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    showSelection: true,\n    individualActions,\n  });\n\n  return (\n    <DataTable\n      title=\"Individual Actions - Multiple Actions DropDownMenu\"\n      tableState={dataTableProps}\n    />\n  );\n};\n")),(0,i.kt)("p",null,"To use a single action in the style of a ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/link"},"Link")," simply pass in a single object and it will default to the style of a link."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(5);\n\n  const deleteLinkButton = {\n    onClick: ({ deleteRow, row }) => {\n      deleteRow(row);\n      console.log('deleted row: ', row);\n    },\n    checkDisabled: (row) => {\n      return row.index % 4 === 0;\n    },\n    label: 'Delete',\n  };\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    showSelection: true,\n    individualActions: deleteLinkButton,\n  });\n\n  return (\n    <DataTable\n      title=\"Individual Actions - Single Action Link\"\n      tableState={dataTableProps}\n    />\n  );\n};\n")),(0,i.kt)("p",null,"To use a single action in the style of a ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/button"},"Button")," pass in a single object and set the ",(0,i.kt)("inlineCode",{parentName:"p"},"buttonVariant")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(5);\n\n  const deleteButton = {\n    onClick: ({ deleteRow, row }) => {\n      deleteRow(row);\n      console.log('deleted row: ', row);\n    },\n    checkDisabled: (row) => {\n      return row.index % 4 === 0;\n    },\n    buttonVariant: true,\n    label: 'Delete',\n  };\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    showSelection: true,\n    individualActions: deleteButton,\n  });\n\n  return (\n    <DataTable\n      title=\"Individual Actions - Single Action Button\"\n      tableState={dataTableProps}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"custom-table-header-section"},"Custom Table Header Section"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"customHeaderSection")," prop to add custom content to the left side of the table header. If ",(0,i.kt)("a",{parentName:"p",href:"#bulk-actions"},"Bulk Actions")," and/or ",(0,i.kt)("a",{parentName:"p",href:"#custom-table-header-buttons"},"Custom Header Buttons")," are utilized their corresponding buttons will appear to the right of this content."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1',\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n      },\n    ],\n    []\n  );\n\n  const createData = (dataSetValue) => {\n    const data = [];\n    for (let i = 0; i < 10; i++) {\n      data.push({\n        col1: `Data Set ${dataSetValue} - Col 1/Row ${i + 1}`,\n        col2: `Data Set ${dataSetValue} - Col 2/Row ${i + 1}`,\n      });\n    }\n    return data;\n  };\n\n  const [isLoading, setLoading] = useState(false);\n\n  const form = useForm({\n    defaultValues: {\n      'custom-header-section': '1',\n    },\n  });\n\n  const updateTableData = () => {\n    setLoading(true);\n    setTimeout(() => {\n      const currentValue = form.getValues('custom-header-section');\n      const data = createData(currentValue);\n      dataTableProps.setData(data);\n      setLoading(false);\n      form.setFocus('custom-header-section');\n    }, 1000);\n  };\n\n  const customHeaderSection = (\n    <FormProvider state={form}>\n      <SelectInput\n        label=\"Custom Header Section\"\n        placeholder=\"Pick one\"\n        model=\"custom-header-section\"\n        onChange={updateTableData}\n        options={[\n          { label: 'Data Set 1', value: '1' },\n          { label: 'Data Set 2', value: '2' },\n          { label: 'Data Set 3', value: '3' },\n        ]}\n      />\n    </FormProvider>\n  );\n\n  const dataTableProps = useDataTable({\n    initialData: createData('1'),\n    initialColumns: columns,\n    pageSizeDefault: 5,\n    pageSizeOptions: [5, 10],\n    customHeaderSection,\n  });\n\n  return (\n    <LoadingOverlay\n      loadingTitle=\"Please Wait\"\n      loadingMessage=\"Retrieving Information.\"\n      statusTitle=\"Status update\"\n      statusMessage=\"Sample message...\"\n      ariaLoadingLabel=\"Example loading aria label\"\n      isLoading={isLoading}\n    >\n      <DataTable\n        title=\"Custom Table Header Section\"\n        tableState={dataTableProps}\n      />\n    </LoadingOverlay>\n  );\n};\n")),(0,i.kt)("h2",{id:"custom-table-header-buttons"},"Custom Table Header Buttons"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"customHeaderButtons")," prop to create custom buttons that will appear in the table header, to the right of the ",(0,i.kt)("a",{parentName:"p",href:"#bulk-actions"},"Bulk Actions")," dropdown (if it is there). Each custom button can either be a link (with ",(0,i.kt)("inlineCode",{parentName:"p"},"href"),"), a button (with ",(0,i.kt)("inlineCode",{parentName:"p"},"onClick"),"), or a ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/dropdown-menu"},"DropdownMenu")," (with ",(0,i.kt)("inlineCode",{parentName:"p"},"dropdownItems"),")."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"customHeaderButtons")," is an array of objects, where each object takes the following properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"label")," - the label for the button"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"icon")," - the icon that will be displayed to the left of the label"),(0,i.kt)("li",{parentName:"ul"},"ONE of the following:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"href")," - a link that the page will redirect to when the button is clicked"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onClick")," - a function that will be called when the button is clicked"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dropdownItems")," - an array that will be used to create a ",(0,i.kt)("a",{parentName:"li",href:"/web/ui/dropdown-menu"},"DropdownMenu")," instead of a button; see ",(0,i.kt)("a",{parentName:"li",href:"/web/ui/dropdown-menu"},"the docs of DropdownMenu")," for more information on what to pass.")))),(0,i.kt)("p",null,"NOTE: the maximum number of custom buttons is ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),", so any additional custom buttons included in ",(0,i.kt)("inlineCode",{parentName:"p"},"customHeaderButtons")," will not be rendered."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(200);\n\n  const customHeaderButtons = [\n    {\n      label: 'Custom Button',\n      onClick: () => {\n        console.log('custom button clicked');\n      },\n    },\n    {\n      label: 'Link to Abyss docs',\n      icon: <IconMaterial icon=\"anchor\" size=\"$sm\" />,\n      href: 'https://abyss.uhg.com',\n    },\n  ];\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    pageSizeDefault: 5,\n    pageSizeOptions: [5, 10],\n    customHeaderButtons,\n  });\n\n  return (\n    <DataTable\n      title=\"Custom Table Header Buttons\"\n      tableState={dataTableProps}\n    />\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(200);\n\n  const customHeaderButtons = [\n    {\n      label: 'Custom Dropdown',\n      icon: <IconMaterial icon=\"build\" size=\"$sm\" />,\n      dropdownItems: [\n        {\n          title: 'Test Action',\n          onClick: () => {\n            console.log('test action clicked');\n          },\n          icon: <IconMaterial icon=\"save\" />,\n        },\n        {\n          title: 'Disabled Test Action',\n          onClick: () => {\n            console.log('disabled test action clicked');\n          },\n          disabled: true,\n        },\n      ],\n    },\n  ];\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    pageSizeDefault: 5,\n    pageSizeOptions: [5, 10],\n    customHeaderButtons,\n  });\n\n  return (\n    <DataTable\n      title=\"Custom Table Header Dropdown\"\n      tableState={dataTableProps}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"selection"},"Selection"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"showSelection")," prop to allow the ability for users to select rows. To set default selected rows use the ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultSelectedRows")," prop, ",(0,i.kt)("inlineCode",{parentName:"p"},"[rowId]: true/false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(100);\n\n  const dataTablePropsPagination = useDataTable({\n    showSelection: true,\n    defaultSelectedRows: { 1: true, 6: true },\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return (\n    <div>\n      <DataTable title=\"Selection\" tableState={dataTablePropsPagination} />\n\n      <pre style={{ maxHeight: '200px', overflow: 'auto' }}>\n        <code>\n          selectedRowIds:\n          {JSON.stringify(\n            dataTablePropsPagination.state.selectedRowIds,\n            null,\n            2\n          )}\n        </code>\n      </pre>\n    </div>\n  );\n};\n")),(0,i.kt)("h2",{id:"single-selection"},"Single Selection"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"singleSelection")," prop to allow the ability for users to select only one row."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(100);\n\n  const dataTablePropsPagination = useDataTable({\n    singleSelection: true,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return (\n    <div>\n      <DataTable\n        title=\"Single Selection\"\n        tableState={dataTablePropsPagination}\n      />\n\n      <pre style={{ maxHeight: '200px', overflow: 'auto' }}>\n        <code>\n          selectedRowIds:\n          {JSON.stringify(\n            dataTablePropsPagination.state.selectedRowIds,\n            null,\n            2\n          )}\n        </code>\n      </pre>\n    </div>\n  );\n};\n")),(0,i.kt)("h2",{id:"expansion-rows"},"Expansion Rows"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"renderSubComponent")," prop to enable expansion rows for the data table. Add the ",(0,i.kt)("inlineCode",{parentName:"p"},"expandedByDefault")," prop set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to the data objects to have the expansion open by default."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const { columns } = utils.useDocDataTable(1000);\n\n  const data = [\n    {\n      col1: `Col 1/Row 1`,\n      col2: `Col 2/Row 1`,\n      expandedByDefault: true,\n    },\n    {\n      col1: `Col 1/Row 2`,\n      col2: `Col 2/Row 2`,\n    },\n    {\n      col1: `Col 1/Row 3`,\n      col2: `Col 2/Row 3`,\n      expandedByDefault: true,\n    },\n    {\n      col1: `Col 1/Row 4`,\n      col2: `Col 2/Row 4`,\n    },\n  ];\n\n  const renderRowSubComponent = React.useCallback((row) => {\n    return (\n      <pre>\n        <code>{JSON.stringify({ values: row.values }, null, 2)}</code>\n      </pre>\n    );\n  }, []);\n\n  const dataTablePropsPagination = useDataTable({\n    renderSubComponent: renderRowSubComponent,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return <DataTable title="Expansion" tableState={dataTablePropsPagination} />;\n};\n')),(0,i.kt)("h2",{id:"filtering"},"Filtering"),(0,i.kt)("p",null,"DataTable supports both global filters and column filters to refine data searches. When a filter is active, it will appear as a ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/chip"},"Chip"),", and closing the chip will remove the filter."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const createData = (count) => {\n    const data = [];\n    for (let i = 0; i < count; i++) {\n      data.push({\n        col1: `Col 1/Row ${i + 1}`,\n        col2: i % 2 === 0 ? -(i * 3) : i * 3,\n        col3: `10/${9 + Math.ceil(Math.random() * 21)}/2020`,\n        col4: i % 3 === 0 ? 'Option 1' : 'Option 2',\n      });\n    }\n    return data;\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Table Data 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Value',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Date',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Option Select',\n        accessor: 'col4',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => [...createData(200)], []);\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showGlobalFilter: true,\n    showFilterDataset: true,\n    initialGlobalFilter: '2',\n    initialFilters: [\n      {\n        columnId: 'col1',\n        filters: [{ condition: 'ends-with', filterValue: '1' }],\n      },\n      {\n        columnId: 'col2',\n        filters: [{ condition: 'less', filterValue: '25' }],\n      },\n      {\n        columnId: 'col3',\n        filters: [{ condition: 'greater-equal', filterValue: '10/15/2020' }],\n      },\n      {\n        columnId: 'col4',\n        filters: [{ condition: 'equals', filterValue: 'Option 1' }],\n      },\n    ],\n    filterColumnTypes: {\n      col3: {\n        type: 'date',\n      },\n      col4: {\n        type: 'select',\n        options: [\n          { value: 'Option 1', label: 'Option 1' },\n          { value: 'Option 2', label: 'Option 2' },\n        ],\n      },\n    },\n  });\n\n  return <DataTable title=\"Filtering\" tableState={dataTablePropsPagination} />;\n};\n")),(0,i.kt)("h3",{id:"global-filtering"},"Global Filtering"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"showGlobalFilter")," prop to leverage the ability to filter the table globally (across all rows / columns)."),(0,i.kt)("p",null,"You can also use the ",(0,i.kt)("inlineCode",{parentName:"p"},"initialGlobalFilter")," prop to set the initial value for the global filter."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(1000);\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showGlobalFilter: true,\n    initialGlobalFilter: '20',\n  });\n\n  return (\n    <DataTable title=\"Global Filtering\" tableState={dataTablePropsPagination} />\n  );\n};\n")),(0,i.kt)("h3",{id:"column-filtering"},"Column Filtering"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"showFilterDataset")," prop to leverage the ability to filter the table by column. Clicking the ",(0,i.kt)("strong",{parentName:"p"},"Filter Dataset")," Button will open a modal where you can customize and apply the filters. When filters are active, the ",(0,i.kt)("strong",{parentName:"p"},"Filter Dataset"),' button text will be updated to, "Edit Filters" and indicate the number of currently active filters.'),(0,i.kt)("h4",{id:"initial-filters"},"Initial Filters"),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"initialFilters")," prop to set the initial value for the column filters. ",(0,i.kt)("inlineCode",{parentName:"p"},"initialFilters")," must be an array of objects with the structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"  const dataTablePropsPagination = useDataTable({\n    ... // Other props for useDataTable go here\n    initialFilters: [\n      {\n        columnId: 'col1', // The ID of the column to apply the filter on\n        filters: [\n          {\n            condition: 'contains', // The condition to filter on\n            filterValue: '10' // The filter value\n          },\n          ... // More filters on the same column\n          ]\n      },\n      ... // More filters on other columns\n    ],\n  });\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"condition")," property within ",(0,i.kt)("inlineCode",{parentName:"p"},"filters")," must be one of the following strings:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"equals")," - Equal to"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"not-equal")," - Not equal to"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"contains")," - Contains"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"greater")," - Greater than"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"greater-equal")," - Greater than or equal to"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"less")," - Less than"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"less-equal")," - Less than or equal to"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"starts-with")," - Starts with"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ends-with")," - Ends with")),(0,i.kt)("h4",{id:"column-filter-types"},"Column Filter Types"),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"columnFilterTypes")," prop to set the kind of filter that will show up for each column. By default, columns' filters are ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/text-input"},"TextInputs"),", but they can be changed to ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/date-input"},"DateInputs")," or ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/select-input"},"SelectInputs"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"columnFilterTypes")," must be an object with the structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const dataTablePropsPagination = useDataTable({\n    ... // Other props for useDataTable go here\n    columnFilterTypes: {\n      col1: { // Column ID for the column whose filter type you want to change\n        type: 'date' // Will change the filter to a DateInput\n      },\n      col3: {\n        type: 'select', // Will change the filter to a SelectInput\n        options: [ // The option list for the SelectInput\n          { value: 'Option 1', label: 'Option 1' },\n          { value: 'Option 2', label: 'Option 2' },\n        ]\n      }\n    },\n  });\n\n")),(0,i.kt)("p",null,"Note that when a column's ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"date"),", nothing else is required, but when the ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"select"),", an ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," property must be passed along with it to provide the options for the SelectInput (see the SelectInput documentation ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/select-input"},"here")," for more details on how to structure options)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const createData = (count) => {\n    const data = [];\n    for (let i = 0; i < count; i++) {\n      data.push({\n        col1: `Col 1/Row ${i + 1}`,\n        col2: i % 2 === 0 ? -(i * 3) : i * 3,\n        col3: `10/${9 + Math.ceil(Math.random() * 21)}/2020`,\n        col4: i % 7 === 0 ? 'Option 1' : 'Option 2',\n      });\n    }\n    return data;\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Table Data 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Value',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Date',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Option Select',\n        accessor: 'col4',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => [...createData(400)], []);\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showFilterDataset: true,\n    initialFilters: [\n      {\n        columnId: 'col1',\n        filters: [{ condition: 'contains', filterValue: '0' }],\n      },\n      {\n        columnId: 'col2',\n        filters: [{ condition: 'ends-with', filterValue: '8' }],\n      },\n      {\n        columnId: 'col3',\n        filters: [{ condition: 'greater-equal', filterValue: '10/12/2020' }],\n      },\n      {\n        columnId: 'col4',\n        filters: [{ condition: 'equals', filterValue: 'Option 2' }],\n      },\n    ],\n    filterColumnTypes: {\n      col3: {\n        type: 'date',\n      },\n      col4: {\n        type: 'select',\n        options: [\n          { value: 'Option 1', label: 'Option 1' },\n          { value: 'Option 2', label: 'Option 2' },\n        ],\n      },\n    },\n  });\n\n  return (\n    <DataTable title=\"Column Filtering\" tableState={dataTablePropsPagination} />\n  );\n};\n")),(0,i.kt)("h4",{id:"remove-filter-columns"},"Remove Filter Columns"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"removeFilterColumns"),' prop to remove columns from the "Column Name" drop-down for filter selection inside the Filter Dataset modal. The ',(0,i.kt)("inlineCode",{parentName:"p"},"removeFilterColumns")," prop takes an array containing the ",(0,i.kt)("inlineCode",{parentName:"p"},"accessor")," values from the columns you would like removed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const createData = (count) => {\n    const data = [];\n    for (let i = 0; i < count; i++) {\n      data.push({\n        col1: `Col 1/Row ${i + 1}`,\n        col2: i % 2 === 0 ? -(i * 3) : i * 3,\n        col3: `10/${9 + Math.ceil(Math.random() * 21)}/2020`,\n        col4: i % 7 === 0 ? 'Option 1' : 'Option 2',\n      });\n    }\n    return data;\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Table Data 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Value',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Date',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Option Select',\n        accessor: 'col4',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => [...createData(100)], []);\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showFilterDataset: true,\n    removeFilterColumns: ['col2'],\n    filterColumnTypes: {\n      col3: {\n        type: 'date',\n      },\n      col4: {\n        type: 'select',\n        options: [\n          { value: 'Option 1', label: 'Option 1' },\n          { value: 'Option 2', label: 'Option 2' },\n        ],\n      },\n    },\n  });\n\n  return (\n    <DataTable\n      title=\"Remove Filter Columns\"\n      tableState={dataTablePropsPagination}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"custom-headers"},"Custom Headers"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Header")," prop to pass in a standard string or custom React Node."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(5);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Custom Header',\n        accessor: 'col1',\n      },\n      {\n        Header: 'HSA',\n        accessor: 'col2',\n      },\n    ],\n    []\n  );\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return (\n    <DataTable title=\"Custom Headers\" tableState={dataTablePropsPagination} />\n  );\n};\n")),(0,i.kt)("h2",{id:"custom-cells"},"Custom Cells"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Cell")," prop to update each of the cells in the column."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1',\n        Cell: ({ value }) => {\n          if (!value) {\n            return '--';\n          }\n          return value;\n        },\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n        Cell: ({ value }) => {\n          return <div>Updated Cell: {value}</div>;\n        },\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(\n    () => [\n      {\n        col1: '',\n        col2: 'Col 2/Row 1',\n      },\n      {\n        col1: 'Col 1/Row 2',\n        col2: 'Col 2/Row 2',\n      },\n      {\n        col1: '',\n        col2: 'Col 2/Row 3',\n      },\n      {\n        col1: 'Col 1/Row 4',\n        col2: 'Col 2/Row 4',\n      },\n      {\n        col1: '',\n        col2: 'Col 2/Row 5',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return <DataTable title=\"Custom Cells\" tableState={dataTableProps} />;\n};\n")),(0,i.kt)("h2",{id:"custom-csv"},"Custom CSV"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"customSetCsv")," prop is a callback function that returns the cell value (within a ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," property) when downloading the table data csv file. Use this whenever you're performing any custom rendering within ",(0,i.kt)("inlineCode",{parentName:"p"},"Cell")," to ensure the data is also properly rendered within the csv. Download the csv file for the example below to see the application of this prop and how the column without ",(0,i.kt)("inlineCode",{parentName:"p"},"customSetCsv")," attempts to render the full object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const createData = (count) => {\n    const data = [];\n    for (let i = 0; i < count; i++) {\n      data.push({\n        col1: { colName: 'Col 1', rowName: `Row ${i + 1}` },\n        col2: { colName: 'Col 2', rowName: `Row ${i + 1}` },\n      });\n    }\n    return data;\n  };\n\n  const renderColData = ({ value }) => {\n    const { colName, rowName } = value;\n    return `${colName} / ${rowName}`;\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column With Custom CSV',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n        customSetCsv: renderColData,\n        Cell: renderColData,\n      },\n      {\n        Header: 'Column Without Custom CSV',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n        Cell: renderColData,\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => [...createData(10)], []);\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: false,\n    initialData: data,\n    initialColumns: columns,\n    showDownloadButton: true,\n  });\n\n  return <DataTable title=\"Custom Csv\" tableState={dataTablePropsPagination} />;\n};\n")),(0,i.kt)("h2",{id:"data-test-id"},"Data Test ID"),(0,i.kt)("p",null,"To include a ",(0,i.kt)("strong",{parentName:"p"},"data-testid")," attribute within the included DataTable features like selection, expansion rows, etc. you must pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"data-testid")," prop into the ",(0,i.kt)("inlineCode",{parentName:"p"},"useDataTable")," hook as well as the ",(0,i.kt)("inlineCode",{parentName:"p"},"DataTable")," component itself. For reference please view the code in the example below. For more information on usage of the ",(0,i.kt)("strong",{parentName:"p"},"data-testid")," attribute visit the ",(0,i.kt)("a",{parentName:"p",href:"/developers/component-testing/#data-testid"},"Component Testing Section"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { columns } = utils.useDocDataTable(1000);\n\n  const data = [\n    {\n      col1: `Col 1/Row 1`,\n      col2: `Col 2/Row 1`,\n      expandedByDefault: true,\n    },\n    {\n      col1: `Col 1/Row 2`,\n      col2: `Col 2/Row 2`,\n    },\n    {\n      col1: `Col 1/Row 3`,\n      col2: `Col 2/Row 3`,\n    },\n    {\n      col1: `Col 1/Row 4`,\n      col2: `Col 2/Row 4`,\n    },\n  ];\n\n  const renderRowSubComponent = React.useCallback((row) => {\n    return (\n      <pre>\n        <code>{JSON.stringify({ values: row.values }, null, 2)}</code>\n      </pre>\n    );\n  }, []);\n\n  const dataTablePropsPagination = useDataTable({\n    renderSubComponent: renderRowSubComponent,\n    initialData: data,\n    initialColumns: columns,\n    'data-testid': 'expansion-test-id',\n  });\n\n  return (\n    <DataTable\n      title=\"Data Table Expansion Example\"\n      tableState={dataTablePropsPagination}\n      data-testid=\"table-test-id\"\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"pagination"},"Pagination"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"showPagination")," prop to enable default pagination for the data table. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"additionalPaginationText")," prop to display custom text under the pagination results container. The default value for ",(0,i.kt)("inlineCode",{parentName:"p"},"showPagination")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(1000);\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    additionalPaginationText: 'Custom Text For Pagination',\n  });\n\n  return <DataTable title=\"Pagination\" tableState={dataTablePropsPagination} />;\n};\n")),(0,i.kt)("h3",{id:"page-size-options"},"Page Size Options"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"pageSizeOptions")," prop to pass in various page size options the use can select from. The first option will be the initial page size by default. To change the default page size, pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"pageSizeDefault")," prop to the ",(0,i.kt)("inlineCode",{parentName:"p"},"useDataTable")," hook."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const { data, columns } = utils.useDocDataTable(1000);\n\n  const dataTablePropsTop = useDataTable({\n    showPagination: true,\n    pageSizeOptions: [6, 8, 10],\n    pageSizeDefault: 8,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return <DataTable title="Page Size Options" tableState={dataTablePropsTop} />;\n};\n')),(0,i.kt)("h3",{id:"hide-top-pagination"},"Hide Top Pagination"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"showTopPagination")," prop to enable or disable the top pagination components (when ",(0,i.kt)("inlineCode",{parentName:"p"},"showPagination")," is true). The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const { data, columns } = utils.useDocDataTable(1000);\n\n  const dataTablePropsTop = useDataTable({\n    showPagination: true,\n    showTopPagination: false,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return (\n    <DataTable title="Without Top Pagination" tableState={dataTablePropsTop} />\n  );\n};\n')),(0,i.kt)("h3",{id:"hide-bottom-pagination"},"Hide Bottom Pagination"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"showBottomPagination")," prop to enable or disable the bottom pagination components (when ",(0,i.kt)("inlineCode",{parentName:"p"},"showPagination")," is true). The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const { data, columns } = utils.useDocDataTable(1000);\n\n  const dataTablePropsBottom = useDataTable({\n    showPagination: true,\n    showBottomPagination: false,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return (\n    <DataTable\n      title="Without Bottom Pagination"\n      tableState={dataTablePropsBottom}\n    />\n  );\n};\n')),(0,i.kt)("h3",{id:"pagination-result-count-override"},"Pagination Result Count Override"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"paginationResultsTotalCount")," prop to display a different total count value than the number of items in the table."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(1000);\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    additionalPaginationText: 'Custom Text For Pagination',\n    paginationResultsTotalCount: 3000,\n  });\n\n  return <DataTable title=\"Pagination\" tableState={dataTablePropsPagination} />;\n};\n")),(0,i.kt)("h2",{id:"server-side-pagination"},"Server-Side Pagination"),(0,i.kt)("p",null,"Instead of supplying the table's entire dataset at once, you can hook up the table to an API and load the data page-by-page as needed. To use server-side pagination:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"usePagination")," to true"),(0,i.kt)("li",{parentName:"ul"},"Pass in an ",(0,i.kt)("inlineCode",{parentName:"li"},"apiPaginationCall")," function that will call the API and return the relevant page data")),(0,i.kt)("p",null,"There are additional props to modify the server-side pagination: ",(0,i.kt)("inlineCode",{parentName:"p"},"apiQueryOptions"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"manualSortBy"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"customGetRowId")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"disableApiCallOnLoad")," - however, these props are not required."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const bulkActions = [\n    {\n      onClick: ({ deleteRows, getSelectedRowIds, clearCache }) => {\n        deleteRows();\n        const selectedRowIds = getSelectedRowIds();\n        // Add something to hit the API here with selectedRowIds to update the database\n        if (selectedRowIds.length > 0) {\n          clearCache();\n        }\n      },\n      icon: <IconMaterial icon=\"delete\" />,\n      label: 'Delete Rows',\n      isSeparated: true,\n    },\n    {\n      onClick: ({ modifyRows, getSelectedRowIds, clearCache }) => {\n        modifyRows({ name: 'Modified Cell' });\n        const selectedRowIds = getSelectedRowIds();\n        // Add something to hit the API here with selectedRowIds to update the database\n        if (selectedRowIds.length > 0) {\n          clearCache();\n        }\n      },\n      label: 'Modify Cells',\n    },\n    {\n      onClick: ({ modifyRows, getSelectedRowIds, clearCache }) => {\n        modifyRows({\n          name: `Modified Name`,\n          sortOrder: `Modified Sort Order`,\n        });\n        const selectedRowIds = getSelectedRowIds();\n        // Add something to hit the API here with selectedRowIds to update the database\n        if (selectedRowIds.length > 0) {\n          clearCache();\n        }\n      },\n      label: 'Modify Rows',\n      icon: <IconMaterial icon=\"mark_as_unread\" />,\n      isSingle: true,\n    },\n  ];\n\n  const individualActions = [\n    {\n      onClick: ({ deleteRow, row, clearCache }) => {\n        deleteRow(row);\n        clearCache();\n      },\n      checkDisabled: (row) => {\n        return row.values.sortOrder % 2 === 0;\n      },\n      icon: <IconMaterial icon=\"delete\" />,\n      label: 'Delete Row',\n      isSeparated: true,\n    },\n    {\n      onClick: ({ modifyRow, row, clearCache }) => {\n        modifyRow(row, { name: 'Modified Cell' });\n        clearCache();\n      },\n      label: 'Modify Cell',\n    },\n    {\n      onClick: ({ modifyRow, row, clearCache }) => {\n        modifyRow(row, {\n          name: `Modified Name`,\n          sortOrder: `Modified Sort Order`,\n        });\n        clearCache();\n      },\n      label: 'Modify Row',\n      icon: <IconMaterial icon=\"mark_as_unread\" />,\n    },\n  ];\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    initialColumns: columns,\n    showSelection: true,\n    bulkActions,\n    individualActions,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeDefault: 5,\n    pageSizeOptions: [5, 10],\n    defaultSelectedRows: {\n      1: true,\n    },\n    uniqueStorageId: 'server-side',\n    apiPaginationCall: getMockData,\n    manualSortBy: true,\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return (\n    <DataTable title=\"Server-Side Pagination\" tableState={dataTableProps} />\n  );\n};\n")),(0,i.kt)("h3",{id:"api-pagination-call"},"API Pagination Call"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"apiPaginationCall")," prop to use an API to handle fetching data for the table. ",(0,i.kt)("inlineCode",{parentName:"p"},"apiPaginationCall")," must be a function that takes five parameters, ",(0,i.kt)("inlineCode",{parentName:"p"},"page"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"pageSize"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"sortBy"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"globalFilter"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"columnFilters"),", and it must return an object with ",(0,i.kt)("inlineCode",{parentName:"p"},"results")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"count")," fields, for the returned data and total number of results respectively. See the example function below."),(0,i.kt)("p",null,"By default this function will be called on page load. To override this default behavior add the ",(0,i.kt)("inlineCode",{parentName:"p"},"disableApiOnLoad")," prop and set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". From there you'll need to use ",(0,i.kt)("a",{parentName:"p",href:"#triggering-data-refresh"},"reloadTableData")," to make the initial call and initiate server-side pagination functionality."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const apiPaginationCall = (page, pageSize, sortBy, globalFilter, columnFilters) => {\n  // You only need to handle global filtering at the API level like this if you also pass the manualGlobalFilter prop as `true` into useDataTable\n  const globalFilterStr = `&globalFilter=${globalFilter}`;\n\n  // You only need to handle column filtering at the API level like this if you also pass the manualColumnFilter prop as `true` into useDataTable\n  const columnFiltersStr = `&columnFilters=${JSON.stringify(columnFilters)}`;\n\n  // You only need to handle sorting at the API level like this if you also pass the manualSortBy prop as `true` into useDataTable\n  const orderByStr =\n    sortBy && sortBy.length > 0 ? `&order_by=${sortBy[0].id}` : '';\n  const sortDirection =\n    sortBy && sortBy.length > 0\n      ? `&sort=${sortBy[0].desc ? 'desc' : 'asc'}`\n      : '';\n\n  return fetch(\n    `${Your API Endpoint link}?page=${page}&limit=${pageSize}${orderByStr}${sortDirection}${globalFilterStr}${columnFiltersStr}`\n  )\n    .then((res) => res.json())\n    .then((res) => {\n      return {\n        results: res.data, // The data returned from the API\n        count: res.total // The total number of results (for the entire dataset, not the current page)\n      };\n    });\n}\n")),(0,i.kt)("br",null),(0,i.kt)("p",null,"Other than these requirements, you are free to do whatever API calls, etc. are necessary within the function to return the data. ",(0,i.kt)("inlineCode",{parentName:"p"},"apiPaginationCall")," will be called every time the data for a page will be fetched. When the data for a page has already been cached, ",(0,i.kt)("inlineCode",{parentName:"p"},"apiPaginationCall")," will not be called, as the cached data will be used to minimize unnecessary API calls. For more information about caching and prefetching, see the ",(0,i.kt)("a",{parentName:"p",href:"#api-query-options"},"API Query Options")," section."),(0,i.kt)("h3",{id:"api-query-options"},"API Query Options"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"apiQueryOptions")," prop to specify additional options for the API queries. This prop is an object with three possible properties that can be contained in it:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onCalled"),": a function that is triggered every time a query is called. This function receives no parameters."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onCompleted"),": a function that is triggered every time a query is completed. This function receives one parameter, the response from the query."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"requestPolicy"),": pass this prop with the value 'no-cache' to disable the caching and prefetching of data. Otherwise, by default, every time a page is queried, the pages directly before and after it will also be queried to fetch the data before it is needed. Additionally by default, each page will be cached when it is fetched so that going back to a previously visited page will use the cached data rather than calling the API again.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    additionalPaginationText:\n      'No caching here; see Console for onCalled and onCompleted logs',\n    pageSizeOptions: [5, 10],\n    uniqueStorageId: 'apiQueryOptions',\n    apiPaginationCall: getMockData,\n    apiQueryOptions: {\n      onCalled: () => {\n        console.log('onCalled');\n      },\n      onCompleted: (response) => {\n        console.log('onCompleted', response);\n      },\n      requestPolicy: 'no-cache',\n    },\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return <DataTable title=\"API Query Options\" tableState={dataTableProps} />;\n};\n")),(0,i.kt)("h3",{id:"manual-global-filter"},"Manual Global Filter"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"manualGlobalFilter")," prop to specify whether the table will handle global filtering (when ",(0,i.kt)("inlineCode",{parentName:"p"},"showGlobalFilter")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"), or if the API will handle it."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"manualGlobalFilter")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),", setting a global filter will filter on only the current page. (This will not cause any additional API calls.)"),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"manualGlobalFilter")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", setting a global filter will call the API again, which is responsible for returning the filtered data. A ",(0,i.kt)("inlineCode",{parentName:"li"},"globalFilter")," string will be passed to ",(0,i.kt)("inlineCode",{parentName:"li"},"apiPaginationCall"),", which will contain the value of the global filter.")),(0,i.kt)("br",null),(0,i.kt)("p",null,"With ",(0,i.kt)("inlineCode",{parentName:"p"},"manualGlobalFilter")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeOptions: [5, 10],\n    uniqueStorageId: 'manualGlobalFilter-true',\n    apiPaginationCall: getMockData,\n    showGlobalFilter: true,\n    initialGlobalFilter: '1',\n    manualGlobalFilter: true,\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return <DataTable title=\"Manual Global Filter\" tableState={dataTableProps} />;\n};\n")),(0,i.kt)("br",null),(0,i.kt)("p",null,"With ",(0,i.kt)("inlineCode",{parentName:"p"},"manualGlobalFilter")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeOptions: [5, 10],\n    uniqueStorageId: 'manualGlobalFilter-false',\n    apiPaginationCall: getMockData,\n    showGlobalFilter: true,\n    initialGlobalFilter: '1',\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return (\n    <DataTable title=\"Default Global Filter\" tableState={dataTableProps} />\n  );\n};\n")),(0,i.kt)("h3",{id:"manual-column-filters"},"Manual Column Filters"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"manualColumnFilters")," prop to specify whether the table will handle column filtering (when ",(0,i.kt)("inlineCode",{parentName:"p"},"showFilterDataset")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"), or if the API will handle it."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"manualColumnFilters")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),", setting a column filter will filter on only the current page. (This will not cause any additional API calls.)"),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"manualColumnFilters")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", setting a column filter will call the API again, which is responsible for returning the filtered data. A ",(0,i.kt)("inlineCode",{parentName:"li"},"columnFilters")," array will be passed to ",(0,i.kt)("inlineCode",{parentName:"li"},"apiPaginationCall"),", which will contain the active filters. The ",(0,i.kt)("inlineCode",{parentName:"li"},"columnFilters")," array will have the format:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const columnFilters = [\n  {\n    id: ${columnId1}, // Column ID\n    value: [\n      {\n        condition: 'contains', // The condition of the filter\n        filterValue: '2' // The value of the filter\n      },\n      {\n        condition: 'less-equal', // The condition of the filter\n        filterValue: '100' // The value of the filter\n      },\n      ... // More filters on the same column\n    ]\n  },\n  {\n    id: ${columnId2}, // Column ID\n    value: [\n      {\n        condition: 'equals', // The condition of the filter\n        filterValue: 'test' // The value of the filter\n      },\n      ... // More filters on the same column\n    ]\n  },\n... // More filters on different columns\n]\n")),(0,i.kt)("br",null),(0,i.kt)("p",null,"With ",(0,i.kt)("inlineCode",{parentName:"p"},"manualColumnFilters")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeOptions: [5, 10],\n    uniqueStorageId: 'manualColumnFilters-true',\n    apiPaginationCall: getMockData,\n    showFilterDataset: true,\n    initialFilters: [\n      {\n        columnId: 'sortOrder',\n        filters: [{ condition: 'greater-equal', filterValue: '10' }],\n      },\n    ],\n    manualColumnFilters: true,\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return (\n    <DataTable title=\"Manual Column Filters\" tableState={dataTableProps} />\n  );\n};\n")),(0,i.kt)("br",null),(0,i.kt)("p",null,"With ",(0,i.kt)("inlineCode",{parentName:"p"},"manualColumnFilters")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeOptions: [5, 10],\n    uniqueStorageId: 'manualColumnFilters-false',\n    apiPaginationCall: getMockData,\n    showFilterDataset: true,\n    initialFilters: [\n      {\n        columnId: 'sortOrder',\n        filters: [{ condition: 'greater-equal', filterValue: '10' }],\n      },\n    ],\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return (\n    <DataTable title=\"Default Column Filters\" tableState={dataTableProps} />\n  );\n};\n")),(0,i.kt)("h3",{id:"manual-sort-by"},"Manual Sort By"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"manualSortBy")," prop to specify whether the table will handle column sorting, or if the API will handle it."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"manualSortBy")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),", sorting a column will sort on only the current page. (This will not cause any additional API calls.)"),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"manualSortBy")," is ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", sorting a column will call the API again, which is responsible for returning the sorted data. A ",(0,i.kt)("inlineCode",{parentName:"li"},"sortBy")," array will be passed to ",(0,i.kt)("inlineCode",{parentName:"li"},"apiPaginationCall"),", which will contain the IDs of the columns being sorted on, as well as well as whether the sort order is ascending or descending. The ",(0,i.kt)("inlineCode",{parentName:"li"},"sortBy")," array will have the format:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const sortBy = [{\n  id: ${columnId1},\n  desc: false // ascending order\n},\n{\n  id: ${columnId2},\n  desc: true, // descending order\n},\n...]\n")),(0,i.kt)("br",null),(0,i.kt)("p",null,"With ",(0,i.kt)("inlineCode",{parentName:"p"},"manualSortBy")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeOptions: [5, 10],\n    uniqueStorageId: 'manualSortBy-true',\n    apiPaginationCall: getMockData,\n    manualSortBy: true,\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return <DataTable title=\"Manual Sorting\" tableState={dataTableProps} />;\n};\n")),(0,i.kt)("br",null),(0,i.kt)("p",null,"With ",(0,i.kt)("inlineCode",{parentName:"p"},"manualSortBy")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeOptions: [5, 10],\n    uniqueStorageId: 'manualSortBy-false',\n    apiPaginationCall: getMockData,\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return <DataTable title=\"Default Sorting\" tableState={dataTableProps} />;\n};\n")),(0,i.kt)("h3",{id:"custom-row-ids"},"Custom Row IDs"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"customGetRowId")," prop to pass a function that will override how row IDs are set. By default, a row's ID will be equal to its index in the dataset (ex. the third row on the second page of a dataset with 10 rows per page will have an ID of 12). Overriding this function would be useful if are using row selection and want to make a call to your API when users update data in the table. (See the ",(0,i.kt)("a",{parentName:"p",href:"#bulk-actions"},"Bulk Actions")," section for more details on performing actions on selected data.)"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"customGetRowId")," function will be called on each row, and will receive three parameters: ",(0,i.kt)("inlineCode",{parentName:"p"},"row"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"relativeIndex"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"parent"),". Its return value must be the ID for each row. (Make sure each row's ID is unique.)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"row")," is the current row, so you can use its fields to form the ID (ex. if each row has an ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," field, you can return ",(0,i.kt)("inlineCode",{parentName:"li"},"row.id")," for the custom row ID)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"relativeIndex")," is the row's index relative to the current page, not its absolute index in the overall dataset. (So if the current row is the first row on the tenth page, its ",(0,i.kt)("inlineCode",{parentName:"li"},"relativeIndex")," will be ",(0,i.kt)("inlineCode",{parentName:"li"},"0"),".)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"parent")," is the row's parent, if it has one.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    initialColumns: columns,\n    showSelection: true,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeOptions: [5, 10],\n    defaultSelectedRows: {\n      'Test Datapoint A': true,\n      'Test Datapoint C': true,\n    },\n    uniqueStorageId: 'customRowId',\n    apiPaginationCall: getMockData,\n    customGetRowId: (row, relativeIndex, parent) => {\n      return row.name;\n    },\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return (\n    <div>\n      <DataTable title=\"Custom Row IDs\" tableState={dataTableProps} />\n      <pre style={{ maxHeight: '200px', overflow: 'auto' }}>\n        <code>\n          Selected Row IDs (Custom):\n          {JSON.stringify(dataTableProps.state.selectedRowIds, null, 2)}\n        </code>\n      </pre>\n    </div>\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showSelection: true,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeOptions: [5, 10],\n    defaultSelectedRows: {\n      0: true,\n      2: true,\n    },\n    uniqueStorageId: 'defaultRowId',\n    apiPaginationCall: getMockData,\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return (\n    <div>\n      <DataTable title=\"Default Row IDs\" tableState={dataTableProps} />\n      <pre style={{ maxHeight: '200px', overflow: 'auto' }}>\n        <code>\n          Selected Row IDs (Default):\n          {JSON.stringify(dataTableProps.state.selectedRowIds, null, 2)}\n        </code>\n      </pre>\n    </div>\n  );\n};\n")),(0,i.kt)("h3",{id:"triggering-data-refresh"},"Triggering Data Refresh"),(0,i.kt)("p",null,"When using server-side pagination you can re-trigger the apiPaginationCall function by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"reloadTableData")," method returned from the ",(0,i.kt)("inlineCode",{parentName:"p"},"useDataTable")," hook. This should be also be use to trigger the initial call to apiPaginationCall whenever ",(0,i.kt)("inlineCode",{parentName:"p"},"disableApiCallOnLoad")," is applied, as seen in the ",(0,i.kt)("a",{parentName:"p",href:"#disable-on-load"},"Disable On Load")," example below. When ",(0,i.kt)("inlineCode",{parentName:"p"},"reloadTableData")," is called it will utilize the current page, sort and filter state settings."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const tableState = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    apiPaginationCall: getMockData,\n    apiQueryOptions: {\n      onCalled: () => {\n        console.log('onCalled');\n      },\n      onCompleted: (response) => {\n        console.log('onCompleted', response);\n      },\n      requestPolicy: 'no-cache',\n    },\n  });\n\n  const handleRefreshClick = () => {\n    tableState.reloadTableData();\n  };\n\n  return (\n    <Fragment>\n      <Button onClick={handleRefreshClick}>Refresh Data</Button>\n      <Divider />\n      <DataTable title=\"Reload Data Table\" tableState={tableState} />\n    </Fragment>\n  );\n};\n")),(0,i.kt)("h4",{id:"disable-on-load"},"Disable On Load"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const [disabledState, setDisabledState] = useState(true);\n\n  const tableState = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    apiPaginationCall: getMockData,\n    apiQueryOptions: {\n      onCalled: () => {\n        console.log('onCalled');\n      },\n      onCompleted: (response) => {\n        console.log('onCompleted', response);\n      },\n      requestPolicy: 'no-cache',\n    },\n    disableApiCallOnLoad: true,\n  });\n\n  const handleLoadOnClick = () => {\n    tableState.reloadTableData();\n  };\n\n  return (\n    <Fragment>\n      <Button onClick={handleLoadOnClick}>Load Table Data</Button>\n      <Divider />\n      <DataTable title=\"Disabled On Load\" tableState={tableState} />\n    </Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"custom-messaging"},"Custom Messaging"),(0,i.kt)("h3",{id:"no-data-message"},"No Data Message"),(0,i.kt)("p",null,"To override the default no data message use the ",(0,i.kt)("inlineCode",{parentName:"p"},"noDataMessage")," prop to pass a custom message into the ",(0,i.kt)("inlineCode",{parentName:"p"},"useDataTable")," hook."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(5);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Column 3',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    initialData: [],\n    initialColumns: columns,\n    noDataMessage: 'Custom No Data Message',\n  });\n\n  return <DataTable title=\"No Data Message\" tableState={dataTableProps} />;\n};\n")),(0,i.kt)("h3",{id:"error-message"},"Error Message"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to pass a custom error message into the ",(0,i.kt)("inlineCode",{parentName:"p"},"useDataTable")," hook. If ",(0,i.kt)("inlineCode",{parentName:"p"},"errorMessage")," contains a value it will display and override any present data. If no ",(0,i.kt)("inlineCode",{parentName:"p"},"errorMessage")," is added a default message will display whenever ",(0,i.kt)("inlineCode",{parentName:"p"},"apiPaginationCall")," is used and an error occurs during the api call."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock(true);\n\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    initialColumns: columns,\n    showPagination: true,\n    errorMessage,\n    apiPaginationCall: getMockData,\n    apiQueryOptions: {\n      onCalled: () => {\n        console.log('onCalled');\n      },\n      onCompleted: (response) => {\n        console.log('onCompleted', response);\n      },\n      onError: (err) => {\n        console.log('onError', err);\n        setErrorMessage(err);\n      },\n    },\n  });\n\n  return <DataTable title=\"Error Message\" tableState={dataTableProps} />;\n};\n"))),(0,i.kt)(p,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={DataTable}\n  rows={[\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of data table',\n    },\n    {\n      name: 'hideTitleHeader',\n      type: 'boolean',\n      description: 'Hide the data table title header',\n    },\n    {\n      name: 'tableState',\n      type: 'shape',\n      description: 'Table state comes from useDataTable hook',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={DataTable}\n  rows={[\n    {\n      name: 'data-table-root',\n      description: 'Data table root element',\n    },\n    {\n      name: 'data-table-header',\n      description: 'Data table header container',\n    },\n    {\n      name: 'data-table-scroll',\n      description: 'Scroll',\n    },\n    {\n      name: 'data-table-global-search',\n      description: 'Global search',\n    },\n    {\n      name: 'data-table-download-dropdown',\n      description: 'Dropdown to download table data',\n    },\n    {\n      name: 'data-table-subheader-top-container',\n      description: 'Subheader top container',\n    },\n    {\n      name: 'data-table-subheader-lower-container',\n      description: 'Subheader lower container',\n    },\n    {\n      name: 'data-table-subheader-buttons',\n      description: 'Subheader button container',\n    },\n    {\n      name: 'data-table-filter-dataset-modal',\n      description: 'Filter dataset modal',\n    },\n    {\n      name: 'data-table-filter-dataset-button',\n      description: 'Filter dataset button',\n    },\n    {\n      name: 'data-table-filter-dataset-delete-button',\n      description: 'Filter dataset delete button',\n    },\n    {\n      name: 'data-table-filter-table-container',\n      description: 'Container for filter table',\n    },\n    {\n      name: 'data-table-filter-table-table',\n      description: 'Filter table',\n    },\n    {\n      name: 'data-table-filter-table-add-filter',\n      description: '\"Add new filter\" container',\n    },\n    {\n      name: 'data-table-table-settings-button',\n      description: 'Table settings button',\n    },\n    {\n      name: 'data-table-fullscreen-button',\n      description: 'Fullscreen button',\n    },\n    {\n      name: 'data-table-custom-header-section',\n      description: 'Custom header section container',\n    },\n    {\n      name: 'data-table-bulk-actions-dropdown',\n      description: 'Bulk actions dropdown menu',\n    },\n    {\n      name: 'data-table-custom-header-button',\n      description: 'Custom header button',\n    },\n    {\n      name: 'data-table-custom-header-dropdown',\n      description: 'Custom header dropdown',\n    },\n    {\n      name: 'data-table-toggle-columns-root',\n      description: 'Toggle columns root',\n    },\n    {\n      name: 'data-table-toggle-columns-text',\n      description: 'Toggle columns info text',\n    },\n    {\n      name: 'data-table-toggle-columns-switches',\n      description: 'Toggle columns switches container',\n    },\n    {\n      name: 'data-table-toggle-columns-dragdrop-container',\n      description: 'Toggle columns drag and drop container',\n    },\n    {\n      name: 'data-table-selection',\n      description: 'Row selection checkbox (pass into useDataTable)',\n    },\n    {\n      name: 'data-table-single-selection',\n      description: 'Row selection radio (pass into useDataTable)',\n    },\n    {\n      name: 'data-table-pagination-top-root',\n      description: 'Pagination top root',\n    },\n    {\n      name: 'data-table-pagination-top-sub-container',\n      description: 'Pagination top container for main pagination',\n    },\n    {\n      name: 'data-table-pagination-bottom-root',\n      description: 'Pagination bottom root',\n    },\n    {\n      name: 'data-table-individual-dropdown',\n      description:\n        'Individual actions dropdown container (pass into useDataTable)',\n    },\n    {\n      name: 'data-table-individual-single-action-container',\n      description:\n        'Individual actions single action container (pass into useDataTable)',\n    },\n    {\n      name: 'data-table-individual-single-action-item',\n      description:\n        'Individual actions single action item (pass into useDataTable)',\n    },\n    {\n      name: 'data-table-expander-root',\n      description: 'Row expand root (pass into useDataTable)',\n    },\n    {\n      name: 'data-table-expander-icon',\n      description: 'Row expand icon (pass into useDataTable)',\n    },\n    {\n      name: 'data-table-result-text',\n      description: 'Result text',\n    },\n    {\n      name: 'data-table-custom-header-link',\n      description: 'Custom header link',\n    },\n  ]}\n/>\n"))),(0,i.kt)(p,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"The data table headers accurately describe the data contained in the rows and columns.\nIf the data table has a labels it should be clear and concise.\nResources\nW3C WAI-ARIA Authoring Practices Table Design Pattern covers the usage of ARIA names, state and roles, as well as the expected keyboard interactions.\nW3C Tutorial - Table Concepts covers the usage of various tables, headers, and captions."),(0,i.kt)("p",null,"IBM Accessibility Requirements:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"1.3.1 Info and Relationships (WCAG Success Criteria 1.3.1)"),(0,i.kt)("li",{parentName:"ul"},"1.3.2 Meaningful Sequence (WCAG Success Criteria 1.3.2)"),(0,i.kt)("li",{parentName:"ul"},"2.1.1 Keyboard (WCAG Success Criteria 2.1.1)"),(0,i.kt)("li",{parentName:"ul"},"2.4.3 Focus Order (WCAG Success Criteria 2.4.3)"),(0,i.kt)("li",{parentName:"ul"},"2.4.6 Headings and Labels (WCAG Success Criteria 2.4.6)"),(0,i.kt)("li",{parentName:"ul"},"2.4.7 Focus Visible (WCAG Success Criteria 2.4.7)"),(0,i.kt)("li",{parentName:"ul"},"4.1.2 Name, Role, Value (WCAG Success Criteria 4.1.2)"))))}h.isMDXComponent=!0},3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>m});var t=a(2784);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function s(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var r=t.createContext({}),d=function(e){var n=t.useContext(r),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},c=function(e){var n=d(e.components);return t.createElement(r.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,o=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(a),m=l,h=p["".concat(r,".").concat(m)]||p[m]||u[m]||o;return a?t.createElement(h,i(i({ref:n},c),{},{components:a})):t.createElement(h,i({ref:n},c))}));function m(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=a.length,i=new Array(o);i[0]=p;var s={};for(var r in n)hasOwnProperty.call(n,r)&&(s[r]=n[r]);s.originalType=e,s.mdxType="string"==typeof e?e:l,i[1]=s;for(var d=2;d<o;d++)i[d]=a[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"}}]);