"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[9344],{53991:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var o,r=t(7896),i=t(31461),a=(t(2784),t(3905)),s=["components"],l={id:"toggle-switch",category:"Forms",title:"ToggleSwitch",description:"Used to switch between on and off between 2 modes.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11906",pagination_prev:"web/ui/toggle-group",pagination_next:"web/ui/toggle-tabs"},c=void 0,d={unversionedId:"web/ui/toggle-switch",id:"web/ui/toggle-switch",isDocsHomePage:!1,title:"ToggleSwitch",description:"Used to switch between on and off between 2 modes.",source:"@site/docs/web/ui/ToggleSwitch.md",sourceDirName:"web/ui",slug:"/web/ui/toggle-switch",permalink:"/web/ui/toggle-switch",tags:[],version:"current",frontMatter:{id:"toggle-switch",category:"Forms",title:"ToggleSwitch",description:"Used to switch between on and off between 2 modes.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11906",pagination_prev:"web/ui/toggle-group",pagination_next:"web/ui/toggle-tabs"},sidebar:"docs",previous:{title:"ToggleGroup",permalink:"/web/ui/toggle-group"},next:{title:"ToggleTabs",permalink:"/web/ui/toggle-tabs"}},p=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Size",id:"size",children:[],level:2}],g=(o="Tab",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)}),m={toc:p};function u(e){var n=e.components,t=(0,i.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(g,{label:"Overview",mdxType:"Tab"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ToggleSwitch } from '@abyss/web/ui/ToggleSwitch';\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'ToggleSwitch',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'string'\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean'\n    },\n  ]\n}\n\n() => {\n  const [isChecked, setChecked] = useState(true);\n\n  return (\n    <ToggleSwitch\n      label=\"Label\"\n      isChecked={isChecked}\n      onChange={e => setChecked(e.target.checked)}\n    />\n  );\n};\n")),(0,a.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <ToggleSwitch label="Form ToggleSwitch" model="accept-terms" />\n    </FormProvider>\n  );\n};\n')),(0,a.kt)("h2",{id:"usestate"},"useState"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isChecked, setChecked] = useState(false);\n\n  return (\n    <ToggleSwitch\n      label="State ToggleSwitch"\n      isChecked={isChecked}\n      onChange={(e) => setChecked(e.target.checked)}\n    />\n  );\n};\n')),(0,a.kt)("h2",{id:"disabled"},"Disabled"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"isDisabled")," property to disable the ",(0,a.kt)("inlineCode",{parentName:"p"},"ToggleSwitch"),". The default is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <ToggleSwitch\n        isDisabled={true}\n        label="Disabled ToggleSwitch"\n        model="accept-terms"\n      />\n    </FormProvider>\n  );\n};\n')),(0,a.kt)("h2",{id:"size"},"Size"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"size")," property to set the size of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ToggleSwitch"),". Can use predefined sizes or custom number to set size."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <ToggleSwitch label="Small" size="sm" model="size-sm" />\n      <ToggleSwitch label="Medium - Default" model="size-md" />\n      <ToggleSwitch label="Large" size="lg" model="size-lg" />\n      <ToggleSwitch label="Custom / 30px" size="30px" model="size-custom" />\n    </FormProvider>\n  );\n};\n'))),(0,a.kt)(g,{label:"Integration",mdxType:"Tab"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ToggleSwitch}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the toggle switch component',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired everytime the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    // {\n    //     name: 'text',\n    //     type: 'bool',\n    //     description: ' true | false',\n    //   },\n    {\n      name: 'borderRadius',\n      type: 'string',\n      description: 'Set the border radisu',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Label of the toggle switch',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'isChecked',\n      type: 'boolean',\n      description: 'Flag to turn toggle switch on or off',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the toggle switch. If true, the toggle switch will be disabled',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Height and width of the toggle switch',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description: 'The potential size options for the toggle switch',\n    },\n    // {\n    //   name: 'text',\n    //   type: 'boolean',\n    //   description: 'Set the text displayed in toggle switch',\n    // },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={ToggleSwitch}\n  rows={[\n    {\n      name: 'toggle-switch-root',\n      description: 'Toggle Switch root element',\n    },\n    {\n      name: 'toggle-switch-label',\n      description: 'Label',\n    },\n    {\n      name: 'toggle-switch-container',\n      description: 'Container',\n    },\n    // {\n    //   name: 'toggle-switch-text',\n    //   description: 'Text content',\n    // },\n    {\n      name: 'toggle-switch',\n      description: 'Toggle input',\n    },\n  ]}\n/>\n"))))}u.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var o=t(2784);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),g=c(t),m=r,u=g["".concat(l,".").concat(m)]||g[m]||p[m]||i;return t?o.createElement(u,a(a({ref:n},d),{},{components:t})):o.createElement(u,a({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var c=2;c<i;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"}}]);