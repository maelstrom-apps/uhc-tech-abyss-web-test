"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[7272],{30876:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>c});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(t),c=r,g=m["".concat(s,".").concat(c)]||m[c]||d[c]||i;return t?a.createElement(g,l(l({ref:n},p),{},{components:t})):a.createElement(g,l({ref:n},p))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},57369:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>u,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var a,r=t(7896),i=t(31461),l=(t(67294),t(30876)),o=["components"],s={id:"text-input-area",category:"Forms",title:"TextInputArea",description:"Allows users to enter multi-line text into a UI.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3697%3A25655",pagination_prev:"web/ui/text-input",pagination_next:"web/ui/time-input"},u=void 0,p={unversionedId:"web/ui/text-input-area",id:"web/ui/text-input-area",isDocsHomePage:!1,title:"TextInputArea",description:"Allows users to enter multi-line text into a UI.",source:"@site/docs/web/ui/TextInputArea.md",sourceDirName:"web/ui",slug:"/web/ui/text-input-area",permalink:"/web/ui/text-input-area",tags:[],version:"current",frontMatter:{id:"text-input-area",category:"Forms",title:"TextInputArea",description:"Allows users to enter multi-line text into a UI.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3697%3A25655",pagination_prev:"web/ui/text-input",pagination_next:"web/ui/time-input"},sidebar:"docs",previous:{title:"TextInput",permalink:"/web/ui/text-input"},next:{title:"TimeInput",permalink:"/web/ui/time-input"}},d=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Rows",id:"rows",children:[],level:2},{value:"Subtext",id:"subtext",children:[],level:2},{value:"Error Message",id:"error-message",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Max Length",id:"max-length",children:[],level:2},{value:"Display Max Length",id:"display-max-length",children:[],level:2},{value:"Disable Auto Sizing",id:"disable-auto-sizing",children:[],level:2},{value:"Highlighted",id:"highlighted",children:[],level:2}],m=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)}),c={toc:d};function g(e){var n=e.components,t=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)(m,{label:"Overview",mdxType:"Tab"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { TextInputArea } from '@abyss/web/ui/TextInputArea';\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'TextInputArea',\n  inputs: [\n    {\n      prop: 'placeholder',\n      type: 'string',\n    },\n    {\n      prop: 'subText',\n      type: 'string',\n    },\n    {\n      prop: 'maxLength',\n      type: 'number',\n    },\n    {\n      prop: 'rows',\n      type: 'number',\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'isRequired',\n      type: 'boolean',\n    },\n    {\n      prop: 'displayMaxLength',\n      type: 'boolean',\n    },\n    {\n      prop: 'disableAutoSize',\n      type: 'boolean',\n    },\n  ],\n}\n\n() => {\n  const [value, setValue] = useState('State Default Value');\n\n  return (\n    <TextInputArea\n      label=\"TextInputArea Sandbox\"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n    />\n  );\n};\n")),(0,l.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,l.kt)("p",null,"Using the ",(0,l.kt)("inlineCode",{parentName:"p"},"useForm")," hook for handling TextInputArea lets the DOM handle form data."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      textForm: \'Form Value\',\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <TextInputArea\n        label="TextInputArea useForm"\n        model="textForm"\n        validators={{ required: true }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"usestate"},"useState"),(0,l.kt)("p",null,"Using the ",(0,l.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('State Default Value');\n\n  return (\n    <TextInputArea\n      label=\"TextInputArea useState\"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n    />\n  );\n};\n")),(0,l.kt)("h2",{id:"rows"},"Rows"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"rows")," prop to set the amount of rows displayed in the text area."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInputArea rows={8} label="Rows" model="rows" />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"subtext"},"Subtext"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the input field."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInputArea\n        label="Sub Text"\n        model="subText"\n        subText="Custom Sub Text"\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"error-message"},"Error Message"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to display a custom error message below the input field."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\'Default Value\');\n\n  return (\n    <TextInputArea\n      label="Input With Error"\n      errorMessage="Error Message"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n    />\n  );\n};\n')),(0,l.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,l.kt)("p",null,"Use the ",(0,l.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\'\');\n\n  return (\n    <TextInputArea\n      onChange={(e) => setValue(e.target.value)}\n      value={value}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    />\n  );\n};\n')),(0,l.kt)("h2",{id:"label"},"Label"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"label")," prop to display a label above the input. To hide the input label set ",(0,l.kt)("inlineCode",{parentName:"p"},"hideLabel")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInputArea\n        label="Custom Label"\n        placeholder="Custom Label"\n        model="custom-label"\n      />\n      <TextInputArea\n        label="Hidden Label"\n        placeholder="Hidden Label"\n        model="custom-hidden-label"\n        hideLabel\n        style={{ marginTop: \'15px\' }}\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"disabled"},"Disabled"),(0,l.kt)("p",null,"Set the ",(0,l.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to disable the input field so users cannot enter a value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      disabled: \'Disabled\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInputArea isDisabled={true} label="Disabled" model="disabled" />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"max-length"},"Max Length"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"maxLength")," prop to limit the number of characters allowed in the input field."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInputArea\n        label="Max Length"\n        maxLength={4}\n        model="maxLength"\n        placeholder="Type to see character limit"\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"display-max-length"},"Display Max Length"),(0,l.kt)("p",null,"Set the ",(0,l.kt)("inlineCode",{parentName:"p"},"displayMaxLength")," prop to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to display the max length character counter."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInputArea\n        label="Display Max Length"\n        maxLength={20}\n        model="displayMaxLength"\n        displayMaxLength\n        placeholder="Type to see character limit"\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"disable-auto-sizing"},"Disable Auto Sizing"),(0,l.kt)("p",null,"Set the ",(0,l.kt)("inlineCode",{parentName:"p"},"disableAutoSize")," prop to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to disable auto sizing."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\n    \'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sagittis sodales sapien. Donec vitae euismod leo. Suspendisse vel accumsan sapien. Aliquam ut magna convallis, malesuada velit vitae, pulvinar nulla. Suspendisse vitae tortor vulputate orci semper euismod mattis ut metus. Proin semper nulla id suscipit sollicitudin. Curabitur ac vestibulum orci, sed mollis augue. Etiam in sollicitudin ipsum, ut ultrices ante. Etiam et pulvinar tellus. Integer et accumsan dui, ac euismod lacus. Phasellus purus dui, euismod at ante eu, volutpat sodales turpis. Integer fermentum, sapien ut viverra tristique, urna nisi efficitur quam, a pulvinar ex leo eget liber\'\n  );\n\n  return (\n    <React.Fragment>\n      <TextInputArea\n        label="Disabled Auto Sizing"\n        value={value}\n        disableAutoSize\n        onChange={(e) => setValue(e.target.value)}\n      />\n      <TextInputArea\n        label="Auto Sizing"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n      />\n    </React.Fragment>\n  );\n};\n')),(0,l.kt)("h2",{id:"highlighted"},"Highlighted"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"highlighted")," prop to enable the background color for the input. You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"FormProvider")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"highlighted")," to enable the color to appear if validation is required."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState();\n\n  return (\n    <TextInputArea\n      label="Highlighted"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n      highlighted\n    />\n  );\n};\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit} highlighted>\n      <TextInputArea\n        label="FormProvider Highlighted"\n        model="highlighted"\n        validators={{ required: true }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n'))),(0,l.kt)(m,{label:"Integration",mdxType:"Tab"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={TextInputArea}\n  rows={[\n    {\n      name: 'value',\n      type: 'number | string',\n      description: 'Value of the text area',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'validators',\n      type: 'object',\n      description: 'Rules for text area validation',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired everytime the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    {\n      name: 'onKeyDown',\n      type: 'function',\n      description:\n        'Callback fired everytime a key is pressed while focused in the component',\n    },\n    {\n      name: 'onPaste',\n      type: 'function',\n      description:\n        'Callback fired everytime something is pasted into the component',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the text area. If true, the text area will be disabled',\n    },\n    {\n      name: 'isRequired',\n      type: 'boolean',\n      description: 'Flag to require text',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'maxLength',\n      type: 'number',\n      description: 'Maximum amount of characters allowed in the text area',\n    },\n    {\n      name: 'displayMaxLength',\n      type: 'boolean',\n      description: 'Display the maximum length character counter',\n    },\n    {\n      name: 'disableAutoSize',\n      type: 'boolean',\n      description: 'Disable the auto size functionality',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Text displayed below the text area',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Error message displayed below the text area',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the text area',\n    },\n    {\n      name: 'rows',\n      type: 'number',\n      description: 'The number of rows displayed in the text area',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Set the label of the text area',\n    },\n  ]}\n/>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={TextInputArea}\n  rows={[\n    {\n      name: 'text-input-area-root',\n      description: 'TextInputArea root element',\n    },\n    {\n      name: 'text-input-area-label',\n      description: 'FormInput label',\n    },\n    {\n      name: 'text-input-area-max-length-label',\n      description: 'FormInput max length label',\n    },\n    {\n      name: 'text-input-area-input',\n      description: 'FormInput',\n    },\n    {\n      name: 'text-input-area-input-descriptors',\n      description: 'Descriptor for FormInput',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0}}]);