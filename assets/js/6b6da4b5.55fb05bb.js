"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[1801],{30876:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),u=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return o.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},b=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),b=u(t),m=r,d=b["".concat(s,".").concat(m)]||b[m]||p[m]||a;return t?o.createElement(d,l(l({ref:n},c),{},{components:t})):o.createElement(d,l({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=b;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<a;u++)l[u]=t[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}b.displayName="MDXCreateElement"},32522:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>u,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var o,r=t(7896),a=t(31461),l=(t(67294),t(30876)),i=["components"],s={id:"checkbox-group",category:"Forms",title:"CheckboxGroup",description:"Allows a user to select one or multiple items from a list.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A23398",pagination_prev:"web/ui/checkbox",pagination_next:"web/ui/checkbox-tree"},u=void 0,c={unversionedId:"web/ui/checkbox-group",id:"web/ui/checkbox-group",isDocsHomePage:!1,title:"CheckboxGroup",description:"Allows a user to select one or multiple items from a list.",source:"@site/docs/web/ui/CheckboxGroup.md",sourceDirName:"web/ui",slug:"/web/ui/checkbox-group",permalink:"/web/ui/checkbox-group",tags:[],version:"current",frontMatter:{id:"checkbox-group",category:"Forms",title:"CheckboxGroup",description:"Allows a user to select one or multiple items from a list.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A23398",pagination_prev:"web/ui/checkbox",pagination_next:"web/ui/checkbox-tree"},sidebar:"docs",previous:{title:"Checkbox",permalink:"/web/ui/checkbox"},next:{title:"CheckboxTree",permalink:"/web/ui/checkbox-tree"}},p=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Validation",id:"validation",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Subtext",id:"subtext",children:[],level:2},{value:"Error Message",id:"error-message",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Display",id:"display",children:[],level:2}],b=(o="Tab",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)}),m={toc:p};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)(b,{label:"Overview",mdxType:"Tab"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { CheckboxGroup } from '@abyss/web/ui/CheckboxGroup';\n")),(0,l.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,l.kt)("p",null,"Using the ",(0,l.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      \'checkbox-form\': [\'two\'],\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <CheckboxGroup label="CheckboxGroup useForm" model="checkbox-form">\n        <Checkbox label="Option 1" value="one" />\n        <Checkbox label="Option 2" value="two" />\n        <Checkbox label="Option 3" value="three" />\n      </CheckboxGroup>\n      <Button type="submit" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"usestate"},"useState"),(0,l.kt)("p",null,"Using the ",(0,l.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = React.useState([\'1\']);\n\n  const onSubmit = () => {\n    console.log(\'submitted\', value);\n  };\n\n  return (\n    <React.Fragment>\n      <CheckboxGroup\n        label="CheckboxGroup useState"\n        value={value}\n        onChange={(e) => {\n          setValue(e);\n        }}\n      >\n        <Checkbox label="Option 1" value="1" />\n        <Checkbox label="Option 2" value="2" />\n        <Checkbox label="Option 3" value="3" />\n      </CheckboxGroup>\n      <Button onClick={onSubmit} style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n')),(0,l.kt)("h2",{id:"validation"},"Validation"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"validators")," prop to pass in required or custom validations like minimum selection amount."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <CheckboxGroup\n        label="What are your favorite sports?"\n        model="checkbox-group-validation"\n        validators={{\n          required: true,\n          validate: (value) =>\n            (value && value.length >= 2) || \'Select At Least 2 Options\',\n        }}\n      >\n        <Checkbox label="Soccer" value="soccer" />\n        <Checkbox label="Football" value="football" />\n        <Checkbox label="Baseball" value="baseball" />\n        <Checkbox label="Golf" value="golf" />\n        <Checkbox label="Other" value="other" />\n      </CheckboxGroup>\n      <Button type="submit" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"label"},"Label"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"label")," prop to add a custom checkbox group label."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <CheckboxGroup label="Custom Group Label" model="label">\n        <Checkbox label="Option 1" value="one" />\n        <Checkbox label="Option 2" value="two" />\n        <Checkbox label="Option 3" value="three" />\n      </CheckboxGroup>\n      <Button type="submit" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"disabled"},"Disabled"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to disable the entire group."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <CheckboxGroup label="Custom Group Label" model="label" isDisabled>\n        <Checkbox label="Option 1" value="one" />\n        <Checkbox label="Option 2" value="two" />\n        <Checkbox label="Option 3" value="three" />\n      </CheckboxGroup>\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"subtext"},"Subtext"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"subText")," prop to insert helpful text below the checkbox group."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <CheckboxGroup\n        label="Sub Text"\n        subText="Custom Sub Text"\n        model="checkbox-form"\n      >\n        <Checkbox label="Option 1" value="one" />\n        <Checkbox label="Option 2" value="two" />\n        <Checkbox label="Option 3" value="three" />\n      </CheckboxGroup>\n      <Button type="submit" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"error-message"},"Error Message"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to insert a custom error message below the checkbox group."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = React.useState([\'1\']);\n\n  const onSubmit = () => {\n    console.log(\'submitted\', value);\n  };\n\n  return (\n    <React.Fragment>\n      <CheckboxGroup\n        label="Error Message"\n        errorMessage="Custom Error Message"\n        value={value}\n        onChange={(e) => {\n          setValue(e);\n        }}\n      >\n        <Checkbox label="Option 1" value="1" />\n        <Checkbox label="Option 2" value="2" />\n      </CheckboxGroup>\n      <Button onClick={onSubmit} style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n')),(0,l.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,l.kt)("p",null,"Use the ",(0,l.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = React.useState([\'1\']);\n\n  return (\n    <CheckboxGroup\n      value={value}\n      onChange={(e) => {\n        setValue(e);\n      }}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    >\n      <Checkbox label="Option 1" value="1" />\n      <Checkbox label="Option 2" value="2" />\n    </CheckboxGroup>\n  );\n};\n')),(0,l.kt)("h2",{id:"size"},"Size"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"size")," prop to set the height/width of the checkbox. Can use predefined sizes or custom number to set size."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      \'size-sm\': [\'one\', \'two\'],\n      \'size-lg\': [\'one\', \'two\'],\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <CheckboxGroup label="Size Small" model="size-sm" size="sm">\n        <Checkbox label="Option 1" value="one" />\n        <Checkbox label="Option 2" value="two" />\n      </CheckboxGroup>\n      <CheckboxGroup label="Size Large" model="size-lg" size="lg">\n        <Checkbox label="Option 1" value="one" />\n        <Checkbox label="Option 2" value="two" />\n      </CheckboxGroup>\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"display"},"Display"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"display")," prop to set the orientation of the checkboxes. Available variants include ",(0,l.kt)("inlineCode",{parentName:"p"},"'column'")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"'row'"),". The default is set to ",(0,l.kt)("inlineCode",{parentName:"p"},"'column'"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <CheckboxGroup label="Custom Group Display" display="row" model="display">\n        <Checkbox label="Row option 1" value="one" />\n        <Checkbox label="Row option 2" value="two" />\n        <Checkbox label="Row Option 3" value="three" />\n      </CheckboxGroup>\n      <Button type="submit" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n'))),(0,l.kt)(b,{label:"Integration",mdxType:"Tab"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={CheckboxGroup}\n  rows={[\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired everytime the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Label of the checkbox group',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'validators',\n      type: 'object',\n      description: 'Rules for checkbox validation',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Height and width of the checkbox',\n    },\n    {\n      name: 'display',\n      type: 'string',\n      description: 'Set the direction that the checkboxes display',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element the checkbox group wraps',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Set the subtext displayed below the checkbox group',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Set the error message displayed below the checkbox group',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the checkbox group',\n    },\n    {\n      name: 'isRequired',\n      type: 'boolean',\n      description: 'Flag to set if checkbox is required',\n    },\n    {\n      name: 'value',\n      type: 'array[string]',\n      description: '',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the checkbox group. If true, the checkbox group will be disabled',\n    },\n  ]}\n/>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={CheckboxGroup}\n  rows={[\n    {\n      name: 'checkbox-group-root',\n      description: 'Checkbox group root element',\n    },\n    {\n      name: 'checkbox-group-label',\n      description: 'Label element',\n    },\n    {\n      name: 'checkbox-group-container',\n      description: 'Checkbox group container',\n    },\n    {\n      name: 'checkbox-group-descriptors',\n      description: 'Descriptor element',\n    },\n  ]}\n/>\n"))))}d.isMDXComponent=!0}}]);