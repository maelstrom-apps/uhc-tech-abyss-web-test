"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[349],{68597:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>u,default:()=>b,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var r,o=n(7896),a=n(31461),i=(n(2784),n(3905)),l=["components"],s={id:"form-provider",category:"Providers",title:"FormProvider",description:"Adds form functionality to Abyss inputs.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1216",pagination_prev:"web/ui/collapse-provider",pagination_next:"web/ui/overlay-provider"},u=void 0,p={unversionedId:"web/ui/form-provider",id:"web/ui/form-provider",isDocsHomePage:!1,title:"FormProvider",description:"Adds form functionality to Abyss inputs.",source:"@site/docs/web/ui/FormProvider.md",sourceDirName:"web/ui",slug:"/web/ui/form-provider",permalink:"/web/ui/form-provider",tags:[],version:"current",frontMatter:{id:"form-provider",category:"Providers",title:"FormProvider",description:"Adds form functionality to Abyss inputs.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1216",pagination_prev:"web/ui/collapse-provider",pagination_next:"web/ui/overlay-provider"},sidebar:"docs",previous:{title:"CollapseProvider",permalink:"/web/ui/collapse-provider"},next:{title:"OverlayProvider",permalink:"/web/ui/overlay-provider"}},d=[{value:"Usage",id:"usage",children:[],level:2},{value:"Highlighted",id:"highlighted",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2}],m=(r="Tab",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),c={toc:d};function b(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(m,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { FormProvider } from '@abyss/web/ui/FormProvider';\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"FormProvider")," along with the ",(0,i.kt)("a",{parentName:"p",href:"/web/hooks/use-form"},"useForm")," hook in order to better manage your forms and fully utilize the capabilities of form management within Abyss. To achieve this you will need to wrap all form fields and the submission button with the ",(0,i.kt)("inlineCode",{parentName:"p"},"FormProvider")," component and provide state through usage of ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm"),"."),(0,i.kt)("p",null,"Please see examples below for additional props to pass into the ",(0,i.kt)("inlineCode",{parentName:"p"},"FormProvider")," and go to ",(0,i.kt)("a",{parentName:"p",href:"/web/hooks/use-form"},"useForm")," for detailed documentation on how to configure your forms and take advantage of all the available features."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n    // Do something on submit\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <Checkbox\n        label=\"I agree to the Terms and Conditions\"\n        model=\"accept-terms\"\n        validators={{ required: true }}\n      />\n      <SelectInput\n        label=\"Select List Usage\"\n        model=\"selectlist\"\n        placeholder=\"Select List Form Provider\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n        validators={{ required: true }}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"highlighted"},"Highlighted"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"highlighted")," prop to enable a distinct background color when fields are required."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      // selectlist: 'ember',\n      // frameworks: ['ember', 'svelte'],\n      // 'test-date': '05/14/1993',\n      // textForm: 'test',\n      // 'test-form-date': { from: '06/04/2022', to: '06/30/2022' },\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n    // Do something on submit\n  };\n\n  const options = [\n    { value: 'react', label: 'React' },\n    { value: 'ng', label: 'Angular' },\n    { value: 'svelte', label: 'Svelte' },\n    { value: 'vue', label: 'Vue' },\n    { value: 'alpine', label: 'Alpine' },\n    { value: 'ember', label: 'Ember' },\n    { value: 'stimulus', label: 'Stimulus' },\n    { value: 'preact', label: 'Preact' },\n  ];\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit} highlighted>\n      <SelectInput\n        label=\"Select List Usage\"\n        model=\"selectlist\"\n        placeholder=\"Select List Form Provider\"\n        options={options}\n        validators={{ required: true }}\n      />\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        model=\"frameworks\"\n        isSearchable\n        options={options}\n        validators={{ required: true }}\n      />\n      <DateInput model=\"test-date\" validators={{ required: true }} />\n      <DateInputRange model=\"test-form-date\" validators={{ required: true }} />\n      <TextInput\n        label=\"TextInput Form\"\n        placeholder=\"Form\"\n        model=\"textForm-required\"\n        isClearable\n        validators={{ required: true }}\n      />\n      <TextInput\n        label=\"TextInput Form Not Required\"\n        placeholder=\"Form\"\n        model=\"textForm\"\n        isClearable\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content across the entire form. Available variants include 'column' and 'row'. If no value is included the orientation will default to row. If ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," is used within the FormProvider it will override any setting within an individual form field."),(0,i.kt)("p",null,"Please note that for accessibility compliance the error message must always display before the subtext."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n    // Do something on submit\n  };\n\n  const options = [\n    { value: \'react\', label: \'React\' },\n    { value: \'ng\', label: \'Angular\' },\n    { value: \'svelte\', label: \'Svelte\' },\n    { value: \'vue\', label: \'Vue\' },\n    { value: \'alpine\', label: \'Alpine\' },\n    { value: \'ember\', label: \'Ember\' },\n    { value: \'stimulus\', label: \'Stimulus\' },\n    { value: \'preact\', label: \'Preact\' },\n  ];\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit} descriptorsDisplay="column">\n      <SelectInput\n        label="SelectInput"\n        model="select-input"\n        placeholder="Select List Form Provider"\n        options={options}\n        validators={{ required: true }}\n        subText="SelectInput Subtext"\n      />\n      <DateInput\n        label="DateInput"\n        model="test-date"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="TextInput"\n        placeholder="Form"\n        model="text-input"\n        isClearable\n        validators={{ required: true }}\n        subText="TextInput Subtext"\n      />\n      <CheckboxGroup\n        label="CheckboxGroup"\n        model="checkbox-group"\n        display="row"\n        validators={{ required: true }}\n        subText="CheckboxGroup Subtext"\n      >\n        <Checkbox label="Option 1" value="one" />\n        <Checkbox label="Option 2" value="two" />\n        <Checkbox label="Option 3" value="three" />\n      </CheckboxGroup>\n      <RadioGroup\n        label="RadioGroup"\n        model="radio-group"\n        display="row"\n        validators={{ required: true }}\n        subText="RadioGroup Subtext"\n      >\n        <RadioGroup.Radio label="One" value="one" />\n        <RadioGroup.Radio label="Two" value="two" />\n        <RadioGroup.Radio label="Three" value="three" />\n        <RadioGroup.Radio label="Four" value="four" />\n      </RadioGroup>\n      <TextInputArea\n        label="TextInputArea"\n        model="text-input-area"\n        validators={{ required: true }}\n        subText="TextInputArea Subtext"\n      />\n      <Button type="submit" style={{ marginTop: \'15px\' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n'))),(0,i.kt)(m,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={FormProvider}\n  rows={[\n    {\n      name: 'state',\n      type: 'object',\n      description: 'State passed in from useForm.',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'Form inputs passed to FormProvider',\n    },\n    {\n      name: 'onSubmit',\n      type: 'function',\n      description:\n        'Callback fired when type=\"submit\" button within the FormProvider wrapper is triggered',\n    },\n    {\n      name: 'onError',\n      type: 'function',\n      description:\n        'Callback fired when type=\"error\" button within the FormProvider wrapper is triggered',\n    },\n    {\n      name: 'autoComplete',\n      type: 'string',\n      description:\n        'The autocomplete status that is passed to the form element in the FormProvider',\n    },\n    {\n      name: 'highlighted',\n      type: 'boolean',\n      description:\n        'Enables a distinct background color when fields are invalid',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content across the entire form',\n    },\n  ]}\n/>\n"))))}b.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var r=n(2784);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),c=o,b=m["".concat(s,".").concat(c)]||m[c]||d[c]||a;return n?r.createElement(b,i(i({ref:t},p),{},{components:n})):r.createElement(b,i({ref:t},p))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);