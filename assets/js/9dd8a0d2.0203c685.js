(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[7054],{15679:(e,n,t)=>{"use strict";t.r(n),t.d(n,{useAbyssId:()=>o});var a=t(2784),o=function(){var e=Math.random().toString(36).substr(2,9);return(0,a.useRef)("abyss-"+e).current}},23075:(e,n,t)=>{"use strict";t.d(n,{O:()=>a});var a=function(e){var n=e.className,t=e.css,a=e["data-testid"];return function(e,o){var i="abyss-"+e,r=t&&t[i],l=null==o?void 0:o.css,s=null==o?void 0:o.className,d=s?s+" "+i:i;return Object.assign({className:n?n+" "+d:d},r&&{css:Object.assign({},l,r)},a&&{"data-testid":a+"-"+i})}}},65483:(e,n,t)=>{"use strict";t.r(n),t.d(n,{ThemeContext:()=>o,useAbyssTheme:()=>i});var a=t(2784),o=a.createContext(null),i=function(){return(0,a.useContext)(o)}},26153:(e,n,t)=>{"use strict";t.r(n),t.d(n,{useAriaProps:()=>o});var a=t(15679),o=function(e){var n,t=e.id,o=e.errorMessage,i=e.errorMessageId,r=e.hasSubText,l=e.subTextMessageId,s=e.isRequired,d=e.ariaLabel,p=t||(0,a.useAbyssId)(),c=(0,a.useAbyssId)(),u=i||(0,a.useAbyssId)(),m=l||(0,a.useAbyssId)();return{ariaLabelProps:{htmlFor:p,id:c,isRequired:s,hasError:!!o},ariaInputProps:{id:p,"aria-labelledby":(n=[],n.push(c),o&&n.push(u),(r||l)&&n.push(m),n.length?n.join(" "):null),"aria-invalid":!!o,"aria-label":d},ariaDescriptorProps:{errorId:u,subTextId:m}}}},99946:(e,n,t)=>{"use strict";t.r(n),t.d(n,{useButton:()=>r});var a=t(31461),o=t(2784),i=["isDisabled","isLoading","disabled","onClick","ref","type"],r=function(e){var n=e.isDisabled,t=e.isLoading,r=e.disabled,l=e.onClick,s=e.ref,d=e.type,p=(0,a.Z)(e,i),c=s||(0,o.useRef)(),u=!(!r&&!n),m={isDisabled:u,type:"button"},g=function(e){!l||u||t||l(e)};return{buttonProps:Object.assign({},p,{isLoading:t,"aria-disabled":u,onClick:function(e){u||g(e)},type:d||"button"},u&&m,{ref:c})}}},75853:(e,n,t)=>{"use strict";t.r(n),t.d(n,{useCollapse:()=>r});var a=t(2784),o=t(15679),i=t(89762),r=function(e){var n=void 0===e?{}:e,t=n.ref,r=n.defaultIsOpen,l=void 0===r||r,s=n.duration,d=n.model,p=(0,a.useContext)(i.m),c=(null==p?void 0:p.state)||null,u=(0,o.useAbyssId)(),m=d||u,g=(0,a.useState)(l),h=g[0],b=g[1],v=t||(0,a.useRef)(),k=(0,a.useRef)(!0),f=(0,a.useRef)(!1);(0,a.useEffect)((function(){if(p&&void 0===(null==c?void 0:c.nested[m])){var e,n=null!=(e=c.defaultIsOpen)?e:l;p.methods.register({model:m,isOpen:n}),f.current=!0}}),[]);var y=p&&f?c.nested[m]:h;return(0,a.useEffect)((function(){var e=null==v?void 0:v.current;if(e&&void 0!==y){if(k.current){var n=s||300,t=n>1500?1500:n;return e.style.transitionDuration=t+"ms",e.style.height=y?"auto":"0px",void(k.current=!1)}var a=y?0:e.scrollHeight,o=y?e.scrollHeight:0;return e.ontransitionend=void 0,e.style.height="auto",e.style.height=a+"px",a!==o?requestAnimationFrame((function(){requestAnimationFrame((function(){requestAnimationFrame((function(){y&&(e.ontransitionend=function(n){"height"===n.propertyName&&(e.style.height="auto")}),e.style.height=o+"px"}))}))})):e.style.height=y?"auto":"0px",function(){e.ontransitionend=void 0}}}),[y,v,k]),{isOpen:y,setIsOpen:b,collapseContext:p,buttonProps:{onClick:function(){p?p.methods.toggle({model:m}):b(!y)},"aria-expanded":y},collapseProps:{ref:v,style:{overflow:"hidden"},"aria-hidden":!y}}}},76040:(e,n,t)=>{"use strict";t.d(n,{f:()=>s});var a=t(31461),o=["size","sizes","radius","radiuses"],i=/color/i,r=/size|space|width|height|radius|gutter/i,l=function(e,n){return e?"string"==typeof n?e[n.replace("$","")]||n:e[n]||n:null},s=function(e){var n,t,s,d,p,c,u=(t=(n=e).size,s=n.sizes,d=n.radius,p=n.radiuses,c=(0,a.Z)(n,o),Object.assign({},c,{size:l(s,t),radius:l(p,d)}));return Object.keys(u).forEach((function(e){var n=u[e];i.test(e)?u[e]=n:r.test(e)?u[e]=function(e){return"string"!=typeof e||e.endsWith("%")?e:parseInt(e,10)}(n):u[e]=n,u[e]||delete u[e]})),u}},3063:(e,n,t)=>{"use strict";t.r(n),t.d(n,{useDialog:()=>i});var a=t(2784),o=t(3448),i=function(e){var n=e.model,t=e.isOpen,i=e.onClose,r=e.onOpen,l=(0,a.useState)(null),s=l[0],d=l[1],p=(0,a.useContext)(o.i),c=(null==p?void 0:p.methods(n))||null,u=(null==c?void 0:c.getState())||null,m=(u&&n?u.isOpen:t)||t;(0,a.useEffect)((function(){if(m){var e=document.activeElement;d(e)}else s&&(s.focus(),d(null))}),[m]);return{isOpen:m,onClose:function(e){e?(c&&n&&(null==c||c.open()),r&&r()):(c&&n&&(null==c||c.close()),i&&i())}}}},41252:(e,n,t)=>{"use strict";t.r(n),t.d(n,{useFormInput:()=>c});var a=t(2784),o=t(63955),i=t(72579),r=t.n(i),l=t(45455),s=t.n(l),d=t(27990),p=function(e){var n=e.validators,t=e.highlighted,a=e.formContext,o=e.model,i=!s()(n)&&(null==n?void 0:n.required),l=i&&!!t;if(t&&a){var d,p,c=null==a||null==(d=a.control)?void 0:d._defaultValues,u=a.getValues(o),m=null==a?void 0:a.getFieldState(o),g=m.invalid;m.isDirty&&g&&i&&(l=!0),null!=a&&null!=(p=a.formState)&&p.isSubmitted&&!g&&(l=!1),r()(c,o)&&i&&l&&u&&(l=!1)}return l&&t},c=function(e){var n,t,i,l=e.formState,s=e.model,c=e.validators,u=e.errorMessage,m=e.ref,g=e.isController,h=void 0!==g&&g,b=e.isRequired,v=e.defaultValue,k=void 0===v?"":v,f=(0,a.useContext)(d.FormUtilityContext),y=f.highlighted,w=f.descriptorsDisplayForm,x=m||(0,a.useRef)(),C=b||!1,N=(0,o.Gc)();l?i=l:s&&N&&(i=N);var T=(0,a.useCallback)((function(){x.current.focus()}),[x]);if(s&&i){var S,D;if(h)t=(0,o.bc)({name:s,control:i.control,rules:c,defaultValue:k}).field;else{var I=Object.assign({},c||{},{value:k});t=i.register(s,Object.assign({},I))}(n=r()(null==(S=i)||null==(D=S.formState)?void 0:D.errors,s))&&!n.message&&(n=Object.assign({},n,{message:"Required"})),T=(0,a.useCallback)((function(){i.setFocus(s)}),[s]),c&&(C=Object.keys(c).some((function(e){var n=!!c[e];return"required"===e&&n})))}return!s&&u&&(n={message:u}),{model:s,formRegister:t,inputError:n,formContext:i,isRequired:C,isInvalid:!!n,triggerFocus:T,requiredHighlight:p({validators:c,highlighted:y,formContext:i,model:s}),descriptorsDisplayForm:w,formInputProps:Object.assign({},t,{ref:s?t.ref:x})}}},99132:(e,n,t)=>{"use strict";t.r(n),t.d(n,{useFuse:()=>o});var a=t(71659),o=function(e){var n=e.list,t=e.keys,o=e.config;return new a.Z(n||[],Object.assign({},o,{keys:t}))}},69393:(e,n,t)=>{"use strict";t.r(n),t.d(n,{LevelContext:()=>o,useHeadingLevel:()=>i});var a=t(2784),o=a.createContext(1),i=function(e){var n,t=(0,a.useContext)(o);return(n=t+(e||0))>0&&n<=6?n:Math.min(Math.max(1,n),6)}},54878:(e,n,t)=>{"use strict";t.r(n),t.d(n,{useHover:()=>o});var a=t(2784),o=function(){var e=(0,a.useState)(),n=e[0],t=e[1];return[n,(0,a.useMemo)((function(){return{onMouseOver:function(){t(!0)},onMouseOut:function(){t(!1)}}}),[])]}},43921:(e,n,t)=>{"use strict";t.d(n,{i:()=>a});var a=t(2784).createContext()},69040:(e,n,t)=>{"use strict";t.d(n,{n:()=>l});var a=t(31461),o=t(32100),i=t(57612),r=["href","isDisabled","forwardedRef","openNewWindow"],l=function(e){var n=e.href,t=e.isDisabled,l=e.forwardedRef,s=e.openNewWindow,d=void 0===s?null:s,p=(0,a.Z)(e,r),c=!1;o.GV&&(c=(0,o.GV)());var u=null!=d?d:/^(?:[a-z]+:)?\/\//i.test(n),m=Object.assign({},p,{as:"a",href:n},l&&{ref:l});return t?(delete m.onClick,delete m.href,m=Object.assign({},m,{"aria-disabled":!0,as:"button",type:"button"})):u?m=Object.assign({},m,{target:"_blank",rel:"noopener noreferrer"}):n?c&&(delete m.href,m=Object.assign({},m,{to:n,as:i.rU})):m=Object.assign({},m,{as:"button",type:"button"}),{linkProps:m,isExternalLink:u,inRouterContext:c}}},84608:(e,n,t)=>{"use strict";t.r(n),t.d(n,{useMenuCheckbox:()=>r});var a=t(31461),o=t(41252),i=["onChange","checked","disabled","value"],r=function(e){var n=e.onChange,t=e.checked,r=e.disabled,l=e.value,s=(0,a.Z)(e,i),d=(0,o.useFormInput)(Object.assign({},s,{isController:!0})),p=d.model,c=d.formInputProps,u=d.formContext,m=p?function(e){c.onChange(e),n&&n(e)}:n,g=(null==u?void 0:u.watch(p))||t;return{checkboxProps:Object.assign({},s,{checked:g,onCheckedChange:m,value:l,disabled:r})}}},63961:(e,n,t)=>{"use strict";t.r(n),t.d(n,{useMenuRadio:()=>r});var a=t(31461),o=t(41252),i=["initialValue","onChange","value"],r=function(e){e.initialValue;var n=e.onChange,t=e.value,r=(0,a.Z)(e,i),l=(0,o.useFormInput)(Object.assign({},r,{isController:!0})),s=l.model,d=l.formInputProps,p=l.formContext,c=s?function(e){d.onChange(e),n&&n(e)}:n,u=(null==p?void 0:p.watch(s))||t;return{radioProps:Object.assign({},r,{value:u,onValueChange:c})}}},3448:(e,n,t)=>{"use strict";t.d(n,{i:()=>a});var a=t(2784).createContext()},23216:(e,n,t)=>{"use strict";t.d(n,{D:()=>r});var a=t(66379),o=t(40771),i=t(20189),r=function(e){var n,t,r,l=e.position,s=e.sideOffset,d=void 0===s?0:s,p=e.matchAnchorWidth,c=(0,a.YF)({placement:l,whileElementsMounted:o.Me,middleware:[(0,i.cv)(d),(0,i.RR)(),(0,i.uY)()]}),u=c.x,m=c.y,g=c.reference,h=c.floating,b=c.strategy,v=c.refs,k=c.placement,f={position:"fixed",top:0,left:0,opacity:0};return null!=v&&null!=(n=v.reference)&&n.current&&(m||u)&&(f={position:b,top:m,left:u}),{anchorRef:g,popperRef:h,popperStyles:p?Object.assign({},f,{width:(null==v||null==(t=v.reference)||null==(r=t.current)?void 0:r.getBoundingClientRect().width)||"100%"}):f,placedSide:k}}},36181:(e,n,t)=>{"use strict";t.r(n),t.d(n,{useSearchInput:()=>f});var a=t(31461),o=t(2784),i=t(18149),r=t.n(i),l=t(43638),s=t(84636),d=t.n(s),p=t(54073),c=t.n(p),u=t(99132),m=t(41252),g=t(26153),h=t(23216),b=["options","fuseConfig","placeholder","keys","label","model","value","onClear","customFilter","openOnFocus","onClickSearchButton","onInputChange","results","isClearable","isDisabled","resultLimit","isSearchable","isLoading","onChange","onSearch","onFocus","onKeyDown","uniqueStorageId","onBlur","onPaste","labelKey","valueKey","subText","descriptorsDisplay","debounceTime","apiFiltering","rounded","inputLeftElement","inputRightElement"],v=["anchorRef","placedSide"],k=function(e,n,t){if(void 0!==e&&n.length){var a=n.find((function(n){return n[t]===e&&!(null!=n&&n.isDisabled)}));if(a)return a}return null},f=function(e){var n=e.options,t=e.fuseConfig,i=e.placeholder,s=e.keys,p=e.label,f=e.model,y=e.value,w=e.onClear,x=e.customFilter,C=e.openOnFocus,N=e.onClickSearchButton,T=e.onInputChange,S=(e.results,e.isClearable),D=e.isDisabled,I=e.resultLimit,P=e.isSearchable,L=e.isLoading,B=e.onChange,M=e.onSearch,A=e.onFocus,F=e.onKeyDown,R=e.uniqueStorageId,j=e.onBlur,O=e.onPaste,z=e.labelKey,H=e.valueKey,U=e.subText,E=e.descriptorsDisplay,G=e.debounceTime,$=e.apiFiltering,V=e.rounded,q=e.inputLeftElement,W=e.inputRightElement,_=(0,a.Z)(e,b),Z=(0,o.useMemo)((function(){return n.flatMap((function(e){var n=[e];return e.section&&e.items.forEach((function(t){n.push(Object.assign({},t,{sectionName:e.section}))})),n}))}),[n]),X=(0,o.useState)(Z),Y=X[0],Q=X[1],K=(0,o.useState)(!1),J=K[0],ee=K[1],ne=(0,o.useState)(!1),te=ne[0],ae=ne[1],oe=(0,o.useState)([]),ie=oe[0],re=oe[1],le=G;null!==$&&0===le&&(le=1e3);var se=(0,m.useFormInput)(Object.assign({label:p,model:f,isController:!0},_)),de=se.inputError,pe=se.formInputProps,ce=se.formContext,ue=se.triggerFocus,me=se.descriptorProps,ge=se.isRequired,he=se.descriptorsDisplayForm,be=(0,g.useAriaProps)({errorMessage:null==de?void 0:de.message,hasSubText:!!U,isRequired:ge}),ve=be.ariaLabelProps,ke=be.ariaInputProps,fe=be.ariaDescriptorProps,ye=(0,u.useFuse)({list:Z,config:Object.assign({threshold:.4},t),keys:s}),we=(0,h.D)({position:"bottom",matchAnchorWidth:!0}),xe=we.anchorRef,Ce=we.placedSide,Ne=(0,a.Z)(we,v),Te=(null==ce?void 0:ce.watch(f))||y,Se=function(e,n){return Object.assign({},e,{target:Object.assign({},e.target,{value:(null==n?void 0:n[H])||""})})},De=function(e,n){var t=ye.search(e,{limit:I});e&&t?Q(t.map((function(e){return null==e?void 0:e.item}))):(Q(Z),n())},Ie=(0,o.useCallback)(c()(De,le),[]),Pe=(0,o.useCallback)(c()((function(e,n){$(e,n)}),le),[]),Le=(0,o.useCallback)(c()(Q,le),[]),Be=(0,l.Kb)({items:Y,scrollIntoView:function(e){null==e||e.scrollIntoView({behavior:"smooth",block:"nearest",inline:"nearest"})},initialSelectedItem:k((null==ce?void 0:ce.getValues(f))||y,Z,H),getA11yStatusMessage:function(e){var n=e.resultCount;return Me?n?n?n+" result"+(1===n?" is":"s are")+" available, use up and down arrow keys to navigate. Press Enter or Space Bar keys to select.":"":"No results found. Please enter a valid search term.":""},stateReducer:function(e,n){var t,a,o,i=n.type,r=n.changes,s=e.isOpen,d=(null==ce?void 0:ce.getValues(f))||y,p=!(null==Y||null==(t=Y[null==r?void 0:r.highlightedIndex])||!t.isDisabled),c=!(null==r||null==(a=r.selectedItem)||!a.isDisabled);if(p)return r;if(i===l.Kb.stateChangeTypes.InputKeyDownEnter&&c)return e;if(i===l.Kb.stateChangeTypes.InputBlur&&ae(!1),i===l.Kb.stateChangeTypes.ItemClick||i===l.Kb.stateChangeTypes.InputKeyDownEnter){var u,m;if(M&&M(null==r?void 0:r.selectedItem),!d&&(null==r||!r.selectedItem)&&null!=r&&r.inputValue)return Object.assign({},r,{inputValue:""});if((null==r||null==(u=r.selectedItem)?void 0:u[z])!==r.inputValue)return Object.assign({},r,{inputValue:null==r||null==(m=r.selectedItem)?void 0:m[z]})}return i!==l.Kb.stateChangeTypes.InputKeyDownArrowDown&&i!==l.Kb.stateChangeTypes.InputKeyDownArrowUp||!s?r:Object.assign({},r,{inputValue:null==Y||null==(o=Y[null==r?void 0:r.highlightedIndex])?void 0:o[H]})},itemToString:function(e){return e?null==e?void 0:e[z]:""},onSelectedItemChange:function(e){var n=e.selectedItem,t=e.type,a=null!=n&&n.item?n.item:n,o=localStorage.getItem(R);if(ae(!1),R&&o&&a){var i,r=JSON.parse(o),s=null==(i=d()([a].concat(r),(function(e){return e.id})))?void 0:i.slice(0,5);localStorage.setItem(R,JSON.stringify(s)),re(s)}else if(a&&R){var p=ie||[];re(p.push(a)),localStorage.setItem(R,JSON.stringify(p))}t!==l.Kb.stateChangeTypes.ItemClick&&t!==l.Kb.stateChangeTypes.InputKeyDownEnter||(f&&pe.onChange(null==a?void 0:a[H]),B&&B(null==a?void 0:a[H],a),Ue())},onInputValueChange:function(e){var n=e.inputValue,t=e.type,a=e.selectedItem,o=t===l.Kb.stateChangeTypes.InputKeyDownArrowDown||t===l.Kb.stateChangeTypes.InputKeyDownArrowUp;if(T&&T(n,o),o)ee(!!n);else{if(ae(!1),ee(!!n),x&&n&&le)return Le(x(n)),void c()(He,le);if(x&&0===n.length&&le&&(Le.cancel(),Q([])),!x||!n)return $&&le?(Pe.cancel(),Pe(n,a),void c()(He,le)):le?(Ie.cancel(),Y?He():Ue(),void Ie(n,He,Ue)):void De(n,He);Q(x(n))}}}),Me=Be.isOpen,Ae=Be.getLabelProps,Fe=Be.getMenuProps,Re=Be.getInputProps,je=Be.getComboboxProps,Oe=Be.highlightedIndex,ze=Be.getItemProps,He=Be.openMenu,Ue=Be.closeMenu,Ee=Be.selectItem,Ge=Be.selectedItem,$e=Be.setHighlightedIndex,Ve=Be.inputValue;(0,o.useEffect)((function(){r()(Y,Z)||L||Q(Z)}),[Z,L]),(0,o.useEffect)((function(){R&&!ie.length&&re(JSON.parse(localStorage.getItem(R)))}),[R]),(0,o.useEffect)((function(){var e=k(Te,Z,H);r()(e,Ge)||(Ee(e||null),Q(Z))}),[Te,Z]);var qe=Fe({},{suppressRefError:!0});delete qe["aria-labelledby"];var We,_e=Object.assign({},ke,Re({onClick:function(){if(ae(!1),R&&null!=ie&&ie.length&&!Ve)Q(ie),ae(!0),He();else if(Ve){var e=I?Y.slice(0,I):Y;Q(e),He()}},onBlur:function(e){var n=Se(e,Ge);j&&j(n)},onPaste:O,onFocus:function(e){var n=Se(e,Ge);A&&A(n),C&&He()},ref:null==pe?void 0:pe.ref}),{isOpen:Me,inputType:"text",disabled:D,error:!(null==de||!de.message),"aria-autocomplete":"list",placeholder:i,type:"text",as:"input",placedSide:Ce,rounded:V,inputLeftElement:!!q,iconRight:(We=1,S&&(We+=1),W&&(We+=1),We)});return delete _e["aria-labelledby"],{rootProps:je({onKeyDown:function(e){F&&F(e),"ArrowDown"===e.key&&e.altKey&&$e(-1),"Enter"===e.key&&Y.length&&Me&&Oe<0&&$e(0)},ref:xe,rounded:V}),labelProps:Object.assign({},ve,Ae(),{isDisabled:D}),searchButtonProps:Object.assign({},N?{as:"button",type:"button","aria-label":"Search",onClick:N}:{as:"div"}),inputProps:_e,clearProps:{isClearable:S,tabindex:-1,triggerFocus:ue,isDisabled:D,onClear:function(){Ee(null),f&&ce.setValue(f,""),B&&B(""),w&&w()},ariaLabel:"Clear Search"},descriptorProps:Object.assign({errorMessage:null==de?void 0:de.message,subText:U,descriptorsDisplay:he||E},fe,me),optionProps:{menuProps:Object.assign({},qe,{"aria-label":"Search Results",rounded:V}),getItemProps:ze,activeIndex:Oe,selectedItem:Ge,showLocalStorage:te,items:Y,isOpen:Me,valueKey:H,labelKey:z,error:!(null==de||!de.message)},popperProps:Object.assign({placedSide:Ce},Ne),state:Object.assign({selectedItem:Ge,isOpen:Me,label:p,isDisabled:D,showClear:J,isLoading:L,isSearchable:P,rounded:V},_)}}},37336:(e,n,t)=>{"use strict";t.r(n),t.d(n,{useSlider:()=>b});var a=t(31461),o=t(2784),i=t(63955),r=t(11019),l=t(18149),s=t.n(l),d=t(72579),p=t.n(d),c=t(5959),u=t(91786),m=t(26153),g=t(27990),h=["model","label","step","maxValue","minValue","errorMessage","isRequired","subText","descriptorsDisplay","value","isRange","onChange"],b=function(e){var n,t,l=e.model,d=e.label,b=e.step,v=e.maxValue,k=e.minValue,f=e.errorMessage,y=e.isRequired,w=e.subText,x=e.descriptorsDisplay,C=e.value,N=e.isRange,T=e.onChange,S=(0,a.Z)(e,h),D=(0,i.Gc)(),I=(0,o.useRef)(),P=(0,c.Ux)(),L=(0,o.useContext)(g.FormUtilityContext).descriptorsDisplayForm,B=null==D?void 0:D.watch(l),M=N?C:[C],A=(0,o.useMemo)((function(){var e=N?[k,v]:[k];return D?B?N?B:[B]:e:M||e}),[]),F=Object.assign({},S,{step:b,numberFormatter:P,value:(C||0===C)&&M,onChange:function(e){var n=N?e:e[0];T&&T(n)},maxValue:v,minValue:k,label:d,defaultValue:A});D&&delete F.value;var R=(0,r.x)(F);(0,o.useEffect)((function(){var e=N?R.values:R.values[0];D&&!s()(e,B)&&D.setValue(l,e)}),[B]);var j=p()(null==D||null==(n=D.formState)?void 0:n.errors,l);!l&&f&&(j={message:f}),j&&!j.message&&(j=Object.assign({},j,{message:"Required"}));var O=(0,m.useAriaProps)({isRequired:y,hasSubText:!!w,errorMessage:null==(t=j)?void 0:t.message}),z=O.ariaProps,H=O.descriptorAriaProps,U=(0,u.o)(Object.assign({},S,z,{"aria-label":d}),R,I),E=U.groupProps,G=U.trackProps,$=U.outputProps,V=U.labelProps,q=j?j.message:null;return{labelProps:Object.assign({isRequired:y},V),trackProps:G,outputProps:$,groupProps:E,descriptorProps:Object.assign({},H,{errorMessage:q,subText:w,descriptorsDisplay:L||x}),sliderState:R,state:{trackRef:I,errorMessage:q,isRequired:y}}}},81534:(e,n,t)=>{"use strict";t.r(n),t.d(n,{useSliderThumb:()=>s});var a=t(31461),o=t(91786),i=t(87211),r=t(41252),l=["state","index","trackRef"],s=function(e){var n=e.state,t=e.index,s=e.trackRef,d=(0,a.Z)(e,l),p=(0,r.useFormInput)(d),c=p.inputError,u=p.formInputProps,m=(0,o.p)({index:t,trackRef:s,inputRef:null==u?void 0:u.ref},n),g=m.thumbProps,h=m.inputProps;return{thumbProps:g,inputProps:Object.assign({},(0,i.dG)(u,h)),state:{selectedValue:n.selectedValue,errorMessage:c?c.message:null}}}},5498:(e,n,t)=>{"use strict";t.d(n,{S:()=>a});var a=function(){return{visuallyHiddenProps:{style:{border:0,clip:"rect(0 0 0 0)",clipPath:"inset(50%)",height:1,margin:"0 -1px -1px 0",overflow:"hidden",padding:0,position:"absolute",width:1,whiteSpace:"nowrap"}}}}},37681:(e,n,t)=>{"use strict";t.r(n),t.d(n,{getLagoonTable:()=>u,lagoon:()=>m});var a=t(72579),o=t.n(a),i=function(e){if("undefined"!=typeof window){var n=(window.location.hostname||"").replace(/[^.]+./,"");if(["uhg.com","optum.com","uhc.com","uhcprovider.com"].includes(n))return e.replace("uhg.com",n)}return e},r={nonprod:i("maelstrom-dmz-nonprod.uhg.com"),prod:i("maelstrom-dmz.uhg.com")},l={},s={},d=function(e,n,t){return function(e){return s[e]?new Promise((function(n){n(s[e])})):fetch(e).then((function(e){return e.json()})).then((function(n){return s[e]=n,n}))}("https://"+(r[t]||r.prod)+"/app/lagoon/"+e+"/env/"+n).then((function(e){var n={};return Object.keys(e).forEach((function(t){n[t]||(n[t]={}),e[t].forEach((function(e){(e.key||e.id)&&(n[t][e.key||e.id]=e)}))})),n}))},p=function(){},c=function(e,n,t,a,i){return d(e,n,t).then((function(t){var a,r,s=(a=t,r={},Object.keys(a).forEach((function(e){r[e]=function(n,t,i){var r=a[e]||{};if(n){var l=r[n];if(i)l=o()(l,i);else if("object"==typeof l){var s=Object.keys(l);2===s.length&&(l=l[s.find((function(e){return"key"!==e}))])}return function(e,n){if(n&&/{{[a-zA-Z0-9_]+}}/.test(e)){var t=e.match(/{{([a-zA-Z0-9_]+)}}/g),a=e;return t.forEach((function(e){var t=e.replace("{{","").replace("}}","");a=a.replace(e,n[t]||"")})),a}return e}(l,t)}return Object.values(r)}})),r);return l[e+"."+n]=s,i&&(i.onReady&&i.onReady(),i.onData&&i.onData(s)),s}))},u=function(e,n,t){if(e){var a=e[n];return a&&t?function(e,n){return a(e,n,t)}:a||p}return e},m=function(e,n,t){return{initialize:function(a,o){return c(e,n,t,0,o)},useLagoon:function(t,a){var o=l[e+"."+n];return u(o,t,a)}}}},29475:(e,n,t)=>{"use strict";t.r(n),t.d(n,{createTheme:()=>s});var a=t(31461),o=t(58483),i=t(90678),r=t(45503),l=[".abyss-theme-provider-root","@font-face"],s=function(e,n){var t=(0,o.k)(e,n),s=(0,i.tokenizeTheme)(t.theme),d=(0,i.globalCss)(i.baseStyles),p=function(e){if(e.themeCss){var n=e.themeCss,t=n[".abyss-theme-provider-root"],o=n["@font-face"],r=(0,a.Z)(n,l);return{styles:(0,i.globalCss)(e.themeCss),fonts:o&&(0,i.globalCss)({"@font-face":o}),css:(0,i.css)(Object.assign({},t,r))}}return{}}(t),c=p.styles,u=p.fonts,m=p.css;return{theme:Object.assign({media:(0,r.g)(t.theme.breakpoints)},t.theme,{themeName:t.themeName}),themeTokens:s,themeBaseStyles:d,themeVariantStyles:c,themeVariantFonts:u,themeVariantCss:m}}},21900:(e,n,t)=>{"use strict";t.r(n),t.d(n,{Brandmark:()=>h});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(23075),d=t(65483),p=t(76040),c=t(90678),u=["brand","affiliate","variant","color","title","size","sizes"],m=/_/g,g=(0,c.styled)("img",{dynamic:function(e){return{width:e.cssProps.size}}}),h=function(e){var n=e.brand,t=e.affiliate,r=e.variant,l=e.color,c=e.title,h=e.size,b=e.sizes,v=(0,o.Z)(e,u),k=(0,s.O)(v),f=(0,p.f)({size:h,sizes:b}),y=(0,d.useAbyssTheme)(),w=n||(null==y?void 0:y.themeName),x=c||function(e,n){var t=e.replace(m," ").replace(/\w\S*/g,(function(e){return e.charAt(0).toUpperCase()+e.substr(1).toLowerCase()}));return t.startsWith("Aarp")?(t=t.replace("Aarp","AARP"),t+=" UnitedHealthcare"):t.startsWith("Uhc")?t=t.replace("Uhc","UnitedHealthcare"):"uhc"===n&&(t="UnitedHealthcare "+t),t}(t,w);if(!w)return null;var C=t+"-"+r+"-"+l,N=".svg";("uhc"===t&&"stacked_wordmark"!==r||"uhg"===t)&&(N=".png");var T="https://maelstrom-dmz-nonprod.uhcprovider.com/cdn/abyss/assets/"+w+"/brandmarks"+"/"+t.replace(m,"-")+"/"+C+N;return i.createElement(g,(0,a.Z)({},v,k("brandmark"),{cssProps:f,src:T,alt:x}))};h.displayName="@abyss/web/ui/Brandmark",h.propTypes={brand:l().oneOf(["uhc","optum","uhg"]),affiliate:l().string,variant:l().string,color:l().string,title:l().string,size:l().oneOfType([l().string,l().number]),sizes:l().shape({})},h.defaultProps={brand:"",affiliate:"",variant:"",color:null,title:null,size:"100%",sizes:{sm:"100px",md:"150px",lg:"200px"}}},48:(e,n,t)=>{"use strict";t.r(n),t.d(n,{Button:()=>x});var a=t(31461),o=t(2784),i=t(83667),r=t.n(i),l=t(98537),s=t.n(l),d=t(90678),p=t(23075),c=t(76040),u=t(99946),m=t(69040),g="cubic-bezier(0.23, 1, 0.32, 1)",h=function(){var e="transitionend";if("undefined"!=typeof document){var n=document.createElement("div"),t=[{key:"transition",value:"transitionend"},{key:"OTransition",value:"oTransitionEnd"},{key:"MozTransition",value:"transitionend"},{key:"WebkitTransition",value:"webkitTransitionEnd"}].find((function(e){return void 0!==n.style[e.key]}));t&&t.value&&(e=t.value)}return e}(),b=function(e,n,t,a){(0,o.useEffect)((function(){if(!e||!e.current||t||a)return function(){};var o=e.current,i=function(e,n){return function(t){var a=e.getBoundingClientRect(),o=a.left,i=a.top,r=a.width,l=a.height,s=r>l?r:l,d="\n    position: absolute;\n    border-radius: 50%;\n    color: inherit;\n    background-color: currentColor;\n    pointer-events: none;\n    width: "+s+"px;\n    height: "+s+"px;\n    opacity: 0.25;\n    transform: scale(0);\n    transition: opacity 1.5s "+g+" 0.25s, transform 1.5s "+g+";\n  ";if(t.clientX&&t.clientY){var p=t.clientX-o-s/2,c=t.clientY-i-s/2;d="\n      top: "+("vertical"===n?p:c)+"px;\n      left: "+("vertical"===n?-c:p)+"px;\n      "+d+"\n    "}var u=document.createElement("span");u.style.cssText=d,e.appendChild(u),u.getBoundingClientRect(),u.style.transform="scale(2)",u.style.opacity=0,u.addEventListener(h,(function(n){"opacity"===n.propertyName&&e.removeChild(u)}))}}(o,n),r=function(e){"Enter"!==e.key&&" "!==e.key||i(e)};return o.addEventListener("click",i),o.addEventListener("keydown",r),function(){o.removeEventListener("click",i),o.removeEventListener("keydown",r)}}),[t,a])},v=t(31348),k=t(31431),f=["children","href","before","after","variant","size","sizes","rounded","fontSize","orientation","isAnimated","isLoading","ariaLoadingLabel"],y=(0,d.styled)("button",{static:{display:"inline-block",position:"relative",flexGrow:0,textDecoration:"none",outline:"none",cursor:"pointer",WebkitAppearance:"none",fontWeight:"$bold",transitionProperty:"background",transitionDuration:"250ms",transitionTimingFunction:"cubic-bezier(.2, .8, .4, 1)",overflow:"hidden",color:"$white",borderRadius:"50px",fontFamily:"$primary","box-sizing":"border-box","&:focus-visible":{focusRing:"$interactive1"},variants:{variant:{solid:{color:"$primary2",backgroundColor:"$primary1",border:"solid 2px $primary1","&:hover,&:active":{backgroundColor:"$interactive1",color:"$white",borderColor:"$interactive1"}},outline:{color:"$primary1",backgroundColor:"$white",border:"solid 2px $primary1","&:hover,&:active":{color:"$primary1",backgroundColor:"$buttonOutlineHover"}},ghost:{"&:hover,&:active":{backgroundColor:"$gray4"}}},elementType:{link:{"&:hover":{textDecoration:"none"},display:"inline-flex"}},isLoading:{true:{opacity:.7,cursor:"not-allowed"}},isDisabled:{true:{backgroundColor:"$gray3",color:"$gray5",borderColor:"$gray3",cursor:"not-allowed","&:hover,&:active":{backgroundColor:"$gray3",borderColor:"$gray3",color:"$gray5"}}},defaultVariants:{variant:"solid"}},compoundVariants:[{variant:"solid",isDisabled:!0,css:{backgroundColor:"$gray3",color:"$gray5",borderColor:"$gray3",cursor:"not-allowed","&:hover":{backgroundColor:"$gray3",borderColor:"$gray3",color:"$gray5"}}},{variant:"outline",isDisabled:!0,css:{backgroundColor:"$white",color:"$gray5",borderColor:"$gray3",cursor:"not-allowed","&:hover":{backgroundColor:"$white",color:"$gray5",borderColor:"$gray3"}}}]},dynamic:function(e){var n=e.cssProps,t=n.size,a=n.fontSize;return n.rounded?{width:t,height:t,fontSize:a}:{height:t,paddingRight:t/2,paddingLeft:t/2,fontSize:a}}}),w=(0,d.styled)("span",{display:"flex",justifyContent:"center",alignItems:"center"}),x=o.forwardRef((function(e,n){var t=e.children,i=e.href,r=e.before,l=e.after,d=e.variant,g=e.size,h=e.sizes,x=e.rounded,C=e.fontSize,N=e.orientation,T=e.isAnimated,S=e.isLoading,D=e.ariaLoadingLabel,I=(0,a.Z)(e,f),P=(0,p.O)(I),L=(0,c.f)({size:g,sizes:h,fontSize:C,rounded:x}),B=(0,u.useButton)(Object.assign({},I,{isLoading:S,ref:n})).buttonProps,M=(0,m.n)(Object.assign({href:i},I)).linkProps,A="solid"===d?"light":"default",F=D?o.createElement(k.LoadingSpinner,{isLoading:S,size:"$sm",variant:A,ariaLoadingLabel:D}):l;T&&b(B.ref,N,S,null==B?void 0:B.isDisabled);var R=s()(I.css,{"abyss-insert-element-after":{paddingLeft:D&&!S?"0px !important":null}}),j=Object.assign({},I,B,P("button-root"),{variant:d,cssProps:L});return!i||null!=B&&B.isDisabled||(j=Object.assign({},j,M,{elementType:"link"})),o.createElement(y,j,o.createElement(w,P("button-content-container"),o.createElement(v.Layout.Insert,{before:r,after:F,css:R,cssProps:L,padding:"$md"},t)))}));x.displayName="@abyss/web/ui/Button",x.propTypes={children:r().node.isRequired,css:r().shape({}),href:r().string,variant:r().oneOf(["solid","outline","ghost"]),size:r().oneOfType([r().string,r().number]),sizes:r().shape({}),rounded:r().bool,orientation:r().string,isAnimated:r().bool,isDisabled:r().bool,isLoading:r().bool,fontSize:r().string,ariaLoadingLabel:r().string,before:r().oneOfType([r().node,r().func]),after:r().oneOfType([r().node,r().func])},x.defaultProps={css:null,fontSize:"16px",variant:"solid",size:"$md",sizes:{sm:"32px",md:"40px",lg:"48px"},rounded:!1,href:null,orientation:"horizontal",ariaLoadingLabel:null,isAnimated:!0,isDisabled:!1,isLoading:!1,before:null,after:null}},52750:(e,n,t)=>{"use strict";t.r(n),t.d(n,{Card:()=>x});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(90678),d=t(23075),p=i.createContext(null),c=t(76040),u=t(48),m=t(93766),g=["backgroundColor","color","children"],h=(0,s.styled)("div",{static:{color:"$gray4",fontWeight:"$bold",borderTopLeftRadius:4,borderTopRightRadius:4,display:"flex",justifyContent:"space-between",alignItems:"center",variants:{size:{small:{minHeight:52,fontSize:"$sm",paddingLeft:"12px",paddingRight:"12px"},medium:{minHeight:68,fontSize:"$lg",paddingLeft:"$lg",paddingRight:"$lg"}}},defaultVariants:{size:"medium"}},dynamic:function(e){var n=e.cssProps,t="$gray3";return n.isNested&&(t="$gray2"),null!=n&&n.backgroundColor&&(t=n.backgroundColor),{color:n.color,backgroundColor:t}}}),b=(0,s.styled)("div",{marginLeft:"$sm"}),v=(0,s.styled)(u.Button,{borderRadius:"4px",backgroundColor:"$white","&:hover":{backgroundColor:"$gray2"},".abyss-button-content-container":{padding:"$sm"}}),k=function(e){var n=e.backgroundColor,t=e.color,r=e.children,l=(0,o.Z)(e,g),s=(0,d.O)(l),u=(0,i.useContext)(p),k=u.size,f=u.collapse,y=u.buttonProps,w=u.isOpen,x=u.isNested,C=(0,c.f)({color:t,backgroundColor:n,isNested:x});return i.createElement(h,(0,a.Z)({},l,s("card-title"),{size:k,cssProps:C}),r,f&&i.createElement(b,s("card-collapse-button-container"),i.createElement(v,(0,a.Z)({rounded:!0,size:"md",variant:"ghost","aria-label":w?"Collapse":"Expand"},y,s("card-collapse-button")),i.createElement(m.IconMaterial,(0,a.Z)({icon:w?"keyboard_arrow_down":"keyboard_arrow_up"},s("card-collapse-button-icon"))))))};k.displayName="@abyss/web/ui/Card.Title",k.propTypes={children:l().node,color:l().string,backgroundColor:l().string},k.defaultProps={children:null,color:"$gray8",backgroundColor:null};var f=t(75853),y=["size","children","collapse","header","defaultIsOpen","isOpen","fullHeight"],w=(0,s.styled)("div",{borderRadius:4,boxSizing:"border-box",border:"1px solid",borderColor:"$gray4",boxShadow:"\n    rgb(0 0 0 / 5%) 0px 1px 3px,\n    rgb(0 0 0 / 5%) 0px 10px 15px -5px,\n    rgb(0 0 0 / 4%) 0px 7px 7px -5px\n  ","& + &":{marginTop:"$lg"},variants:{isNested:{true:{backgroundColor:"$gray1"},false:{backgroundColor:"$white"}},fullHeight:{true:{height:"100%",position:"relative"}}}}),x=function(e){var n=e.size,t=e.children,r=e.collapse,l=e.header,s=e.defaultIsOpen,c=(e.isOpen,e.fullHeight),u=(0,o.Z)(e,y),m=(0,d.O)(u),g=(0,i.useContext)(p),h=(0,f.useCollapse)({defaultIsOpen:s}),b=h.collapseProps,v=h.buttonProps,x=h.isOpen,C=r?i.createElement("div",b,t):t;return i.createElement(p.Provider,{value:{size:n,collapse:r,buttonProps:v,isOpen:x,isNested:!!g}},i.createElement(w,(0,a.Z)({},u,m("card-root"),{fullHeight:c,size:n,isNested:!!g}),l&&i.createElement(k,u,l),C))};x.displayName="@abyss/web/ui/Card",x.propTypes={children:l().node,fullHeight:l().bool,size:l().oneOf(["medium","small"]),collapse:l().bool,defaultIsOpen:l().bool,header:l().oneOfType([l().string,l().node]),isOpen:l().bool},x.defaultProps={children:null,fullHeight:!1,size:"medium",collapse:!1,defaultIsOpen:!0,header:null,isOpen:null};var C=["children"],N=(0,s.styled)("div",{fontWeight:"$medium","& + &":{borderTop:"1px solid $gray4"},variants:{size:{small:{fontSize:"$sm",padding:"12px"},medium:{fontSize:"$md",padding:"$md $lg"}}},defaultVariants:{size:"medium"}}),T=function(e){var n=e.children,t=(0,o.Z)(e,C);if(!n)return null;var r=(0,d.O)(t),l=(0,i.useContext)(p).size;return i.createElement(N,(0,a.Z)({},t,r("card-section"),{size:l}),n)};T.displayName="@abyss/web/ui/Card.Section",T.propTypes={children:l().node},T.defaultProps={children:null},x.Title=k,x.Header=k,x.Section=T},89762:(e,n,t)=>{"use strict";t.d(n,{m:()=>a});var a=t(2784).createContext()},84523:(e,n,t)=>{"use strict";t.r(n),t.d(n,{Drawer:()=>p});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(63976),d=["size","position"],p=function(e){var n=e.size,t=e.position,r=(0,o.Z)(e,d);return i.createElement(s.Modal,(0,a.Z)({},r,{isDrawer:!0,size:n,position:t}))};p.displayName="@abyss/web/ui/Drawer",p.propTypes={position:l().oneOf(["top","bottom","right","left"]),size:l().oneOfType([l().string,l().number,l().oneOf(["$sm","$md","$lg"])]),sizes:l().shape({})},p.defaultProps={position:"right",size:"$sm",sizes:{sm:"350px",md:"572px",lg:"784px"}};var c=t(90286);p.Section=c.Q,p.Section.displayName="@abyss/web/ui/Drawer.Section"},59522:(e,n,t)=>{"use strict";t.r(n),t.d(n,{DropdownMenu:()=>ee});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(73814),d=t(90678),p=t(93766),c=t(23075),u=t(33665),m=(0,d.styled)(s.Z0,{height:1,backgroundColor:"$gray4",margin:5}),g=function(e){var n=Object.assign({},((0,u.Z)(e),e)),t=(0,c.O)(n);return i.createElement(m,(0,a.Z)({"aria-hidden":"true"},t("dropdown-menu-item-separator"),n))},h=["title","icon","onClick","isSeparated","disabled"],b={all:"unset",fontFamily:"$primary",fontSize:"$sm",fontWeight:"$dropDownMenuFontWeight",lineHeight:1,color:"$gray8",borderRadius:3,display:"flex",alignItems:"center",height:25,padding:"0 5px",position:"relative",paddingLeft:30,userSelect:"none","&:focus":{backgroundColor:"$tint2",color:"$gray8"},"&:focus-visible":{boxShadow:"none"},variants:{isDisabled:{true:{color:"$gray5",pointerEvents:"none","&:focus":{backgroundColor:"$gray2",color:"$gray5"}}}}},v=(0,d.styled)("div",{position:"absolute",left:2,width:20,display:"inline-flex",alignItems:"center",justifyContent:"center",color:"$interactive1",fill:"$interactive1",":focus > &":{color:"$interactive1"},variants:{isDisabled:{true:{color:"$gray5",svg:{fill:"$gray5"}}}}}),k=(0,d.styled)(s.ck,Object.assign({},b)),f=function(e){var n=e.title,t=e.icon,r=e.onClick,l=e.isSeparated,s=e.disabled,d=(0,o.Z)(e,h),p=(0,c.O)(d),u=Object.assign({},d,p("dropdown-menu-item"),{onSelect:r});return s&&delete(u=Object.assign({},u,{isDisabled:s,"aria-disabled":s,onKeyDown:function(e){"Enter"!==e.key&&" "!==e.key||e.preventDefault()}})).onSelect,i.createElement("li",null,i.createElement(k,u,t&&i.createElement(v,(0,a.Z)({isDisabled:s},p("dropdown-menu-item-icon-container")),t),n),l&&i.createElement(g,d))};f.propTypes={title:l().node.isRequired,icon:l().node,onClick:l().func,isSeparated:l().bool,disabled:l().bool},f.defaultProps={icon:"",onClick:null,isSeparated:!1,disabled:!1};var y=t(84608),w=["checkboxes","isSeparatedTop","isSeparatedBottom"],x=["label","disabled"],C=(0,d.styled)(s.oC,Object.assign({},b)),N=(0,d.styled)(s.wU,{position:"absolute",left:2,width:20,color:"$interactive1",fill:"$interactive1",display:"inline-flex",alignItems:"center",justifyContent:"center",variants:{isDisabled:{true:{color:"$gray5",svg:{fill:"$gray5"}}}}}),T=function(e){var n=e.checkboxes,t=e.isSeparatedTop,r=e.isSeparatedBottom,l=(0,o.Z)(e,w),s=(0,c.O)(l);return n.map((function(e,d){var c=e.label,u=e.disabled,m=(0,o.Z)(e,x),h=(0,y.useMenuCheckbox)(m).checkboxProps,b=Object.assign({},s("dropdown-menu-checkbox"),h,m);return u&&delete(b=Object.assign({},b,{isDisabled:u,"aria-disabled":u,onKeyDown:function(e){"Enter"!==e.key&&" "!==e.key||e.preventDefault()}})).onClick,i.createElement("li",{key:"li_"+d},t&&!(d>0)&&i.createElement(g,l),i.createElement(C,b,i.createElement(N,(0,a.Z)({isDisabled:u},s("dropdown-menu-checkbox-checkmark-container")),i.createElement(p.IconMaterial,(0,a.Z)({icon:"check"},s("dropdown-menu-checkbox-checkmark")))),c),r&&d===n.length-1&&i.createElement(g,l))}))};T.propTypes={checkboxes:l().arrayOf(l().shape({})).isRequired,isSeparatedTop:l().bool,isSeparatedBottom:l().bool},T.defaultProps={isSeparatedTop:!0,isSeparatedBottom:!0};var S=t(63961),D=t(15679),I=["label","value","isSeparatedTop","isSeparatedBottom","onChange","radios","model"],P=["label","disabled"],L=(0,d.styled)("div",{height:"8px",width:"8px",backgroundColor:"$interactive1",borderRadius:"50%",variants:{isDisabled:{true:{backgroundColor:"$gray5"}}}}),B=(0,d.styled)(s.Rk,Object.assign({},b)),M=(0,d.styled)(s.wU,{position:"absolute",left:2,width:20,color:"$interactive1",fill:"$interactive1",display:"inline-flex",alignItems:"center",justifyContent:"center",variants:{isDisabled:{true:{color:"$gray5",fill:"$gray5"}}}}),A=(0,d.styled)(s.__,Object.assign({},b,{color:"$gray5"})),F=(0,d.styled)(s.Ee,{}),R=function(e){var n=e.label,t=e.value,r=e.isSeparatedTop,l=e.isSeparatedBottom,s=e.onChange,d=e.radios,p=e.model,u=(0,o.Z)(e,I),m=(0,c.O)(u),h=(0,D.useAbyssId)(),b=(0,S.useMenuRadio)(Object.assign({value:t,onChange:s,model:p},u)).radioProps;return i.createElement("li",null,i.createElement(F,(0,a.Z)({"aria-labelledby":h},m("dropdown-menu-radio-group"),b),r&&i.createElement(g,u),i.createElement(A,(0,a.Z)({asChild:!0,id:h},m("dropdown-menu-radio-group-label")),i.createElement("span",null,n)),d.map((function(e,n){var t=e.label,r=e.disabled,l=(0,o.Z)(e,P),s=Object.assign({},m("dropdown-menu-radio"),l);return r&&delete(s=Object.assign({},s,{isDisabled:r,"aria-disabled":r,onKeyDown:function(e){"Enter"!==e.key&&" "!==e.key||e.preventDefault()}})).onClick,i.createElement(B,(0,a.Z)({key:"radio_"+n},s),i.createElement(M,(0,a.Z)({isDisabled:r},m("dropdown-menu-radio-dot-container")),i.createElement(L,(0,a.Z)({isDisabled:r},m("dropdown-menu-radio-dot")))),t)})),l&&i.createElement(g,u)))};R.propTypes={label:l().string,value:l().string,model:l().string,onChange:l().func,radios:l().arrayOf(l().shape({label:l().string.isRequired,value:l().string.isRequired})),isSeparatedTop:l().bool,isSeparatedBottom:l().bool,disabled:l().bool},R.defaultProps={label:"",value:null,model:null,onChange:null,radios:[],isSeparatedTop:!0,isSeparatedBottom:!0,disabled:!1};var j=t(31348),O=t(83133),z=["label","variant","outline","before","after","isNested","hideLabel","isOpen","disabled","abyssId","dropDownDisabled"],H=(0,d.styled)(O.Focusable,{all:"unset",cursor:"pointer",fontFamily:"$primary",height:"24px",fontSize:"$sm",color:"$interactive1",fontWeight:"$dropDownButtonFontWeight",border:"none",padding:"$sm",borderRadius:4,gap:4,display:"inline-flex",alignItems:"center",justifyContent:"center",backgroundColor:"$white","&:hover":{backgroundColor:"$gray2"},'&:active,&[data-state="open"]':{backgroundColor:"$tint2"},variants:{variant:{filled:{color:"$primary2",backgroundColor:"$primary1",svg:{fill:"$primary2"},'&:hover,&:active,&[data-state="open"]':{backgroundColor:"$interactive1"}},defaultVariants:{variant:"default"}},isDisabled:{true:{cursor:"not-allowed",color:"$gray5",fill:"$gray5",svg:{fill:"$gray5"},backgroundColor:"$gray2",border:"1px solid $gray4",pointerEvents:"none"}},outline:{true:{border:"1px solid $interactive1"}}},compoundVariants:[{variant:"filled",outline:!0,css:{border:"1px solid $primary2"}}]}),U=(0,d.styled)(s.ce,Object.assign({'&[data-state="open"]':{backgroundColor:"$tint2",color:"$gray8"}},b)),E=(0,d.styled)("div",{marginLeft:"auto",paddingLeft:20,color:"$gray6",fill:"$gray6",svg:{fill:"$gray6"},":focus > &":{color:"$gray6",fill:"$gray6"},variants:{isDisabled:{true:{color:"$gray5",fill:"$gray5",svg:{fill:"$gray5"},pointerEvents:"none","&:focus":{backgroundColor:"$gray2",color:"$gray5"}}}}}),G=function(e){var n=e.label,t=e.variant,r=e.outline,l=e.before,d=e.after,u=e.isNested,m=e.hideLabel,g=e.isOpen,h=e.disabled,b=e.abyssId,v=e.dropDownDisabled,k=(0,o.Z)(e,z),f=(0,c.O)(k);if(u){var y=Object.assign({},f("dropdown-menu-sub-trigger-item"));return h&&(y=Object.assign({},y,{isDisabled:h,"aria-disabled":h,onKeyDown:function(e){"Enter"!==e.key&&" "!==e.key&&"ArrowRight"!==e.key||e.preventDefault()}})),i.createElement(U,y,n,i.createElement(E,(0,a.Z)({isDisabled:h},f("dropdown-menu-sub-trigger-icon-container")),i.createElement(p.IconMaterial,(0,a.Z)({icon:"chevron_right"},f("dropdown-menu-sub-trigger-icon")))))}var w=Object.assign({before:l,after:d},m&&{padding:"0px"});return i.createElement(H,(0,a.Z)({"aria-label":n,"aria-expanded":g?"true":"false","aria-disabled":v?"true":"false",as:s.xz,isDisabled:v,onKeyDown:function(e){!v||"Enter"!==e.key&&" "!==e.key&&"ArrowDown"!==e.key||e.preventDefault()}},f("dropdown-menu-trigger"),{outline:r,variant:t,"data-abyss-id":b}),i.createElement(j.Layout.Insert,w,!m&&n))};G.propTypes={label:l().oneOfType([l().string,l().node]).isRequired,hideLabel:l().bool.isRequired,abyssId:l().bool,variant:l().oneOf(["default","filled"]),outline:l().bool,isOpen:l().bool,before:l().node,after:l().node,isNested:l().bool,disabled:l().bool,dropDownDisabled:l().bool},G.defaultProps={variant:"default",abyssId:null,outline:!1,isOpen:!1,before:null,after:null,isNested:!1,disabled:!1,dropDownDisabled:!1};var $=t(68279),V=["isNested","width","children"],q=(0,d.keyframes)({"0%":{opacity:0,transform:"translateY(2px)"},"100%":{opacity:1,transform:"translateY(0)"}}),W=(0,d.keyframes)({"0%":{opacity:0,transform:"translateX(-2px)"},"100%":{opacity:1,transform:"translateX(0)"}}),_=(0,d.keyframes)({"0%":{opacity:0,transform:"translateY(-2px)"},"100%":{opacity:1,transform:"translateY(0)"}}),Z=(0,d.keyframes)({"0%":{opacity:0,transform:"translateX(2px)"},"100%":{opacity:1,transform:"translateX(0)"}}),X=(0,d.styled)(s.VY,{backgroundColor:"$white",borderRadius:6,padding:5,boxShadow:"0px 10px 38px -10px rgba(22, 23, 24, 0.35), 0px 10px 20px -15px rgba(22, 23, 24, 0.2)","@media (prefers-reduced-motion: no-preference)":{animationDuration:"400ms",animationTimingFunction:"cubic-bezier(0.16, 1, 0.3, 1)",animationFillMode:"forwards",willChange:"transform, opacity",'&[data-state="open"]':{'&[data-side="top"]':{animationName:_},'&[data-side="right"]':{animationName:Z},'&[data-side="bottom"]':{animationName:q},'&[data-side="left"]':{animationName:W}}}}),Y=function(e){var n=e.isNested,t=e.width,r=e.children,l=(0,o.Z)(e,V),s=(0,c.O)(l),d={sideOffset:8,align:"start"};return n&&(d={sideOffset:2,alignOffset:-5}),i.createElement(X,(0,a.Z)({loop:!0},l,d,{css:{minWidth:t}},s("dropdown-menu-content")),i.createElement($.ThemeProvider,null,i.createElement("ul",null,r)))};Y.propTypes={children:l().node,isNested:l().bool,width:l().number},Y.defaultProps={children:null,isNested:!1,width:null};var Q=["menuItems","label","isNested","width","modal","isDisabled"],K=["subMenu","title"],J=(0,d.styled)(s.fC,{}),ee=function e(n){var t=n.menuItems,r=n.label,l=n.isNested,s=n.width,d=n.modal,p=n.isDisabled,u=(0,o.Z)(n,Q),m=(0,c.O)(u),h=(0,i.useState)(!1),b=h[0],v=h[1];return i.createElement(J,(0,a.Z)({onOpenChange:function(e){p||v(e)},modal:d},m("dropdown-menu-root")),i.createElement(G,(0,a.Z)({},u,{label:r,isNested:l,isOpen:b,dropDownDisabled:p})),i.createElement(Y,(0,a.Z)({},u,{isNested:l,width:s}),t.map((function(n,r){var l=t[r-1],s=0!==r,d=r!==t.length-1,p=(null==l?void 0:l.isSeparated)||(null==l?void 0:l.radios)||(null==l?void 0:l.checkboxes);if(n.title&&n.onClick)return i.createElement(i.Fragment,{key:"item_"+r},i.createElement(f,(0,a.Z)({isSeparated:d&&n.isSeparated},u,n)));if(n.title&&n.subMenu){var c=n.subMenu,m=n.title,h=(0,o.Z)(n,K);return i.createElement(i.Fragment,{key:"subMenu_"+r},i.createElement("li",null,i.createElement(e,(0,a.Z)({},u,h,{menuItems:c,label:m,isNested:!0})),d&&n.isSeparated&&i.createElement(g,u)))}return n.checkboxes?i.createElement(i.Fragment,{key:"checkboxes_"+r},i.createElement(T,(0,a.Z)({isSeparatedTop:s&&!p,isSeparatedBottom:d,checkboxes:n.checkboxes},u))):n.radios?i.createElement(i.Fragment,{key:"radios_"+r},i.createElement(R,(0,a.Z)({isSeparatedTop:s&&!p,isSeparatedBottom:d},u,n))):null}))))};ee.displayName="@abyss/web/ui/DropdownMenu",ee.propTypes={label:l().oneOfType([l().string,l().node]).isRequired,hideLabel:l().bool,isNested:l().bool,isDisabled:l().bool,width:l().number,modal:l().bool,menuItems:l().arrayOf(l().shape({isSeparated:l().bool,radios:l().arrayOf(l().shape({})),checkboxes:l().arrayOf(l().shape({}))}))},ee.defaultProps={menuItems:[],hideLabel:!1,isDisabled:!1,modal:!0,isNested:!1,width:220}},83133:(e,n,t)=>{"use strict";t.r(n),t.d(n,{Focusable:()=>a});var a=(0,t(90678).styled)("div",{"&:focus-visible":{focusRing:"$interactive1"}})},13337:(e,n,t)=>{"use strict";t.d(n,{b:()=>b,g:()=>m});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(5498),d=t(90678),p=t(37709),c=t(38551),u=["children","isRequired","hideLabel","hasError"],m=(0,d.styled)("label",{display:"flex",fontSize:"$md",fontWeight:"$bold",marginBottom:"$xs",color:"$gray8",variants:{isDisabled:{true:{color:"$gray5",cursor:"not-allowed"}},hideLabel:{true:{marginBottom:0}}}}),g=(0,d.styled)("span",{marginLeft:"$xs",fontSize:"$xl",lineHeight:"14px"}),h=(0,d.styled)(c.Icon,{color:"$error1",lineHeight:"14px"}),b=function(e){var n=e.children,t=e.isRequired,r=e.hideLabel,l=e.hasError,d=(0,o.Z)(e,u),c=(0,s.S)().visuallyHiddenProps,b=r?Object.assign({},d,c):d;return i.createElement(m,(0,a.Z)({},b,{hideLabel:r}),n,t&&i.createElement(g,null,i.createElement(h,{size:10,color:"$error1"},i.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",focusable:"false","aria-hidden":"true",role:"img",style:{display:"inline-block"}},i.createElement("path",{d:"M21.7 11.05l-1.05-3.3-7.7 3.15.7-8.4H10.2l.65 8.4-7.7-3.2L2.1 11l8.1 1.95-5.45 6.3 2.8 2.05 4.35-7.1 4.3 7.1 2.8-2-5.4-6.3z"}))),!l&&i.createElement(p.VisuallyHidden,null,"required")))};b.propTypes={children:l().node.isRequired,isRequired:l().bool,hideLabel:l().bool,hasError:l().bool},b.defaultProps={isRequired:!1,hideLabel:!1,hasError:!1}},29438:(e,n,t)=>{"use strict";t.r(n),t.d(n,{FormInput:()=>o});var a=t(90678),o=(0,a.styled)("div",{static:{fontFamily:"$primary",transitionProperty:"background-color",transitionDuration:"250ms",transitionTimingFunction:"cubic-bezier(.2, .8, .4, 1)",borderStyle:"solid",borderWidth:1,borderRadius:4,width:"100%",fontSize:"$sm",backgroundColor:"$white",borderColor:"$gray6",lineHeight:"24px",appearance:"none",resize:"none",boxSizing:"border-box",color:"$gray8",display:"block",textAlign:"left",transition:"box-shadow 200ms ease-in","&:hover":{boxShadow:"1px 1px 4px rgba(0, 0, 0, 0.5)"},"&:focus":{focusRing:"$interactive1"},"&:disabled":{backgroundColor:"$gray3",borderColor:"$gray3",color:"$gray5",boxShadow:"none"},"&:placeholder-shown":{textOverflow:"ellipsis"},variants:{error:{true:{borderColor:"$error1","&:hover":{borderColor:"$error1"},"&:focus-visible":{borderColor:"$error1",focusRing:"$error1"}}},iconRight:{1:{paddingRight:"35px"},2:{paddingRight:"70px"},3:{paddingRight:"105px"}},leftAddOn:{true:{borderLeft:"none",borderTopLeftRadius:"0",borderBottomLeftRadius:"0"}},rightAddOn:{true:{borderRight:"none",borderTopRightRadius:"0",borderBottomRightRadius:"0",zIndex:1}},inputLeftElement:{true:{paddingLeft:"35px"}},inputType:{text:{paddingLeft:"$sm",minHeight:"38px","&:disabled":{cursor:"not-allowed"}},textArea:{padding:"$sm",minHeight:"38px"},checkbox:{borderWidth:2,cursor:"pointer",position:"relative",verticalAlign:"middle",transition:"border-color,background=color 0.2s ease 0s",color:"$white",backgroundColor:"$white","&:checked:disabled, &:disabled":{cursor:"not-allowed",backgroundColor:"$white",borderColor:"$gray5"},"&:checked":{color:"$white",backgroundColor:"$interactive1",borderColor:"$interactive1"}},radio:{display:"flex",cursor:"pointer",justifyContent:"center",alignItems:"center",transition:"border-color,background=color 0.2s ease 0s",borderWidth:2,borderRadius:"50%",boxShadow:"inherit",boxSizing:"border-box",padding:0,"&:checked:disabled, &:disabled":{cursor:"not-allowed",color:"$gray5",borderColor:"$gray5",backgroundColor:"$white","&::before":{content:"",cursor:"not-allowed",display:"block",backgroundColor:"$gray5",borderRadius:"50%"}},"&:checked":{borderColor:"$interactive1","&::before":{content:"",cursor:"pointer",display:"block",backgroundColor:"$interactive1",borderRadius:"50%"}}},toggle:{position:"absolute",cursor:"pointer",top:0,left:0,right:0,bottom:0,backgroundColor:"$white",borderColor:"$gray6",borderWidth:2,"&::after":{position:"absolute",content:'""',top:2,left:2,borderRadius:"50%",transition:"left 200ms",backgroundColor:"$gray6"},"&:checked:disabled, &:disabled":{cursor:"not-allowed",backgroundColor:"$gray5",borderColor:"$gray5","&::after":{backgroundColor:"$white"}},"&:checked":{backgroundColor:"$interactive1",borderColor:"$interactive1"},"&:checked:after":{backgroundColor:"$white"}},toggleTab:{height:0,width:0,border:0,"&:focus":{boxShadow:"none"},"&:focus-visible":{boxShadow:"none","+ *":{boxShadow:"#fff 0px 0px 0px 2px, $colors$interactive1 0px 0px 2px 4px"}}},timeInput:{paddingLeft:"$sm",minHeight:"38px","&:focus-within":{focusRing:"$interactive1"}}}},compoundVariants:[{error:!0,inputType:"checkbox",css:{"&:focus":{borderColor:"$error1",focusRing:"$error1"},"&:checked":{borderColor:"$error1",backgroundColor:"$error1"}}},{error:!0,inputType:"radio",css:{"&:focus":{borderColor:"$error1",focusRing:"$error1"},"&:checked":{borderColor:"$error1","&::before":{backgroundColor:"$error1"}}}},{error:!0,inputType:"toggleTab",css:{"&:focus":{boxShadow:"none"},"&:focus-visible":{boxShadow:"none","+ *":{boxShadow:"#fff 0px 0px 0px 2px, $colors$error1 0px 0px 2px 4px"}}}},{error:!0,inputType:"timeInput",css:{"&:focus-within":{borderColor:"$error1",focusRing:"$error1"}}},{inputType:"text",rounded:!0,css:{paddingLeft:"$md"}},{inputLeftElement:!0,rounded:!0,css:{paddingLeft:"40px"}},{iconRight:1,rounded:!0,css:{paddingRight:"40px"}},{iconRight:2,rounded:!0,css:{paddingRight:"75px"}},{iconRight:3,rounded:!0,css:{paddingRight:"110px"}}]},dynamic:function(e){var n=e.cssProps,t=n.height,a=n.width,o=n.size,i=n.highlighted,r=!!i,l="$tint2";return r&&"string"==typeof i&&(l=i),Object.assign({width:a||o,height:t||o},r&&{backgroundColor:l,"&::placeholder":{color:"$gray7"}})}}),i=(0,a.styled)("div",{"& + &":{marginTop:"$sm"}}),r=t(7896),l=t(31461),s=t(2784),d=t(83667),p=t.n(d),c=t(37709),u=["errorMessage","subText","descriptorsDisplay","errorId","subTextId"],m=(0,a.styled)("div",{display:"flex",variants:{displayAsColumn:{true:{flexDirection:"column",alignItems:"flex-start"}}}}),g=(0,a.styled)("span",{fontSize:"$sm",lineHeight:"$sm",fontWeight:"$medium",paddingTop:"$xs","& + &":{marginLeft:"$md"},variants:{isInvalid:{true:{color:"$error1"},false:{color:"$gray6"}},displayAsColumn:{true:{marginLeft:"0px !important",paddingTop:"0px"}}}}),h=function(e){var n=e.errorMessage,t=e.subText,a=e.descriptorsDisplay,o=e.errorId,i=e.subTextId,d=(0,l.Z)(e,u),p="column"===a&&!!n&&!!t;return s.createElement(m,(0,r.Z)({},d,{displayAsColumn:p}),n&&s.createElement(g,{id:o,isInvalid:!0},s.createElement(c.VisuallyHidden,null,"Error"),n),t&&s.createElement(g,{id:i,css:{color:"$gray6"},displayAsColumn:p},t))};h.propTypes={errorMessage:p().string,subText:p().string,descriptorsDisplay:p().oneOf(["row","column"]),subTextId:p().string,errorId:p().string},h.defaultProps={errorMessage:null,subText:null,descriptorsDisplay:"row",errorId:null,subTextId:null};var b=t(13337),v=t(93766),k=t(23075),f=t(83133),y=["isClearable","onClear","isDisabled","model","formContext","triggerFocus","css","skipFocus","size","ariaLabel"],w=(0,a.styled)(f.Focusable,{padding:0,borderRadius:4,display:"none",border:"none",background:"transparent",alignItems:"center",justifyContent:"center",width:"35px",height:"100%",color:"#adb5bd",variants:{display:{true:{display:"flex"}}}}),x=(0,a.styled)(v.IconMaterial,{"&:hover":{color:"$interactive1"}}),C=s.forwardRef((function(e,n){var t=e.isClearable,a=e.onClear,o=e.isDisabled,i=e.model,d=e.formContext,p=e.triggerFocus,c=e.css,u=e.skipFocus,m=e.size,g=e.ariaLabel,h=(0,l.Z)(e,y),b=(0,k.O)(h),v=(0,s.useCallback)((function(){i&&d.setValue(i,""),a&&a(),u||p()}),[i,d,a]);return t?s.createElement(w,(0,r.Z)({},b("form-input-clear-button"),{ref:n,as:"button",type:"button",display:!o,css:c,onClick:v,"aria-label":g}),s.createElement(x,{icon:"close",color:"$gray6",size:m})):null}));C.propTypes={isClearable:p().bool,isDisabled:p().bool,skipFocus:p().bool,model:p().string,ariaLabel:p().string,size:p().string,css:p().shape({}),formContext:p().shape({setValue:p().func.isRequired}),onClear:p().func,triggerFocus:p().func.isRequired,variant:p().oneOf(["search"])},C.defaultProps={css:{},isClearable:!1,skipFocus:!1,isDisabled:!1,model:null,ariaLabel:"clear",size:"$sm",formContext:null,onClear:null,variant:null};var N=["isIndeterminate"],T=(0,a.styled)("div",{display:"flex",alignItems:"center"}),S=(0,a.styled)("label",{padding:"0 $sm",fontWeight:"$normal",marginBottom:0}),D=(0,a.styled)("div",{position:"relative","input:checked":{"& + svg":{visibility:"visible",opacity:1,transform:"translateY(0) scale(1)"}},"input:checked:disabled":{backgroundColor:"$gray5"}}),I=(0,a.styled)("svg",{static:{strokeWidth:"3px",visibility:"hidden",color:"$white",fill:"none",transform:"translateY(5px) scale(0.5)",opacity:0,overflow:"hidden",transitionProperty:"opacity,transform",transitionTimingFunction:"ease",transitionDuration:"100ms",pointerEvents:"none",width:"24px",position:"absolute",zIndex:123,top:"0",bottom:"0",left:"0",right:"0",margin:"auto"},dynamic:function(e){var n=e.cssProps.size;return{width:n-5,height:n-5}}}),P=function(e){var n=e.inputProps,t=e.iconProps,a=e.labelProps,i=e.children,d=n.isIndeterminate,p=(0,l.Z)(n,N);return s.createElement(T,null,s.createElement(D,null,s.createElement(o,(0,r.Z)({as:"input",type:"checkbox",inputType:"checkbox"},p)),s.createElement(I,(0,r.Z)({viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},t),s.createElement("polyline",{points:d?"4 12 20 12":"20 6 9 17 3 12"}))),s.createElement(S,(0,r.Z)({},a,{as:o.Label}),(null==a?void 0:a.label)||i))};P.propTypes={inputProps:p().shape({isIndeterminate:p().bool}),iconProps:p().shape({}),labelProps:p().shape({label:p().string}),children:p().node},P.defaultProps={inputProps:null,iconProps:null,labelProps:null,children:null};var L=["children"],B=(0,a.styled)("div",{zIndex:2,height:"100%",minWidth:"35px",display:"flex",alignItems:"center",justifyContent:"center"}),M=(0,a.styled)("div",{position:"absolute",display:"flex",alignItems:"center",justifyContent:"center",height:"100%",padding:"1px",zIndex:3,top:"0",bottom:"0",variants:{rounded:{},orientation:{left:{left:0},right:{right:0}},isTextArea:{true:{top:6,height:"inherit",bottom:"inherit"}}},compoundVariants:[{orientation:"right",rounded:!0,css:{right:"5px"}},{orientation:"left",rounded:!0,css:{left:"5px"}}],defaultVariants:{orientation:"right",rounded:!1}}),A=function(e){var n=e.children,t=(0,l.Z)(e,L);return n?s.createElement(B,t,n):null};A.propTypes={children:p().node},A.defaultProps={children:null};var F=["children","orientation","isDisabled","error"],R=(0,a.styled)("div",{display:"flex",alignItems:"center",justifyContent:"center",backgroundColor:"$gray2",padding:"1px 8px",minHeight:"38px",border:"1px solid $gray6",variants:{orientation:{left:{borderTopLeftRadius:"4px",borderBottomLeftRadius:"4px"},right:{borderTopRightRadius:"4px",borderBottomRightRadius:"4px"}},isDisabled:{true:{backgroundColor:"$gray3",borderColor:"$gray3",color:"$gray5",boxShadow:"none",span:{color:"$gray5"}}},error:{true:{borderColor:"$error1"}}}}),j=function(e){var n=e.children,t=e.orientation,a=e.isDisabled,o=e.error,i=(0,l.Z)(e,F);return n?s.createElement(R,(0,r.Z)({orientation:t,isDisabled:a,error:o},i),n):null};j.propTypes={children:p().node,orientation:p().oneOf(["left","right"]),isDisabled:p().bool,error:p().bool},j.defaultProps={children:null,orientation:"right",isDisabled:!1,error:!1},o.Wrapper=i,o.Descriptors=h,o.Label=b.b,o.Clear=C,o.Checkbox=P,o.Element=A,o.ElementWrapper=M,o.Addon=j},27990:(e,n,t)=>{"use strict";t.r(n),t.d(n,{FormProvider:()=>u,FormUtilityContext:()=>i});var a=t(2784),o={highlighted:!1},i=a.createContext(o),r=t(7896),l=t(31461),s=t(63955),d=t(83667),p=t.n(d),c=["state","children","onSubmit","onError","autoComplete","highlighted","descriptorsDisplay"],u=function(e){var n=e.state,t=e.children,o=e.onSubmit,d=e.onError,p=e.autoComplete,u=e.highlighted,m=e.descriptorsDisplay,g=(0,l.Z)(e,c);return a.createElement(s.RV,n,a.createElement(i.Provider,{value:{highlighted:u,descriptorsDisplayForm:m}},a.createElement("form",(0,r.Z)({onSubmit:n.handleSubmit(o,d),autoComplete:p},g),t)))};u.displayName="@abyss/web/ui/FormProvider",u.propTypes={state:p().shape({handleSubmit:p().func}).isRequired,children:p().node.isRequired,onSubmit:p().func,onError:p().func,autoComplete:p().string,highlighted:p().bool,descriptorsDisplay:p().oneOf(["row","column"])},u.defaultProps={onSubmit:function(){},onError:function(){},autoComplete:"off",highlighted:!1,descriptorsDisplay:null}},3575:(e,n,t)=>{"use strict";t.r(n),t.d(n,{Grid:()=>g});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(90678),d=i.createContext({}),p=t(23075),c=t(76040),u=["children","justify","align","space","columns","span","noWrap"],m=(0,s.styled)("div",{static:{display:"flex",alignItems:"center",align:"center"},dynamic:function(e){var n=e.cssProps,t=n.space,a=n.justify,o=n.align,i=n.noWrap,r=function(e){var n={};return"number"==typeof e?n.margin=-e/2:"object"==typeof e&&Object.keys(e).forEach((function(t){n["@screen >= $"+t]={margin:-e[t]/2}})),n}(t);return Object.assign({justifyContent:a,alignItems:o,flexWrap:i?"nowrap":"wrap"},r)}}),g=function(e){var n=e.children,t=e.justify,r=e.align,l=e.space,s=e.columns,g=e.span,h=e.noWrap,b=(0,o.Z)(e,u),v=(0,p.O)(b),k=(0,c.f)({space:l,justify:t,align:r,noWrap:h});return i.createElement(m,(0,a.Z)({},b,v("grid"),{cssProps:k}),i.createElement(d.Provider,{value:{space:k.space,columns:s,span:g}},n))};g.displayName="@abyss/web/ui/Grid",g.propTypes={children:l().node,space:l().oneOfType([l().number,l().shape({})]),columns:l().number,span:l().oneOfType([l().number,l().string,l().shape({})]),justify:l().string,align:l().string,noWrap:l().bool},g.defaultProps={children:null,space:{xs:16,sm:16,md:24,lg:24,xl:24},columns:12,span:null,justify:"flex-start",align:"stretch",noWrap:!1};var h=t(15679),b=["span"],v=function(e,n){var t;return/%$/.test(n)?t="33%"===n?1/3*100+"%":"66%"===n?2/3*100+"%":n:"number"==typeof n&&(t=100/(e/n)+"%"),t},k=(0,s.styled)("div",{dynamic:function(e){var n=e.cssProps,t=n.columns,a=n.span,o=n.space,i=v(t,a),r=function(e){var n={};return"number"==typeof e?n.padding=e/2:"object"==typeof e&&Object.keys(e).forEach((function(t){n["@screen >= $"+t]={padding:e[t]/2}})),n}(o),l=function(e,n,t){var a=Object.assign({},t);if(n&&"object"==typeof n){var o=Object.keys(n);if(o[0]){var i=v(e,o[0]);a["@media (min-width: 0px)"]={maxWidth:i,flexBasis:i,flexShrink:0}}o.forEach((function(t){var o=v(e,n[t]);a["@screen >= $"+t]=Object.assign({},a["@screen >= $"+t],{maxWidth:o,flexBasis:o,flexShrink:0})}))}return a}(t,a,r);return Object.assign({},r,{maxWidth:i,flexBasis:i},i&&{flexShrink:0},l)}}),f=function(e){var n=e.span,t=(0,o.Z)(e,b),r=(0,p.O)(t),l=(0,h.useAbyssId)(),s=(0,i.useContext)(d),c=s.space,u=s.columns,m=s.span;return i.createElement(k,(0,a.Z)({key:l},t,r("grid-col"),{cssProps:{columns:u,span:n||m,space:c}}))};f.displayName="@abyss/web/ui/GridCol",f.propTypes={children:l().node,span:l().oneOfType([l().number,l().string,l().shape({})])},f.defaultProps={children:null,span:null},g.Col=f},54474:(e,n,t)=>{"use strict";t.r(n),t.d(n,{Heading:()=>m});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(69393),d=t(23075),p=t(90678),c=["textAlign","color","children","offset","display"],u=(0,p.styled)("div",{static:{margin:0,variants:{textAlign:{left:{textAlign:"left"},center:{textAlign:"center"},right:{textAlign:"right"}}}},dynamic:function(e){return{color:e.cssProps.color+" !important"}}}),m=function(e){var n=e.textAlign,t=e.color,r=e.children,l=e.offset,p=e.display,m=(0,o.Z)(e,c),g=(0,s.useHeadingLevel)(l),h=p?"h1":"h"+g,b=(0,d.O)(m);return i.createElement(u,(0,a.Z)({as:h},m,b("heading-root"),p&&{"data-display":p},{offset:l,textAlign:n,cssProps:{color:t}}),r)};m.displayName="@abyss/web/ui/Heading",m.propTypes={children:l().node,offset:l().number,display:l().number,color:l().string,textAlign:l().oneOf(["start","center"])},m.defaultProps={children:null,offset:null,display:null,color:"$primary1",textAlign:null};m.Level=function(e){var n=(0,s.useHeadingLevel)(1);return i.createElement(s.LevelContext.Provider,(0,a.Z)({},e,{value:n}))}},38551:(e,n,t)=>{"use strict";t.r(n),t.d(n,{Icon:()=>h});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(90678),d=t(23075),p=t(76040),c=t(15679),u=["children","icon","src","title","color","size","sizes","spriteSheetSrc","spriteSheetId","isScreenReadable","onProcessSVG"],m=(0,s.styled)("svg",{static:{display:"inline-block",fontStyle:"normal"},dynamic:function(e){var n=e.cssProps,t=n.size;return{height:t,width:t,fill:n.color}}}),g={},h=function(e){var n,t,r=e.children,l=(e.icon,e.src,e.title),s=e.color,h=e.size,b=e.sizes,v=e.spriteSheetSrc,k=e.spriteSheetId,f=e.isScreenReadable,y=(e.onProcessSVG,(0,o.Z)(e,u)),w=(0,d.O)(y),x=(0,p.f)({color:s,size:h,sizes:b});(0,i.useEffect)((function(){if(v&&!g[v]){var e=fetch(v).then((function(e){return e.text()})).then((function(e){var n=new URL(v).pathname.split("/").reverse(),t=n[2]+"_"+n[1]+"_"+n[0],a=document.createElement("div");a.style.display="none",a.id=t.replace(".svg",""),a.innerHTML=e,document.body.append(a)}));g[v]=e}}),[v]),k?n=i.createElement("use",{xlinkHref:"#"+k}):r&&"svg"===r.type?(t=r.props,n=r.props.children):n=r;var C=(0,c.useAbyssId)();return i.createElement(m,(0,a.Z)({},y,w("icon"),t,{cssProps:x,"aria-hidden":!f,focusable:f,role:f?"img":null,"aria-labelledby":f?C:null}),f&&l?i.createElement(i.Fragment,null,i.createElement("title",{id:C},l),n):n)};h.displayName="@abyss/web/ui/Icon",h.propTypes={children:l().node,icon:l().string,title:l().string,color:l().string,size:l().oneOfType([l().number,l().string]),sizes:l().shape({}),src:l().string,spriteSheetSrc:l().string,spriteSheetId:l().string,isScreenReadable:l().bool,onProcessSVG:l().func},h.defaultProps={children:null,icon:null,title:null,color:"$interactive1",size:"md",src:null,sizes:{xs:"12px",sm:"16px",md:"24px",lg:"48px",xl:"64px"},spriteSheetSrc:null,spriteSheetId:null,isScreenReadable:!1,onProcessSVG:null}},93766:(e,n,t)=>{"use strict";t.r(n),t.d(n,{IconMaterial:()=>c});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(38551),d=t(23075),p=["isScreenReadable","icon","variant","title","color"],c=function(e){var n=e.isScreenReadable,t=e.icon,r=e.variant,l=e.title,c=e.color,u=(0,o.Z)(e,p),m=(0,d.O)(u);return t&&r?i.createElement(s.Icon,(0,a.Z)({},u,m("icon-material"),{isScreenReadable:n,title:n?l||t:null,spriteSheetSrc:"https://maelstrom-dmz-nonprod.uhcprovider.com/cdn/abyss/assets/material/icons/"+r+".svg",spriteSheetId:"icon_material_"+r+"_"+t,icon:t,color:c})):null};c.displayName="@abyss/web/ui/IconMaterial",c.propTypes={icon:l().string.isRequired,variant:l().oneOf(["filled","outlined"]),color:l().string,size:l().oneOfType([l().number,l().string]),title:l().string,isScreenReadable:l().bool},c.defaultProps={variant:"filled",color:"$interactive1",size:24,title:null,isScreenReadable:!1}},8262:(e,n,t)=>{"use strict";t.r(n),t.d(n,{LagoonProvider:()=>m});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(90678),d=t(37681),p=t(43921),c=["app","env","hostEnv","user","timeout","loadingIcon"],u=(0,s.styled)("div",{display:"flex",justifyContent:"center",height:"90vh"}),m=function(e){var n=e.app,t=e.env,r=e.hostEnv,l=e.user,s=e.timeout,m=e.loadingIcon,g=(0,o.Z)(e,c),h=(0,i.useState)(),b=h[0],v=h[1];return(0,i.useEffect)((function(){var e=setTimeout((function(){v((function(e){return e||{}}))}),s);(0,d.lagoon)(n,t,r).initialize(l,{onReady:function(){clearTimeout(e)},onData:function(e){v(e)}})}),[n,t,l,r,s]),b?i.createElement(p.i.Provider,(0,a.Z)({},g,{value:b})):m?i.createElement(u,null,m):null};m.displayName="@abyss/web/ui/LagoonProvider",m.propTypes={app:l().string.isRequired,env:l().string.isRequired,hostEnv:l().string,user:l().shape({}),timeout:l().number,loadingIcon:l().node},m.defaultProps={hostEnv:"prod",user:null,timeout:500,loadingIcon:null}},99986:(e,n,t)=>{"use strict";t.d(n,{S:()=>g});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(90678),d=t(23075),p=t(76040),c=["children","width","grow","space"],u=(0,s.styled)("div",{static:{display:"flex",flexDirection:"row",variants:{alignLayout:{left:{"justify-content":"flex-start"},center:{"justify-content":"center"},right:{"justify-content":"flex-end"}},alignItems:{top:{"align-items":"flex-start"},center:{"align-items":"center"},bottom:{"align-items":"flex-end"}}}},dynamic:function(e){var n=e.cssProps.space;return{marginLeft:-1*n/2,marginRight:-1*n/2}}}),m=(0,s.styled)("span",{static:{display:"inherit",variants:{grow:{true:{display:"flex",flexGrow:1}}}},dynamic:function(e){var n=e.cssProps,t=n.width,a=n.space;return{minWidth:t,marginLeft:a/2,marginRight:a/2}}}),g=function(e){var n=e.children,t=e.width,r=e.grow,l=e.space,s=(0,o.Z)(e,c),g=(0,d.O)(s),h=(0,p.f)({width:t,space:l});return i.createElement(u,(0,a.Z)({},s,g("layout-group"),{cssProps:h}),i.Children.toArray(n).map((function(e,n){return i.createElement(m,{key:n,grow:r,cssProps:h},e)})))};g.displayName="@abyss/web/ui/Layout.Group",g.propTypes={children:l().node.isRequired,width:l().oneOfType([l().string,l().number]),grow:l().bool,space:l().number,alignLayout:l().oneOf(["left","center","right"]),alignItems:l().oneOf(["top","center","bottom"])},g.defaultProps={width:null,grow:!1,space:8,alignLayout:"left",alignItems:"center"}},74520:(e,n,t)=>{"use strict";t.d(n,{Y:()=>g});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(90678),d=t(23075),p=t(76040),c=["children","width","grow","space"],u=(0,s.styled)("div",{static:{display:"flex",flexDirection:"column",flexWrap:"wrap",variants:{alignLayout:{left:{"align-content":"flex-start"},center:{"align-content":"center"},right:{"align-content":"flex-end"}},alignItems:{left:{"align-items":"flex-start"},center:{"align-items":"center"},right:{"align-items":"flex-end"}}}},dynamic:function(e){var n=e.cssProps.space;return{marginTop:-1*n/2,marginBottom:-1*n/2}}}),m=(0,s.styled)("span",{static:{variants:{grow:{true:{width:"100%"}}}},dynamic:function(e){var n=e.cssProps,t=n.width,a=n.space;return{minWidth:t,marginTop:a/2,marginBottom:a/2}}}),g=function(e){var n=e.children,t=e.width,r=e.grow,l=e.space,s=(0,o.Z)(e,c),g=(0,d.O)(s),h=(0,p.f)({width:t,space:l});return i.createElement(u,(0,a.Z)({},s,g("layout-stack"),{cssProps:h}),i.Children.toArray(n).map((function(e,n){return i.createElement(m,{key:n,grow:r,cssProps:h},e)})))};g.displayName="@abyss/web/ui/Layout.Stack",g.propTypes={children:l().node.isRequired,width:l().oneOfType([l().string,l().number]),grow:l().bool,space:l().number,alignLayout:l().oneOf(["left","center","right"]),alignItems:l().oneOf(["left","center","right"])},g.defaultProps={width:null,grow:!1,space:8,alignLayout:"left",alignItems:"center"}},31348:(e,n,t)=>{"use strict";t.r(n),t.d(n,{Layout:()=>w});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(90678),d=t(23075),p=["space"],c=(0,s.styled)("div"),u=function(e){var n=e.space,t=(0,o.Z)(e,p),r=(0,d.O)(t);return i.createElement(c,(0,a.Z)({},r("layout-space"),t,{css:{height:n}}))};u.displayName="@abyss/web/ui/Layout.Space",u.propTypes={space:l().oneOfType([l().string,l().number])},u.defaultProps={space:16};var m=t(99986),g=t(74520),h=t(76040),b=["children","before","after","padding"],v=(0,s.styled)("span",{display:"flex",alignItems:"center",height:0,paddingRight:"0px"}),k=(0,s.styled)("span",{display:"flex",alignItems:"center",height:0,paddingLeft:"0px"}),f=(0,s.styled)("span",{static:{display:"flex",justifyContent:"center",alignItems:"center",width:"100%"},dynamic:function(e){var n,t=e.cssProps.padding;return(n={})[v]={paddingRight:t},n[k]={paddingLeft:t},n}}),y=function(e){var n=e.children,t=e.before,r=e.after,l=e.padding,s=(0,o.Z)(e,b);if(!t&&!r)return n;var p=(0,h.f)({padding:l}),c=(0,d.O)(s);return i.createElement(f,(0,a.Z)({},c("insert-element-root"),{cssProps:p}),t&&i.createElement(v,c("insert-element-before"),"function"==typeof t?t(s):t),n,r&&i.createElement(k,c("insert-element-after"),"function"==typeof r?r(s):r))};y.propTypes={children:l().node,before:l().oneOfType([l().node,l().func]),after:l().oneOfType([l().node,l().func]),padding:l().oneOfType([l().string,l().number])},y.defaultProps={children:null,before:null,after:null,padding:"$xs"};var w={};w.Space=u,w.Group=m.S,w.Stack=g.Y,w.Insert=y},62470:(e,n,t)=>{"use strict";t.r(n),t.d(n,{Link:()=>k});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(93766),d=t(90678),p=t(23075),c=t(76040),u=t(69040),m=t(31348),g=["href","variant","size","sizes","color","colorHover","fontWeight","hideIcon","children","openNewWindow","isDisabled","before","after"],h=(0,d.styled)(s.IconMaterial,{lineHeight:0,marginLeft:"$xs",verticalAlign:"middle"}),b=(0,d.styled)("a",{static:{fontFamily:"$primary",fontSize:"$md",lineHeight:"24px",textUnderlineOffset:4,"&:hover":{textDecoration:"none",cursor:"pointer"},variants:{variant:{underline:{display:"inline-flex",position:"relative",alignItems:"center","&:before":{position:"absolute",content:'""',bottom:-2,width:0,left:"50%",borderBottomWidth:2,borderBottomStyle:"solid",borderBottomColor:"inherit",transition:"300ms"},"&:hover:before":{width:"100%",left:0}},isDisabled:{cursor:"not-allowed",color:"$gray5","&:hover":{cursor:"not-allowed",textDecoration:"none"}},native:{"&:hover":{textDecoration:"underline","&:before":{border:"none !important"}}}}}},dynamic:function(e){var n,t,a=e.cssProps,o=e.variant,i=a.color,r=a.colorHover,l=a.fontWeight,s=a.size,d=a.isDisabled;if("custom"===o)return null;var p=d?"$gray5":i,c=d?"$gray5":r;return(t={color:p,fontWeight:l,fontSize:s+"px",lineHeight:1.5*s+"px"})[h]={color:p},t["&:hover"]=((n={borderColor:c,color:c})[h]={color:c},n),t}}),v=(0,d.styled)("span",{display:"inline-flex",verticalAlign:"text-bottom"}),k=i.forwardRef((function(e,n){var t=e.href,r=e.variant,l=e.size,s=e.sizes,d=e.color,k=e.colorHover,f=e.fontWeight,y=e.hideIcon,w=e.children,x=e.openNewWindow,C=e.isDisabled,N=e.before,T=e.after,S=(0,o.Z)(e,g),D=(0,u.n)(Object.assign({href:t,isDisabled:C,forwardedRef:n,openNewWindow:x},S)),I=D.linkProps,P=D.isExternalLink,L=(D.inRouterContext,(0,p.O)(S)),B=(0,c.f)({size:l,sizes:s,color:d,colorHover:k,fontWeight:f,isDisabled:C}),M=Object.assign({},I,{variant:C?"isDisabled":r,cssProps:B}),A={before:N,after:T};return P||x?i.createElement(b,(0,a.Z)({},M,L("link-root")),i.createElement(m.Layout.Insert,A,w,!y&&("native"===r||"underline"===r)&&i.createElement(v,L("link-icon-wrapper"),i.createElement(h,(0,a.Z)({},L("link-icon"),{icon:"open_in_new",size:B.size,color:d,isScreenReadable:!0,title:"opens in a new window"}))))):i.createElement(b,(0,a.Z)({},M,L("link-root")),i.createElement(m.Layout.Insert,A,w))}));k.displayName="@abyss/web/ui/Link",k.propTypes={children:l().node,href:l().string,variant:l().oneOf(["underline","custom","native"]),color:l().string,colorHover:l().string,fontWeight:l().string,hideIcon:l().bool,size:l().oneOfType([l().number,l().string]),sizes:l().shape({}),openNewWindow:l().bool,isDisabled:l().bool,before:l().oneOfType([l().node,l().func]),after:l().oneOfType([l().node,l().func])},k.defaultProps={children:null,href:null,variant:"underline",color:"$interactive1",colorHover:"$interactive2",fontWeight:"$normal",hideIcon:!1,size:"$md",sizes:{xs:"12.64px",sm:"14px",md:"16px",lg:"18px",xl:"22px"},openNewWindow:null,isDisabled:!1,before:null,after:null}},31431:(e,n,t)=>{"use strict";t.r(n),t.d(n,{LoadingSpinner:()=>h});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(90678),d=t(76040),p=t(23075),c=t(5498),u=["children","size","sizes","variant","ariaLoadingLabel","isLoading"],m=(0,s.keyframes)({"0%":{transform:"rotate(0deg)"},"100%":{transform:"rotate(360deg)"}}),g=(0,s.styled)("div",{static:{display:"inline-block",position:"relative",div:{"@media (prefers-reduced-motion: no-preference)":{boxSizing:"border-box",display:"block",position:"absolute",margin:0,border:"solid $gray4",borderRadius:"50%",animation:m+" 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite",borderColor:"$primary1 transparent transparent transparent"}},"div:nth-child(1)":{borderColor:"$gray4",animationDelay:"-0.45s"},"div:nth-child(2)":{animationDelay:"-0.3s"},"div:nth-child(3)":{animationDelay:"-0.15s"},variants:{variant:{light:{div:{border:"solid $gray5",borderColor:"$white transparent transparent transparent"},"div:nth-child(1)":{borderColor:"$gray5",animationDelay:"-0.45s"}}}}},dynamic:function(e){var n=e.cssProps.size;return{div:{borderWidth:n/10+"px",width:n+"px",height:n+"px"},width:n+"px",height:n+"px"}}}),h=function(e){var n=e.children,t=e.size,r=e.sizes,l=e.variant,s=e.ariaLoadingLabel,m=e.isLoading,h=(0,o.Z)(e,u),b=(0,p.O)(h),v=(0,d.f)({size:t,sizes:r}),k=(0,c.S)().visuallyHiddenProps,f=s||"Loading",y=n&&i.cloneElement(n,{style:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}});return i.createElement(i.Fragment,null,i.createElement("p",(0,a.Z)({"aria-live":"polite"},k),m?f:null),m&&i.createElement(g,(0,a.Z)({},b("loading-spinner-root"),{cssProps:v,variant:l,"aria-hidden":"true"}),i.createElement("div",null),i.createElement("div",null),i.createElement("div",null),i.createElement("div",null),n&&y))};h.displayName="@abyss/web/ui/LoadingSpinner",h.propTypes={children:l().node,isLoading:l().bool,ariaLoadingLabel:l().string.isRequired,size:l().oneOfType([l().number,l().string]),sizes:l().shape({}),variant:l().oneOf(["default","light"])},h.defaultProps={children:null,isLoading:!1,size:"$md",sizes:{sm:"20px",md:"35px",lg:"80px"},variant:"default"}},87487:(e,n,t)=>{"use strict";t.r(n),t.d(n,{MediaQuery:()=>g});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(90678),d=t(76040),p=t(65483),c=["smallerThan","largerThan","children","breakpoints"],u={xs:0,sm:464,md:744,lg:984,xl:1248},m=(0,s.styled)("div",{static:{display:"none"},dynamic:function(e){var n,t,a,o=e.cssProps,i=o.smallerThan,r=o.largerThan;return i&&r?((n={})["@media (min-width: "+r+"px) and (max-width: "+(i-1)+"px)"]={display:"contents"},n):i?((t={})["@media (max-width: "+(i-1)+"px)"]={display:"contents"},t):r?((a={})["@media (min-width: "+r+"px)"]={display:"contents"},a):{}}}),g=function(e){var n,t,r,l=e.smallerThan,s=e.largerThan,g=e.children,h=e.breakpoints,b=(0,o.Z)(e,c),v=h||(null==(n=(0,p.useAbyssTheme)())?void 0:n.breakpoints)||u,k={};Object.keys(v).forEach((function(e){k[e]=v[e]}));var f=l?null==(t=(0,d.f)({size:l,sizes:k}))?void 0:t.size:null,y=s?null==(r=(0,d.f)({size:s,sizes:k}))?void 0:r.size:null;return i.createElement(m,(0,a.Z)({},b,{cssProps:{smallerThan:f,largerThan:y}}),g)};g.displayName="@abyss/web/ui/MediaQuery",g.propTypes={smallerThan:l().oneOfType([l().number,l().string]),largerThan:l().oneOfType([l().number,l().string]),children:l().node,breakpoints:l().shape({})},g.defaultProps={smallerThan:null,largerThan:null,children:null,breakpoints:null}},94173:(e,n,t)=>{"use strict";t.d(n,{t:()=>a});var a=t(2784).createContext({modalRef:null})},90286:(e,n,t)=>{"use strict";t.d(n,{Q:()=>s});var a=t(7896),o=t(2784),i=t(90678),r=t(23075),l=(0,i.styled)("div",{padding:"$md","& + &":{paddingTop:0}}),s=function(e){var n=(0,r.O)(e);return o.createElement(l,(0,a.Z)({},e,n("modal-section-root")))};s.displayName="@abyss/web/ui/Modal.Section"},63976:(e,n,t)=>{"use strict";t.r(n),t.d(n,{Modal:()=>L});var a=t(50185),o=t(7896),i=t(31461),r=t(2784),l=t(83667),s=t.n(l),d=t(94173),p=t(90678),c=t(68279),u=t(93766),m=(0,p.keyframes)({"0%":{opacity:0},"100%":{opacity:1}}),g=function(e,n,t){var a=function(e){var n;return"left"===e&&(n="translate(-100%, 0)"),"right"===e&&(n="translate(100%, 0)"),"bottom"===e&&(n="translate(0, 100%)"),"top"===e&&(n="translate(0, -100%)"),{"@media (prefers-reduced-motion: no-preference)":{animation:(0,p.keyframes)({from:{transform:n},to:{transform:"translate(0%, 0)"}})+" 150ms linear 0s"}}}(e);switch(e){case"top":return Object.assign({borderRadius:"0px 0px 4px 4px",top:"-100%",left:0,right:0,width:"100vw",maxWidth:"100vw",maxHeight:"100vh",height:n},t&&Object.assign({top:0},a));case"bottom":return Object.assign({borderRadius:"4px 4px 0px 0px",bottom:"-100%",left:0,right:0,width:"100vw",maxWidth:"100vw",maxHeight:"100vh",height:n},t&&Object.assign({bottom:0},a));case"right":return Object.assign({borderRadius:"4px 0px 0px 4px",bottom:0,top:0,right:"-100%",height:"100vh",maxWidth:"100vw",maxHeight:"100vh",width:n},t&&Object.assign({right:0},a));case"left":return Object.assign({borderRadius:"0px 4px 4px 0px",bottom:0,top:0,left:"-100%",height:"100vh",maxWidth:"100vw",maxHeight:"100vh",width:n},t&&Object.assign({left:0},a));case"fullscreen":return Object.assign({position:"fixed",borderRadius:0,bottom:0,top:0,left:0,width:"100vw",maxWidth:"100vw",maxHeight:"100vh",transition:"none",opacity:0},t&&{opacity:1});default:return Object.assign({borderRadius:4,opacity:0,width:n},t&&{opacity:1,"@media (prefers-reduced-motion: no-preference)":{animation:m+" 150ms cubic-bezier(0.16, 1, 0.3, 1) forwards"}})}},h=t(3063),b=t(76040),v=t(23075),k=t(5498),f=["title","titleAlign","hideTitle","children","position","size","sizes","isDrawer","hideClose","footer","closeOnClickOutside","closeOnEscPress"],y=(0,p.keyframes)({"0%":{opacity:0},"100%":{opacity:1}}),w=(0,p.styled)(a.x8,{display:"flex",alignSelf:"flex-start",borderRadius:"50%",padding:"4px",transition:"all  0.1s","&:hover":{backgroundColor:"$closeIconHover"},"&:active":{transform:"scale(0.9)"},minHeight:25,minWidth:25,color:"$primary1",cursor:"pointer",position:"absolute",top:5,right:5}),x=(0,p.styled)("div",{position:"fixed",zIndex:1080,top:0,left:0,bottom:0,right:0,display:"flex",alignItems:"center",justifyContent:"center"}),C=(0,p.styled)(a.VY,{static:{display:"block",position:"relative",background:"$white",borderRadius:"4px",color:"$black",zIndex:1081,variants:{isDrawer:{true:{position:"fixed"}}}},dynamic:function(e){var n=e.cssProps,t=n.isOpen,a=n.position,o=n.size;return Object.assign({},g(a,o,t))}}),N=(0,p.styled)("div",{variants:{isDrawer:{false:{position:"absolute",inset:"0px",zIndex:4,overflowY:"auto",padding:"48px 16px",display:"flex",WebkitBoxPack:"center",justifyContent:"center",alignItems:"center"}}}}),T=(0,p.styled)("div",{static:{overflowY:"auto"},dynamic:function(e){var n=e.cssProps,t=n.isDrawer,a=n.headerHeight,o=n.footerHeight;return{maxHeight:t?"calc(100% - "+(o+a)+"px)":"calc(100vh - 250px)"}}}),S=(0,p.styled)(a.aV,{position:"fixed",zIndex:1080,top:0,left:0,bottom:0,right:0,variants:{isOpen:{true:{"@media (prefers-reduced-motion: no-preference)":{animation:y+" 150ms cubic-bezier(0.16, 1, 0.3, 1) forwards"},background:"rgba(0, 0, 0, 0.7)"},false:{background:"rgba(0, 0, 0, 0)"}}}}),D=(0,p.styled)("div",{marginLeft:"0px",padding:"$md",paddingTop:"$sm",paddingBottom:"$sm"}),I=(0,p.styled)(a.Dx,{fontSize:26,marginLeft:"0px",padding:"0px",paddingTop:"$md",variants:{align:{left:{textAlign:"left"},center:{textAlign:"center"},right:{textAlign:"right"}}}}),P=(0,p.styled)("div",{width:"100%"}),L=function(e){var n=e.title,t=e.titleAlign,l=e.hideTitle,s=e.children,p=e.position,m=e.size,g=e.sizes,y=e.isDrawer,L=e.hideClose,B=e.footer,M=e.closeOnClickOutside,A=e.closeOnEscPress,F=(0,i.Z)(e,f),R=(0,v.O)(F),j=(l?(0,k.S)():{}).visuallyHiddenProps,O=(0,r.useRef)(null),z=(0,b.f)({size:m,sizes:g}),H=(0,r.useState)(null),U=H[0],E=H[1],G=(0,r.useState)(null),$=G[0],V=G[1],q=(0,h.useDialog)(F),W=q.isOpen,_=q.onClose;return r.createElement(a.fC,(0,o.Z)({open:W,onOpenChange:_},R("modal-root")),r.createElement(d.t.Provider,{value:{modalRef:O}},r.createElement(a.h_,null,r.createElement(S,(0,o.Z)({},R("modal-overlay"),{isOpen:W}),r.createElement(c.ThemeProvider,null,r.createElement(x,R("modal-container"),r.createElement(N,{isDrawer:y},r.createElement(C,(0,o.Z)({"aria-modal":"true",isDrawer:y,onInteractOutside:function(e){M||e.preventDefault()},onEscapeKeyDown:function(e){A||e.preventDefault()},ref:O},R("modal-content-container"),{cssProps:Object.assign({isOpen:W,position:p},z)}),!L&&r.createElement(w,(0,o.Z)({"aria-label":"close"},R("modal-close-button")),r.createElement(u.IconMaterial,(0,o.Z)({icon:"close",color:"$interactive1"},R("modal-close-icon")))),n&&r.createElement(D,(0,o.Z)({ref:E},R("modal-header-container")),r.createElement(I,(0,o.Z)({},j,{align:t},R("modal-content-title")),n)),r.createElement(T,(0,o.Z)({},R("modal-body"),{role:"region",tabIndex:0,cssProps:{isDrawer:y,headerHeight:(null==U?void 0:U.offsetHeight)||0,footerHeight:(null==$?void 0:$.offsetHeight)||0}}),s),B&&r.createElement(P,(0,o.Z)({ref:V},R("modal-footer")),B)))))))))};L.displayName="@abyss/web/ui/Modal",L.propTypes={children:s().node,footer:s().node,onClose:s().func,title:s().string,titleAlign:s().string,model:s().string,isOpen:s().bool,hideClose:s().bool,isDrawer:s().bool,position:s().oneOf(["left","top","bottom","right"]),size:s().oneOfType([s().string,s().number]),sizes:s().shape({}),closeOnClickOutside:s().bool,closeOnEscPress:s().bool,hideTitle:s().bool},L.defaultProps={children:null,footer:null,onClose:function(){},title:null,titleAlign:null,model:null,isOpen:!1,hideClose:!1,isDrawer:!1,size:"lg",sizes:{sm:"288px",md:"572px",lg:"784px",full:"70%"},position:null,closeOnClickOutside:!0,closeOnEscPress:!0,hideTitle:!1};var B=t(90286);L.Description=a.dk,L.Section=B.Q},22084:(e,n,t)=>{"use strict";t.r(n),t.d(n,{NavMenu:()=>V});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(2524),d=t(90678),p=t(23075),c=t(69040),u=t(36268),m=["isTopLevel","variant","onClick"],g=(0,d.styled)(s.ck,{variants:{isTopLevel:{true:{height:"100%"}}}}),h=(0,d.styled)(s.rU,{paddingLeft:"$lg",paddingRight:"$lg",cursor:"pointer",outline:"none",userSelect:"none",fontWeight:"$bold",fontSize:"$md",color:"$white",display:"flex",height:"100%",alignContent:"center",alignItems:"center",minHeight:"52px","&:hover":{backgroundColor:"$white",color:"$primary1",textDecoration:"none"},variants:{variant:{inverted:{color:"$primary1","&:hover":{backgroundColor:"$primary1",color:"$white"}}}}}),b=(0,d.styled)("a",{}),v=function(e){var n=e.isTopLevel,t=e.variant,r=e.onClick,l=(0,o.Z)(e,m),s=(0,p.O)(l),d=(0,i.useContext)(u.e).resetDrawer,v=(0,c.n)(Object.assign({},l,{onClick:function(){r&&r(),d()}})).linkProps;return i.createElement(g,(0,a.Z)({isTopLevel:n},s("nav-menu-link-root")),i.createElement(h,(0,a.Z)({variant:t},s("nav-menu-link"),{asChild:!0}),i.createElement(b,v)))};v.propTypes={title:l().node.isRequired,href:l().string,isTopLevel:l().bool,onClick:l().func,variant:l().oneOf(["default","inverted"]),children:l().node},v.defaultProps={href:null,isTopLevel:!1,onClick:null,variant:"default",children:null};var k,f,y=t(83133),w=t(93766),x=["variant","children"],C=function(e){e.preventDefault()},N=(0,d.styled)(w.IconMaterial,{position:"relative",top:1,"[data-state=open] &":{transform:"rotate(-180deg)",fill:"$primary1"},"@media (prefers-reduced-motion: no-preference)":{transition:"transform 250ms ease"},variants:{variant:{inverted:{"[data-state=closed] &":{fill:"$primary1"},"[data-state=open] &":{fill:"$white"}}}}}),T=(0,d.styled)(y.Focusable,{all:"unset",cursor:"pointer",paddingLeft:"$lg",paddingRight:"$lg",outline:"none",fontWeight:"$bold",fontSize:"$md",userSelect:"none",color:"$white","&[data-state=open], &:hover":(k={position:"relative",backgroundColor:"$white",color:"$primary1"},k["& "+N]={fill:"$primary1"},k),display:"flex",height:"100%",minHeight:"52px",alignContent:"center",alignItems:"center",justifyContent:"space-between",gap:2,variants:{variant:{inverted:{color:"$primary1","&[data-state=open], &:hover":(f={backgroundColor:"$primary1",color:"$white"},f["& "+N]={fill:"$white"},f)}}}}),S=i.forwardRef((function(e,n){var t=e.variant,r=e.children,l=(0,o.Z)(e,x),d=(0,p.O)(l);return i.createElement(T,(0,a.Z)({variant:t},l,d("nav-menu-menu-tigger"),{ref:n,as:s.xz,onPointerMove:C,onPointerLeave:C}),r,i.createElement(N,(0,a.Z)({},d("nav-menu-menu-trigger-icon"),{variant:t,icon:"keyboard_arrow_down",color:"$white","aria-hidden":!0})))}));S.propTypes={variant:l().oneOf(["default","inverted"]),children:l().node},S.defaultProps={variant:"default",children:null};var D=["title","content","variant"],I=(0,d.keyframes)({from:{transform:"translateX(200px)",opacity:0},to:{transform:"translateX(0)",opacity:1}}),P=(0,d.keyframes)({from:{transform:"translateX(-200px)",opacity:0},to:{transform:"translateX(0)",opacity:1}}),L=(0,d.keyframes)({from:{transform:"translateX(0)",opacity:1},to:{transform:"translateX(200px)",opacity:0}}),B=(0,d.keyframes)({from:{transform:"translateX(0)",opacity:1},to:{transform:"translateX(-200px)",opacity:0}}),M=(0,d.styled)(s.ck,{height:"100%"}),A=(0,d.styled)(s.VY,{position:"absolute",top:0,left:0,width:"100%","@screen >= $lg":{width:"100%"},"@media (prefers-reduced-motion: no-preference)":{animationDuration:"250ms",animationTimingFunction:"ease",'&[data-motion="from-start"]':{animationName:P},'&[data-motion="from-end"]':{animationName:I},'&[data-motion="to-start"]':{animationName:B},'&[data-motion="to-end"]':{animationName:L}}}),F=function(e){var n=e.title,t=e.content,r=e.variant,l=(0,o.Z)(e,D),s=(0,p.O)(l);return i.createElement(M,s("nav-menu-menu"),i.createElement(S,(0,a.Z)({variant:r},l),n),i.createElement(A,s("nav-menu-menu-item"),t))};F.displayName="@abyss/web/ui/NavMenu.Menu",F.propTypes={title:l().node,content:l().node,variant:l().oneOf(["default","inverted"])},F.defaultProps={title:null,content:null,variant:"default"};var R=["children","items","variant","position","maxNavWidth","headerHeight"],j=(0,d.keyframes)({from:{transform:"rotateX(-30deg) scale(0.9)",opacity:0},to:{transform:"rotateX(0deg) scale(1)",opacity:1}}),O=(0,d.keyframes)({from:{transform:"rotateX(0deg) scale(1)",opacity:1},to:{transform:"rotateX(-10deg) scale(0.95)",opacity:0}}),z=(0,d.styled)("div",{background:"$primary1",width:"100%",display:"flex",justifyContent:"center",variants:{variant:{inverted:{background:"$white"}}}}),H=(0,d.styled)(s.fC,{static:{position:"relative",display:"flex",justifyContent:"flex-start",alignItems:"center",width:"100%",minHeight:"52px",background:"$primary1",variants:{variant:{inverted:{background:"$white"}},position:{start:{justifyContent:"start"},center:{justifyContent:"center"},end:{justifyContent:"end"}}}},dynamic:function(e){return{maxWidth:e.cssProps.maxNavWidth}}}),U=(0,d.styled)(s.aV,{all:"unset",display:"flex",justifyContent:"center",alignItems:"center",borderStyle:"none",listStyle:"none",height:"100%",variants:{variant:{inverted:{backgroundColor:"$white"}}}}),E=(0,d.styled)(s.l_,{static:{position:"relative",transformOrigin:"top center",width:"100%",backgroundColor:"$white",borderRadius:4,overflow:"auto",boxShadow:"hsl(206 22% 7% / 35%) 0px 10px 38px -10px, hsl(206 22% 7% / 20%) 0px 10px 20px -15px",height:"var(--radix-navigation-menu-viewport-height)","@screen >= $lg":{width:"calc(100% - 40px)"},"@media (prefers-reduced-motion: no-preference)":{transition:"width, height, 300ms ease",'&[data-state="open"]':{animation:j+" 200ms ease"},'&[data-state="closed"]':{animation:O+" 200ms ease"}}},dynamic:function(e){return{maxHeight:"calc(100vh - "+e.cssProps.height+"px)"}}}),G=(0,d.styled)("div",{position:"absolute",display:"flex",justifyContent:"center",width:"100%",minWidth:"350px",top:"100%",perspective:"2000px",zIndex:200}),$=function(e){e.preventDefault()},V=function(e){e.children;var n=e.items,t=e.variant,r=e.position,l=e.maxNavWidth,s=e.headerHeight,d=(0,o.Z)(e,R),c=(0,p.O)(d),u=(0,i.useState)(0),m=u[0],g=u[1],h=s||m.offsetHeight||0;return i.createElement(z,(0,a.Z)({variant:t},c("nav-menu-root")),i.createElement(H,(0,a.Z)({},d,c("nav-menu-container"),{variant:t,position:r,cssProps:{maxNavWidth:l}}),i.createElement(U,(0,a.Z)({variant:t,ref:g},c("nav-menu-list")),n.map((function(e,n){return e.href||e.onClick?i.createElement(v,(0,a.Z)({key:"nav-menu-link-"+n,isTopLevel:!0,variant:t,href:e.href,onClick:e.onClick},d),e.title):e.content?i.createElement(F,(0,a.Z)({key:"nav-menu-menu-"+n},d,{variant:t},e)):null}))),i.createElement(G,c("nav-menu-viewport-container"),i.createElement(E,(0,a.Z)({onPointerEnter:$,onPointerLeave:$,cssProps:{height:h}},c("nav-menu-viewport"))))))};V.displayName="@abyss/web/ui/NavMenu",V.propTypes={maxNavWidth:l().oneOfType([l().string,l().number]),items:l().arrayOf(l().shape({title:l().node.isRequired,href:l().string,content:l().node})),variant:l().oneOf(["default","inverted"]),position:l().oneOf(["start","center","end"]),children:l().node,headerHeight:l().number},V.defaultProps={maxNavWidth:"1248px",items:[],variant:"default",position:"start",children:null,headerHeight:null};var q=["title","description","href","onClick","children","hideIcon"],W=(0,d.styled)("span",{display:"flex",alignItems:"center",fontFamily:"$primary",fontWeight:"$bold",fontSize:"$md",lineHeight:1.2,marginBottom:5,color:"$interactive1",textAlign:"start",variants:{isDisabled:{true:{color:"$gray5"}}}}),_=(0,d.styled)("span",{all:"unset",color:"$gray8",lineHeight:1.4,fontFamily:"$primary",fontWeight:"initial",fontSize:"$md",textAlign:"start",variants:{isDisabled:{true:{color:"$gray5"}}}}),Z=(0,d.styled)("span",{display:"inline-flex",verticalAlign:"text-bottom"}),X=(0,d.styled)(w.IconMaterial,{lineHeight:0,marginLeft:"$xs",color:"$interactive1"}),Y=function(e){var n=e.title,t=e.description,r=e.href,l=e.onClick,s=e.children,d=e.hideIcon,u=(0,o.Z)(e,q),m=(0,p.O)(u),g=(0,c.n)(Object.assign({href:r},u)).isExternalLink,h=u.isDisabled,b=h&&{backgroundColor:"$gray1","&:hover":{cursor:"not-allowed",backgroundColor:"$gray1"},svg:{fill:"$gray5"}};return i.createElement(v,(0,a.Z)({},u,{href:r,onClick:l,disabled:h,css:Object.assign({flexDirection:"column",justifyContent:"start",alignItems:"flex-start",padding:"$md",borderRadius:4,"&:hover":{cursor:"pointer",backgroundColor:"$gray2"}},b)},m("nav-menu-item-root")),i.createElement(W,(0,a.Z)({},m("nav-menu-item-title"),{isDisabled:h}),n,!d&&g&&n&&i.createElement(Z,null,i.createElement(X,(0,a.Z)({},m("nav-menu-item-link-icon"),{icon:"open_in_new",size:"$sm",isScreenReadable:!0,title:"opens in a new window"})))),i.createElement(_,(0,a.Z)({},m("nav-menu-item-description"),{isDisabled:h}),t||s))};Y.displayName="@abyss/web/ui/NavMenu.Item",Y.propTypes={title:l().node.isRequired,children:l().node,description:l().string,href:l().string,onClick:l().func,hideIcon:l().bool,isDisabled:l().bool},Y.defaultProps={description:null,href:null,onClick:null,children:null,hideIcon:!1,isDisabled:!1};var Q=["title","columnCount","children","href","onClick","hideIcon"],K=(0,d.styled)("li",{static:{width:"100%"},dynamic:function(e){var n=e.cssProps,t=n.columnCount;return n.hasTitle?{"@screen >= $lg":{width:100/t+"%","&:not(:first-child)":{borderLeft:"1px solid $gray4",paddingLeft:"$lg",marginLeft:"$lg"}}}:{"@screen >= $lg":{width:100/t+"%"}}}}),J=(0,d.styled)("div",{display:"flex",flexDirection:"column",width:"100%"}),ee=(0,d.styled)("ul",{}),ne=(0,d.styled)("p",{static:{display:"flex",alignItems:"center",fontWeight:"$bold",fontSize:"$lg",color:"$primary1",margin:0,alignSelf:"flex-start",variants:{isAction:{true:{textDecoration:"none","-webkit-tap-highlight-color":"rgba(0, 0, 0, 0)","&:hover, &:active, &:focus":{textDecoration:"underline",color:"$interactive2"}}},hasMultipleColumns:{true:{"@screen >= $lg":{minHeight:40}}}}},dynamic:function(e){return e.cssProps.hasTitle?{padding:"$sm 0"}:{}}}),te=(0,d.styled)("span",{display:"inline-flex",verticalAlign:"text-bottom"}),ae=(0,d.styled)(w.IconMaterial,{lineHeight:0,marginLeft:"$xs"}),oe=function(e){var n=e.title,t=e.columnCount,r=e.children,l=e.href,s=e.onClick,d=e.hideIcon,u=(0,o.Z)(e,Q),m=(0,p.O)(u),g=(0,c.n)(Object.assign({href:l,onClick:s},u)),h=g.linkProps,b=g.isExternalLink,v=!!n,k={};return v&&(l||s)&&(k=Object.assign({isAction:!0},h)),i.createElement(K,(0,a.Z)({cssProps:{columnCount:t,hasTitle:v}},m("nav-menu-column-root")),i.createElement(J,m("nav-menu-column"),i.createElement(ne,(0,a.Z)({cssProps:{hasTitle:v},hasMultipleColumns:t>1},k,m("nav-menu-column-title")),n,!d&&b&&n&&i.createElement(te,null,i.createElement(ae,(0,a.Z)({},m("nav-menu-item-link-icon"),{icon:"open_in_new",size:"$sm",color:"$primary1",isScreenReadable:!0,title:"opens in a new window"})))),i.createElement(ee,m("nav-menu-column-list"),r)))};oe.displayName="@abyss/web/ui/NavMenu.Column",oe.propTypes={title:l().node,columnCount:l().number,children:l().node,onClick:l().func,hideIcon:l().bool,href:l().string},oe.defaultProps={title:null,columnCount:null,children:null,onClick:null,hideIcon:!1,href:null};var ie=["children"],re=(0,d.styled)("ul",{display:"flex",flexDirection:"column",padding:"$sm $lg",margin:0,width:"100%",listStyle:"none","@screen >= $lg":{padding:"$lg",flexDirection:"row",justifyContent:"space-between"}}),le=function(e){var n=e.children,t=(0,o.Z)(e,ie),r=(0,p.O)(t),l=i.Children.count(n);return i.createElement(re,(0,a.Z)({},t,r("nav-menu-columns-root")),i.Children.map(n,(function(e){return e&&e.type===oe?i.cloneElement(e,{columnCount:l}):e})))};le.displayName="@abyss/web/ui/NavMenu.Columns",le.propTypes={children:l().node},le.defaultProps={children:null},V.Item=Y,V.Column=oe,V.Columns=le},63585:(e,n,t)=>{"use strict";t.r(n),t.d(n,{OverlayProvider:()=>s});var a=t(7896),o=t(2784),i=t(3448),r={};function l(e,n){var t,a,o,i=n.type,r=n.payload;switch(i){case"open":return Object.assign({},e,((t={})[r.model]=Object.assign({},e[r.model],{isOpen:!0},(null==r?void 0:r.data)&&{data:r.data}),t));case"close":return Object.assign({},e,((a={})[r.model]=Object.assign({},e[r.model],{isOpen:!1},(null==r?void 0:r.data)&&{data:r.data}),a));case"toggle":return Object.assign({},e,((o={})[r.model]=Object.assign({},e[r.model],{isOpen:!e[r.model].isOpen},(null==r?void 0:r.data)&&{data:r.data}),o));default:throw new Error}}var s=function(e){var n=(0,o.useReducer)(l,r),t=n[0],s=n[1];return o.createElement(i.i.Provider,(0,a.Z)({},e,{value:{state:t,methods:function(e){return{open:function(n){s({type:"open",payload:{model:e,data:n}})},close:function(n){s({type:"close",payload:{model:e,data:n}})},toggle:function(n){s({type:"toggle",payload:{model:e,data:n}})},getState:function(){return t[e]||{}}}}}}))}},24771:(e,n,t)=>{"use strict";t.r(n),t.d(n,{PageBody:()=>m});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(90678),d=t(23075),p=["children","className","fullWidth"],c=(0,s.styled)("div"),u=(0,s.styled)("div",{padding:"0 $md",margin:"0 auto",width:"100%",maxWidth:"$sizes$xl",variants:{fullWidth:{true:{maxWidth:"100%"}}}}),m=function(e){var n=e.children,t=e.className,r=e.fullWidth,l=(0,o.Z)(e,p),s=(0,d.O)(l);return i.createElement(c,(0,a.Z)({},l,s("page-body-root",{className:t})),i.createElement(u,(0,a.Z)({},s("page-body-container"),{fullWidth:r}),n))};m.displayName="@abyss/web/ui/PageBody",m.propTypes={children:l().node,className:l().string,fullWidth:l().number},m.defaultProps={children:null,className:null,fullWidth:null}},99456:(e,n,t)=>{"use strict";t.r(n),t.d(n,{PageFooter:()=>I});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(47823),d=t(90678),p=t(23075),c=t(62470),u=["subFooterLinks","subFooterTitle","children","brandmark","fullWidth","bottomFixed","spreadSections"],m=["label"],g=(0,d.styled)("footer",{backgroundColor:"$footerBackground",position:"relative",variants:{boxShadow:{true:{"&:before":{content:'""',position:"absolute",width:"100%",height:"100%",boxShadow:"inset rgb(50 50 93 / 25%) 0px 50px 100px -20px,\n            rgb(0 0 0 / 30%) 0px 30px 60px -30px"}}}}}),h=(0,d.styled)("div",{position:"fixed",bottom:0}),b=(0,d.styled)("div",{padding:"$md $lg",margin:"0 auto",width:"100%",maxWidth:"$sizes$xl",variants:{fullWidth:{true:{maxWidth:"100%"}}}}),v=(0,d.styled)("nav",{display:"flex",flexWrap:"wrap",justifyContent:"start",color:"$footerText",columnGap:"40px",fontWeight:"$footerFontWeight",borderBottom:"1px solid $footerBorder",marginTop:"$lg",marginBottom:"$xs",variants:{spreadSections:{true:{justifyContent:"space-between"}}}}),k=(0,d.styled)("div",{display:"flex",justifyContent:"space-evenly"}),f=(0,d.styled)("div",{marginBottom:"$md"}),y=(0,d.styled)("div",{display:"flex",justifyContent:"space-between",color:"$footerText",fontSize:"$xs",flexWrap:"wrap"}),w=(0,d.styled)("p",{marginBottom:0}),x=(0,d.styled)("small",{fontSize:"$xs"}),C=(0,d.styled)("nav",{}),N=(0,d.styled)("ul",{display:"flex",alignItems:"center"}),T=(0,d.styled)("li",{display:"flex",alignItems:"center"}),S=(0,d.styled)(c.Link,{}),D=(0,d.styled)("span",{borderLeft:"1px solid $footerBorder",display:"inline-block",height:"9px",textAlign:"center",marginLeft:"$sm",marginRight:"$sm"}),I=function(e){var n=e.subFooterLinks,t=e.subFooterTitle,r=e.children,l=e.brandmark,d=e.fullWidth,c=e.bottomFixed,I=e.spreadSections,P=(0,o.Z)(e,u),L=(0,p.O)(P),B=n.length,M=i.createElement(b,(0,a.Z)({},L("page-footer-container"),{fullWidth:d}),r&&i.createElement(v,(0,a.Z)({},L("page-footer-links"),{role:"navigation","aria-label":"footer navigation",spreadSections:I}),l&&i.createElement(f,L("page-footer-brandmark-wrapper"),i.createElement(k,L("page-footer-brandmark-container"),l)),r),i.createElement(y,L("page-footer-sub-wrapper"),i.createElement(w,L("page-footer-copyright-container"),i.createElement(x,L("page-footer-copyright"),"\xa9 ",(new Date).getFullYear()," ",t)),i.createElement(C,(0,a.Z)({"aria-label":"sub footer navigation"},L("page-footer-sub-nav")),i.createElement(N,L("page-footer-sub-list-container"),null==n?void 0:n.map((function(e,n){var t=e.label,r=(0,o.Z)(e,m);return i.createElement(i.Fragment,{key:t},i.createElement(T,L("page-footer-sub-list"),i.createElement(S,(0,a.Z)({},L("page-footer-sub-link"),r,{color:"$footerText",colorHover:"$footerLinkHover",size:"$xs"}),t),B!==n+1&&i.createElement(D,L("page-footer-sub-divider"))))}))))));if(c){var A=(0,s.Z)(),F=A[0],R=A[1].height,j=(0,s.Z)(),O=j[0],z=j[1].width;return i.createElement(g,(0,a.Z)({ref:O,css:{height:R}},L("page-footer-root",{css:{height:R}}),{boxShadow:!0}),i.createElement(h,(0,a.Z)({ref:F,css:{width:z}},L("page-footer-fixed",{css:{width:z}})),M))}return i.createElement(g,L("page-footer-root"),M)};I.displayName="@abyss/web/ui/PageFooter",I.propTypes={children:l().node,subFooterTitle:l().string,brandmark:l().node,subFooterLinks:l().arrayOf(l().shape({label:l().string,href:l().string})),fullWidth:l().bool,bottomFixed:l().bool,spreadSections:l().bool},I.defaultProps={children:null,subFooterTitle:null,subFooterLinks:[],brandmark:null,fullWidth:!1,bottomFixed:!1,spreadSections:!1};var P=["title","children"],L=(0,d.styled)("div",{display:"flex",flexDirection:"column",flexFlow:"column wrap",alignItems:"flex-start",marginBottom:"$lg"}),B=(0,d.styled)("p",{fontSize:"$xl",fontWeight:"$bold",color:"$footerText",marginBottom:"$md"}),M=(0,d.styled)("ul",{}),A=function(e){var n=e.title,t=e.children,a=(0,o.Z)(e,P),r=(0,p.O)(a);return i.createElement(L,r("page-footer-section"),i.createElement(B,r("page-footer-section-title"),n),i.createElement(M,r("page-footer-list-container"),t))};A.displayName="@abyss/web/ui/PageFooter.Section",A.propTypes={children:l().node,title:l().string},A.defaultProps={children:null,title:null};var F=["children"],R=(0,d.styled)("li",{"& + &":{marginTop:"$md !important"},"&:hover":{textDecoration:"none",cursor:"pointer"}}),j=function(e){var n=e.children,t=(0,o.Z)(e,F),r=(0,p.O)(t);return i.createElement(R,r("page-footer-link-item"),i.createElement(c.Link,(0,a.Z)({color:"$footerText",colorHover:"$footerLinkHover",fontWeight:"$footerFontWeight"},t,r("page-footer-link")),n))};j.displayName="@abyss/web/ui/PageFooter.Link",j.propTypes={children:l().node},j.defaultProps={children:null},I.Link=j,I.Section=A},36268:(e,n,t)=>{"use strict";t.d(n,{e:()=>a});var a=t(2784).createContext({resetDrawer:function(){},openDrawer:function(){},isOpen:!1})},73657:(e,n,t)=>{"use strict";t.r(n),t.d(n,{PageHeader:()=>_});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(47823),d=t(3448),p=t(23075),c=t(90678),u=t(22084),m=t(87487),g=t(35185),h=t(2524),b=t(93766),v=t(62470),k=t(74225),f=t(36268),y=["items","setDrawerSelection"],w=(0,c.styled)("div",{display:"flex",width:"100%",justifyContent:"space-between",alignItems:"center",padding:"$md",fontFamily:"inherit","&:hover":{backgroundColor:"$gray2",cursor:"pointer"}}),x=function(e){var n=e.items,t=e.setDrawerSelection,r=(0,o.Z)(e,y),l=(0,p.O)(r),s=(0,i.useContext)(f.e);return null==n?void 0:n.map((function(e,n){return e.href||e.onClick?i.createElement(w,(0,a.Z)({},l("page-header-drawer-menu-item"),{"aria-haspopup":"false",key:"drawer-menu-item-"+n}),i.createElement(v.Link,{href:e.href,onClick:function(){null!=e&&e.onClick&&e.onClick(),s.resetDrawer()},css:{"abyss-link-root":{width:"100%","&:before":{borderBottom:0},svg:{fill:"$primary1"}}}},i.createElement(k.Text,{size:16,color:"$primary1",fontWeight:"$bold"},e.title))):i.createElement(w,(0,a.Z)({},l("page-header-drawer-menu-item-button"),{key:"drawer-menu-item-"+n,as:"button",onClick:function(){return t(e)},"aria-haspopup":"true"}),i.createElement(k.Text,{size:16,color:"$primary1",fontWeight:"$bold"},e.title),i.createElement(b.IconMaterial,{icon:"chevron_right",color:"$primary1"}))}))};x.propTypes={items:l().arrayOf(l().shape({})),setDrawerSelection:l().func},x.defaultProps={items:null,setDrawerSelection:function(){}};var C=t(65483),N=t(84523),T=["topMenuItems","bottomMenuItems","maxWindowWidth","setDrawerSelection","drawerSelection","extraDrawerContent"],S=(0,c.styled)("button",{display:"none","@screen < $lg":{display:"flex",justifyContent:"center",alignItems:"center",padding:"$sm",marginLeft:"$sm",marginRight:"$sm","&:hover":{backgroundColor:"$gray2",cursor:"pointer"}}}),D=(0,c.styled)("div",{}),I=(0,c.styled)("button",{display:"flex",width:"100%",justifyContent:"start",alignItems:"center",padding:"$md","&:hover":{backgroundColor:"$gray2",cursor:"pointer"}}),P=(0,c.styled)("div",{padding:"$md"}),L=(0,c.styled)("div",{position:"sticky",backgroundColor:"$white",zIndex:4,top:0}),B=(0,c.styled)(h.ck,{listStyle:"none"}),M=(0,c.styled)("div",{height:0,width:"100%",borderTop:"1px solid $gray3"}),A=function(e){var n=e.topMenuItems,t=e.bottomMenuItems,r=(e.maxWindowWidth,e.setDrawerSelection),l=e.drawerSelection,s=e.extraDrawerContent,d=(0,o.Z)(e,T),c=(0,p.O)(d),u=(0,C.useAbyssTheme)(),m=null==u?void 0:u.breakpoints,v=(0,g.Z)().width,y=(0,i.useContext)(f.e);return(0,i.useEffect)((function(){v>(null==m?void 0:m.lg)-1&&y.isOpen&&y.resetDrawer()}),[v]),i.createElement(i.Fragment,null,i.createElement(S,(0,a.Z)({onClick:function(){y.openDrawer()},type:"button","aria-label":"Menu","aria-expanded":y.isOpen,"aria-haspopup":"dialog"},c("page-header-expand-button")),i.createElement(b.IconMaterial,{icon:"menu",color:"$primary1"})),i.createElement(N.Drawer,{title:"Menu",position:"left",isOpen:y.isOpen,onClose:function(){y.resetDrawer()}},s&&i.createElement(P,null,s),l?i.createElement(D,c("page-header-drawer-menu-sub"),i.createElement(L,c("page-header-drawer-header"),i.createElement(I,(0,a.Z)({},c("page-header-drawer-back-button-container"),{type:"button",onClick:function(){return r(null)}}),i.createElement(b.IconMaterial,{icon:"chevron_left",color:"$primary1"}),i.createElement(k.Text,{size:16,color:"$primary1",fontWeight:"$bold"},"Back")),i.createElement(M,c("page-header-horizontal-rule")),i.createElement(P,c("page-header-drawer-selected-menu-name"),i.createElement(k.Text,{size:18},l.title))),i.createElement(h.fC,null,i.createElement(B,c("page-header-drawer-selection-content"),l.content))):i.createElement(D,c("page-header-drawer-menu-main"),i.createElement(x,(0,a.Z)({},d,{items:n,setDrawerSelection:r})),n&&t&&i.createElement(M,c("page-header-drawer-horizontal-rule")),i.createElement(x,(0,a.Z)({},d,{items:t,setDrawerSelection:r})))))};A.propTypes={abyssProps:l().func.isRequired,setDrawerSelection:l().func.isRequired,bottomMenuItems:l().arrayOf(l().shape({title:l().node.isRequired,href:l().string,content:l().node})),topMenuItems:l().arrayOf(l().shape({title:l().node.isRequired,href:l().string,content:l().node})),maxWindowWidth:l().number,model:l().string,extraDrawerContent:l().node,drawerSelection:l().shape({content:l().oneOfType([l().string,l().node]),title:l().oneOfType([l().string,l().node])})},A.defaultProps={extraDrawerContent:null,bottomMenuItems:null,model:null,topMenuItems:null,drawerSelection:null,maxWindowWidth:984};var F=t(21900),R=["logo","hideLogo","logoRedirect","logoTitle"],j=(0,c.styled)("a",{display:"flex",alignItems:"center",flexShrink:0,padding:"$sm 0","> img":{verticalAlign:"middle"}}),O=(0,c.styled)("span",{fontFamily:"$primary",fontWeight:"$semibold",fontSize:"$xl",color:"$gray6"}),z=(0,c.styled)("div",{height:60,borderLeft:"2px solid $gray3",margin:"$sm $md"}),H=function(e){var n=e.logo,t=e.hideLogo,r=e.logoRedirect,l=e.logoTitle,s=(0,o.Z)(e,R),d=(0,p.O)(s),c=(0,C.useAbyssTheme)(),u=null==c?void 0:c.themeName,g=null;if(!t)switch(u){case"optum":g=i.createElement(F.Brandmark,{size:"$lg",affiliate:"optum",variant:"lockup",color:"orange",brand:"optum",title:r?"Optum Home":null});break;case"uhg":g=i.createElement(F.Brandmark,{size:"$lg",affiliate:"uhg",variant:"lockup",color:"blue",brand:"uhg",title:r?"UnitedHealthgroup Home":null});break;default:g=i.createElement(F.Brandmark,{size:"$lg",affiliate:"uhc",variant:"lockup",color:"blue",brand:"uhc",title:r?"UnitedHealthcare Home":null})}return!t||n&&g?i.createElement(j,(0,a.Z)({as:r?"a":"div",href:r},d("page-header-logo")),n||g,l&&i.createElement(m.MediaQuery,{largerThan:"$lg"},i.createElement(z,d("page-header-vertical-rule")),i.createElement(O,d("page-header-logo-title"),l))):null};H.propTypes={logo:l().node,hideLogo:l().bool,logoRedirect:l().string,logoTitle:l().node},H.defaultProps={hideLogo:!1,logo:null,logoRedirect:null,logoTitle:null};var U=["fullWidth","topMenuItems","bottomMenuItems","children","model","extraDrawerContent"],E=(0,c.styled)("header",{backgroundColor:"$white",boxShadow:"0 1px 2px 0 rgba(0, 0, 0, 0.1)",width:"100%",position:"sticky",top:0,zIndex:200}),G=(0,c.styled)("div",{display:"flex",alignItems:"center",justifyContent:"space-between",padding:"$sm $md",margin:"0 auto",width:"100%",maxWidth:"$sizes$xl",variants:{fullWidth:{true:{maxWidth:"100%"}}}}),$=(0,c.styled)("div",{margin:"$sm 0",height:2,width:"100%",background:"linear-gradient(90deg, transparent, $gray3 50%, $gray3)"}),V=(0,c.styled)("div",{display:"flex",flexDirection:"column",alignItems:"flex-end",flexGrow:1}),q=(0,c.styled)("div",{display:"flex",flexDirection:"column",justifyContent:"space-between"}),W=(0,c.styled)("div",{display:"none","@screen >= $lg":{display:"block"}}),_=function(e){var n=e.fullWidth,t=e.topMenuItems,r=e.bottomMenuItems,l=e.children,c=e.model,g=e.extraDrawerContent,h=(0,o.Z)(e,U),b=(0,p.O)(h),v=(0,i.useState)(!1),k=v[0],y=v[1],w=(0,i.useState)(null),x=w[0],C=w[1],N=(0,s.Z)(),T=N[0],S=N[1],D=(0,i.useState)(null),I=D[0],P=D[1],L=(0,i.useState)(null),B=L[0],M=L[1],F=null==I?void 0:I.getBoundingClientRect().top,R=(null==B?void 0:B.getBoundingClientRect().bottom)-F,j=(0,i.useContext)(d.i),O=(null==j?void 0:j.methods(c))||null,z=(null==O?void 0:O.getState())||null;return i.createElement(f.e.Provider,{value:{isOpen:(null==z?void 0:z.isOpen)||k,openDrawer:function(){c&&z?O.open():y(!0)},resetDrawer:function(){c&&z?O.close():y(!1),C(null)}}},i.createElement(E,(0,a.Z)({ref:T},b("page-header-root")),i.createElement(G,(0,a.Z)({},b("page-header-container"),{fullWidth:n,ref:P}),(t||r)&&i.createElement(A,(0,a.Z)({},h,{extraDrawerContent:g,topMenuItems:t,bottomMenuItems:r,drawerSelection:x,setDrawerSelection:C})),i.createElement(H,h),t?i.createElement(V,b("page-header-content"),i.createElement(q,b("page-header-toolbars"),i.createElement(W,{ref:M},i.createElement(u.NavMenu,(0,a.Z)({},h,{variant:"inverted",position:"end",items:t,headerHeight:R,"aria-label":"Main Menu"},b("page-header-top-nav-menu"))))),l&&i.createElement(m.MediaQuery,{largerThan:"$lg"},i.createElement($,b("page-header-vertical-rule"))),l):l),r&&i.createElement(W,null,i.createElement(u.NavMenu,(0,a.Z)({},h,{position:"start",items:r,headerHeight:null==S?void 0:S.height,maxNavWidth:1248,"aria-label":"Primary Menu"},b("page-header-bottom-nav-menu"))))))};_.displayName="@abyss/web/ui/PageHeader",_.propTypes={extraDrawerContent:l().node,logo:l().node,logoRedirect:l().string,model:l().string,hideLogo:l().bool,fullWidth:l().bool,logoTitle:l().node,bottomMenuItems:l().arrayOf(l().shape({title:l().node.isRequired,href:l().string,content:l().node})),topMenuItems:l().arrayOf(l().shape({title:l().node.isRequired,href:l().string,content:l().node})),children:l().node},_.defaultProps={extraDrawerContent:null,fullWidth:!1,hideLogo:!1,model:null,logo:null,logoRedirect:null,logoTitle:null,bottomMenuItems:null,topMenuItems:null,children:null};var Z=["space","children"],X=(0,c.styled)("div",{static:{display:"flex",marginLeft:"auto"},dynamic:function(e){return{"> *:not(first-child)":{paddingLeft:e.cssProps.space}}}}),Y=function(e){var n=e.space,t=e.children,r=(0,o.Z)(e,Z),l=(0,p.O)(r);return i.createElement(X,(0,a.Z)({},r,l("page-header-toolbar-root"),{cssProps:{space:n}}),t)};Y.displayName="@abyss/web/ui/PageHeader.Toolbar",Y.propTypes={space:l().number,children:l().node},Y.defaultProps={space:0,children:null},_.Toolbar=Y},95653:(e,n,t)=>{"use strict";t.r(n),t.d(n,{Portal:()=>u});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(28316),d=t(90678),p=["containerRef","style"],c=(0,d.styled)("div",{position:"absolute",top:0,left:0,zIndex:2147483647}),u=(0,i.forwardRef)((function(e,n){var t,r,l=e.containerRef,d=(e.style,(0,o.Z)(e,p)),u=null!=(t=null==l?void 0:l.current)?t:null==(r=document)?void 0:r.body,m=(0,i.useState)({})[1];return(0,i.useLayoutEffect)((function(){m({})}),[]),u?s.createPortal(i.createElement(c,(0,a.Z)({},d,{ref:n})),u):null}));u.displayName="Portal",u.propTypes={containerRef:l().shape({current:l().node}),style:l().shape({})},u.defaultProps={style:{},containerRef:null}},89549:(e,n,t)=>{"use strict";t.r(n),t.d(n,{SearchInput:()=>G});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(53674),d=t(70506),p=t(36181),c=t(93766),u=t(23075),m=t(90678),g=["isFocused","labelKey","itemProps","currentItem","customRender","uniqueStorageId","showLocalStorage","index","isSelected"],h=["onClick"],b=(0,m.styled)("li",{display:"flex",alignItems:"center",padding:"$sm",fontSize:"$sm",fontFamily:"$primary",cursor:"pointer",scrollMargin:"$sm",color:"$gray8","&:focus-visible":{outline:"none",boxShadow:"none"},variants:{isSelected:{true:{backgroundColor:"$selectedOption",color:"$interactive1","&:hover":{backgroundColor:"$info2"}}},isFocused:{true:{backgroundColor:"$gray4"}},isDisabled:{true:{color:"$gray5",cursor:"not-allowed","&:hover":{backgroundColor:"$gray3"}}}},compoundVariants:[{isSelected:!0,isFocused:!0,css:{backgroundColor:"$gray4","&:hover":{backgroundColor:"$gray4"}}},{isFocused:!0,isDisabled:!0,css:{backgroundColor:"$gray3"}}]}),v=(0,m.styled)("div",{display:"flex",alignItems:"center",width:"100%",justifyContent:"space-between",span:{marginLeft:"$xs"}}),k=(0,m.styled)(c.IconMaterial,{marginRight:"10px",variants:{isDisabled:{true:{fill:"$gray5 !important"}}}}),f=(0,m.styled)("div",{display:"flex",justifyContent:"space-between",width:"100%"}),y=(0,m.styled)("button",{display:"flex",alignItems:"center",width:"100%"}),w=function(e){var n=e.isFocused,t=e.labelKey,r=e.itemProps,l=e.currentItem,s=e.customRender,d=e.uniqueStorageId,p=e.showLocalStorage,c=(e.index,e.isSelected,(0,o.Z)(e,g)),m=(0,u.O)(c),w=r.onClick,x=(0,o.Z)(r,h),C=l[t],N=p&&d,T=!(null==l||!l.isDisabled);return i.createElement(b,(0,a.Z)({},m("search-input-option"),x,{onClick:N||T?null:w,onMouseDown:function(e){e.stopPropagation()},isFocused:n,isDisabled:T,"aria-disabled":T}),N?i.createElement(f,m("search-input-local-storage-option-container"),i.createElement(y,{type:"button",onClick:w},i.createElement(k,(0,a.Z)({},m("search-input-option-icon"),{icon:"history",color:"$interactive2",title:"Recent Search",isDisabled:T})),i.createElement(v,m("search-input-option-content"),s?s(l):C))):i.createElement(i.Fragment,null,i.createElement(k,(0,a.Z)({icon:"search",color:"$interactive1",isDisabled:T},m("search-input-option-icon"))),i.createElement(v,m("search-input-option-content"),s?s(l):C)))};w.propTypes={isFocused:l().bool.isRequired,labelKey:l().string.isRequired,isSelected:l().bool,uniqueStorageId:l().string,itemProps:l().shape({onClick:l().func}).isRequired,currentItem:l().shape({label:l().string,value:l().string,isDisabled:l().bool}).isRequired,customRender:l().func,index:l().number.isRequired,showLocalStorage:l().bool.isRequired},w.defaultProps={isSelected:!1,customRender:null,uniqueStorageId:null};var x=t(5498),C=t(31431),N=["height","items","isOpen","value","getItemProps","menuProps","uniqueStorageId","showLocalStorage","valueKey","labelKey","activeIndex","error","customRender","placedSide","isLoading"],T=(0,m.styled)("ul",{static:{display:"flex",flexDirection:"column",zIndex:1e3,backgroundColor:"$white",width:"100%",left:0,right:0,maxHeight:190,overflowY:"auto",variants:{isOpen:{true:{border:"1px solid $gray3",borderRadius:"0px 0px 4px 4px",borderColor:"$interactive1"}},error:{true:{borderColor:"$error1"}},placedSide:{},rounded:{}},compoundVariants:[{isOpen:!0,placedSide:"bottom",css:{borderRadius:"0px 0px 4px 4px",borderTop:"none"}},{isOpen:!0,rounded:!0,placedSide:"bottom",css:{borderRadius:"0px 0px 1rem 1rem"}},{isOpen:!0,placedSide:"top",css:{borderRadius:"4px 4px 0px 0px",borderBottom:"none"}},{isOpen:!0,rounded:!0,placedSide:"top",css:{borderRadius:"1rem 1rem 0px 0px"}},{isOpen:!0,error:!0,css:{borderColor:"$error1"}}]},dynamic:function(e){var n,t=e.cssProps.height;return{top:(n=t,"string"!=typeof n||n.endsWith("%")?n:parseInt(n,10))}}}),S=(0,m.styled)("li",{margin:"$xs",padding:"$xs $sm",textAlign:"center",color:"$gray5"}),D=(0,m.styled)("li",{display:"flex",alignItems:"center",cursor:"default",padding:"$sm",fontSize:"$sm",fontFamily:"$primary",fontWeight:"$bold",scrollMargin:"$sm",color:"$black",background:"$gray2"}),I=function(e){var n=e.height,t=e.items,r=e.isOpen,l=(e.value,e.getItemProps),s=e.menuProps,d=e.uniqueStorageId,p=e.showLocalStorage,c=e.valueKey,m=e.labelKey,g=e.activeIndex,h=e.error,b=e.customRender,v=e.placedSide,k=e.isLoading,f=(0,o.Z)(e,N),y=(0,u.O)(f),I=(0,x.S)().visuallyHiddenProps;return i.createElement(i.Fragment,null,i.createElement(T,(0,a.Z)({},y("search-input-option-list"),s,{role:"listbox",isOpen:r,error:h,cssProps:{height:n},placedSide:v}),r&&(k?i.createElement(S,y("search-input-loading-container"),i.createElement(C.LoadingSpinner,(0,a.Z)({isLoading:k,ariaLoadingLabel:"Loading search List Options",size:"$sm"},y("search-input-loading-spinner")))):t.length?t.map((function(e,n){var t=null!=e&&e.item?e.item:e;if(t.section)return i.createElement(D,(0,a.Z)({key:t.section+"_"+n},l({item:e,index:n,disabled:!0}),{"aria-hidden":"true"},y("search-input-section")),b?b(t):t.section);var o=g===n,r=Object.assign({isFocused:o,currentItem:t,index:n},f);return i.createElement(w,(0,a.Z)({itemProps:l({item:e,index:n}),showLocalStorage:p,item:e,uniqueStorageId:d,customRender:b,key:t[c]+"_"+n,labelKey:m},r))})):i.createElement(S,y("search-input-no-options"),"No Options"))),i.createElement("span",(0,a.Z)({},I,{role:"status","aria-atomic":"true"}),r&&t.length&&t.length+" results found"))};I.propTypes={model:l().string,listId:l().string,height:l().oneOfType([l().string,l().number]),value:l().oneOfType([l().string,l().number,l().arrayOf(l().number),l().arrayOf(l().string)]),items:l().arrayOf(l().shape({})),searchProps:l().shape({}),isOpen:l().bool,error:l().bool,isSearchable:l().bool,labelId:l().string,placedSide:l().string,onSelection:l().func,labelKey:l().string.isRequired,valueKey:l().string.isRequired,getItemProps:l().func.isRequired,menuProps:l().shape({}).isRequired,customRender:l().func,activeIndex:l().number,setActiveIndex:l().func,uniqueStorageId:l().string,showLocalStorage:l().bool,isLoading:l().bool},I.defaultProps={model:null,showLocalStorage:!1,listId:null,height:null,items:null,value:null,isOpen:!1,error:!1,isSearchable:!1,uniqueStorageId:null,searchProps:{},labelId:null,placedSide:"bottom",onSelection:null,activeIndex:null,setActiveIndex:null,customRender:null,isLoading:!1};var P=t(94173),L=t(29438),B=t(83133),M=["rootProps","labelProps","inputProps","searchButtonProps","clearProps","descriptorProps","onClick","state","children","inputLeftElement","inputRightElement"],A=(0,m.styled)(L.FormInput.Wrapper,{static:{position:"relative",display:"inline-block",width:"100%",minWidth:"225px",height:"40px"},dynamic:function(e){var n=e.cssProps,t=n.size;return{width:n.width||t}}}),F=(0,m.styled)("div",{position:"relative",borderRadius:"4px",width:"100%",variants:{rounded:{true:{borderRadius:"50px"}}}}),R=(0,m.styled)(L.FormInput,{variants:{isOpen:{true:{"&:focus-visible":{outline:"none !important",boxShadow:"none !important"},"&:focus":{outline:"none !important",boxShadow:"none !important"},borderColor:"$interactive1"}},error:{true:{borderColor:"$error1"}},placedSide:{},rounded:{true:{borderRadius:"50px"}}},compoundVariants:[{isOpen:!0,placedSide:"bottom",css:{paddingBottom:"1px",borderRadius:"4px 4px 0px 0px",borderBottom:"none"}},{isOpen:!0,rounded:!0,placedSide:"bottom",css:{borderRadius:"1rem 1rem 0px 0px"}},{isOpen:!0,placedSide:"top",css:{paddingTop:"1px",borderRadius:"0px 0px 4px 4px",borderTop:"none"}},{isOpen:!0,rounded:!0,placedSide:"top",css:{borderRadius:"0px 0px 1rem 1rem"}},{isOpen:!0,error:!0,css:{borderColor:"$error1"}}]}),j=(0,m.styled)(B.Focusable,{padding:0,borderRadius:4,display:"flex",border:"none",background:"transparent",alignItems:"center",justifyContent:"center",width:"35px",height:"100%",variants:{isDisabled:{true:{cursor:"not-allowed"}}}}),O=function(e){var n=e.rootProps,t=e.labelProps,r=e.inputProps,l=e.searchButtonProps,s=e.clearProps,d=e.descriptorProps,p=(e.onClick,e.state),m=e.children,g=e.inputLeftElement,h=e.inputRightElement,b=(0,o.Z)(e,M),v=(0,u.O)(b),k=p.hideLabel,f=p.showClear,y=p.label,w=p.width,x=p.isLoading,C=p.rounded;return i.createElement(A,(0,a.Z)({cssProps:{width:w}},v("search-input-root")),i.createElement(L.FormInput.Label,(0,a.Z)({},t,{hideLabel:k},v("search-input-label")),y),i.createElement(F,(0,a.Z)({},n,v("search-input-input-container")),i.createElement(R,(0,a.Z)({},v("search-input-input"),r)),i.createElement(L.FormInput.ElementWrapper,(0,a.Z)({orientation:"left",rounded:C},v("search-input-left-element-wrapper")),i.createElement(L.FormInput.Element,v("search-input-left-element"),g)),i.createElement(L.FormInput.ElementWrapper,(0,a.Z)({},v("search-input-right-element-wrapper"),{rounded:C}),f&&!x&&i.createElement(L.FormInput.Clear,(0,a.Z)({},v("search-input-clear"),s)),i.createElement(L.FormInput.Element,v("search-input-right-element"),h),i.createElement(j,(0,a.Z)({},l,v("search-input-icon-container")),i.createElement(c.IconMaterial,(0,a.Z)({icon:"search",title:"Search",color:r.disabled?"$gray5":"$interactive1"},v("search-input-icon"))))),m),i.createElement(L.FormInput.Descriptors,(0,a.Z)({},d,v("search-input-descriptors"))))};O.propTypes={children:l().node.isRequired,onClick:l().func,rootProps:l().shape({}).isRequired,labelProps:l().shape({}).isRequired,inputProps:l().shape({disabled:l().bool}).isRequired,clearProps:l().shape({}).isRequired,searchButtonProps:l().shape({}).isRequired,descriptorProps:l().shape({}).isRequired,state:l().shape({isOpen:l().bool,isClearable:l().bool,isDisabled:l().bool,isLoading:l().bool,showClear:l().bool,hideLabel:l().bool,label:l().string,multiLabel:l().string,height:l().oneOfType([l().string,l().number]),width:l().oneOfType([l().string,l().number]),rounded:l().bool,selectedItems:l().oneOfType([l().arrayOf(l().number),l().arrayOf(l().string)]),selectedItem:l().shape({})}).isRequired,inputLeftElement:l().node,inputRightElement:l().node},O.defaultProps={onClick:null,inputLeftElement:null,inputRightElement:null};var z=t(95653),H=t(68279),U=["enableOutsideScroll"],E=["optionProps","popperProps"],G=function(e){var n=e.enableOutsideScroll,t=(0,o.Z)(e,U),r=(0,i.useContext)(P.t).modalRef,l=(0,p.useSearchInput)(Object.assign({},t)),c=l.optionProps,u=l.popperProps,m=(0,o.Z)(l,E),g=m.state.isOpen,h=u.popperRef,b=u.popperStyles,v=u.placedSide;return i.createElement(O,(0,a.Z)({},t,m,c),g&&i.createElement(d.Z,{enabled:!n},i.createElement(z.Portal,{containerRef:r},i.createElement(H.ThemeProvider,null,i.createElement(s.XB,null,i.createElement("div",{style:b,ref:h},i.createElement(I,(0,a.Z)({},t,c,{placedSide:v}))))))))};G.displayName="@abyss/web/ui/SearchInput",G.propTypes={label:l().string.isRequired,onSearch:l().func.isRequired,onClickSearchButton:l().func,placeholder:l().string,isDisabled:l().bool,isClearable:l().bool,debounceTime:l().number,isLoading:l().bool,value:l().oneOfType([l().string,l().shape({})]),validators:l().shape({}),onClick:l().func,onChange:l().func,onInputChange:l().func,customRender:l().func,customFilter:l().func,apiFiltering:l().func,resultLimit:l().number,uniqueStorageId:l().string,onClear:l().func,onFocus:l().func,onKeyDown:l().func,onBlur:l().func,onPaste:l().func,model:l().string,valueKey:l().string,labelKey:l().string,width:l().oneOfType([l().string,l().number]),height:l().oneOfType([l().string,l().number]),errorMessage:l().string,subText:l().string,descriptorsDisplay:l().oneOf(["row","column"]),hideLabel:l().bool,options:l().arrayOf(l().shape({})),fuseConfig:l().shape({}),keys:l().arrayOf(l().string),enableOutsideScroll:l().bool,rounded:l().bool,inputLeftElement:l().node,inputRightElement:l().node,openOnFocus:l().bool},G.defaultProps={placeholder:null,debounceTime:0,isDisabled:!1,isClearable:!0,isLoading:!1,value:null,model:null,valueKey:"value",labelKey:"label",onChange:null,onInputChange:null,customRender:null,customFilter:null,apiFiltering:null,uniqueStorageId:null,resultLimit:6,onClear:null,onFocus:null,onClick:null,onKeyDown:null,onBlur:null,onPaste:null,width:"100%",height:"38px",errorMessage:null,hideLabel:!1,validators:{},subText:null,descriptorsDisplay:"row",options:[],fuseConfig:{},keys:["value","label"],onClickSearchButton:null,enableOutsideScroll:!1,rounded:!1,inputLeftElement:null,inputRightElement:null,openOnFocus:!1}},88669:(e,n,t)=>{"use strict";t.r(n),t.d(n,{Slider:()=>B});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(37336),d=t(90678),p=t(23075),c=t(98005),u=t(54878),m=t(81534),g=t(83133),h=t(37709),b=["state","trackRef","index","popoverAlwaysOn","duration","isDisabled","outputProps","customPopoverLabel","disablePopover","onBlur","onFocus"],v=(0,d.styled)(g.Focusable,{cursor:"pointer",width:25,height:25,borderRadius:"50%",border:"solid 2px $primary1",borderColor:"$primary1",backgroundColor:"$white","&::-webkit-slider-thumb":{"-webkit-appearance":"none"},variants:{isDisabled:{true:{cursor:"default",backgroundColor:"$gray3",color:"$gray5",borderColor:"$gray5",border:"solid 2px $gray5","&:hover":{backgroundColor:"$gray3"}}},isInvalid:{true:{borderColor:"$error1"}}}}),k=(0,d.styled)("div",{static:{position:"absolute",top:13,zIndex:1},dynamic:function(e){return{left:e.cssProps.outputValuePercent+"%"}}}),f=(0,d.styled)("div",{color:"$white",transform:"rotate(45deg)",fontSize:"$sm",variants:{isDisabled:{true:{color:"$black"}}}}),y=(0,d.styled)("div",{static:{justifyContent:"center",display:"flex",alignItems:"center",lineHeight:1.2,padding:"0px",width:38,height:38,borderRadius:"50% 50% 50% 0px",transformOrigin:"left bottom",transform:"translate(50%, -100%) rotate(-45deg) scale(0)",transitionProperty:"transform",transitionTimingFunction:"cubic-bezier(0.4, 0, 0.2, 1) 0ms",position:"absolute",bottom:25,backgroundColor:"$primary1",textAlign:"center",whiteSpace:"nowrap",top:-13,right:-19,zIndex:1001,variants:{isOpen:{true:{transform:"translate(50%, -100%) rotate(-45deg) scale(1)"}},isDisabled:{true:{cursor:"default",backgroundColor:"$gray3",color:"$gray5",borderColor:"$gray5",border:"solid 2px $gray5","&:hover":{backgroundColor:"$gray3",textColor:"$black"}}},isInvalid:{true:{backgroundColor:"$error1"}}}},dynamic:function(e){return{transitionDuration:e.cssProps.duration+"ms"}}}),w=function(e){var n=e.state,t=e.trackRef,r=e.index,l=e.popoverAlwaysOn,s=e.duration,d=e.isDisabled,g=e.outputProps,w=e.customPopoverLabel,x=e.disablePopover,C=e.onBlur,N=e.onFocus,T=(0,o.Z)(e,b),S=(0,p.O)(T),D=(0,u.useHover)(),I=D[0],P=D[1],L=(0,i.useState)(!1),B=L[0],M=L[1],A=null==n?void 0:n.isThumbDragging(r),F=(0,m.useSliderThumb)(Object.assign({},T,{state:n,index:r,trackRef:t})),R=F.thumbProps,j=F.inputProps,O=F.state.errorMessage,z=w?w(null==n?void 0:n.getThumbValue(r),null==n?void 0:n.getThumbPercent(r)):null==n?void 0:n.getThumbValue(r),H=100*n.getThumbPercent(r);return i.createElement(i.Fragment,null,i.createElement(k,(0,a.Z)({},S("slider-thumb-root"),{onClick:function(e){return e.stopPropagation()},cssProps:{outputValuePercent:H}},P),!x&&i.createElement(c.ZP,{in:l||I||A||B,timeout:s},(function(e){return i.createElement(y,(0,a.Z)({},S("slider-thumb-popover"),g,{isDisabled:d,isInvalid:!!O,isOpen:"entered"===e,cssProps:{duration:s}}),i.createElement(f,(0,a.Z)({},S("slider-thumb-label"),{isDisabled:d}),z))})),i.createElement(v,(0,a.Z)({},S("slider-thumb"),R,{onFocus:function(e){N&&N(e),M(!0)},onBlur:function(e){C&&C(e),M(!1)},isDisabled:d,isInvalid:!!O}),i.createElement(h.VisuallyHidden,null,i.createElement("input",j)))))};w.propTypes={children:l().node,customPopoverLabel:l().func,minValue:l().number,maxValue:l().number,duration:l().number,index:l().number,step:l().number,popoverAlwaysOn:l().bool,isDisabled:l().bool,disablePopover:l().bool,outputProps:l().shape({}),state:l().shape({getThumbPercent:l().func,isThumbDragging:l().func,getThumbValue:l().func,setThumbValue:l().func}),trackRef:l().shape({}),onBlur:l().func,onFocus:l().func},w.defaultProps={children:null,customPopoverLabel:null,minValue:null,maxValue:null,step:null,popoverAlwaysOn:null,index:null,isDisabled:null,state:null,trackRef:null,disablePopover:!1,duration:100,outputProps:{},onBlur:null,onFocus:null};var x=t(29438),C=["showMarks","label","isRange","minValue","maxValue","isDisabled","step","model","customMarkLabel","hideLabel"],N=(0,d.styled)(x.FormInput.Wrapper,{position:"relative",display:"flex",flexDirection:"column",alignItems:"center",width:"100%",touchAction:"none",marginBottom:"$lg"}),T=(0,d.styled)("div",{static:{display:"flex",position:"absolute",backgroundColor:"$primary1",height:"8px",borderRadius:6,variants:{isDisabled:{true:{backgroundColor:"$gray5",color:"$gray7",borderColor:"$gray7",cursor:"default"}},isInvalid:{true:{backgroundColor:"$error1"}}}},dynamic:function(e){var n=e.cssProps;return{width:n.width+"%",left:n.left+"%"}}}),S=(0,d.styled)("div",{position:"relative",backgroundColor:"$gray4",height:"8px",borderRadius:6,top:"10px",width:"100%"}),D=(0,d.styled)("div",{position:"relative",height:30,width:"100%"}),I=(0,d.styled)("div",{position:"absolute",width:"8px",height:"8px",backgroundColor:"$white",border:"1px solid $black",marginTop:"0px",borderRadius:"50%",zIndex:1}),P=(0,d.styled)("div",{static:{display:"flex",flexDirection:"column",position:"absolute",alignItems:"center",justifyContent:"center",top:"4px"},dynamic:function(e){var n=e.cssProps;return{left:n.value/(n.maxValue-n.minValue)*100+"%"}}}),L=(0,d.styled)("p",{position:"absolute",top:"10px"}),B=function(e){var n=e.showMarks,t=e.label,r=e.isRange,l=e.minValue,d=e.maxValue,c=e.isDisabled,u=e.step,m=e.model,g=e.customMarkLabel,h=e.hideLabel,b=(0,o.Z)(e,C),v=(0,s.useSlider)(Object.assign({model:m,label:t,step:u,maxValue:d,minValue:l,isDisabled:c,isRange:r},b)),k=v.labelProps,f=v.trackProps,y=v.outputProps,B=v.groupProps,M=v.descriptorProps,A=v.sliderState,F=v.state,R=F.trackRef,j=F.errorMessage,O=(0,p.O)(b),z=r?[0,1]:[0],H=100*A.getThumbPercent(0),U=r&&100*A.getThumbPercent(1),E=r?Math.abs(U-H):H;return i.createElement(N,(0,a.Z)({"aria-hidden":c},B,O("slider-root")),i.createElement(x.FormInput.Label,(0,a.Z)({},O("slider-label"),{hideLabel:h},k),t),i.createElement(D,(0,a.Z)({},O("slider-track-wrapper"),f,{ref:R}),i.createElement(S,O("slider-track"),i.createElement(T,(0,a.Z)({},O("slider-track-filler"),{isDisabled:c,isInvalid:!!j,cssProps:{left:r&&H,width:E}})),n&&Array.from(Array(d-l+1).keys()).map((function(e){return e%u==0?i.createElement(P,(0,a.Z)({},O("slider-track-marks"),{key:"fragment_"+e,cssProps:{value:e,maxValue:d,minValue:l}}),i.createElement(I,null),i.createElement(L,O("slider-track-mark-text"),g?g(Math.round(e+l)):Math.round(e+l))):null}))),z.map((function(e){return i.createElement(w,(0,a.Z)({},b,{isDisabled:c,key:e,maxValue:d,minValue:l,index:e,state:A,trackRef:R,model:m,outputProps:y,isRange:r}))}))),i.createElement(x.FormInput.Descriptors,(0,a.Z)({},O("slider-descriptor"),M)))};B.displayName="@abyss/web/ui/Slider",B.propTypes={children:l().node,customPopoverLabel:l().func,customMarkLabel:l().func,isRange:l().bool,hideLabel:l().bool,minValue:l().number,maxValue:l().number,step:l().number,label:l().string.isRequired,model:l().string,errorMessage:l().string,popoverAlwaysOn:l().bool,disablePopover:l().bool,isDisabled:l().bool,validation:l().shape({}),showMarks:l().bool,subText:l().string,descriptorsDisplay:l().oneOf(["row","column"]),onBlur:l().func,onFocus:l().func},B.defaultProps={children:null,model:null,customPopoverLabel:null,customMarkLabel:null,validation:null,errorMessage:null,isRange:!1,hideLabel:!1,minValue:0,maxValue:100,step:1,popoverAlwaysOn:!1,disablePopover:!1,isDisabled:!1,showMarks:!1,subText:null,descriptorsDisplay:"row",onBlur:null,onFocus:null}},74225:(e,n,t)=>{"use strict";t.r(n),t.d(n,{Text:()=>m});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(90678),d=t(23075),p=t(76040),c=["size","sizes","color","fontWeight","transform","lineHeights"],u=(0,s.styled)("span",{dynamic:function(e){var n=e.cssProps,t=n.size,a=n.textTransform,o=n.fontWeight;return{fontSize:t,textTransform:a,lineHeight:n.lineHeight,fontWeight:o,color:n.color}}}),m=function(e){var n=e.size,t=e.sizes,r=e.color,l=e.fontWeight,s=e.transform,m=e.lineHeights,g=(0,o.Z)(e,c),h=(0,d.O)(g),b=(0,p.f)({size:n,sizes:t,color:r}),v=m[String(n).replace("$","")]||1.2*b.size+"px";return i.createElement(u,(0,a.Z)({},g,h("text-root"),{cssProps:Object.assign({},b,{textTransform:s,fontWeight:l,lineHeight:v})}))};m.displayName="@abyss/web/ui/Text",m.propTypes={children:l().node,color:l().string,transform:l().string,fontWeight:l().string,size:l().oneOfType([l().string,l().number]),sizes:l().shape({}),lineHeights:l().shape({})},m.defaultProps={children:null,color:"$gray8",transform:null,fontWeight:null,size:"$md",sizes:{xs:"12.64px",sm:"14px",md:"16px",lg:"18px"},lineHeights:{xs:"16px",sm:"16px",md:"20px",lg:"24px"}}},68279:(e,n,t)=>{"use strict";t.r(n),t.d(n,{ThemeProvider:()=>m});var a=t(7896),o=t(31461),i=t(2784),r=t(83667),l=t.n(r),s=t(65483),d=t(23075),p=t(29475),c=["theme","includeBaseCss","children"],u=(0,p.createTheme)("abyss"),m=function(e){var n,t,r,l=e.theme,p=e.includeBaseCss,m=e.children,g=(0,o.Z)(e,c),h=(0,d.O)(g)("theme-provider-root"),b=(0,i.useContext)(s.ThemeContext);return b&&(r=b,t=b.themeClassName),!l&&b||(n=l||u),(0,i.useEffect)((function(){n&&(n.themeBaseStyles&&p&&n.themeBaseStyles(),n.themeVariantCss?n.themeVariantFonts&&n.themeVariantFonts():n.themeVariantStyles&&n.themeVariantStyles())}),[]),n&&(n.themeTokens&&(t=n.themeTokens.className),n.themeVariantCss&&(t=n.themeVariantCss+" "+t),n.theme&&(r=Object.assign({},n.theme,{themeClassName:t}))),i.createElement(s.ThemeContext.Provider,{value:r},i.createElement("div",(0,a.Z)({},g,{className:h.className+" "+t}),m))};m.displayName="@abyss/web/ui/ThemeProvider",m.propTypes={children:l().node,theme:l().shape({theme:l().shape({}),themeTokens:l().shape({className:l().string}),themeBaseStyles:l().func,themeVariantFonts:l().func,themeVariantCss:l().func,themeVariantStyles:l().func}),includeBaseCss:l().bool},m.defaultProps={children:null,theme:null,includeBaseCss:!0}},37709:(e,n,t)=>{"use strict";t.r(n),t.d(n,{VisuallyHidden:()=>r});var a=t(7896),o=t(2784),i=(0,t(90678).styled)("div",{border:0,clip:"rect(0 0 0 0)",clipPath:"inset(50%)",height:1,margin:"0 -1px -1px 0",overflow:"hidden",padding:0,position:"absolute",width:1,whiteSpace:"nowrap"}),r=function(e){return o.createElement(i,(0,a.Z)({},e,{"data-visually-hidden":!0}))}},5842:(e,n,t)=>{"use strict";t.d(n,{Q:()=>s});var a=t(2784),o=t(45697),i=t.n(o),r=t(99456),l=t(63542),s=function(e){var n=e.fullWidth,t=function(e){(0,l.event)("EXIT_LINK",{linkText:e})},o=[{label:"Github",href:"https://github.com/uhc-tech/abyss",onClick:function(){t("Github")}},{label:"Tech Landscape",href:"https://techlandscape.uhg.com/product_id=1923",onClick:function(){t("Tech Landscape")}}];return a.createElement(r.PageFooter,{bottomFixed:!0,subFooterLinks:o,subFooterTitle:"UnitedHealth Group. All rights reserved.",fullWidth:n,css:n&&{"abyss-page-footer-fixed":{padding:"0 $md"}}},a.createElement(r.PageFooter.Section,{title:"Documentation"},a.createElement(r.PageFooter.Link,{href:"/about/"},"About"),a.createElement(r.PageFooter.Link,{href:"/developers/abyss-contributors/"},"Contributing")),a.createElement(r.PageFooter.Section,{title:"Community"},a.createElement(r.PageFooter.Link,{href:"https://teams.microsoft.com/l/team/19%3a56d97ff66adf46dfbc733a3351ba3b9a%40thread.tacv2/conversations?groupId=e073e644-8517-49d9-aaed-9b8557978369&tenantId=db05faca-c82a-4b9d-b9c5-0f64b6755421",onClick:function(){t("Teams Channel")}},"Teams Channel"),a.createElement(r.PageFooter.Link,{href:"https://teams.microsoft.com/l/meetup-join/19%3ameeting_NGM2MmM3MjAtZjk3My00YjEyLTk2YzQtZDNlZTMzYjUzODMy%40thread.v2/0?context=%7b%22Tid%22%3a%22db05faca-c82a-4b9d-b9c5-0f64b6755421%22%2c%22Oid%22%3a%22d7b5ebaf-d69e-4178-be5c-075c44184f37%22%7d",onClick:function(){t("Office Hours")}},"Office Hours")),a.createElement(r.PageFooter.Section,{title:"Support"},a.createElement(r.PageFooter.Link,{href:"/releases/"},"Release Notes"),a.createElement(r.PageFooter.Link,{href:"/contact-us/"},"Contact Us")))};s.propTypes={fullWidth:i().bool},s.defaultProps={fullWidth:!1}},94151:(e,n,t)=>{"use strict";t.d(n,{l:()=>O});var a=t(2784),o=t(45697),i=t.n(o),r=t(81800),l=t(90678),s=t(73657),d=t(89549),p=t(74225),c=t(7267),u=t(37614),m=t(60068),g={overview:t(79406),"foundations/optum":t(26566),"foundations/uhc":t(74275),"foundations/uhg":t(87100),designers:t(51631),developers:t(38662),"web/ui":t(64090),"web/hooks":t(42472)},h=[];Object.keys(g).forEach((function(e){var n=g[e];n.keys().forEach((function(e){var t=n(e),a=t.metadata,o=t.frontMatter;h.push({metadata:a,frontMatter:o})}))}));var b=h,v=(0,l.styled)("div",{display:"flex",flexDirection:"column",width:"100%"}),k=function(){var e=(0,u.Z)(),n=(0,a.useContext)(m.F).theme.themeName,t=e.siteConfig.baseUrl,o=a.useMemo((function(){return function(e,n){return b.map((function(t){var a,o,i,r=t.metadata,l=(i=r.sourceDirName)[0].toUpperCase()+i.slice(1).toLowerCase();return null==r||null==(a=r.id)||!a.includes("foundations")||null!=r&&null!=(o=r.id)&&o.includes(n)?{id:r.id,label:r.title,category:r.frontMatter.category||l,value:r.title,description:r.description,route:""+e+r.slug}:null})).filter((function(e){return null!=e}))}(t.replace(/\/+$/,""),n)}),[t]),i=(0,c.k6)(),r=(0,a.useState)(""),l=r[0],s=r[1];return a.createElement(d.SearchInput,{label:"Search Abyss Documentation",hideLabel:!0,placeholder:"Search...",value:l,onChange:s,rounded:!0,options:o||[],isClearable:!0,customRender:function(e){return a.createElement(v,null,a.createElement(p.Text,{fontWeight:"$bold"},e.label),a.createElement(p.Text,{size:"$sm",color:"$gray6"},e.category))},onSearch:function(e){null!=e&&e.route&&i.push(e.route)},height:38,keys:["value","category","title"]})},f=t(7896),y=t(89817),w=t(31348),x=t(48),C=t(93766),N=t(87487),T=t(63542),S=t(59522),D={uhc:"UHC",optum:"Optum",uhg:"UHG"},I={height:"36px",padding:"0 18px",borderWidth:2,borderBottomLeftRadius:"50px",borderBottomRightRadius:"50px",borderTopLeftRadius:"50px",borderTopRightRadius:"50px",flexShrink:0,minWidth:80,fontWeight:"$bold"},P=(0,l.styled)("span"),L=function(){var e=(0,a.useContext)(m.F).theme,n=e.themeName,t=e.colors.accent1,o="";"undefined"!=typeof window&&(o=D[n]);var i=function(e){var t=window.location,a=t.hostname,i=t.href;if(function(e){(0,T.event)("THEME_SWITCHER",{theme:e})}(e),e!==n&&!a.includes("localhost")){var r=new RegExp(o,"gi"),l=i.replace(r,e);window.location.replace(l)}},r=Object.keys(D).map((function(e){var n=null;return o===D[e]&&(n=a.createElement(C.IconMaterial,{icon:"circle",size:8,color:t})),{title:D[e],icon:n,onClick:function(){return i(e)}}}));return a.createElement(S.DropdownMenu,{width:170,outline:!0,css:{"abyss-dropdown-menu-trigger":Object.assign({},I,{borderColor:"$primary1",color:"$primary1",fontSize:"$sm"}),"abyss-dropdown-menu-radio-dot":{backgroundColor:t}},menuItems:r,label:a.createElement("span",null,"Theme:",a.createElement(P,{css:{marginLeft:4,color:"$interactive1"}},o)),after:a.createElement(C.IconMaterial,{icon:"keyboard_arrow_down",color:"$primary1"})})},B=(0,l.styled)("div",{display:"flex",justifyContent:"flex-end",alignItems:"center",marginLeft:"$sm",gap:8}),M=(0,l.styled)(y.Z,{display:"inline-block","&:hover":{textDecoration:"none"},"&:focus-visible":{focusRing:"none",button:{focusRing:"$interactive1"}}}),A=function(){var e={title:"Contact Us","aria-label":"Contact Us",tabIndex:"-1",onClick:function(){(0,T.event)("FEATURE_SUBMISSION_START")},size:"38px"};return a.createElement(B,null,a.createElement(L,null),a.createElement(w.Layout.Group,{alignLayout:"right"},a.createElement(M,{to:"/contact-us"},a.createElement(N.MediaQuery,{largerThan:1001},a.createElement(x.Button,(0,f.Z)({},e,{css:{"abyss-button-root":{fontSize:"$sm"}},after:a.createElement(C.IconMaterial,{icon:"speaker_notes",color:"$primary2",size:24})}),"Contact Us")),a.createElement(N.MediaQuery,{smallerThan:1001},a.createElement(x.Button,(0,f.Z)({},e,{rounded:!0}),a.createElement(C.IconMaterial,{icon:"speaker_notes",color:"$primary2",size:24}))))))},F=(0,l.styled)("div",{padding:"$xs 0",height:"auto",display:"flex",width:"100%",alignItems:"center",boxShadow:"none"}),R=(0,l.styled)("div",{maxWidth:350,flex:1}),j=(0,l.styled)("div",{display:"none",flex:1,"@screen >= $md":{display:"block"}}),O=((0,l.styled)("div",{display:"none",flex:1,"@screen < $md":{display:"block"}}),function(e){var n=e.fullWidth,t=e.hideLogo;return a.createElement(s.PageHeader,{hideLogo:!0,fullWidth:n,css:n&&{"abyss-page-header-root":{padding:"0 $lg"}}},a.createElement(F,{className:"navbar"},!t&&a.createElement(r.Z,{showVersion:!0,className:"navbar__brand",imageClassName:"navbar__logo",titleClassName:"navbar__title"}),a.createElement(j,null,a.createElement(R,null,a.createElement(k,null))),a.createElement(j,null,a.createElement(A,null))))});O.propTypes={fullWidth:i().bool,hideLogo:i().bool},O.defaultProps={fullWidth:!1,hideLogo:!1}},85398:(e,n,t)=>{"use strict";t.r(n),t.d(n,{ExitLink:()=>u});var a=t(7896),o=t(31461),i=t(2784),r=t(45697),l=t.n(r),s=t(62470),d=t(89817),p=t(63542),c=["onClick","children","href"],u=function(e){var n=e.onClick,t=e.children,r=e.href,l=(0,o.Z)(e,c),u=function(e){"_blank"===e.target.target&&(0,p.event)("EXIT_LINK",{linkText:t}),n&&n(e)};return r?i.createElement(d.Z,(0,a.Z)({},l,{to:r,onClick:u})):i.createElement(s.Link,(0,a.Z)({},l,{href:r,onClick:u}))};u.propTypes={children:l().node,onClick:l().func,href:l().string},u.defaultProps={children:null,onClick:null,href:null}},43615:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>q});var a=t(2784),o=t(76646),i=t(90678),r=t(63542),l=t(24771),s=t(5842),d=t(94151),p=t(89817),c=t(54474),u=t(48),m=t(31348),g=t(93766),h=(0,i.keyframes)({"0%":{transform:"translate3d(-40px,0,0)"},"100%":{transform:"translate3d(135px,0,0)"}}),b=(0,i.styled)("div",{position:"relative",height:350,"& > svg:nth-child(1)":{height:"80%","> path":{animationDelay:"-2s",animationDuration:45*.35+"s",fill:"#95EFFC"}},"& > svg:nth-child(2)":{height:"100%","> path":{animationDelay:"-7s",animationDuration:"45s",fill:"#54C7FB"}},"& > svg:nth-child(3)":{height:"60%","> path":{animationDelay:"-6s",animationDuration:"29.25s",fill:"#196DCE"}},"& > svg:nth-child(4)":{height:"40%","> path":{animationDelay:"-5s",animationDuration:"22.5s",fill:"#FFFFFF"}}}),v=(0,i.styled)("svg",{position:"absolute",bottom:0,width:"100%","> path":{animation:h+" 45s cubic-bezier(.55,.5,.45,.5) infinite"}}),k="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z",f=function(){return a.createElement(b,null,a.createElement(v,{viewBox:"0 24 150 28",preserveAspectRatio:"none"},a.createElement("path",{x:"48",y:"0",d:k})),a.createElement(v,{viewBox:"0 24 150 28",preserveAspectRatio:"none"},a.createElement("path",{x:"48",y:"3",d:k})),a.createElement(v,{viewBox:"0 24 150 28",preserveAspectRatio:"none"},a.createElement("path",{x:"48",y:"5",d:k})),a.createElement(v,{viewBox:"0 24 150 28",preserveAspectRatio:"none"},a.createElement("path",{x:"48",y:"7",d:k})))},y=(0,i.styled)(c.Heading,{width:500}),w=(0,i.styled)(p.Z,{display:"inline-block","&:hover":{textDecoration:"none"},"&:focus-visible":{focusRing:"none","> button":{focusRing:"$interactive1"}}}),x=(0,i.styled)("div",{position:"relative",backgroundColor:"$tint2",paddingTop:80,paddingBottom:280}),C=(0,i.styled)("div",{position:"relative",zIndex:1,display:"flex",flexDirection:"column",margin:"0 auto",maxWidth:900,textAlign:"left",padding:"0 $md"}),N=(0,i.styled)("p",{marginTop:"1rem",marginBottom:"1rem",fontSize:"24px",lineHeight:"2rem",maxWidth:700,color:"$primary1"}),T=(0,i.styled)("div",{position:"absolute",overflow:"hidden",bottom:0,width:"100%"}),S=function(){return a.createElement(x,null,a.createElement(C,null,a.createElement(y,{display:1,color:"$primary1"},"Abyss Enterprise Design System"),a.createElement(N,null,"Launch today with the architecture of tomorrow. Abyss provides a robust, customizable, and accessible library of foundational and advanced components, enabling you to design creative wireframes and develop React applications faster than ever."),a.createElement(m.Layout.Group,null,a.createElement(w,{to:"/about"},a.createElement(u.Button,{variant:"outline",tabIndex:"-1"},"About Abyss")),a.createElement(w,{to:"/overview"},a.createElement(u.Button,{tabIndex:"-1",after:a.createElement(g.IconMaterial,{color:"$white",size:"$sm",icon:"arrow_forward",variant:"filled"})},"Get Started")))),a.createElement(T,null,a.createElement(f,null)))},D=t(52750),I=t(3575),P=(0,i.styled)(I.Grid,{marginTop:"50px !important"}),L=(0,i.styled)(D.Card,{maxWidth:"325px",minHeight:336,width:"375px",marginTop:"0px !important",padding:"1rem"}),B=(0,i.styled)("p",{marginTop:"1rem"}),M=function(){return a.createElement(a.Fragment,null,a.createElement(c.Heading,{offset:2},"Explore"),a.createElement(B,null,"A wide range of guides, code demos, and information is provided to help UHG developers with the implementation of web components and to simplify the development of provider portals. The abyss library is constantly growing in depth and breadth so be sure to stay up to date with what's new."),a.createElement(P,null,a.createElement(I.Grid.Col,{span:4},a.createElement(L,null,a.createElement(m.Layout.Group,{space:10},a.createElement(g.IconMaterial,{icon:"anchor",size:36}),a.createElement(c.Heading,{offset:4},"Hooks Library")),a.createElement(B,null,"Abyss comes with more than 15 hooks to manage state and UI to help you build custom components.",a.createElement("br",null),a.createElement("br",null),"All hooks that are used to build Abyss components are exported from @web/hooks package, and since hooks do not depend on components packages, you can use them independently."))),a.createElement(I.Grid.Col,{span:4},a.createElement(L,null,a.createElement(m.Layout.Group,{space:10},a.createElement(g.IconMaterial,{icon:"code",size:36}),a.createElement(c.Heading,{offset:4},"Theming")),a.createElement(B,null,"Extend default theme with brand colors, border radius, space, fonts and many other properties to match your design requirements.",a.createElement("br",null),a.createElement("br",null),"Abyss theme is just an object, you can subscribe to it in any part of application via context."))),a.createElement(I.Grid.Col,{span:4},a.createElement(L,null,a.createElement(m.Layout.Group,{space:10},a.createElement(g.IconMaterial,{icon:"auto_awesome",size:36}),a.createElement(c.Heading,{offset:4},"Component Library")),a.createElement(B,null,"Each abyss component comes with a demonstration of its capabilities as well as guidance on properties, usage, and accessibility.",a.createElement("br",null),a.createElement("br",null),"Abyss core library includes all essential components: inputs, buttons, modals, popovers, data tables, grid, etc.")))))},A=t(88669),F=(0,i.styled)("p",{marginTop:"1rem",marginBottom:"1rem"}),R=(0,i.styled)("div",{display:"flex",flexDirection:"row",justifyContent:"space-between",marginTop:"50px"}),j=(0,i.styled)("div",{width:"45%"}),O=function(){var e=(0,a.useState)(25),n=e[0],t=e[1],o=(0,a.useState)([-2,2]),i=o[0],r=o[1];return a.createElement(a.Fragment,null,a.createElement(c.Heading,{offset:2},"Customization"),a.createElement(F,null,"Abyss branded components can easily be alternated to fit specified branding for a simplified developer experience. These implementations are designed to meet brand and accessibility standards. The customization options allows you to implement an array of visual modifications to components and adapt them to fit almost any design requirements"),a.createElement(R,null,a.createElement(j,null,a.createElement(c.Heading,{offset:4},"Default slider style:"),a.createElement(A.Slider,{value:n,onChange:function(e){return t(e)}})),a.createElement(j,null,a.createElement(c.Heading,{offset:4},"Then add styles and additional props:"),a.createElement(A.Slider,{value:i,onChange:function(e){return r(e)},step:1,minValue:-5,maxValue:5,showMarks:!0,isRange:!0}))))},z=t(85398),H=(0,i.styled)("div",{marginTop:"1rem"}),U=(0,i.styled)("ol",{marginTop:"15px",textIndent:"30px",lineHeight:"2rem",marginBottom:"5rem"}),E=function(){return a.createElement(a.Fragment,null,a.createElement(c.Heading,{offset:2},"Accessibility"),a.createElement(H,null,"Products and web properties need to be accessible to everyone, including those with vision, hearing, cognitive, or motor impairments. Accessible design is everyone's responsibility, from information and user experience design, through to development, and on into help and support.",a.createElement("br",null),a.createElement("br",null),"It is about understanding the users' journeys and proactively anticipating their needs. To make sure products are accessible to everyone, follow the four principles of the"," ",a.createElement(z.ExitLink,{href:"https://www.w3.org/WAI/standards-guidelines/wcag/"},"WCAG Guidelines:"),a.createElement(U,null,a.createElement("li",null,a.createElement("b",null,"Perceivable: "),"It can be perceived by at least one of a person's senses."),a.createElement("li",null,a.createElement("b",null,"Operable: "),"All interactions are operable through a variation of input methods."),a.createElement("li",null,a.createElement("b",null,"Understandable: "),"Information and operation of the interface must be understandable."),a.createElement("li",null,a.createElement("b",null,"Robust: "),"Content can be interpreted by a variety of assistive technologies and withstand changes in these technologies."))))},G=(0,i.styled)("main",{position:"relative",zIndex:1}),$=(0,i.styled)(l.PageBody,{backgroundColor:"$white"}),V=(0,i.styled)("div",{maxWidth:1e3,margin:"0 auto",paddingTop:60,paddingBottom:60,"& + &":{paddingTop:120}}),q=function(){return(0,a.useEffect)((function(){(0,r.event)("HOME_PAGE_LOAD")}),[]),a.createElement(o.Z,{description:"Abyss Enterprise Design System"},a.createElement(d.l,null),a.createElement(G,null,a.createElement(S,null),a.createElement($,null,a.createElement(V,null,a.createElement(M,null)),a.createElement(V,null,a.createElement(O,null)),a.createElement(V,null,a.createElement(E,null)))),a.createElement(s.Q,null))}},81800:(e,n,t)=>{"use strict";t.d(n,{Z:()=>b});var a=t(7896),o=t(31461),i=t(2784),r=t(89817),l=t(90077),s=t(37614),d=t(90678),p=t(4147),c=(0,d.styled)("a",{"&:hover":{textDecoration:"none"}}),u=(0,d.styled)("code",{color:"black",borderWidth:1,borderStyle:"solid",borderColor:"#339af0",background:"#e7f5ff",fontWeight:"$bold",fontSize:14,padding:"2px 5px",borderRadius:4}),m=function(){var e=(0,s.Z)().siteConfig,n="https://"+e.githubHost+"/"+e.organizationName+"/"+e.projectName;return i.createElement(c,{href:n+"/releases",target:"_blank",rel:"noreferrer noopener"},i.createElement(u,null,"v",p.i8))},g=["imageClassName","titleClassName","showVersion"],h=(0,d.styled)("div",{height:40,maxWidth:"230",display:"flex",alignItems:"center",justifyContent:"center",flex:1,"@screen >= $md":{justifyContent:"flex-start",maxWidth:230,paddingRight:30}}),b=function(e){var n=(0,s.Z)(),t=n.siteConfig,d=t.title,p=t.themeConfig.navbar,c=p.title,u=p.logo,b=void 0===u?{src:""}:u,v=n.isClient,k=e.imageClassName,f=e.titleClassName,y=e.showVersion,w=(0,o.Z)(e,g),x=(0,l.Z)(b.href||"/"),C=(0,l.Z)(b.src);return i.createElement(h,null,i.createElement(r.Z,(0,a.Z)({to:x},w,b.target&&{target:b.target}),b.src&&i.createElement("img",{key:v,className:k,src:C,alt:b.alt||c||d}),null!=c&&i.createElement("b",{className:f},c)),y&&i.createElement(m,null))}},74158:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const a=function(){return null}},60068:(e,n,t)=>{"use strict";t.d(n,{F:()=>h,f:()=>b});var a=t(2784),o=t(45697),i=t.n(o),r=t(88077),l=t(68279),s=t(63585),d=t(29475),p=t(56445),c=t(8262),u="uhc";u="abyss"===(0,p.t)().name&&u;var m=(0,d.createTheme)(u),g=(0,d.createTheme)("abyss"),h=(0,a.createContext)(),b=function(e){var n=e.children;return a.createElement(r.Z.Provider,{value:{}},a.createElement(h.Provider,{value:m},a.createElement(l.ThemeProvider,{theme:g},a.createElement(s.OverlayProvider,null,a.createElement(c.LagoonProvider,{app:"abyss",env:"dev"},n)))))};b.propTypes={children:i().node.isRequired}},49468:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a.f});var a=t(60068)},72787:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"design-checklist",title:"Design Checklist",pagination_next:null},d=void 0,p={unversionedId:"designers/design-checklist",id:"designers/design-checklist",isDocsHomePage:!1,title:"Design Checklist",description:"Overview",source:"@site/docs/designers/design-checklist.md",sourceDirName:"designers",slug:"/designers/design-checklist",permalink:"/designers/design-checklist",tags:[],version:"current",frontMatter:{id:"design-checklist",title:"Design Checklist",pagination_next:null},sidebar:"docs",previous:{title:"Design Kit",permalink:"/designers/design-kit"}},c=[{value:"Overview",id:"overview",children:[],level:2},{value:"Figma Setup",id:"figma-setup",children:[{value:"Creating an account",id:"creating-an-account",children:[],level:3}],level:2},{value:"Using the Designer Toolkit",id:"using-the-designer-toolkit",children:[],level:2},{value:"Review Updates",id:"review-updates",children:[],level:2}],u=(a="ExitLink",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Welcome to Abyss! If you\u2019re just starting out designing with Abyss, you\u2019re in the right place. Here\u2019s a checklist of everything you need to get up and running. Abyss design kit is available in Figma through our enterprise account (Optum/UHG)"),(0,r.kt)("h2",{id:"figma-setup"},"Figma Setup"),(0,r.kt)("h3",{id:"creating-an-account"},"Creating an account"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If you do not have a Figma account, visit ",(0,r.kt)(u,{href:"https://www.figma.com",mdxType:"ExitLink"},"Figma.com")," to sign up using your UnitedHealth Group email (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"first.last@optum.com"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"firstlast@uhc.com"),").",(0,r.kt)("br",null),(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ul"},"If you already have a Figma account set up with your UnitedHeath Group email (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"first.last@optum.com"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"first.last@uhc.com"),") and belong to the Optum/UHG Organization, visit ",(0,r.kt)(u,{href:"https://www.figma.com",mdxType:"ExitLink"},"Figma.com")," and sign in.",(0,r.kt)("br",null),(0,r.kt)("br",null)),(0,r.kt)("li",{parentName:"ul"},"Once your account is established you do not need to request edit access in order to join a Figma team or view the Abyss design system\u2060. Edit access is only needed if you are a designer working with our teams and components.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Figma Dashboard",src:t(41025).Z})),(0,r.kt)("h2",{id:"using-the-designer-toolkit"},"Using the Designer Toolkit"),(0,r.kt)("p",null,"When you are in the design file, you can acess Abyss componetns through the Assets panel."),(0,r.kt)("p",null,"The Assets panel is where you can find all of the Abyss Components. You can drag any Component from the Assets panel into the canvas to create an Instance."),(0,r.kt)("p",null,"To open the Assets panel, click on the Assets heading in the Layers panel."),(0,r.kt)("p",null,"Or, use the keyboard shortcut:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Mac"),": \u2325 Option + 2"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Windows"),": Alt + 2"),(0,r.kt)("p",null,"Once you've opened the Assets panel, you can:"),(0,r.kt)("p",null,"1","."," Use the Search field to find a specific component. Figma looks for components in the current file, as well as any libraries you can access."),(0,r.kt)("p",null,"2","."," Switch between a Grid and List view of Components."),(0,r.kt)("p",null,"3","."," Open the Library modal, you can search the Abyss design system or any other library available in the UHG/Optum organization. Visit ",(0,r.kt)(u,{href:"https://help.figma.com/hc/en-us/articles/360041051154-Guide-to-libraries-in-Figma",mdxType:"ExitLink"},"Figma\u2019s library management documentation")," to learn more about working with libraries."),(0,r.kt)("p",null,"4","."," View Local components that were created in the current file."),(0,r.kt)("p",null,"5","."," Once you have found the component that you need just drag it to your working board."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Assets Panel",src:t(1202).Z})),(0,r.kt)("h2",{id:"review-updates"},"Review Updates"),(0,r.kt)("p",null,'Designers and collaborators will see a notification that prompts you to review or dismiss updates to components and styles, making sure they\'re always using the latest version. Carefully review the updates before accepting them. Some updates may break your layout or design. Once updates are accepted, they cannot be undone. Select "Review" from the notification and choose the updates you would like to apply or select update all. Visit ',(0,r.kt)(u,{href:"https://help.figma.com/hc/en-us/articles/360039234193-Review-and-accept-library-updates#:~:text=Review%20updates&text=Click%20Review%20from%20the%20notification,any%20changes%20(if%20included)",mdxType:"ExitLink"},"Figma\u2019s review updates")," documentation to learn how to review and accept updates from libraries."))}g.isMDXComponent=!0},62738:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"design-kit",title:"Design Kit",pagination_prev:null},d=void 0,p={unversionedId:"designers/design-kit",id:"designers/design-kit",isDocsHomePage:!1,title:"Design Kit",description:"Overview",source:"@site/docs/designers/design-kit.md",sourceDirName:"designers",slug:"/designers/design-kit",permalink:"/designers/design-kit",tags:[],version:"current",frontMatter:{id:"design-kit",title:"Design Kit",pagination_prev:null},sidebar:"docs",next:{title:"Design Checklist",permalink:"/designers/design-checklist"}},c=[{value:"Overview",id:"overview",children:[],level:2},{value:"Designer Tookit",id:"designer-tookit",children:[],level:2},{value:"Foundations",id:"foundations",children:[],level:2},{value:"Guidance",id:"guidance",children:[],level:2},{value:"Accessibility",id:"accessibility",children:[],level:2},{value:"Contact Us",id:"contact-us",children:[],level:2}],u=(a="ExitLink",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The Abyss design system is a growing library of interactive components that can be efficiently assembled to build any number of high-quality products and applications. Our components are designed to balance flexibility with structure to ensure end-user consistency across all our brands."),(0,r.kt)("h2",{id:"designer-tookit"},"Designer Tookit"),(0,r.kt)("p",null,"Figma is an end-to-end design platform that lets you create designs for different interfaces or any other design need. Figma helps teams understand problems, explore options, and build solutions together. The ",(0,r.kt)("a",{parentName:"p",href:"/designers/design-checklist"},"Design Checklist")," contains all the resources needed to get started using the Abyss design system."),(0,r.kt)("h2",{id:"foundations"},"Foundations"),(0,r.kt)("p",null,"Get to know our foundational thinking and how we put it into action across our design system."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.DesignerCarousel />\n")),(0,r.kt)("h2",{id:"guidance"},"Guidance"),(0,r.kt)("p",null,"We follow the atomic design methodology for structuring the Abyss design system we divide our components into different categories:"),(0,r.kt)(u,{href:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A971",mdxType:"ExitLink"},"Atoms")," \u2013 They are the basic building blocks of the design system, like atoms in nature they\u2019re abstract and often not terribly useful on their own. However, they are good as a reference in the context of a pattern library as you can see all the global styles laid out briefly.",(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)(u,{href:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A978",mdxType:"ExitLink"},"Molecules")," - In the molecule stage, we take our independent atomic design elements, each with their own characteristics, style, format, and begin to bring them together into new groupings.",(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)(u,{href:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1620",mdxType:"ExitLink"},"Organisms")," - Molecules give us building blocks to work with, we combine them together to form organisms. Organisms are groups of molecules joined together to form a relatively complex, distinct components.",(0,r.kt)("br",null),(0,r.kt)("p",null,"Abyss design system gives users the ability to promote consistency and scalability, users have the ability to group atoms, molecules and organisms into templates and pages that can be efficiently put together."),(0,r.kt)("h2",{id:"accessibility"},"Accessibility"),(0,r.kt)("p",null,"Abyss strives to combine WAG accessibility guidelines with inclusive and usable design in all stages of the design process. More information on the Accessibility standards we guide our designs by can be found on the ",(0,r.kt)("a",{parentName:"p",href:"/accessibility"},"Accessibility")," page of the Abyss site."),(0,r.kt)("h2",{id:"contact-us"},"Contact Us"),(0,r.kt)("p",null,"Whether it's a design aliment, a content gap, or a component that is not working as expected, we count on your feedback to help us keep the Abyss design system functional. Please submit your support request via the ",(0,r.kt)("a",{parentName:"p",href:"/contact-us"},"Contact Us")," page."))}g.isMDXComponent=!0},85672:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"abyss-admirals",title:"Abyss Admirals"},s=void 0,d={unversionedId:"developers/abyss-admirals",id:"developers/abyss-admirals",isDocsHomePage:!1,title:"Abyss Admirals",description:"Who are Abyss Admirals?",source:"@site/docs/developers/abyss-admirals.md",sourceDirName:"developers",slug:"/developers/abyss-admirals",permalink:"/developers/abyss-admirals",tags:[],version:"current",frontMatter:{id:"abyss-admirals",title:"Abyss Admirals"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/developers/getting-started"},next:{title:"Abyss Contributors",permalink:"/developers/abyss-contributors"}},p=[{value:"Who are Abyss Admirals?",id:"who-are-abyss-admirals",children:[],level:2},{value:"Benefits for Product Stakeholders",id:"benefits-for-product-stakeholders",children:[],level:2},{value:"Benefits for Engineering Managers",id:"benefits-for-engineering-managers",children:[],level:2},{value:"Admiral Assignments",id:"admiral-assignments",children:[],level:2},{value:"Admiral Developers Guide",id:"admiral-developers-guide",children:[],level:2},{value:"Contribution Workflow",id:"contribution-workflow",children:[],level:2},{value:"Abyss Office Hours",id:"abyss-office-hours",children:[],level:2}],c={toc:p};function u(e){var n=e.components,l=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"who-are-abyss-admirals"},"Who are Abyss Admirals?"),(0,i.kt)("div",{style:{display:"flex",alignItems:"flex-start"}},(0,i.kt)("div",{style:{marginRight:"8px"}},(0,i.kt)("div",null,"An ",(0,i.kt)("strong",null,"Abyss Admiral")," is a highly specialized role for a software engineer who is a dedicated member of a product delivery team. The most basic and essential function of an Admiral is to act as a bridge between the core Abyss ecosystem and the product team leveraging the framework."),(0,i.kt)("br",null),(0,i.kt)("div",null,"Acting as representatives or ambassadors for their products, Admirals enable the adoption of a ",(0,i.kt)("strong",null,"scalable, federated software development model")," by sharing the Abyss community's best practices with their teams. As subject matter experts for Abyss, Admirals are encouraged to guide and mentor their engineering teams, empowering them to take advantage of the benefits of working in a collaborative enterprise environment.")),(0,i.kt)("img",{width:"300",src:"/img/graphics/abyss_admirals.png",alt:"Abyss Admirals"})),(0,i.kt)("h2",{id:"benefits-for-product-stakeholders"},"Benefits for Product Stakeholders"),(0,i.kt)("p",null,"It's very important for product stakeholders to understand that an Admiral's involvement in their new responsibilities will ",(0,i.kt)("strong",null,"reduce their capacity for delivering sprint work")," as a standard individual contributor. However, by allocating enough time for the role, Admirals will enable engineering scrum teams to measurably improve both quality and delivery metrics. It's recommended to dedicate between ",(0,i.kt)("strong",{parentName:"p"},"30% - 50%")," of an Admiral's capacity for this role, but could be up to 100% depending on the size and scope of the project."),(0,i.kt)("p",null,"Product stakeholders will be able to capitalize on the efficiencies gained by leveraging the collective knowledge and shared solutions that are accessible through the broader Abyss community. The benefits of staffing a dedicated Admiral on your product include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Accelerated Solution Development:"),"\nWhen delivery teams are asked to identify and create solutions to common problems, they\u2019ll need to do so in between developing new features which can result in delays. An Admiral assists their product teams at critical moments by eliminating these bottlenecks and offering proven solutions, which in turn increases the speed of delivery.",(0,i.kt)("br",null),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Minimized Duplication of Work:"),"\nThe Abyss team facilitates the creation of reusable digital assets such that, when the business makes a new request, an Admiral can utilize a similar solution that was built previously for another team rather than building a new one from scratch, greatly minimizing cost and time to value.",(0,i.kt)("br",null),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Consistent Product Quality:"),"\nIt\u2019s reasonable to assume that most teams will not be evenly balanced when it comes to experience and skill levels, resulting in products being built with different techniques and standards. Admirals can ensure that the quality of development is both consistent and in accordance with the established standards of other products built with Abyss.",(0,i.kt)("br",null),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Expansive Specialist Network:"),"\nWhen working with an Abyss Admiral, product stakeholders obtain access to a network of highly experienced and qualified specialists including software architects, lead engineers, UX designers, accessibility experts who are motivated to craft the best product experiences possible.")),(0,i.kt)("h2",{id:"benefits-for-engineering-managers"},"Benefits for Engineering Managers"),(0,i.kt)("p",null,"It's very important for engineering managers to understand that an Admiral's involvement in their new responsibilities will ",(0,i.kt)("strong",null,"reduce their capacity for delivering sprint work")," as a standard individual contributor. However, by allocating enough time for the role, Admirals will enable engineering scrum teams to measurably improve both quality and delivery metrics. It's recommended to dedicate between ",(0,i.kt)("strong",{parentName:"p"},"30% - 50%")," of an Admiral's capacity for this role, but could be up to 100% depending on the size and scope of the project."),(0,i.kt)("p",null,"Engineering managers will be able to capitalize on the efficiencies gained by leveraging the collective knowledge and shared solutions that are accessible through the broader Abyss community. The benefits of staffing a dedicated Admiral on your delivery team include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Reduced Software Fragmentation:"),"\nWhen individual teams are developing within disconnected, siloed environments, they\u2019ll often discover multiple different approaches to solve the same problem. Admirals can act as advisors to prevent this additional overhead from occuring by raising awareness of pre-existing solutions.",(0,i.kt)("br",null),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Promote Engineering Growth:"),"\nFor an engineer who is eager to progress further along their career path, the Admirals program offers an elevated set of reponsibilities for overseeing software projects. Since this role is both highly technical and relationship-oriented, coupled with a sense of personal accountability, Admirals can leverage this experience to explore their interest in management or technology leadership roles.",(0,i.kt)("br",null),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Accountability for Essential Tasks:"),"\nEngineering teams are often overburdened with upkeep and maintenance related chores because they are given a lower priority than feature work. By assigning an Admiral to each project, engineering managers can verify that code quality, versioning, and peer review processes are being observed.",(0,i.kt)("br",null),(0,i.kt)("br",null)),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Optimized Outcomes:"),"\nAdmirals reduce the time and cost of development through specialization and economies of scale. By tapping into a centralized community of knowledge, skills, and experience, the Admirals program is able to streamline access to those scarce capabilties while also facilitating balanced, cohesive engineering teams.")),(0,i.kt)("h2",{id:"admiral-assignments"},"Admiral Assignments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Upgrade Abyss Versions:"),"\nIt's highly beneficial to keep your product up-to-date with the newest versions of Abyss. Inform your engineering team and product stakeholders of any new components, tools, or patterns your application can leverage."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Review the ",(0,i.kt)("a",{parentName:"strong",href:"/releases/"},"release notes")," after a release")," to determine the level of effort for upgrading to the latest version."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},'Run the command "npm run abyss"')," to automatically upgrade all Abyss packages in your project."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Support for new features and defects")," will only be included in new versions.",(0,i.kt)("br",null),(0,i.kt)("br",null)))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Monitor Code Quality:"),"\nAs an Admiral, the accountability of maintaining high standards for code quality starts with you. Become well-versed in JavaScript, React, ESLint, and SonarQube anti-patterns and shepherd your team away from these pitfalls, reducing the burden of unrestrained technical debt and extending the lifespan of your codebase."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Remediate runtime errors & warnings")," observed in the browser's developer console for your product."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Inspect problems reported by ",(0,i.kt)("a",{parentName:"strong",href:"https://eslint.org/docs/latest/rules"},"ESLint"))," and discuss rule modifications with other Admirals."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Triage issues identified by ",(0,i.kt)("a",{parentName:"strong",href:"https://sonar.optum.com"},"Sonar"))," to ensure your product meets code quality benchmarks.",(0,i.kt)("br",null),(0,i.kt)("br",null)))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Manage Pull Requests:"),"\nWithin the GitHub repository for your product, you should encourage your team to open pull requests regularly. By consulting with other Admirals, you are in the most well-suited position to act as a code reviewer for your team."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Open draft PR's early")," in the sprint to give you and your team enough time to review and offer feedback on the approach."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Offer comments and conduct reviews")," for each PR before approving."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Merge PR's in a timely manner")," to improve time-to-build metrics for your product.",(0,i.kt)("br",null),(0,i.kt)("br",null)))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Leverage Assets:"),"\nAdmirals should strive to identify all of the usuable assets that exist within Abyss, as well as the network of individuals involved. Becoming familiar with the abstract concepts of a framework will elevate the engineering maturity of your team."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Research code developed for Abyss")," to understand the patterns for consistent, repeatable software practices."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Review and update documentation")," which demonstrates guidance for best practices, guidelines, and considerations."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Foster relationships with key experts")," who possess very specific and unique skillsets who can influence the growth of your product.",(0,i.kt)("br",null),(0,i.kt)("br",null)))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Continous Learning:"),"\nTo be successful, Admirals should provide thought leadership, direction, and appropriate recommendations for their teams and the Admiral community. The ability to both absorb and transfer knowledge is essential."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Have a self-starter attitude")," and a passion for growing your career by being surrounded by like-minded engineers."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Seek opportunities for learning")," by reading developer blogs, attending tech conferences, and networking with other Admirals."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Familiarize yourself with industry trends")," by researching and recommending techniques for application development.",(0,i.kt)("br",null),(0,i.kt)("br",null)))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Sustainable Software:"),"\nWhen left unchecked, the sustainability of an application can continously deteoriate. Admirals are able to counteract this by taking appropriate measures to establish a healthy development environment and extend the lifespan of a product."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Maintain a log of tech debt")," and track the ongoing scope of maintainance tasks incurred from past sprints."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Conduct frequent pair programming")," sessions with your team to guide current feature development."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Discuss upcoming requirements")," with architects to establish a clear path for future stories in your product pipeline.",(0,i.kt)("br",null),(0,i.kt)("br",null)))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Abyss Contributions:"),"\nWith the Admiral contribution process, the development process for new assets can be accelerated by building the solution yourself as the need arises; rather than waiting for your idea to reach the top of the Abyss core backlog."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Determine the priority")," for framework enhancements based on your product delivery schedule."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Discuss new ideas in ",(0,i.kt)("a",{parentName:"strong",href:"#office-hours"},"Office Hours"))," with the core team and other Admirals."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Follow the ",(0,i.kt)("a",{parentName:"strong",href:"#contribution-workflow"},"Contribution Workflow"))," shown below to share your proposals with the framework.")))),(0,i.kt)("h2",{id:"admiral-developers-guide"},"Admiral Developers Guide"),(0,i.kt)("p",null,"If an existing Abyss component doesn't meet your product's requirements, you can follow this guide for building and testing changes within your application's codebase. Start by cloning the package structure of abyss within your product, such as ",(0,i.kt)("strong",{parentName:"p"},"'src/abyss/web/ui/Badge'")," demonstrated below. If you are creating a new component, you can start with a similar one as a template, otherwise cloning the existing component is the recommended approach."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"\u2514\u2500\u2500 products\n    \u2514\u2500\u2500 web\n        \u251c\u2500\u2500 .abyss\n        \u251c\u2500\u2500 src\n        |   \u251c\u2500\u2500 abyss\n        |   |   \u2514\u2500\u2500 web\n        |   |       \u2514\u2500\u2500 ui\n        |   |           \u2514\u2500\u2500 Badge\n        |   |               \u251c\u2500\u2500 index.js\n        |   |               \u2514\u2500\u2500 Badge.jsx\n        |   \u251c\u2500\u2500 common\n        |   \u251c\u2500\u2500 routes\n        |   \u251c\u2500\u2500 client.jsx\n        |   \u2514\u2500\u2500 document.jsx\n        \u2514\u2500\u2500 package.json\n")),(0,i.kt)("p",null,"Next, replace the relative imports with absolute paths to ",(0,i.kt)("strong",{parentName:"p"},"@abyss/web"),". You can use any combination of Abyss package imports, open source libraries, and custom JavaScript dependencies to build your component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { styled } from '../../tools/styled';\nimport { useAbyssProps } from '../../hooks/useAbyssProps';\nimport { useVisuallyHidden } from '../../hooks/useVisuallyHidden';\n")),(0,i.kt)("p",null,"Replace with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { styled } from '@abyss/web/tools/styled';\nimport { useAbyssProps } from '@abyss/web/hooks/useAbyssProps';\nimport { useVisuallyHidden } from '@abyss/web/hooks/useVisuallyHidden';\n")),(0,i.kt)("p",null,"Finally, to test your component changes, modify your import path by changing ",(0,i.kt)("strong",{parentName:"p"},"'@abyss/web/ui/Badge'")," to ",(0,i.kt)("strong",{parentName:"p"},"'@src/abyss/web/ui/Badge'")," which will use your local Abyss component. Once you have fully verified your changes, you can submit a new Pull Request back to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/uhc-tech/abyss/pulls"},"Abyss")," and showcase your updates in the Abyss office hours. Once merged, your contributions will be available in the next release!"),(0,i.kt)("h2",{id:"contribution-workflow"},"Contribution Workflow"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Contribution Workflow",src:t(85945).Z})),(0,i.kt)("h2",{id:"abyss-office-hours"},"Abyss Office Hours"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Day"),(0,i.kt)("th",{parentName:"tr",align:null},"Time"),(0,i.kt)("th",{parentName:"tr",align:null},"Meeting"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Thursdays"),(0,i.kt)("td",{parentName:"tr",align:null},"8:30 - 9:30 AM ",(0,i.kt)("strong",{parentName:"td"},"CST")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://teams.microsoft.com/l/meetup-join/19%3ameeting_MTdkODUwYzQtZTNiZS00M2EyLWJmOTMtOGJjMTU4YTYyNWU5%40thread.v2/0?context=%7b%22Tid%22%3a%22db05faca-c82a-4b9d-b9c5-0f64b6755421%22%2c%22Oid%22%3a%22d5140f05-c25a-491a-8c4f-ad6da5e23bad%22%7d"},"Join Teams Meeting"))))))}u.isMDXComponent=!0},83169:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"abyss-contributors",title:"Abyss Contributors"},d=void 0,p={unversionedId:"developers/abyss-contributors",id:"developers/abyss-contributors",isDocsHomePage:!1,title:"Abyss Contributors",description:"Overview",source:"@site/docs/developers/abyss-contributors.md",sourceDirName:"developers",slug:"/developers/abyss-contributors",permalink:"/developers/abyss-contributors",tags:[],version:"current",frontMatter:{id:"abyss-contributors",title:"Abyss Contributors"},sidebar:"docs",previous:{title:"Abyss Admirals",permalink:"/developers/abyss-admirals"},next:{title:"Documentation Guide",permalink:"/developers/documentation-guide"}},c=[{value:"Overview",id:"overview",children:[],level:2},{value:"Abyss Code Repo",id:"abyss-code-repo",children:[{value:"Setting Up Project Locally",id:"setting-up-project-locally",children:[],level:3},{value:"Commit Conventions",id:"commit-conventions",children:[],level:3},{value:"Git Branch Names",id:"git-branch-names",children:[],level:3}],level:2},{value:"Secure Groups",id:"secure-groups",children:[],level:2},{value:"Developer Tools",id:"developer-tools",children:[],level:2},{value:"Design Tools",id:"design-tools",children:[],level:2}],u=(a="ExitLink",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"First of all, thank you for your interest in contributing to Abyss. All of your contributions are valuable to the project! There are several ways you can get involved in the Abyss community and become a contributor:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Share Abyss:")," Share the link to ",(0,r.kt)("a",{parentName:"li",href:"https://abyss.uhc.com"},"Abyss")," with members of your product team, and we'd be happy to discuss how we can help support your application."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Improve documentation:")," Help us improve the ",(0,r.kt)(u,{href:"https://github.com/uhc-tech/abyss/tree/main/products/abyss-docs",mdxType:"ExitLink"},"Abyss Docs")," by fixing incomplete or missing sections, examples, and explanations."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Provide feedback:")," The team at Abyss are constantly working to make the project better, please let us know what features you would like to see with the ",(0,r.kt)("a",{parentName:"li",href:"/contact-us/"},"Contact Us")," form."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Join Abyss Admirals:")," Become an ",(0,r.kt)("a",{parentName:"li",href:"/developers/abyss-admirals/"},"Abyss Admiral")," and champion for Abyss as a designated point of contact for your product.")),(0,r.kt)("h2",{id:"abyss-code-repo"},"Abyss Code Repo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'() => {\n  const customIcon = (\n    <svg height="24" width="24" viewBox="0 0 16 16">\n      <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z" />\n    </svg>\n  );\n\n  return (\n    <Card>\n      <Box\n        padding="$md"\n        align="start"\n        color="none"\n        style={{ justifyContent: \'center\' }}\n      >\n        <p>\n          The Abyss source code monorepo contains both core packages and\n          products:\n        </p>\n        <Grid css={{ marginBottom: \'$xs\' }}>\n          <Grid.Col span={6}>\n            <b>Packages:</b>\n            <ul\n              style={{\n                listStyleType: \'circle\',\n                marginLeft: 25,\n                columnCount: 3,\n              }}\n            >\n              <li>api</li>\n              <li>core</li>\n              <li>desktop</li>\n              <li>ext</li>\n              <li>infra</li>\n              <li>mobile</li>\n              <li>parcels</li>\n              <li>utility</li>\n              <li>web</li>\n            </ul>\n          </Grid.Col>\n          <Grid.Col span={6}>\n            <b>Products:</b>\n            <ul\n              style={{\n                listStyleType: \'circle\',\n                marginLeft: 25,\n                columnCount: 2,\n              }}\n            >\n              <li>assets</li>\n              <li>docs</li>\n              <li>ext</li>\n              <li>scaffold</li>\n              <li>storybook</li>\n            </ul>\n          </Grid.Col>\n        </Grid>\n        <Docs.Button\n          variant="outline"\n          size="$sm"\n          href="https://github.com/uhc-tech/abyss"\n          after={\n            <Icon size="24px" title="github" color="$primary1">\n              {customIcon}\n            </Icon>\n          }\n        >\n          Visit\n        </Docs.Button>\n      </Box>\n    </Card>\n  );\n};\n')),(0,r.kt)("h3",{id:"setting-up-project-locally"},"Setting Up Project Locally"),(0,r.kt)("p",null,"For the essential system tools to get Abyss running on your local development environment, visit our ",(0,r.kt)("a",{parentName:"p",href:"/developers/workspace-setup"},"workspace setup")," guide."),(0,r.kt)("p",null,"To set up, clone the ",(0,r.kt)(u,{href:"https://github.com/uhc-tech/abyss",mdxType:"ExitLink"},"abyss")," repository:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Make the abyss-projects directory\n$ mkdir abyss-projects && cd abyss-projects\n\n# Clone the abyss repository\n$ git clone https://github.com/uhc-tech/abyss.git\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"Afterwards, install the dependencies for ",(0,r.kt)("inlineCode",{parentName:"p"},"abyss")," on your machine:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Go into the abyss directory\n$ cd abyss\n\n# Install abyss dependencies\n$ npm i\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"Then you are ready to start ",(0,r.kt)("inlineCode",{parentName:"p"},"abyss-docs")," on your machine:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm run docs\n")),(0,r.kt)("h3",{id:"commit-conventions"},"Commit Conventions"),(0,r.kt)("p",null,"Head to the ",(0,r.kt)(u,{href:"https://github.com/uhc-tech/abyss",mdxType:"ExitLink"},"Abyss")," source code for updates and additions to our Abyss NPM packages and documentation. With several contributors working in these repos daily, it's important write your commit messages to be as descriptive as possible."),(0,r.kt)("p",null,"Commit Convention:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[area] Optional title: Message\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[docs] Button: Edit accessibility section\n\n[@abyss/ui] useLoadingOverlay: Add remove handler\n\n[@abyss/core] Fix non-prod deployment scripts\n\n[@abyss/ui] Carousel: New feature added\n\n[docs] Doc scripts: Fix docs deployment script\n")),(0,r.kt)("h3",{id:"git-branch-names"},"Git Branch Names"),(0,r.kt)("p",null,"Naming the branch you're working on helps repository maintainers understand the changes being made when the PR is opened. Using consistent branch name prefixes also allows build tools to automatically categorize the branches using labels. Branch names should be all lowercase (with the exception of US and DE) and include hyphens between words. All branches are divided into four groups:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"story/#######")," - Changes associated with a User Story, use the unique 7-digit number from Rally followed by a task description.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"defect/#######")," - Changes associated with a Defect, use the unique 7-digit number from Rally followed by a task description.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"refactor/")," - Changes to the repo that aren't documented in Rally are considered refactors, so use the task portion to add detail to your branch name.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"release/")," - Used specifically by build tools, this branch name is exclusive to release notes and documentation leading up to a new release."))),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git checkout -b story/US2434515-developer-toolkit\n\ngit checkout -b defect/DE308703-button-accessibility\n\ngit checkout -b refactor/select-list-multi-docs\n\ngit checkout -b story/US1533842-use-loading-overlay\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"Branch Name Rules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Branch prefix must start with ",(0,r.kt)("strong",{parentName:"li"},"story"),", ",(0,r.kt)("strong",{parentName:"li"},"defect"),", ",(0,r.kt)("strong",{parentName:"li"},"refactor"),", or ",(0,r.kt)("strong",{parentName:"li"},"release")),(0,r.kt)("li",{parentName:"ul"},"Branch name must be only ",(0,r.kt)("strong",{parentName:"li"},"lowercase letters, numbers, and hypens")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"US###")," and ",(0,r.kt)("strong",{parentName:"li"},"DE###")," are valid character exceptions")),(0,r.kt)("h2",{id:"secure-groups"},"Secure Groups"),(0,r.kt)("p",null,"Visit ",(0,r.kt)(u,{href:"https://secure.uhc.com",mdxType:"ExitLink"},"secure.uhc.com")," to request permissions groups:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"abyss_contributors"),": For write access to ",(0,r.kt)(u,{href:"https://github.com/uhc-tech/abyss",mdxType:"ExitLink"},"abyss")," code repositories")),(0,r.kt)("h2",{id:"developer-tools"},"Developer Tools"),(0,r.kt)("p",null,"Abyss is built using a list of trusted resources. Below are links to what makes up the framework of Abyss."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"() => {\n  const devLinks = [\n    {\n      id: 1,\n      name: 'ReactJS',\n      href: 'https://reactjs.org/',\n    },\n    {\n      id: 2,\n      name: 'Docusaurus',\n      href: 'https://docusaurus.io/',\n    },\n    {\n      id: 3,\n      name: 'Stitches',\n      href: 'https://stitches.dev/',\n    },\n    {\n      id: 4,\n      name: 'React Hook Form',\n      href: 'https://react-hook-form.com/',\n    },\n    {\n      id: 5,\n      name: 'React Router',\n      href: 'https://reactrouter.com/',\n    },\n    {\n      id: 6,\n      name: 'npm',\n      href: 'https://docs.npmjs.com/about-npm',\n    },\n  ];\n  return (\n    <Layout.Stack>\n      <Layout.Group style={{ flexFlow: 'row wrap' }}>\n        {devLinks.map((link) => {\n          return (\n            <Docs.Button\n              variant=\"outline\"\n              style={{\n                borderRadius: '5px',\n                marginRight: '8px',\n                marginBottom: '8px',\n              }}\n              href={link.href}\n              after={<IconMaterial icon=\"arrow_forward\" color=\"$primary1\" />}\n              linkText={link.name}\n            >\n              {link.name}\n            </Docs.Button>\n          );\n        })}\n      </Layout.Group>\n    </Layout.Stack>\n  );\n};\n")),(0,r.kt)("p",null,"If you're ready to get started with Abyss on your own, checkout the Abyss StarterKit (coming soon) to get started."),(0,r.kt)("h2",{id:"design-tools"},"Design Tools"),(0,r.kt)("p",null,"Abyss has a dedicated team of designers creating a Design Kit on Figma. Below are some resources to help developers navigate these tools:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"() => {\n  const designLinks = [\n    {\n      id: 1,\n      name: 'Abyss Design Kit',\n      href: 'https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1',\n    },\n    {\n      id: 2,\n      name: 'Figma for developers',\n      href: 'https://www.figma.com/best-practices/tips-on-developer-handoff/an-overview-of-figma-for-developers/',\n    },\n    {\n      id: 3,\n      name: 'UHC branding',\n      href: 'https://brand.uhc.com/design-with-care',\n    },\n    {\n      id: 4,\n      name: 'Optum branding',\n      href: 'https://brand.optum.com/',\n    },\n  ];\n  return (\n    <Layout.Stack>\n      <Layout.Group style={{ flexFlow: 'row wrap' }}>\n        {designLinks.map((link) => {\n          return (\n            <Docs.Button\n              variant=\"outline\"\n              style={{\n                borderRadius: '5px',\n                marginRight: '8px',\n                marginBottom: '8px',\n              }}\n              href={link.href}\n              after={<IconMaterial icon=\"arrow_forward\" color=\"$primary1\" />}\n            >\n              {link.name}\n            </Docs.Button>\n          );\n        })}\n      </Layout.Group>\n    </Layout.Stack>\n  );\n};\n")),(0,r.kt)("p",null,"If you're a designer and want to dive deeper into the Abyss Design Kit, visit our Designer Getting Started (coming soon) page to learn more."),(0,r.kt)("br",null))}g.isMDXComponent=!0},96535:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"accessibility-testing",title:"Accessibility Testing"},d=void 0,p={unversionedId:"developers/accessibility-testing",id:"developers/accessibility-testing",isDocsHomePage:!1,title:"Accessibility Testing",description:"Overview",source:"@site/docs/developers/accessibility-testing.md",sourceDirName:"developers",slug:"/developers/accessibility-testing",permalink:"/developers/accessibility-testing",tags:[],version:"current",frontMatter:{id:"accessibility-testing",title:"Accessibility Testing"},sidebar:"docs",previous:{title:"Component Testing",permalink:"/developers/component-testing"},next:{title:"Versioning Guide",permalink:"/developers/versioning-guide"}},c=[{value:"Overview",id:"overview",children:[],level:2},{value:"Keyboard Navigation",id:"keyboard-navigation",children:[],level:2},{value:"axe DevTools",id:"axe-devtools",children:[],level:2},{value:"HTML Validation",id:"html-validation",children:[],level:2},{value:"VO Shortcuts",id:"vo-shortcuts",children:[],level:2},{value:"NPM Packages",id:"npm-packages",children:[],level:2},{value:"Linting",id:"linting",children:[],level:2},{value:"Summary",id:"summary",children:[],level:2},{value:"Accessibility Tools",id:"accessibility-tools",children:[],level:2}],u=(a="ExitLink",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Web accessibility, also known as ",(0,r.kt)(u,{href:"https://en.wiktionary.org/wiki/a11y",mdxType:"ExitLink"},"a11y"),", is the design and creation of websites that can be used by everyone. Accessibility support is necessary to allow assistive technology to interpret web pages. Abyss fully supports building accessible websites and follows the ",(0,r.kt)(u,{href:"https://www.w3.org/WAI/intro/wcag",mdxType:"ExitLink"},"WCAG")," accessibility standards and guidelines."),(0,r.kt)("p",null,"The list below are steps to take as a developer to ensure accessibility compliance. Please take a minute to read through the following testing resources and familiarize yourself with how to utilize them for best practices."),(0,r.kt)("h2",{id:"keyboard-navigation"},"Keyboard Navigation"),(0,r.kt)("p",null,"Use keyboard only to navigate the page. Don't use your mouse or touchbar at all to test this. See if you notice any keyboard traps or anything that seems difficult.\nExpected keyboard behavior for custom components is typically the following, but there are exceptions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Tab")," to get into the component"),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("strong",{parentName:"li"},"arrow keys")," to navigate within the component"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Tab")," to get out of the component")),(0,r.kt)("h2",{id:"axe-devtools"},"axe DevTools"),(0,r.kt)(u,{href:"https://www.deque.com/axe",mdxType:"ExitLink"},"axe DevTools")," enables developers to rapidly fix accessibility issues using built-in references and solution patterns without requiring deep knowledge of accessibility standards. Axe can be installed as a Chrome extension. On Mac, it can be installed directly from the ",(0,r.kt)(u,{href:"https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd?hl=en-US&utm_term=axe%20plugin%20chrome&utm_campaign=Search%20-%20axe%20DevTools%20-%20Branded&utm_source=adwords&utm_medium=ppc&hsa_src=g&hsa_ad=567862381910&hsa_tgt=kwd-942809057462&hsa_mt=e&hsa_ver=3&hsa_acc=7854167720&hsa_kw=axe%20plugin%20chrome&hsa_grp=122011560607&hsa_cam=12428499999&hsa_net=adwords&gclid=Cj0KCQjwgYSTBhDKARIsAB8KukuYAwiLf-3-Ozw0huwHlNxiv-dQWLXCj7TD7BQ1qaqm4i3jNwZpV18aAhdfEALw_wcB",mdxType:"ExitLink"},"Chrome App Store"),". On PC, you have to submit a secure/app request to install it.",(0,r.kt)("h2",{id:"html-validation"},"HTML Validation"),(0,r.kt)("p",null,"For the ",(0,r.kt)(u,{href:"https://validator.w3.org/nu/#textarea",mdxType:"ExitLink"},"HTML Validator"),", use the ",(0,r.kt)(u,{href:"https://cdpn.io/pen/debug/VRZdGJ",mdxType:"ExitLink"},"WCAG Parsing bookmarklet"),' on top of it after submitting. To install the bookmarklet, drag the "WCAG parsing only" link at the top of the page to your browser bookmarks bar.'),(0,r.kt)("h2",{id:"vo-shortcuts"},"VO Shortcuts"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"On/off")," Command + F5 (or go to System Preferences > Accessibility > VO)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Mute/pause")," Control"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"VO")," Control + Option"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Navigate focusable elements")," tab"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Navigate all content")," VO + arrow keys"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Quick nav on/off")," press and hold left and right arrow keys at same time (This allows you to navigate all elements using just the left and right arrow keys without the VO keys.)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Open Rotor")," VO + U"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Close Rotor")," Esc"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Navigate rotor menus")," left and right arrow keys"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Navigate within existing rotor menu")," up and down arrow keys")),(0,r.kt)("p",null,"If using a PC, request Secure access to NVDA."),(0,r.kt)("h2",{id:"npm-packages"},"NPM Packages"),(0,r.kt)("p",null,"Most NPM packages rely on axe-core. Set an impact level, and start with critical issues then work down. Remember to allow time to fix critical issues in the User Story. Otherwise, the product developers will get frustrated and learn to ignore the errors, which defeats the purpose and doesn't help anyone."),(0,r.kt)("h2",{id:"linting"},"Linting"),(0,r.kt)("p",null,"For linting rules, work with an a11y engineer to determine what to include there."),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"Remember, the tools/processes mentioned above don't catch all a11y issues, but they serve as a great start to empowering the team to do some of your own testing. For further information, reach out to an a11y engineer!"),(0,r.kt)("h2",{id:"accessibility-tools"},"Accessibility Tools"),(0,r.kt)("p",null,"If you're looking for an in-depth overview of what accessibility standards Abyss is working towards, visit our ",(0,r.kt)("a",{parentName:"p",href:"/accessibility"},"Accessibility page"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"() => {\n  const accessibilityLinks = [\n    {\n      id: 1,\n      name: 'WCAG 2.1',\n      href: 'https://www.w3.org/WAI/WCAG21/Understanding/',\n    },\n    {\n      id: 2,\n      name: 'Color Contrast Analyser (CCA)',\n      href: 'https://webaim.org/resources/contrastchecker/',\n    },\n    {\n      id: 3,\n      name: 'W3 Validator',\n      href: 'https://validator.w3.org/favelets.html',\n    },\n    {\n      id: 4,\n      name: 'Level Access  Favlet testing',\n      href: 'https://labs.levelaccess.com/index.php/Category:Favlet',\n    },\n    {\n      id: 5,\n      name: 'Digital A11y',\n      href: 'https://www.digitala11y.com/accessibility-bookmarklets-testing/',\n    },\n  ];\n  return (\n    <Layout.Stack>\n      <Layout.Group>\n        {accessibilityLinks.map((link) => {\n          return (\n            <Docs.Button\n              variant=\"outline\"\n              style={{\n                borderRadius: '5px',\n                marginRight: '8px',\n                marginBottom: '8px',\n              }}\n              href={link.href}\n              after={<IconMaterial icon=\"arrow_forward\" color=\"$primary1\" />}\n            >\n              {link.name}\n            </Docs.Button>\n          );\n        })}\n      </Layout.Group>\n    </Layout.Stack>\n  );\n};\n")))}g.isMDXComponent=!0},65790:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"component-testing",title:"Component Testing",description:"Guide on how to facilitate testing of Abyss components."},s=void 0,d={unversionedId:"developers/component-testing",id:"developers/component-testing",isDocsHomePage:!1,title:"Component Testing",description:"Guide on how to facilitate testing of Abyss components.",source:"@site/docs/developers/component-testing.md",sourceDirName:"developers",slug:"/developers/component-testing",permalink:"/developers/component-testing",tags:[],version:"current",frontMatter:{id:"component-testing",title:"Component Testing",description:"Guide on how to facilitate testing of Abyss components."},sidebar:"docs",previous:{title:"Style Customization",permalink:"/developers/style-customization"},next:{title:"Accessibility Testing",permalink:"/developers/accessibility-testing"}},p=[{value:"data-testid",id:"data-testid",children:[],level:2}],c={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"data-testid"},"data-testid"),(0,i.kt)("p",null,"To facilitate the usage of component testing libraries such as ",(0,i.kt)("strong",{parentName:"p"},"React Testing Library")," you have the option of adding a ",(0,i.kt)("inlineCode",{parentName:"p"},"data-testid")," attribute to a component's corresponding elements. By passing ",(0,i.kt)("inlineCode",{parentName:"p"},"data-testid")," in as a prop with a value of the desired string id this attribute will be appended to all component elements that include a unique Abyss class name. Please see the Integration tab and the Classes sub-heading for each component to determine which elements will receive this test id. The resulting ",(0,i.kt)("inlineCode",{parentName:"p"},"data-testid")," value will be a concatenated string that combines the value passed in with the prop and the element's unique class name. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<TextInput model="dataTestId" data-testid="test-id" />\n')),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        model="dataTestId"\n        placeholder="Text Input with data-testid"\n        data-testid="test-id"\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'() => {\n  const elements = `<div class="c-jtltpf c-fixGjY c-jtltpf-ifGHEql-css abyss-text-input-root" data-testid="test-id-abyss-text-input-root">\n  <label class="c-ffJdOf abyss-text-input-label" data-testid="test-id-abyss-text-input-label" for="abyss-39sezk4o0" id="abyss-yrptitziy"></label>\n  <div class="c-dxVmU">\n    <input name="dataTestId" id="abyss-39sezk4o0" aria-invalid="false" autocomplete="off" type="text" class="c-cZywkZ c-cZywkZ-dZAInb-inputType-text c-cZywkZ-iPJLV-css abyss-text-input" data-testid="test-id-abyss-text-input">\n  </div>\n  <div class="c-PJLV abyss-text-input-descriptors" data-testid="test-id-abyss-text-input-descriptors"></div>\n</div>`;\n\n  return <CodeHighlighter code={elements} language="html" />;\n};\n')))}u.isMDXComponent=!0},43174:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"documentation-guide",title:"Documentation Guide"},d=void 0,p={unversionedId:"developers/documentation-guide",id:"developers/documentation-guide",isDocsHomePage:!1,title:"Documentation Guide",description:"Overview",source:"@site/docs/developers/documentation-guide.md",sourceDirName:"developers",slug:"/developers/documentation-guide",permalink:"/developers/documentation-guide",tags:[],version:"current",frontMatter:{id:"documentation-guide",title:"Documentation Guide"},sidebar:"docs",previous:{title:"Abyss Contributors",permalink:"/developers/abyss-contributors"},next:{title:"Style Customization",permalink:"/developers/style-customization"}},c=[{value:"Overview",id:"overview",children:[],level:2},{value:"Markdown Structure",id:"markdown-structure",children:[],level:2},{value:"Overview Tab",id:"overview-tab",children:[{value:"Import statement",id:"import-statement",children:[],level:6},{value:"Component Sandbox",id:"component-sandbox",children:[],level:6},{value:"Property examples",id:"property-examples",children:[],level:6}],level:2},{value:"Integration Tab",id:"integration-tab",children:[{value:"Example of Integration Tab",id:"example-of-integration-tab",children:[],level:4}],level:2},{value:"Accessibility Tab",id:"accessibility-tab",children:[{value:"Example of Accessibility Tab",id:"example-of-accessibility-tab",children:[{value:"Decorative Icons",id:"decorative-icons",children:[],level:6},{value:"Close Button Guidance",id:"close-button-guidance",children:[],level:6}],level:4}],level:2}],u=(a="ExitLink",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The documentation pages are organized under the ",(0,r.kt)("strong",{parentName:"p"},"docs")," directory shown below. When adding a new component, tool, or guide to Abyss Docs, create a new markdown.md file under the associated folder."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-txt"},"abyss-docs\n\u2514\u2500\u2500 docs\n    \u251c\u2500\u2500 api\n    \u251c\u2500\u2500 developers\n    \u251c\u2500\u2500 foundations\n    \u251c\u2500\u2500 overview\n    \u2514\u2500\u2500 web\n        \u251c\u2500\u2500 hooks\n        \u251c\u2500\u2500 tools\n        \u2514\u2500\u2500 ui\n")),(0,r.kt)("h2",{id:"markdown-structure"},"Markdown Structure"),(0,r.kt)("p",null,"Each markdown file should begin with the following metadata, as an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-md"},"---\nid: carousel\ncategory: Content\ntitle: Carousel\ndescription: Displays information through a series of slides.\ndesign: https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3578%3A23477\npagination_prev: web/ui/card\npagination_next: web/ui/step-indicator\n---\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"Every doc page is divided into three tabs: Overview, Integration and Accessibility. Within the body of the markdown file, use these tabs to group sections of information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'<Tab label="Overview">\n  **Overview Content**\n</Tab>\n\n<Tab label="Integration">\n  **Integration Content**\n</Tab>\n\n<Tab label="Accessibility">\n  **Accesibility Content**\n</Tab>\n')),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"overview-tab"},"Overview Tab"),(0,r.kt)("h6",{id:"import-statement"},"Import statement"),(0,r.kt)("p",null,"Add the import statement for the feature like such:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Alert } from '@abyss/web/ui/Alert';\n")),(0,r.kt)("h6",{id:"component-sandbox"},"Component Sandbox"),(0,r.kt)("p",null,"Add Sandbox after the import statement for any components that make sense\nto have a sandbox. Inputs are controlled props that can be adjusted by the user using the Sandbox features. Organize the inputs alphabetically when possible, starting with the simple properties first. Each input contains ",(0,r.kt)("inlineCode",{parentName:"p"},"prop"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and optionally: ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," and, ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValue"),".\nTo create a Sandbox, use the convention below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"```jsx sandbox\n{\n  component: 'Alert',\n  inputs: [\n    {\n      prop: 'title',\n      type: 'string',\n    },\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'inlineText',\n      type: 'string',\n    },\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'error', value: 'error' },\n        { label: 'success', value: 'success' },\n        { label: 'info', value: 'info' },\n        { label: 'warning', value: 'warning' },\n      ],\n    },\n    {\n      prop: 'hideIcon',\n      type: 'boolean',\n      defaultValue: 'false',\n    },\n  ]\n}\n\n<Alert title=\"Alert Sandbox Title\" variant=\"success\">\n  Alert Sandbox Content\n</Alert>\n")),(0,r.kt)("h6",{id:"property-examples"},"Property examples"),(0,r.kt)("p",null,"Following the Sandbox, it's important to show the ability of each property separate of the others. We break each one down, giving it a title, description and jsx example showing variants of that specific property. For example, if you wanted to show the three sizes for Button, you'd write:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'<Button size="$sm">Small</Button>\n<Button size="$md">Medium</Button>\n<Button size="$lg">Large</Button>\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"Since there are two visual variants of Button, ",(0,r.kt)("inlineCode",{parentName:"p"},"primary")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"outline"),", which use the same sizing convention (",(0,r.kt)("inlineCode",{parentName:"p"},"$sm"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$md"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$lg"),") we can combine the two visuals under the one size example by organizing them utilizing the built-in Layout component from the Abyss library. Here's what the combined example looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'<Layout.Stack alignItems="left">\n  <Layout.Group>\n    <Button rounded size="$sm">\n      <IconMaterial icon="home" color="$white" />\n    </Button>\n    <Button rounded size="$md">\n      <IconMaterial icon="home" color="$white" />\n    </Button>\n    <Button rounded size="$lg">\n      <IconMaterial icon="home" color="$white" />\n    </Button>\n  </Layout.Group>\n  <Layout.Group>\n    <Button size="$sm">Small</Button>\n    <Button size="$md">Medium</Button>\n    <Button size="$lg">Large</Button>\n  </Layout.Group>\n  <Layout.Group>\n    <Button size="$sm" variant="outline">\n      Small\n    </Button>\n    <Button size="$md" variant="outline">\n      Medium\n    </Button>\n    <Button size="$lg" variant="outline">\n      Large\n    </Button>\n  </Layout.Group>\n</Layout.Stack>\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"To follow the complexity of each prop example, use the following rules to properly document the feature:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"When organizing the list of examples,")," they should be ordered from simple to complex starting with size or width"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Start each example case"),' with "Use the ',(0,r.kt)("inlineCode",{parentName:"li"},"prop-name"),' property to..." followed by an explanation'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"For props with a pre-set list of variants,"),' add a sentence listing out the variant options "Variants include ',(0,r.kt)("inlineCode",{parentName:"li"},"variant-1"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"variant-2"),'", and so on'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"For props with a default value,"),' add "The default value is set to ',(0,r.kt)("inlineCode",{parentName:"li"},"value"),'"'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"For the customization example section,")," include the sentence \u201cIf further customization is needed, most styles of ",(0,r.kt)("inlineCode",{parentName:"li"},"component-name")," can be overridden using ",(0,r.kt)("inlineCode",{parentName:"li"},"css"),"\u201d"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Size and width examples")," should include the list of Abyss style sizes (including the conversion of size to units in the label/text like $md = 16px), followed by percent, and px"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Examples may include:")," size, width, isDisabled, controlled, uncontrolled, loading, and customization. Take a look at other doc pages for examples of how to best format the component you're documenting")),(0,r.kt)("h2",{id:"integration-tab"},"Integration Tab"),(0,r.kt)("p",null,"Implementing a props table and classes table for the component, and any sub-components gives users an in-depth view of the component without having to visit the code. (The below example is modified for this template. Please refer to the Alert component for a full list of props and classes)."),(0,r.kt)("p",null,"Follow these rules when creating a Props Table:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Prop name")," is lowercase"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Type")," is one of the following: boolean, function, array, shape, number, string, number | string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Default value")," is the default value from the defaultProps list, or null"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description")," first word is uppercase, followed by a brief description of the props use")),(0,r.kt)("p",null,"Follow these rules when creating a Classes Table:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Class name")," starts with a period (.), is lowercase and uses dashes to separate words"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Description")," first word is uppercase, followed by a brief description of the class")),(0,r.kt)("h4",{id:"example-of-integration-tab"},"Example of Integration Tab"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Alert}\n  rows={[\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Sets the tile for the alert',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the alert component',\n    },\n    {\n      name: 'variant',\n      type: 'string',\n      defaultValue: 'error',\n      description:\n        'Change the alert style: `info` | `success` | `error`| `warning`',\n    },\n    {\n      name: 'errorCode',\n      type: 'string',\n      description:\n        'Set the error code to be displayed in the alert. Current date/time is appended to errorCode',\n    },\n    {\n      name: 'ariaLive',\n      type: 'string',\n      defaultValue: 'polite',\n      description:\n        'Set the priority with which screen reader should treat updates to live regions: `polite` | `assertive`',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Alert}\n  rows={[\n    {\n      name: 'alert-root',\n      description: 'Alert root element',\n    },\n    {\n      name: 'alert-container',\n      description: 'Alert element container',\n    },\n    {\n      name: 'alert-header-container',\n      description: 'Header element container',\n    },\n    {\n      name: 'alert-header-section',\n      description: 'Alert header element',\n    },\n    {\n      name: 'alert-body',\n      description: 'Alert body element',\n    },\n  ]}\n/>\n")),(0,r.kt)("h2",{id:"accessibility-tab"},"Accessibility Tab"),(0,r.kt)("p",null,"This tab is important to be as thorough and in-detail as possible, adhering to the WAI-ARIA design guidelines."),(0,r.kt)("p",null,"Follow this pattern when creating the Accessibility tab:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Brief description")," write a description about the component, and link to the WAI-ARIA website page referring to the component"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Sandbox")," allows our A11Y partners to practice assistive technology on the component in a dedicated field"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Keyboard interactions table")," referring to the WAI-ARIA keyboard interactions, create a table with all interactions usable for the specific component"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Additional guidance")," note any additional guidance features of the component, including (but not limited to) Decorative Icons, Loading State, etc.")),(0,r.kt)("h4",{id:"example-of-accessibility-tab"},"Example of Accessibility Tab"),(0,r.kt)("p",null,"An alert is an element that displays a brief, important message in a way that attracts the user's attention without interrupting the user's task. Dynamically rendered alerts are automatically announced by most screen readers, and in some operating systems, they may trigger an alert sound. It is important to note that, at this time, screen readers do not inform users of alerts that are present on the page before page load completes."),(0,r.kt)("p",null,"Adheres to the ",(0,r.kt)(u,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#alert",mdxType:"ExitLink"},"Alert WAI-ARIA design pattern"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack grow>\n  <Alert title="Error Alert" variant="error" onClose={() => {}} />\n  <Alert title="Success Alert" variant="success" onClose={() => {}} />\n  <Alert title="Info Alert" variant="info" onClose={() => {}} />\n  <Alert title="Warning Alert" variant="warning" onClose={() => {}} />\n</Layout.Stack>\n')),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Alert\"\n  rows={[\n    {\n      name: 'Tab',\n      description: 'Puts focus on the Button inside of the Alert',\n    },\n    {\n      name: 'Enter',\n      description:\n        'When focus is on the Button, pressing enter will press the Button inside the Alert',\n    },\n    {\n      name: 'Space',\n      description:\n        'When focus is on the Button, pressing enter will press the Button inside the Alert',\n    },\n  ]}\n/>\n")),(0,r.kt)("h6",{id:"decorative-icons"},"Decorative Icons"),(0,r.kt)("p",null,"In the alert below, since the word \u201cWarning\u201d appears next to the icon, the icon is considered decorative and must be ignored by assistive technology. The icon does not need to meet the 3:1 minimum contrast requirement against its adjacent color."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert title="Warning Alert" variant="warning" />\n')),(0,r.kt)("h6",{id:"close-button-guidance"},"Close Button Guidance"),(0,r.kt)("p",null,"Keyboard operation: if the \u201cclose\u201d button is used on the alert, it must be keyboard accessible. A keyboard only user must be able to tab to the button, and activate it with the space bar and the enter key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert title="Alert With Close Button" onClose={() => {}} />\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"Note: per the WAI ARIA specification, when the \u201calert\u201d role is used, the user should not be required to close the alert. In this case, it is assumed that the close button is provided as a convenience and the user is not explicitly required to close the alert."))}g.isMDXComponent=!0},67041:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"environments",title:"Environments"},s=void 0,d={unversionedId:"developers/environments",id:"developers/environments",isDocsHomePage:!1,title:"Environments",description:"Overview",source:"@site/docs/developers/environments.md",sourceDirName:"developers",slug:"/developers/environments",permalink:"/developers/environments",tags:[],version:"current",frontMatter:{id:"environments",title:"Environments"},sidebar:"docs",previous:{title:"Versioning Guide",permalink:"/developers/versioning-guide"},next:{title:"Introduction",permalink:"/developers/tutorials/intro"}},p=[{value:"Overview",id:"overview",children:[],level:2},{value:"Abyss Configuration",id:"abyss-configuration",children:[],level:2},{value:"Local",id:"local",children:[],level:2},{value:"Abyss Config Tool",id:"abyss-config-tool",children:[],level:2}],c={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Note: ",(0,i.kt)("a",{parentName:"strong",href:"/developers/getting-started/"},"Abyss App Starter-Kit")," Only ")),(0,i.kt)("p",null,"Environments allow us to create different workspaces to develop our applications in. Each of these workspaces may require different variables depending on what stage of the development lifecycle they are in. To accomplish this Abyss utilizes a environments config file called ",(0,i.kt)("inlineCode",{parentName:"p"},"environments.json")," under the ",(0,i.kt)("inlineCode",{parentName:"p"},".abyss")," config directory."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"\u251c\u2500\u2500 .abyss\n|   \u251c\u2500\u2500 environments.json\n|   \u2514\u2500\u2500 settings.json\n")),(0,i.kt)("h2",{id:"abyss-configuration"},"Abyss Configuration"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"environments.json")," file is setup to help you designate your various environments including their desired name and associated variables. Below is a standard setup for the environment config."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "env": {\n    // Global variables\n    "APP_NAME": "Create Abyss App - Micro Frontend"\n  },\n  "env.dev": {\n    // Env specific variables\n    "ENV_VAR": "dev-only"\n  },\n  "env.test": {\n    "ENV_VAR": "test-only"\n  },\n  "env.stage": {\n    "ENV_VAR": "stage-only"\n  },\n  "env.prod": {\n    "ENV_VAR": "prod-only"\n  }\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"env")," field allows you to define global variables that are applied to all environments. Environment variable names should follow the snake case standard."),(0,i.kt)("p",null,"To create a new environment you must first define the environment with ",(0,i.kt)("inlineCode",{parentName:"p"},"env.")," followed by the name you wish to give the environment (i.e ",(0,i.kt)("inlineCode",{parentName:"p"},'"env.prod"'),"). Once defined, anything you add to the field can be accessed by that environment only."),(0,i.kt)("h2",{id:"local"},"Local"),(0,i.kt)("p",null,"You may also need to have environment variables when you are running and developing your application locally. To accomplish this you can add the common ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file to the root of your project. Anything you add to this file can be accessed when running your application locally."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-txt"},"# Environment variables.\nSTATUS=production\nAPI_KEY=secret\n\n# Development port\nDEV_PORT=7000\n")),(0,i.kt)("h2",{id:"abyss-config-tool"},"Abyss Config Tool"),(0,i.kt)("p",null,"You can leverage the Abyss ",(0,i.kt)("inlineCode",{parentName:"p"},"config()")," method to access both your ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"environments.json")," configurations inside you application. To learn more head to the ",(0,i.kt)("a",{parentName:"p",href:"/web/tools/config"},"config")," documentation."))}u.isMDXComponent=!0},28645:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"getting-started",title:"Getting Started",pagination_prev:null},d=void 0,p={unversionedId:"developers/getting-started",id:"developers/getting-started",isDocsHomePage:!1,title:"Getting Started",description:"Overview",source:"@site/docs/developers/getting-started.md",sourceDirName:"developers",slug:"/developers/getting-started",permalink:"/developers/getting-started",tags:[],version:"current",frontMatter:{id:"getting-started",title:"Getting Started",pagination_prev:null},sidebar:"docs",next:{title:"Abyss Admirals",permalink:"/developers/abyss-admirals"}},c=[{value:"Overview",id:"overview",children:[],level:2},{value:"Create Abyss App",id:"create-abyss-app",children:[],level:2},{value:"Building with Abyss",id:"building-with-abyss",children:[],level:2},{value:"Project Structure",id:"project-structure",children:[],level:2},{value:"Learning React",id:"learning-react",children:[],level:2},{value:"Developer Tools",id:"developer-tools",children:[],level:2},{value:"Support",id:"support",children:[],level:2}],u=(a="ExitLink",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Abyss is a full-stack web application framework that enables you to build products faster and easier than ever. It features a comprehensive set of tools that weaves together the best parts of ",(0,r.kt)(u,{href:"https://reactjs.org",mdxType:"ExitLink"},"React")," and ",(0,r.kt)(u,{href:"https://graphql.org",mdxType:"ExitLink"},"GraphQL"),". By taking common patterns and modularizing them into accessible and reusable packages, Abyss is designed to accelerate the development of production-ready React web applications."),(0,r.kt)("p",null,"The framework handles all heavy lifting behind the scenes, allowing you to focus on core business logic specific to your product. Automated code quality tools analyze, identify, and correct errors in the code, giving developers real-time feedback and training to standardize programming styles. With improvements in project maintainability, scalability, and source code quality, Abyss aims to deliver the best overall development experience."),(0,r.kt)("h2",{id:"create-abyss-app"},"Create Abyss App"),(0,r.kt)("p",null,"The easiest way to get started with Abyss is by using ",(0,r.kt)("strong",{parentName:"p"},"create-abyss-app"),"."),(0,r.kt)("p",null,"Before you begin, be sure to follow our ",(0,r.kt)("a",{parentName:"p",href:"/developers/workspace-setup"},"workspace setup")," guide. Once your workspace is fully configured, open your terminal, navigate to the directory you'd like to create the app in, and run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ npx create-abyss-app my-new-app\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"That's it! After your new project downloads and installs, follow the instructions displayed in your terminal to run your Abyss app."),(0,r.kt)("h2",{id:"building-with-abyss"},"Building with Abyss"),(0,r.kt)("p",null,"The Abyss scaffold project includes all of the tools and libraries pre-installed you need to start developing. Try importing the ReactJS code below and see!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Alert } from \'@abyss/web/ui/Alert\';\n\nexport const App = () => {\n  return (\n    <Alert title="Task Completed!" variant="info">\n      You have successfuly imported an Abyss component!\n    </Alert>\n  );\n};\n')),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Alert title="Task Completed!" variant="info">\n  You have successfuly imported an Abyss component!\n</Alert>\n')),(0,r.kt)("h2",{id:"project-structure"},"Project Structure"),(0,r.kt)("p",null,"An Abyss application is divided into two products: a frontend and a backend. This is represented as two JavaScript projects within a single ",(0,r.kt)(u,{href:"https://monorepo.tools",mdxType:"ExitLink"},"monorepo"),". A monorepo is a software development strategy where code for many projects is stored in the same repository. We use ",(0,r.kt)(u,{href:"https://docs.npmjs.com/cli/v7/using-npm/workspaces",mdxType:"ExitLink"},"NPM Workspaces")," to make it easy to operate across both projects while keeping them in a single Git repository."),(0,r.kt)("p",null,"The frontend project is called ",(0,r.kt)("strong",{parentName:"p"},"web")," and the backend project is called ",(0,r.kt)("strong",{parentName:"p"},"api"),". They are independent projects - the code on the web side will end up running in the user's browser while code on the api side will run on a server somewhere. The api source includes a ",(0,r.kt)(u,{href:"https://nodejs.org/en/docs/guides/getting-started-guide",mdxType:"ExitLink"},"NodeJS")," server which manages your business logic through GraphQL and REST endpoints. The web source includes a ",(0,r.kt)(u,{href:"https://nextjs.org/docs",mdxType:"ExitLink"},"NextJS")," server which invokes your api and renders components through a React UI."),(0,r.kt)("p",null,"By separating these two development paradigms, you can build applications that are well-organized and able to scale to meet the needs of your business."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-txt"},"\u2514\u2500\u2500 products\n    \u251c\u2500\u2500 api\n    |   \u251c\u2500\u2500 .abyss\n    \u2502   |   \u251c\u2500\u2500 environments.json\n    \u2502   |   \u2514\u2500\u2500 settings.json\n    \u2502   \u251c\u2500\u2500 src\n    \u2502   |   \u251c\u2500\u2500 graphql\n    \u2502   |   |   \u251c\u2500\u2500 schema\n    \u2502   |   |   \u251c\u2500\u2500 index.js\n    \u2502   |   |   \u2514\u2500\u2500 resolvers.js\n    \u2502   |   \u251c\u2500\u2500 routes\n    \u2502   |   |   \u251c\u2500\u2500 index.js\n    \u2502   |   |   \u2514\u2500\u2500 routes.js\n    \u2502   |   \u251c\u2500\u2500 services\n    \u2502   |   \u2514\u2500\u2500 server.js\n    |   \u2514\u2500\u2500 package.json\n    |\n    \u2514\u2500\u2500 web\n        \u251c\u2500\u2500 .abyss\n        |   \u251c\u2500\u2500 environments.json\n        |   \u2514\u2500\u2500 settings.json\n        \u251c\u2500\u2500 src\n        |   \u251c\u2500\u2500 common\n        |   \u251c\u2500\u2500 routes\n        |   |   \u251c\u2500\u2500 index.js\n        |   |   \u2514\u2500\u2500 Routes.jsx\n        |   \u251c\u2500\u2500 client.jsx\n        |   \u2514\u2500\u2500 document.jsx\n        \u2514\u2500\u2500 package.json\n")),(0,r.kt)("h2",{id:"learning-react"},"Learning React"),(0,r.kt)("p",null,"Just starting your journey with React? Abyss is a framework built on top of the ",(0,r.kt)(u,{href:"https://www.npmtrends.com/react-vs-@angular/core-vs-vue",mdxType:"ExitLink"},"popular")," ReactJS library. To get started, visit the ",(0,r.kt)(u,{href:"https://beta.reactjs.org/learn",mdxType:"ExitLink"},"React documentation")," for more in-depth tutorials. If you are interested in learning high-level concepts, check out the ",(0,r.kt)(u,{href:"https://reactjs.org/docs/getting-started.html",mdxType:"ExitLink"},"getting started guide for React"),"."),(0,r.kt)("h2",{id:"developer-tools"},"Developer Tools"),(0,r.kt)("p",null,"Abyss is built using a list of trusted resources. Below are links to what makes up the framework of Abyss."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"() => {\n  const devLinks = [\n    {\n      id: 1,\n      name: 'ReactJS',\n      href: 'https://reactjs.org/',\n    },\n    {\n      id: 3,\n      name: 'Stitches',\n      href: 'https://stitches.dev/',\n    },\n    {\n      id: 4,\n      name: 'React Hook Form',\n      href: 'https://react-hook-form.com/',\n    },\n    {\n      id: 5,\n      name: 'React Router',\n      href: 'https://reactrouter.com/',\n    },\n    {\n      id: 6,\n      name: 'npm ',\n      href: 'https://docs.npmjs.com/about-npm',\n    },\n  ];\n\n  return (\n    <Layout.Stack>\n      <Layout.Group style={{ flexFlow: 'row wrap' }}>\n        {devLinks.map((link) => {\n          return (\n            <Docs.Button\n              variant=\"outline\"\n              style={{\n                borderRadius: '5px',\n                marginRight: '8px',\n                marginBottom: '8px',\n              }}\n              href={link.href}\n              after={<IconMaterial icon=\"arrow_forward\" color=\"$primary1\" />}\n              linkText={link.name}\n            >\n              {link.name}\n            </Docs.Button>\n          );\n        })}\n      </Layout.Group>\n    </Layout.Stack>\n  );\n};\n")),(0,r.kt)("h2",{id:"support"},"Support"),(0,r.kt)("p",null,"If you're ready to get started with Abyss for your next project, check out our ",(0,r.kt)("a",{parentName:"p",href:"/contact-us"},"Contact Us")," page. Submit a new support request and let us know how we can help your team. If you found Abyss to be helpful, please ",(0,r.kt)(u,{href:"https://github.com/uhc-tech/abyss",mdxType:"ExitLink"},"give us a star on github"),"!"))}g.isMDXComponent=!0},34642:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"style-customization",title:"Style Customization",description:"Guide to override CSS styles for Abyss components.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1"},s=void 0,d={unversionedId:"developers/style-customization",id:"developers/style-customization",isDocsHomePage:!1,title:"Style Customization",description:"Guide to override CSS styles for Abyss components.",source:"@site/docs/developers/style-customization.md",sourceDirName:"developers",slug:"/developers/style-customization",permalink:"/developers/style-customization",tags:[],version:"current",frontMatter:{id:"style-customization",title:"Style Customization",description:"Guide to override CSS styles for Abyss components.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1"},sidebar:"docs",previous:{title:"Documentation Guide",permalink:"/developers/documentation-guide"},next:{title:"Component Testing",permalink:"/developers/component-testing"}},p=[{value:"Overview",id:"overview",children:[],level:2},{value:"CSS Prop Overrides",id:"css-prop-overrides",children:[{value:"Slider Example",id:"slider-example",children:[],level:3},{value:"Button Example",id:"button-example",children:[],level:3}],level:2},{value:"Global Theme Configuration",id:"global-theme-configuration",children:[],level:2},{value:"Static Class Names",id:"static-class-names",children:[],level:2}],c={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Every Abyss component supports style customization using class names. Customization should be kept at a minimum, as the Abyss components are set to create a standard across all UHG affiliated products."),(0,i.kt)("h2",{id:"css-prop-overrides"},"CSS Prop Overrides"),(0,i.kt)("p",null,"To apply your styles to any component, go to the ",(0,i.kt)("strong",{parentName:"p"},"Integration")," tab under component documentation and find the classes table. The class name column will tell you how to target specific elements in any component."),(0,i.kt)("h3",{id:"slider-example"},"Slider Example"),(0,i.kt)("p",null,"Here you have a default ",(0,i.kt)("inlineCode",{parentName:"p"},"Slider")," component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = React.useState(25);\n\n  return (\n    <>\n      <Slider\n        label="Default Slider"\n        value={value}\n        onChange={(e) => setValue(e)}\n      />\n    </>\n  );\n};\n')),(0,i.kt)("br",null),(0,i.kt)("p",null,"If you want to customize ",(0,i.kt)("inlineCode",{parentName:"p"},"Slider")," component you can target specific class names to change the styles. Please visit the ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/slider"},"accessibility")," tab in the component documentation page to read more on designing an accessible ",(0,i.kt)("inlineCode",{parentName:"p"},"Slider")," component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Slider}\n  rows={[\n    {\n      name: 'slider-root',\n      description: 'Slider root element',\n    },\n    {\n      name: 'slider-label',\n      description: 'Label',\n    },\n    {\n      name: 'slider-thumb',\n      description: 'Slider thumb',\n    },\n    {\n      name: 'slider-thumb-popover',\n      description: 'Slider thumb popover',\n    },\n    {\n      name: 'slider-track-wrapper',\n      description: 'Track wrapper',\n    },\n    {\n      name: 'slider-track',\n      description: 'Track',\n    },\n    {\n      name: 'slider-track-filler',\n      description: 'Track filler',\n    },\n    {\n      name: 'slider-track-marks',\n      description: 'Marks on track',\n    },\n    {\n      name: 'slider-track-mark-text',\n      description: 'Text at each mark',\n    },\n    {\n      name: 'slider-descriptor',\n      description: 'Descriptor for FormInput',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"<Slider\n  label=\"Custom Slider\"\n  css={{\n    // Add styles to slider label.\n    'abyss-slider-label': {\n      color: '#FF612B',\n    },\n    // Add styles to slider track filler.\n    'abyss-slider-track-filler': {\n      backgroundColor: '#FF612B',\n    },\n    // Add styles to slider thumb.\n    'abyss-slider-thumb': {\n      'border-color': '#FF612B',\n    },\n    // Add styles to slider thumb popover.\n    'abyss-slider-thumb-popover': {\n      backgroundColor: '#FF612B',\n    },\n  }}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState(25);\n\n  return (\n    <>\n      <Slider\n        label=\"Custom Slider\"\n        css={{\n          'abyss-slider-label': {\n            color: '#FF612B',\n          },\n          'abyss-slider-track-filler': {\n            backgroundColor: '#FF612B',\n          },\n          'abyss-slider-thumb': {\n            'border-color': '#FF612B',\n          },\n          'abyss-slider-thumb-popover': {\n            backgroundColor: '#FF612B',\n          },\n        }}\n        value={value}\n        onChange={(e) => setValue(e)}\n      />\n    </>\n  );\n};\n")),(0,i.kt)("h3",{id:"button-example"},"Button Example"),(0,i.kt)("p",null,"Here you have a default ",(0,i.kt)("inlineCode",{parentName:"p"},"Button")," component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Button>Primary Button</Button>\n  <Button variant="outline">Secondary Button</Button>\n</Layout.Group>\n')),(0,i.kt)("br",null),(0,i.kt)("p",null,"Similarly, to customize ",(0,i.kt)("inlineCode",{parentName:"p"},"Button")," component, you can target specific class names to change the styles. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Button")," component should maintain a 3:1 color contrast ratio. Please visit the ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/button"},"accessibility")," tab in the component documentation page to read more on designing an accessible ",(0,i.kt)("inlineCode",{parentName:"p"},"Button")," component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Button}\n  rows={[\n    {\n      name: 'button-root',\n      description: 'Button root element',\n    },\n    {\n      name: 'button-link',\n      description: 'Link element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// Add styles to button.\n<Button css={{ 'abyss-button-root': backgroundColor: '#d9f6fa' }} />\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Layout.Group>\n  <Button\n    css={{\n      'abyss-button-root': {\n        backgroundColor: '#A82A00',\n        borderColor: '#A82A00',\n        color: '#FFFFFF',\n\n        '&:hover': {\n          backgroundColor: '#DB3700',\n          borderColor: '#DB3700',\n        },\n      },\n    }}\n  >\n    Custom Button\n  </Button>\n  <Button\n    variant=\"outline\"\n    css={{\n      'abyss-button-root': {\n        backgroundColor: '#d9f6fa',\n        borderColor: '#d9f6fa',\n        color: '#002677',\n\n        '&:hover': {\n          backgroundColor: '#d9f6fa',\n          borderColor: '#d9f6fa',\n          'box-shadow': '1px 1px 1px #dadbdc',\n        },\n      },\n    }}\n  >\n    Custom Button\n  </Button>\n</Layout.Group>\n")),(0,i.kt)("h2",{id:"global-theme-configuration"},"Global Theme Configuration"),(0,i.kt)("p",null,"The root colors and theme settings are included in the tokens, and can be accessed anywhere styleProps are loaded."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'() => {\n  const theme = useAbyssTheme();\n  return (\n    <CodeHighlighter code={JSON.stringify(theme, null, 2)} language="json" />\n  );\n};\n')),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"static-class-names"},"Static Class Names"),(0,i.kt)("p",null,"Apart from class names, each component also has static classes on each element. You can use them to apply your style sheets if you do not use css modules."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<CodeHighlighter\n  code={`.abyss-box-root {\n  color: lightblue;\n  background-color: verdana;\n  border: 3px solid red;\n  box-shadow: 2px 2px 7px 1px grey;\n}\n\n.abyss-text-input-label {\n  color: white;\n  text-align: center;\n}`}\n  language="css"\n/>\n')))}u.isMDXComponent=!0},2080:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"versioning-guide",title:"Versioning Guide",pagination_next:null},s=void 0,d={unversionedId:"developers/versioning-guide",id:"developers/versioning-guide",isDocsHomePage:!1,title:"Versioning Guide",description:"Overview",source:"@site/docs/developers/versioning-guide.md",sourceDirName:"developers",slug:"/developers/versioning-guide",permalink:"/developers/versioning-guide",tags:[],version:"current",frontMatter:{id:"versioning-guide",title:"Versioning Guide",pagination_next:null},sidebar:"docs",previous:{title:"Accessibility Testing",permalink:"/developers/accessibility-testing"}},p=[{value:"Overview",id:"overview",children:[],level:2},{value:"Semantic Versioning",id:"semantic-versioning",children:[],level:2},{value:"Release Frequency",id:"release-frequency",children:[],level:2},{value:"Deprecation Practices",id:"deprecation-practices",children:[],level:2},{value:"Deprecation Policy",id:"deprecation-policy",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("ExitLink"),m=c("SemanticVersion"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Stability ensures that reusable components and libraries, tutorials, tools, and learned practices don't become obsolete unexpectedly. Stability is essential for the ecosystem around Abyss to thrive."),(0,i.kt)("p",null,"This document contains the practices that are followed to provide you with a leading-edge UI library, balanced with stability, ensuring that future changes are always introduced in a predictable way."),(0,i.kt)("h2",{id:"semantic-versioning"},"Semantic Versioning"),(0,i.kt)("p",null,"Abyss follows ",(0,i.kt)(u,{href:"https://semver.org",mdxType:"ExitLink"},"Semantic Versioning 2.0.0"),". Abyss version numbers have three parts: major.minor.patch. The version number is incremented based on the level of change included in the release."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Major releases")," contain significant new features, some but minimal developer assistance is expected during the update. When updating to a new major release, you may need to run update scripts, refactor code, run additional tests, and learn new APIs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Minor releases")," contain important new features. Minor releases should be fully backward-compatible; no developer assistance is expected during update, but you can optionally modify your apps and libraries to begin using new APIs, features, and capabilities that were added in the release."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Patch releases")," are low risk, contain bug fixes and small new features. No developer assistance is expected during update.")),(0,i.kt)(m,{mdxType:"SemanticVersion"}),(0,i.kt)("h2",{id:"release-frequency"},"Release Frequency"),(0,i.kt)("p",null,"A regular schedule of releases helps you plan and coordinate your updates with the continuing evolution of Abyss. In general, you can expect the following release cycle:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"major")," release typically every year for major changes."),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"minor")," releases every two weeks after each sprint."),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"patch")," release at any time for urgent bugfixes.")),(0,i.kt)("h2",{id:"deprecation-practices"},"Deprecation Practices"),(0,i.kt)("p",null,"Sometimes ",(0,i.kt)("strong",{parentName:"p"},'"breaking changes"'),", such as the removal of support for select APIs and features, are necessary."),(0,i.kt)("p",null,"To make these transitions as easy as possible:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The number of breaking changes is minimized, and migration tools provided when possible."),(0,i.kt)("li",{parentName:"ul"},"The deprecation policy described below is followed, so that you have time to update your apps to the latest APIs and best practices.")),(0,i.kt)("h2",{id:"deprecation-policy"},"Deprecation Policy"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Deprecated features are announced in the changelog, and when possible, with warnings at runtime."),(0,i.kt)("li",{parentName:"ul"},"When a deprecation is announced, recommended update path is provided."),(0,i.kt)("li",{parentName:"ul"},"Existing use of a stable API during the deprecation period is supported, so your code will keep working during that period."),(0,i.kt)("li",{parentName:"ul"},"Peer dependency updates (React) that require changes to your apps are only made in a major release.")))}h.isMDXComponent=!0},67157:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"workspace-setup",title:"Workspace Setup"},d=void 0,p={unversionedId:"developers/workspace-setup",id:"developers/workspace-setup",isDocsHomePage:!1,title:"Workspace Setup",description:"Overview",source:"@site/docs/developers/workspace-setup.md",sourceDirName:"developers",slug:"/developers/workspace-setup",permalink:"/developers/workspace-setup",tags:[],version:"current",frontMatter:{id:"workspace-setup",title:"Workspace Setup"},sidebar:"docs",previous:{title:"Design Checklist",permalink:"/designers/design-checklist"},next:{title:"Getting Started",permalink:"/developers/getting-started"}},c=[{value:"Overview",id:"overview",children:[],level:2},{value:"Secure Groups",id:"secure-groups",children:[],level:2},{value:"VSCode Editor",id:"vscode-editor",children:[],level:2},{value:"VSCode Extensions",id:"vscode-extensions",children:[],level:2},{value:"Chrome Browser",id:"chrome-browser",children:[],level:2},{value:"Chrome Browser Extensions",id:"chrome-browser-extensions",children:[],level:2},{value:"System Essentials",id:"system-essentials",children:[],level:2},{value:"Git Branch Names",id:"git-branch-names",children:[],level:2}],u=(a="ExitLink",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,a=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Developing modern JavaScript applications requires efficient, powerful, and extensible tooling. Consistency across developer machines is a priority when collaborating across highly distributed teams. The following is a guide for installing the preferred environment for JS development."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"workspace setup",src:t(83153).Z})),(0,r.kt)("h2",{id:"secure-groups"},"Secure Groups"),(0,r.kt)("p",null,"Visit ",(0,r.kt)(u,{href:"https://secure.uhc.com",mdxType:"ExitLink"},"secure.uhc.com")," to request permissions groups:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"github_users"),": To access ",(0,r.kt)(u,{href:"https://github.com",mdxType:"ExitLink"},"github.com")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Mac_Admin"),": To install software for macOS users only")),(0,r.kt)("h2",{id:"vscode-editor"},"VSCode Editor"),(0,r.kt)("p",null,"To write code for UI projects, it is ",(0,r.kt)("strong",{parentName:"p"},"highly recommended")," that you download and install ",(0,r.kt)(u,{href:"https://code.visualstudio.com",mdxType:"ExitLink"},"Visual Studio Code"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://code.visualstudio.com/assets/home/home-screenshot-mac-lg-2x.png",alt:"Visual Studio Code"})),(0,r.kt)("h2",{id:"vscode-extensions"},"VSCode Extensions"),(0,r.kt)("p",null,"Recommended extensions will be suggested to you when you visit the VSCode Marketplace."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint",mdxType:"ExitLink"},"ESLint")," - code syntax validator")),(0,r.kt)("p",null,"ESLint is a JavaScript linting tool which is used for automatically detecting incorrect patterns found in ECMAScript/JavaScript code. It is used with the purpose of improving code quality, making code more consistent, and avoiding bugs. Rules can be configured to look for all kinds of discrepancies due to discouraged code patterns or formatting. Running a Linting tool over the source code helps to improve the quality and readability of the code."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode",mdxType:"ExitLink"},"Prettier")," - code formatter")),(0,r.kt)("p",null,"Prettier is very popular because it improves code readability and makes the coding style consistent for teams. Developers are more likely to adopt a standard rather than writing their own code style from scratch, so tools like Prettier will make your code look good without you ever having to dabble in the formatting."),(0,r.kt)("h2",{id:"chrome-browser"},"Chrome Browser"),(0,r.kt)("p",null,'To install Google Chrome, use the "Self Service" application on your desktop.'),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Google Chrome",src:t(95527).Z})),(0,r.kt)("h2",{id:"chrome-browser-extensions"},"Chrome Browser Extensions"),(0,r.kt)("p",null,"In Chrome, you may install the following recommended extensions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi",mdxType:"ExitLink"},"React Developer Tools")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk",mdxType:"ExitLink"},"Google Lighthouse")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd",mdxType:"ExitLink"},"axe DevTools")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://chrome.google.com/webstore/detail/colorpick-eyedropper/ohcpnigalekghcmgcdcenkpelffpdolg",mdxType:"ExitLink"},"ColorPick Eyedropper"))),(0,r.kt)("h2",{id:"system-essentials"},"System Essentials"),(0,r.kt)("p",null,"To run all JS-based applications, it is ",(0,r.kt)("strong",{parentName:"p"},"highly recommended")," to have these tools installed:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://mac.install.guide/commandlinetools/4.html",mdxType:"ExitLink"},"Xcode Command Line Tools")," (Mac Only)")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"xcode-select")," contains necessary utilities for software development on macOS."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ xcode-select --install\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"After install, exit and restart Terminal (CMD + Q)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ xcode-select --version\n")),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://ohmyz.sh/",mdxType:"ExitLink"},"oh-my-zsh")," >= 5.3.0")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"zsh")," is an upgrade to the native shell which provides a delightful terminal experience."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"After install, exit and restart Terminal (CMD + Q)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ omz version\n")),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://github.com/nvm-sh/nvm",mdxType:"ExitLink"},"node")," >= 16.0.0")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"nvm")," is a great tool for installing and upgrading versions of Node on your system."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"After install, exit and restart Terminal (CMD + Q)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ nvm --version\n\n$ nvm install 16 && nvm use 16 && nvm alias default 16\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"After install, exit and restart Terminal (CMD + Q)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ npm --version\n\n$ npm config set registry https://repo1.uhc.com/artifactory/api/npm/npm-virtual\n")),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git",mdxType:"ExitLink"},"git")," >= 2.0.0")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"git")," is a universal version control system for working collaboratively and efficiently."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ git config --global user.id "YOUR_MS_ID"\n\n$ git config --global user.email "YOUR_EMAIL@optum.com"\n')),(0,r.kt)("h2",{id:"git-branch-names"},"Git Branch Names"),(0,r.kt)("p",null,"Naming the branch you're working on helps repository maintainers understand the changes being made when the PR is opened. Using consistent branch name prefixes also allows build tools to automatically categorize the branches using labels. Branch names should be all lowercase (with the exception of US and DE) and include hyphens between words. All branches are divided into four groups:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"story/#######")," - Changes associated with a User Story, use the unique 7-digit number from Rally followed by a task description.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"defect/#######")," - Changes associated with a Defect, use the unique 7-digit number from Rally followed by a task description.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"refactor/")," - Changes to the repo that aren't documented in Rally are considered refactors, so use the task portion to add detail to your branch name.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"release/")," - Used specifically by build tools, this branch name is exclusive to release notes and documentation leading up to a new release."))),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git checkout -b story/US2434515-developer-toolkit\n\ngit checkout -b defect/DE308703-button-accessibility\n\ngit checkout -b refactor/select-list-multi-docs\n\ngit checkout -b story/US1533842-use-loading-overlay\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"Branch Name Rules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Branch prefix must start with ",(0,r.kt)("strong",{parentName:"li"},"story"),", ",(0,r.kt)("strong",{parentName:"li"},"defect"),", ",(0,r.kt)("strong",{parentName:"li"},"refactor"),", or ",(0,r.kt)("strong",{parentName:"li"},"release")),(0,r.kt)("li",{parentName:"ul"},"Branch name must be only ",(0,r.kt)("strong",{parentName:"li"},"lowercase letters, numbers, and hypens")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"US###")," and ",(0,r.kt)("strong",{parentName:"li"},"DE###")," are valid character exceptions")))}g.isMDXComponent=!0},99550:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>b,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"brandmark",category:"Foundations",title:"Brandmark",description:"Logos/Brandmarks for Optum brands.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=2398%3A21821",pagination_prev:null},s=void 0,d={unversionedId:"foundations/optum/brandmark",id:"foundations/optum/brandmark",isDocsHomePage:!1,title:"Brandmark",description:"Logos/Brandmarks for Optum brands.",source:"@site/docs/foundations/optum/Brandmark.md",sourceDirName:"foundations/optum",slug:"/foundations/optum/brandmark",permalink:"/foundations/optum/brandmark",tags:[],version:"current",frontMatter:{id:"brandmark",category:"Foundations",title:"Brandmark",description:"Logos/Brandmarks for Optum brands.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=2398%3A21821",pagination_prev:null},sidebar:"docs",next:{title:"Colors",permalink:"/foundations/optum/colors"}},p=[{value:"Brand",id:"brand",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Affiliate",id:"affiliate",children:[],level:2},{value:"Variant",id:"variant",children:[],level:2},{value:"Color",id:"color",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g=c("BrandmarkLibrary"),h={toc:p};function b(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Brandmark } from '@abyss/web/ui/Brandmark';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Brandmark',\n  inputs: [\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'affiliate',\n      type: 'select',\n      options: [\n        { label: 'optum', value: 'optum' },\n        { label: 'optum_financial', value: 'optum_financial' },\n        { label: 'optum_frontier_therapies', value: 'optum_frontier_therapies' },\n        { label: 'optum_perks', value: 'optum_perks' },\n        { label: 'optum_prescription', value: 'optum_prescription' },\n        { label: 'optum_serve', value: 'optum_serve' },\n        { label: 'optum_store', value: 'optum_store' },\n      ],\n    },\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'lockup', value: 'lockup' },\n      ]\n    },\n    {\n      prop: 'color',\n      type: 'select',\n      options: [\n        { label: 'white', value: 'white' },\n        { label: 'black', value: 'black' },\n        { label: 'orange', value: 'orange' },\n      ]\n    },\n  ]\n}\n\n<Box color=\"$tint1\" padding=\"50px\">\n  <Brandmark\n    brand=\"optum\"\n    size=\"100%\"\n    affiliate=\"optum\"\n    variant=\"lockup\"\n    color=\"orange\"\n  />\n</Box>\n")),(0,i.kt)("h2",{id:"brand"},"Brand"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"brand")," property to adjust which brand is being selected."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Box color="$white" padding="50px">\n    <Brandmark\n      brand="optum"\n      size="$lg"\n      affiliate="optum"\n      variant="lockup"\n      color="orange"\n    />\n  </Box>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," property to adjust the size of the brandmark."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Box color="$white" padding="50px">\n    <Brandmark\n      brand="optum"\n      size="$sm"\n      affiliate="optum"\n      variant="lockup"\n      color="orange"\n    />\n  </Box>\n  <Box color="$white" padding="50px">\n    <Brandmark\n      brand="optum"\n      size="$lg"\n      affiliate="optum"\n      variant="lockup"\n      color="orange"\n    />\n  </Box>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"affiliate"},"Affiliate"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"affiliate")," property to select the required brandmark affiliates."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Box color="$primary1" padding="50px">\n    <Brandmark\n      brand="optum"\n      size="$lg"\n      affiliate="optum_financial"\n      variant="lockup"\n      color="white"\n    />\n  </Box>\n  <Box color="$primary1" padding="50px">\n    <Brandmark\n      brand="optum"\n      size="$lg"\n      affiliate="optum_perks"\n      variant="lockup"\n      color="white"\n    />\n  </Box>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"variant"},"Variant"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," property to select the required brandmark variants."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Box color="$primary1" padding="50px">\n    <Brandmark\n      brand="optum"\n      size="$lg"\n      affiliate="optum"\n      variant="lockup"\n      color="white"\n    />\n  </Box>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"color"},"Color"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"color")," property to select available brandmark colors."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Box color="$primary1" padding="50px">\n    <Brandmark\n      brand="optum"\n      size="$lg"\n      affiliate="optum"\n      variant="lockup"\n      color="white"\n    />\n  </Box>\n  <Box color="$white" padding="50px">\n    <Brandmark\n      brand="optum"\n      size="$lg"\n      affiliate="optum"\n      variant="lockup"\n      color="orange"\n    />\n  </Box>\n</Layout.Group>\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Brandmark}\n  rows={[\n    {\n      name: 'brand',\n      type: 'optum',\n      description: 'Indicates which brand you want your brandmark from',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the brandmark',\n    },\n    {\n      name: 'affiliate',\n      type: 'optum | optum_financial | optum_frontier_therapies | optum_perks | optum_prescription | optum_serve | optum_store',\n      description: 'Indicates the brandmark affiliate',\n    },\n    {\n      name: 'variant',\n      type: 'lockup',\n      description: 'Indicates the brandmark variant',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set color option of the brandmark',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Brandmark}\n  rows={[\n    {\n      name: 'brandmark',\n      description: 'Brandmark root element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Brandmarks",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<h2>Brandmarks</h2>\n")),(0,i.kt)("br",null),(0,i.kt)("p",null,"The source for these brandmarks can be found in the ",(0,i.kt)(m,{href:"https://brand.optum.com/content/wordmark-resources",mdxType:"ExitLink"},"Brandmark Library"),"."),(0,i.kt)("p",null,"You can use the search functionality to find the required brandmark. Brandmarks can be searched using their affiliates, variants or colors."),(0,i.kt)(g,{brand:"optum",mdxType:"BrandmarkLibrary"})))}b.isMDXComponent=!0},49355:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>b,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"icon-brand",slug:"/foundations/optum/icon-brand",category:"Foundations",title:"IconBrand",description:"Used to implement Brand icons and adapt their properties.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A10709",pagination_prev:"foundations/optum/typography",pagination_next:null},s=void 0,d={unversionedId:"foundations/optum/icon-brand",id:"foundations/optum/icon-brand",isDocsHomePage:!1,title:"IconBrand",description:"Used to implement Brand icons and adapt their properties.",source:"@site/docs/foundations/optum/IconBrand.md",sourceDirName:"foundations/optum",slug:"/foundations/optum/icon-brand",permalink:"/foundations/optum/icon-brand",tags:[],version:"current",frontMatter:{id:"icon-brand",slug:"/foundations/optum/icon-brand",category:"Foundations",title:"IconBrand",description:"Used to implement Brand icons and adapt their properties.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A10709",pagination_prev:"foundations/optum/typography",pagination_next:null},sidebar:"docs",previous:{title:"Typography",permalink:"/foundations/optum/typography"}},p=[{value:"Icons",id:"icons",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Brand Icon Variants",id:"brand-icon-variants",children:[],level:2},{value:"Meaningful or Control Icons",id:"meaningful-or-control-icons",children:[],level:2},{value:"Decorative Icons",id:"decorative-icons",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g=c("IconLibrary"),h={toc:p};function b(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { IconBrand } from '@abyss/web/ui/IconBrand';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'IconBrand',\n  inputs: [\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'one tone', value: 'onetone' },\n        { label: 'two tone', value: 'twotone' },\n        { label: 'one tone w/ dark circle', value: 'onetonedarkcircle' },\n        { label: 'two tone w/ dark circle', value: 'twotonedarkcircle' },\n        { label: 'two tone w/ light circle', value: 'twotonelightcircle' },\n      ],\n    },\n    {\n      prop: 'icon',\n      type: 'string',\n    },\n  ]\n}\n\n<IconBrand icon=\"home\" size=\"24px\" variant=\"twotonedarkcircle\"/>\n")),(0,i.kt)("h2",{id:"icons"},"Icons"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"icon")," property to adjust which icon is being selected."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="alert" size={48} />\n  <IconBrand icon="piggy_bank" size={48} />\n  <IconBrand icon="music" size={48} />\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," property to adjust the size of an icon by setting it to a specific number. The default size is set to 24."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="home" />\n  <IconBrand icon="home" size={32} />\n  <IconBrand icon="home" size={48} />\n  <IconBrand icon="home" size={64} />\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"brand-icon-variants"},"Brand Icon Variants"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," property to change the style of Brand icons. Available variants are ",(0,i.kt)("inlineCode",{parentName:"p"},"twotonedarkcircle"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"twotonelightcircle"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"twotone"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"onetonedarkcircle"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"onetone"),". The default variant is ",(0,i.kt)("inlineCode",{parentName:"p"},"twotonedarkcircle"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Grid columns={5} span={{ md: \'50%\', lg: \'20%\' }}>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        onetonedarkcircle\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetonedarkcircle" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetonedarkcircle" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetonedarkcircle" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetonedarkcircle" />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        twotonedarkcircle\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonedarkcircle" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonedarkcircle" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonedarkcircle" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonedarkcircle" />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        twotonelightcircle\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonelightcircle" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonelightcircle" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonelightcircle" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonelightcircle" />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        onetone\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetone" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetone" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetone" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <Layout.Space space={48} />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        twotone\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotone" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotone" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotone" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <Layout.Space space={48} />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n</Grid>\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Icon}\n  rows={[\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the icon',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The svg content of the icon',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the icon',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the icon',\n    },\n    {\n      name: 'isScreenReadable',\n      type: 'boolean',\n      description:\n        'Indicate whether the icon is screen readable or not. If the icon is Screen Readable, then provide a title',\n    },\n    {\n      name: 'onProcessSVG',\n      type: 'function',\n      description: 'The svg content of the icon',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description:\n        '(not currently functioning) Pre programmed sizes for the icons',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={IconBrand}\n  rows={[\n    {\n      name: 'icon',\n      type: 'string',\n      description: 'Name of the brand icon',\n    },\n    {\n      name: 'variant',\n      type: 'twotonedarkcircle | twotonelightcircle | twotone | onetonedarkcircle | onetone',\n      description: 'The style/color variation of the brand icon',\n    },\n    {\n      name: 'brand',\n      type: 'uhc | optum',\n      description:\n        'indicates which brand you want your icon from. This changes the colors of the icon to match the brand you select',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the brand icon',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set color option 1 of the brand icon',\n    },\n    {\n      name: 'color2',\n      type: 'string',\n      description: 'Set color option 2 of the brand icon',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the brand icon',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Icon}\n  rows={[\n    {\n      name: 'icon-root',\n      description: 'Icon root element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={IconBrand}\n  rows={[\n    {\n      name: 'icon-brand-root',\n      description: 'IconBrand root element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("h2",{id:"meaningful-or-control-icons"},"Meaningful or Control Icons"),(0,i.kt)("p",null,"If the icon is being used in a setting where it is the only element providing meaning, then that same meaning should be conveyed to screen reader users. The below implementation provides examples of situations in which the property ",(0,i.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," should be set to true and the ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," property is required and should describe the purpose of the image."),(0,i.kt)("p",null,"Example 1: An alert icon is used to convey a sense of urgency; there is adjacent text (\u201cThere is a data outage\u201d) but the text doesn't include any words that convey urgency. So, in this case, the icon should have a text alternative such as \u201cAlert\u201d or \u201cWarning\u201d."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand title="alert" icon="alert" isScreenReadable={true} size={24} />\n  <div>There is a data outage</div>\n</Layout.Group>\n')),(0,i.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog. There is no adjacent text, so the icon should have a text alternative of \u201cclose\u201d or \u201cclose window\u201d.",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial title="close" icon="close" isScreenReadable={true} size={24} />\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"decorative-icons"},"Decorative Icons"),(0,i.kt)("p",null,"If the icon is being used in a setting in which it just a decorative element (which is the default case for icons), then the icon should be ignored by screen readers. The below implementation provides example of which situations would be classified as decorative. Since the default of ",(0,i.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," is set to false no specific changes need to be made for decorative icons."),(0,i.kt)("p",null,"Example 1: An alert icon is used next to an urgent message and the word \u201cAlert\u201d is included in the adjacent text. In this case, the icon becomes decorative in nature and should be ignored by screen readers."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="alert" size={24} />\n  <div>Alert: There is a data outage</div>\n</Layout.Group>\n')),(0,i.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog; the word \u201cClose\u201d appears to the right of the button. In this case, the icon should be considered decorative and ignored by screen readers.",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial icon="close" size={24} />\n  <div>Close</div>\n</Layout.Group>\n'))),(0,i.kt)(u,{label:"Brand Icons",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<h2>Brand Icons</h2>\n")),(0,i.kt)("p",null,"Abyss uses Brand's branded iconography that is designed to aid wayfinding, draw attention and support messaging."),(0,i.kt)("p",null,"The source for these design icons can be found in the ",(0,i.kt)(m,{href:"https://brand.optum.com/content/iconography",mdxType:"ExitLink"},"Brand Icons Library"),"."),(0,i.kt)(g,{brand:"optum",mdxType:"IconLibrary"})))}b.isMDXComponent=!0},97519:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"colors",title:"Colors",category:"Foundations",pagination_prev:"foundations/optum/brandmark",pagination_next:"foundations/optum/typography"},s=void 0,d={unversionedId:"foundations/optum/colors",id:"foundations/optum/colors",isDocsHomePage:!1,title:"Colors",description:"Overview",source:"@site/docs/foundations/optum/colors.md",sourceDirName:"foundations/optum",slug:"/foundations/optum/colors",permalink:"/foundations/optum/colors",tags:[],version:"current",frontMatter:{id:"colors",title:"Colors",category:"Foundations",pagination_prev:"foundations/optum/brandmark",pagination_next:"foundations/optum/typography"},sidebar:"docs",previous:{title:"Brandmark",permalink:"/foundations/optum/brandmark"},next:{title:"Typography",permalink:"/foundations/optum/typography"}},p=[{value:"Overview",id:"overview",children:[],level:2},{value:"Primary",id:"primary",children:[],level:2},{value:"Secondary",id:"secondary",children:[],level:2},{value:"Accent",id:"accent",children:[],level:2},{value:"Interactive",id:"interactive",children:[{value:"Tint",id:"tint",children:[],level:3}],level:2},{value:"Supporting",id:"supporting",children:[{value:"Status",id:"status",children:[],level:3},{value:"Neutrals",id:"neutrals",children:[],level:3}],level:2},{value:"Accessibility",id:"accessibility",children:[],level:2}],c={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Color differentiates our brands and helps create consistent experiences across our digital products. We use color to help our users know exactly what they need to focus on."),(0,i.kt)("p",null,"We are committed to complying with the Web Content Accessibility Guidelines AA standard contrast ratios. To do this, choose primary, secondary, and extended colors that support usability by ensuring sufficient color contrast between elements."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"primary"},"Primary"),(0,i.kt)("p",null,"Our bold primary palette is used in logical ways throughout our products, marketing and sales to guide the eye and highlight important features. Utilizing our softer secondary colors, we bring warmth to the user experience to impart optimism and confidence."),(0,i.kt)("p",null,"We use blue ($primary1) for primary actions, buttons, text links, for indicating progress and representing authentication. These colors are used in combination wherever a color theme may be desired. The Abyss theme can be adjusted on a case by case basis to allow for custom color components."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$primary1" name="Dark Blue">\n      Primary typography, navigation bar, button background, and component\n      headers. This is the most common occuring blue, and should be used the\n      most often.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$primary2" name="White">\n      Used as the secondary color of our components. Primarily used for\n      backgrounds or to contrast with $primary1.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"secondary"},"Secondary"),(0,i.kt)("p",null,"Secondary colors are mostly used when a designer uses one or more of the brand's illustrated assets within a digital solution."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$secondary1" name="Bright Blue">\n      Use as accents to bring warmth and lightness to our imagery and graphic\n      treatments.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$secondary2" name="Gold">\n      Use as accents to bring warmth and lightness to our imagery and graphic\n      treatments.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$secondary3" name="Orange">\n      Use as accents to bring warmth and lightness to our imagery and graphic\n      treatments.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"accent"},"Accent"),(0,i.kt)("p",null,"The accent color is used to keep things fresh and interesting. We lean on this color more frequently when brand awareness is high, or on our own properties where we control the surrounding environment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$accent1" name="Accent Orange">\n      Use in communications, but can vary in amount from larger floods of color\n      to small details in brand elements.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"interactive"},"Interactive"),(0,i.kt)("p",null,"Our interactive palette contains a variety of colors make every moment feel on-brand and every interaction informative. Each color is selected intentionally to provide meaningful feedback within our products."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$interactive1" name="Interactive Active">\n      Use for elements the user can interact with such as links or icons.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$interactive2" name="Interactive Hover">\n      Use when implementing hover for an $interactive1 element.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$interactive3" name="Interactive Light">\n      Use when implementing hover for a secondary button.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"tint"},"Tint"),(0,i.kt)("p",null,"Tints are reserved for containing boxes to highlight information. Tints are used for background fills, visual sectioning, and callouts. They appear behind scrollable content to add visual sectioning and accents."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$tint1" name="Warm White">\n      Use in background colors for layouts, illustrations, product and\n      portraiture photography.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$tint2" name="Sky Blue">\n      Use in background colors for layouts, illustrations, product and\n      portraiture photography.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"supporting"},"Supporting"),(0,i.kt)("p",null,"Supporting colors are primarily used for infographics and data visualizations."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$supporting1" name="Violet">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$supporting2" name="Iris">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$supporting3" name="Lagoon">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$supporting4" name="Rainwater">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$supporting5" name="Strawberry">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$supporting6" name="Apple">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("h3",{id:"status"},"Status"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$success1" name="Success">\n      Use to indicate success to the user such as upon completion of a form.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$success2" name="Success Light">\n      Use for a hover or unfocused version of success.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$error1" name="Error">\n      Use to indicate an error to the user such as when a form submission fails.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$error2" name="Error Light">\n      Use for a hover or unfocused version of error.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$warning1" name="Warning">\n      Use to indicate a warning to the user such as when a form submission goes\n      through but may be inaccurate.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$warning2" name="Warning Light">\n      Use for a hover or unfocused version of warning.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$info1" name="Info">\n      Use to indicate information to the user such as after a form is submitted\n      and important information needs to be conveyed.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$info2" name="Info Light">\n      Use for a hover or unfocused version of info.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("h3",{id:"neutrals"},"Neutrals"),(0,i.kt)("p",null,'Neutrals have varying degrees of saturation that allow for the appropriate level of warmth across marketing and product. Typically they are used for text and subtle backgrounds when we don\'t want to draw too much attention to a particular touchpoint or convey information such as "disabled". Gray tints are limited to print when black is the only color option.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$white" name="White">\n      Use White as a background or to contrast with darker colors. Implement\n      white where it will never be necessary for the color theme to change.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray1" name="Gray 1">\n      Use as a background color for delineation in Layouts.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray2" name="Gray 2">\n      Use as a background color for delineation in Layouts.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray3" name="Gray 3">\n      Use as a background color for delineation in Layouts.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray4" name="Gray 4">\n      Use for additional delineation in Layouts.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray5" name="Gray 5">\n      Use for disabled text only.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray6" name="Gray 6">\n      Use for paragraph text.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray7" name="Gray 7">\n      Use for labels and borders. When used on white background it may be used\n      for legal copy.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray8" name="Gray 8">\n      Use for headings h4-h6, body text and dark accents such as outlines, and\n      actions.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$black" name="Black">\n      Use for headings, body text and dark accents such as outlines, and\n      actions.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"accessibility"},"Accessibility"),(0,i.kt)("p",null,"Color choices that are accessible ensure everyone can not only see every element on a page, but also understand a specific, intended meaning. You want everyone to be able to see the difference between two colors right next to or on top of each other."),(0,i.kt)("p",null,"Contrast refers to the perceived difference between foreground and background colors. People with low vision or color blindness, and those who have difficulty seeing the differences between colors all can have trouble seeing where one element ends and another begins. As we age, the shape of our eyes changes and that affects both how we perceive color and how well we can distinguish variations in color. If the contrast between different elements is too low, people may not be able to see them at all."),(0,i.kt)("p",null,"Contrast is expressed as a ratio with the first number representing the foreground color and the second representing the background color. For example, 3:1 means the foreground item color is three times more intense or visible than the background value. Contrast rules apply to text as well as any content that conveys meaning, including icons, graphics and form elements. Tools such as Colour Contrast Analyser or WebAIM's online color contrast tool are useful for verifying contrast ratios."),(0,i.kt)("p",null,"Color and contrast choices within a digital experience are accessible when people can:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"See UI elements and content"),(0,i.kt)("li",{parentName:"ul"},"Understand and interpret information"),(0,i.kt)("li",{parentName:"ul"},"Take action")),(0,i.kt)("p",null,"Our aim is to provide a contrast ratio that can be perceived by all users. For this reason, UnitedHealthcare has embraced a minimum contrast ratio of 4.5:1 (foreground vs background) for UI elements and content that convey meaning."),(0,i.kt)("b",null,"Recommendations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Include color combinations, good contrast and poor contrast, in design documentation"),(0,i.kt)("li",{parentName:"ul"},"Communicate meaning with more than just color, such as with color and descriptive text"),(0,i.kt)("li",{parentName:"ul"},"Give focus indicators a unique presentation that meets contrast requirements on all backgrounds")),(0,i.kt)("b",null,"Test for a minimum contrast ratio 4.5 to 1 for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Non-bolded text smaller than 24 pixels (18 points)"),(0,i.kt)("li",{parentName:"ul"},"Bold text smaller than 18 pixels (14 points)"),(0,i.kt)("li",{parentName:"ul"},"Essential icons that are close to body text size")),(0,i.kt)("b",null,"Test that non-text elements that communicate information meet a minimum contrast ratio of 3 to 1 for all states:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Icons"),(0,i.kt)("li",{parentName:"ul"},"Data visualizations"),(0,i.kt)("li",{parentName:"ul"},"Focus indicators"),(0,i.kt)("li",{parentName:"ul"},"Controls, including their borders or boundaries"),(0,i.kt)("li",{parentName:"ul"},"Non-bolded text at or above 24 pixels (18 points)"),(0,i.kt)("li",{parentName:"ul"},"Bold text at or above 18 pixels (14 points) in size")),(0,i.kt)("p",null,"Don't worry about contrast for logos and disabled elements. Watch out for using color alone to communicate meaning. People who are color blind or blind cannot perceive the meaning by color alone."))}u.isMDXComponent=!0},11635:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"typography",title:"Typography",category:"Foundations",description:"Typography for Optum brands",pagination_prev:"foundations/optum/colors",pagination_next:"foundations/optum/icon-brand"},d=void 0,p={unversionedId:"foundations/optum/typography",id:"foundations/optum/typography",isDocsHomePage:!1,title:"Typography",description:"Typography for Optum brands",source:"@site/docs/foundations/optum/typography.md",sourceDirName:"foundations/optum",slug:"/foundations/optum/typography",permalink:"/foundations/optum/typography",tags:[],version:"current",frontMatter:{id:"typography",title:"Typography",category:"Foundations",description:"Typography for Optum brands",pagination_prev:"foundations/optum/colors",pagination_next:"foundations/optum/icon-brand"},sidebar:"docs",previous:{title:"Colors",permalink:"/foundations/optum/colors"},next:{title:"IconBrand",permalink:"/foundations/optum/icon-brand"}},c=[{value:"Overview",id:"overview",children:[],level:2},{value:"Headings",id:"headings",children:[],level:2},{value:"Display",id:"display",children:[{value:"<b>Recommendations</b>",id:"recommendations",children:[],level:4}],level:2},{value:"Body Copy Text",id:"body-copy-text",children:[{value:"<b>Recommendations</b>",id:"recommendations-1",children:[],level:4}],level:2},{value:"Accessibility",id:"accessibility",children:[],level:2}],u=(a="ExitLink",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Typography is the art and technique of arranging type to make written language legible. In the Abyss library, ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/heading"},"Heading")," and ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/text"},"Text")," dive into the detail behind text formatting for Optum branding. More in depth guidance on typography can be found below and in the ",(0,r.kt)(u,{href:"https://brand.optum.com/content/typography",mdxType:"ExitLink"},"Optum Brand Page"),"."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"headings"},"Headings"),(0,r.kt)("p",null,"Headings identify chunks of related content on a page and establish the hierarchy showing how those chunks of content relate to each other. If someone reads only the headings on a page, they will get a general understanding of the information presented."),(0,r.kt)("p",null,"HTML defines six heading levels: H1 to H6."),(0,r.kt)("p",null,"H1 identifies an entire page, or overall topic, and is the most important level. There should only be 1 H1 per page."),(0,r.kt)("p",null,"Find further documentation in the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/heading"},"Heading")," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Layout.Stack grow>\n  <Docs.TypeTile type="h1">\n    <Heading>Heading 1</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type="h2">\n    <Heading offset={1}>Heading 2</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type="h3">\n    <Heading offset={2}>Heading 3</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type="h4">\n    <Heading offset={3}>Heading 4</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type="h5">\n    <Heading offset={4}>Heading 5</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type="h6">\n    <Heading offset={5}>Heading 6</Heading>\n  </Docs.TypeTile>\n</Layout.Stack>\n')),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"display"},"Display"),(0,r.kt)("p",null,"Display sizes are headers with H1 tags that have a greater size than a regular H1."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Layout.Stack grow>\n  <Docs.TypeTile type={'h1[data-display=\"1\"]'}>\n    <Heading display={1}>Display 1</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type={'h1[data-display=\"2\"]'}>\n    <Heading display={2}>Display 2</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type={'h1[data-display=\"3\"]'}>\n    <Heading display={3}>Display 3</Heading>\n  </Docs.TypeTile>\n</Layout.Stack>\n")),(0,r.kt)("h4",{id:"recommendations"},(0,r.kt)("b",null,"Recommendations")),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("b",null,"Always")," have an H1 heading for the page title"),(0,r.kt)("li",null,"Keep headings scannable"),(0,r.kt)("li",null,"Headings are always sentence-case"),(0,r.kt)("li",null,"Do not use punctuation in headings")),(0,r.kt)("b",null,"IMPORTANT: For way-finding, every page must have an H1 available (especially for screen readers) that describes the main purpose of the page such as \u201cClaims & Benefits\u201d"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"body-copy-text"},"Body Copy Text"),(0,r.kt)("p",null,"Optum Sans is the primary typeface for body copy. It is available in 3 weights \u2014 Regular, Bold and XBold. All weights are available in italics."),(0,r.kt)("p",null,"Regular copy is the default style for the majority of text on pages. Small copy is the secondary style for context on pages and is used for secondary text styles, as well as footnotes and legal messaging or less important content. Find further documentation in the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/text"},"Text Component"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Layout.Stack grow>\n  <Docs.TypeTile\n    fontSize="18px"\n    lineHeight="24px"\n    fontWeight="$normal"\n    color="$black"\n  >\n    <Label>Body 1 - LG</Label>\n    <Text size="$lg">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n      tempor incididunt. Lorem ipsum dolor sit amet, consectetur adipisicing\n      elit, sed do eiusmod tempor incididunt. Lorem ipsum dolor sit amet,\n      consectetur adipisicing elit, sed do eiusmod tempor incididunt.\n    </Text>\n  </Docs.TypeTile>\n  <Docs.TypeTile\n    fontSize="16px"\n    lineHeight="20px"\n    fontWeight="$normal"\n    color="$black"\n  >\n    <Label>Body 2 - MD</Label>\n    <Text size="$md">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n      tempor incididunt. Lorem ipsum dolor sit amet, consectetur adipisicing\n      elit, sed do eiusmod tempor incididunt. Lorem ipsum dolor sit amet,\n      consectetur adipisicing elit, sed do eiusmod tempor incididunt.\n    </Text>\n  </Docs.TypeTile>\n  <Docs.TypeTile\n    fontSize="14.22px"\n    lineHeight="16px"\n    fontWeight="$normal"\n    color="$black"\n  >\n    <Label>Body 3 - SM</Label>\n    <Text size="$sm">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n      tempor incididunt. Lorem ipsum dolor sit amet, consectetur adipisicing\n      elit, sed do eiusmod tempor incididunt. Lorem ipsum dolor sit amet,\n      consectetur adipisicing elit, sed do eiusmod tempor incididunt.\n    </Text>\n  </Docs.TypeTile>\n  <Docs.TypeTile\n    fontSize="12.64px"\n    lineHeight="16px"\n    fontWeight="$normal"\n    color="$black"\n  >\n    <Label>Small 1 - XS</Label>\n    <Text size="$xs">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n      tempor incididunt. Lorem ipsum dolor sit amet, consectetur adipisicing\n      elit, sed do eiusmod tempor incididunt. Lorem ipsum dolor sit amet,\n      consectetur adipisicing elit, sed do eiusmod tempor incididunt.\n    </Text>\n  </Docs.TypeTile>\n</Layout.Stack>\n')),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"recommendations-1"},(0,r.kt)("b",null,"Recommendations")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("i",null,"Italics")," are used only when referencing books, movies, albums or publication titles"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("b",null,"Optum Sans xBold")," is used only when reversing type out of Optum Orange or on some photography for the sake of legibility. For this use, Brand approval is required through a Help Desk request."),(0,r.kt)("li",{parentName:"ul"},"Optum Sans Condensed is used for special cases only, such as legal and disclaimer copy."),(0,r.kt)("li",{parentName:"ul"},"People read 25% slower onscreen, and they skim rather than read"),(0,r.kt)("li",{parentName:"ul"},"Web text should be short and scannable"),(0,r.kt)("li",{parentName:"ul"},"Write no more than 50% of the text you would have used in a hardcopy publication"),(0,r.kt)("li",{parentName:"ul"},"Write for scannability: don't require users to read long continuous blocks of text")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"accessibility"},"Accessibility"),(0,r.kt)("p",null,"It is best to have just one H1 on a page. Headings H2 through H6 help people understand the structure of the page and how content is organized. Headings also help people who use assistive technology move through the page content."),(0,r.kt)("b",null,"Define page structure:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Describe the topic or purpose of a page in the document title"),(0,r.kt)("li",{parentName:"ul"},"Start titles for browser tabs and windows with the page title and end them with the site name"),(0,r.kt)("li",{parentName:"ul"},"Define sections of a page using headings and ARIA landmarks, including how sections should reflow for responsive breakpoints"),(0,r.kt)("li",{parentName:"ul"},"If a page has a complex layout, it can be helpful to illustrate the tab order and reading order in design documentation"),(0,r.kt)("li",{parentName:"ul"},"Group related items using a list structure"),(0,r.kt)("li",{parentName:"ul"},"When text is used as a heading, assign appropriate heading tags (h1 to h6)"),(0,r.kt)("li",{parentName:"ul"},"Follow heading hierarchy on every page: A single H1 and others in sequence")),(0,r.kt)("p",null,"Headings chosen for visual style rather than following hierarchy semantics. Doing so can make it difficult for people using assistive technology to navigate a page."),(0,r.kt)("hr",null),(0,r.kt)("b",null,"Things to avoid or watch out for:"),(0,r.kt)("p",null,"Avoid using heading tags for visual effect alone. Heading tags convey meaning to assistive technology that helps people understand relationships in the page content."),(0,r.kt)("p",null,"Always use HTML heading tags to style headings. A tag gives special meaning to the text that cannot be conveyed using visual formatting or CSS. People who use screen readers need to hear the information called out explicitly as a heading to be able to understand the purpose of the text."),(0,r.kt)("p",null,"Be cautious about using heading tags in page footers, headers or to describe site navigation. Some U.S. states require heading tags to be used only within the main content area of a page."),(0,r.kt)("b",null,"Review the page to confirm that an H1 is present and:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Visible whenever possible (not hidden using CSS unless the scenario requires it)"),(0,r.kt)("li",{parentName:"ul"},"Appears as the first heading on the page")),(0,r.kt)("b",null,"Inspect the code and confirm that heading tags:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Are used in numerical order without gaps"),(0,r.kt)("li",{parentName:"ul"},"Are used for headings (preferred); in cases where use of heading tags is not feasible, ARIA is used to indicate heading roles"),(0,r.kt)("li",{parentName:"ul"},"Review the page with a screen reader to confirm that headings are presented in the order expected")),(0,r.kt)("b",null,"Specify type (and container) size using root em (rem) units."),(0,r.kt)("p",null,"Rem units are sized relative to the base type size for the document, the base browser type size, rather than the size used within their containing element. Rems are preferred over ems, pixels or points. Em unit sizes can be challenging to manage due to parent-child relationship complexities. Points and pixels are static measurements that do not allow for a flexible presentation."),(0,r.kt)("p",null,"Use rem units in CSS to specify type and container sizes. For reliable and flexible sizing, use rem units instead of pixels for media queries as well."),(0,r.kt)("b",null,"Avoid specifying a fixed container height.")," Allowing the type size and padding to set the height of a container ensures the text is always visible and readable. It helps to avoid weird overflow or clipping issues.",(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Change the browser setting for text (font) size to anything larger than the default size and review the page. If is unreadable or unusable, then the text is not using rem units.")))}g.isMDXComponent=!0},26114:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>b,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"brandmark",category:"Foundations",title:"Brandmark",description:"Logos/Brandmarks for UHC brands.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=2398%3A21821",pagination_prev:null},s=void 0,d={unversionedId:"foundations/uhc/brandmark",id:"foundations/uhc/brandmark",isDocsHomePage:!1,title:"Brandmark",description:"Logos/Brandmarks for UHC brands.",source:"@site/docs/foundations/uhc/Brandmark.md",sourceDirName:"foundations/uhc",slug:"/foundations/uhc/brandmark",permalink:"/foundations/uhc/brandmark",tags:[],version:"current",frontMatter:{id:"brandmark",category:"Foundations",title:"Brandmark",description:"Logos/Brandmarks for UHC brands.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=2398%3A21821",pagination_prev:null},sidebar:"docs",next:{title:"Colors",permalink:"/foundations/uhc/colors"}},p=[{value:"Brand",id:"brand",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Affiliate",id:"affiliate",children:[],level:2},{value:"Variant",id:"variant",children:[],level:2},{value:"Color",id:"color",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g=c("BrandmarkLibrary"),h={toc:p};function b(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Brandmark } from '@abyss/web/ui/Brandmark';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Brandmark',\n  inputs: [\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'affiliate',\n      type: 'select',\n      options: [\n        { label: 'aarp_extra_assurance_benefits', value: 'aarp_extra_assurance_benefits' },\n        { label: 'aarp_medicare_advantage', value: 'aarp_medicare_advantage' },\n        { label: 'aarp_medicare_plans', value: 'aarp_medicare_plans' },\n        { label: 'aarp_medicare_prescription', value: 'aarp_medicare_prescription' },\n        { label: 'aarp_medicare_supplement', value: 'aarp_medicare_supplement' },\n        { label: 'aarp_supplemental_personal_health', value: 'aarp_supplemental_personal_health' },\n        { label: 'community_plan', value: 'community_plan' },\n        { label: 'dental', value: 'dental' },\n        { label: 'dual_complete', value: 'dual_complete' },\n        { label: 'global', value: 'global' },\n        { label: 'hearing', value: 'hearing' },\n        { label: 'medicare_advantage', value: 'medicare_advantage' },\n        { label: 'medicare_plans', value: 'medicare_plans' },\n        { label: 'medicare_solutions', value: 'medicare_solutions' },\n        { label: 'oxford', value: 'oxford' },\n        { label: 'uhc', value: 'uhc' },\n        { label: 'vision', value: 'vision' },\n      ],\n    },\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'lockup', value: 'lockup' },\n        { label: 'lockup_horizontal', value: 'lockup_horizontal' },\n        { label: 'u_mark', value: 'u_mark' },\n        { label: 'u_mark_horizontal', value: 'u_mark_horizontal' },\n        { label: 'monogram', value: 'monogram' },\n        { label: 'stacked_wordmark', value: 'stacked_wordmark' },\n        { label: 'wordmark', value: 'wordmark' },\n      ]\n    },\n    {\n      prop: 'color',\n      type: 'select',\n      options: [\n        { label: 'red', value: 'red' },\n        { label: 'white', value: 'white' },\n        { label: 'black', value: 'black' },\n        { label: 'blue', value: 'blue' },\n        { label: 'full', value: 'full' },\n      ]\n    },\n  ]\n}\n\n<Box color=\"$gray1\" padding=\"50px\">\n  <Brandmark\n    brand=\"uhc\"\n    size=\"100%\"\n    affiliate=\"uhc\"\n    variant=\"lockup\"\n    color=\"blue\"\n  />\n</Box>\n")),(0,i.kt)("h2",{id:"brand"},"Brand"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"brand")," property to adjust which brand is being selected."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Box color="$white" padding="50px">\n    <Brandmark\n      brand="uhc"\n      size="$lg"\n      affiliate="uhc"\n      variant="lockup"\n      color="blue"\n    />\n  </Box>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," property to adjust the size of the brandmark."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Box color="$white" padding="50px">\n    <Brandmark\n      brand="uhc"\n      size="$sm"\n      affiliate="uhc"\n      variant="lockup"\n      color="blue"\n    />\n  </Box>\n  <Box color="$white" padding="50px">\n    <Brandmark\n      brand="uhc"\n      size="$lg"\n      affiliate="uhc"\n      variant="lockup"\n      color="blue"\n    />\n  </Box>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"affiliate"},"Affiliate"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"affiliate")," property to select the required brandmark affiliates."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Box color="$white" padding="50px">\n    <Brandmark\n      brand="uhc"\n      size="$lg"\n      affiliate="aarp_medicare_advantage"\n      variant="lockup"\n      color="full"\n    />\n  </Box>\n  <Box color="$white" padding="50px">\n    <Brandmark\n      brand="uhc"\n      size="$lg"\n      affiliate="uhc"\n      variant="lockup"\n      color="blue"\n    />\n  </Box>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"variant"},"Variant"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," property to select the required brandmark variants."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Box color="$white" padding="50px">\n    <Brandmark\n      brand="uhc"\n      size="$lg"\n      affiliate="uhc"\n      variant="monogram"\n      color="blue"\n    />\n  </Box>\n  <Box color="$white" padding="50px">\n    <Brandmark\n      brand="uhc"\n      size="$lg"\n      affiliate="uhc"\n      variant="lockup"\n      color="blue"\n    />\n  </Box>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"color"},"Color"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"color")," property to select available brandmark colors."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Box color="$primary1" padding="50px">\n    <Brandmark\n      brand="uhc"\n      size="$lg"\n      affiliate="uhc"\n      variant="monogram"\n      color="white"\n    />\n  </Box>\n  <Box color="$white" padding="50px">\n    <Brandmark\n      brand="uhc"\n      size="$lg"\n      affiliate="medicare_plans"\n      variant="u_mark"\n      color="black"\n    />\n  </Box>\n</Layout.Group>\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Brandmark}\n  rows={[\n    {\n      name: 'brand',\n      type: 'uhc',\n      description: 'Indicates which brand you want your brandmark from',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the brandmark',\n    },\n    {\n      name: 'affiliate',\n      type: 'aarp_extra-assurance-benefits | aarp-medicare-plans | aarp-medicare-presription | aarp-medicare-supplement | aarp-supplemental-personal-health | community-plan | dental | dual-complete | global | hearing | medicare-advantage | medicare-plans | medicare-solutions | oxford | uhc | vision',\n      description: 'Indicates the brandmark affiliate',\n    },\n    {\n      name: 'variant',\n      type: 'lockup | lockup_horizontal | u_mark | u_mark_horizontal | monogram | stacked_wordmark | wordmark',\n      description: 'Indicates the brandmark variant',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set color option of the brandmark',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Brandmark}\n  rows={[\n    {\n      name: 'brandmark',\n      description: 'Brandmark root element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Brandmarks",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<h2>Brandmarks</h2>\n")),(0,i.kt)("br",null),(0,i.kt)("p",null,"The source for these brandmarks can be found in the ",(0,i.kt)(m,{href:"https://brand.uhc.com/resources#Brandmarks-",mdxType:"ExitLink"},"Brandmark Library"),"."),(0,i.kt)("p",null,"You can use the search functionality to find the required brandmark. Brandmarks can be searched using their affiliates, variants or colors."),(0,i.kt)(g,{brand:"uhc",mdxType:"BrandmarkLibrary"})))}b.isMDXComponent=!0},10601:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>b,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"icon-brand",slug:"/foundations/uhc/icon-brand",category:"Foundations",title:"IconBrand",description:"Used to implement Brand icons and adapt their properties.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A10709",pagination_prev:"foundations/uhc/typography",pagination_next:null},s=void 0,d={unversionedId:"foundations/uhc/icon-brand",id:"foundations/uhc/icon-brand",isDocsHomePage:!1,title:"IconBrand",description:"Used to implement Brand icons and adapt their properties.",source:"@site/docs/foundations/uhc/IconBrand.md",sourceDirName:"foundations/uhc",slug:"/foundations/uhc/icon-brand",permalink:"/foundations/uhc/icon-brand",tags:[],version:"current",frontMatter:{id:"icon-brand",slug:"/foundations/uhc/icon-brand",category:"Foundations",title:"IconBrand",description:"Used to implement Brand icons and adapt their properties.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A10709",pagination_prev:"foundations/uhc/typography",pagination_next:null},sidebar:"docs",previous:{title:"Typography",permalink:"/foundations/uhc/typography"}},p=[{value:"Icons",id:"icons",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Brand Icon Variants",id:"brand-icon-variants",children:[],level:2},{value:"Meaningful or Control Icons",id:"meaningful-or-control-icons",children:[],level:2},{value:"Decorative Icons",id:"decorative-icons",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g=c("IconLibrary"),h={toc:p};function b(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { IconBrand } from '@abyss/web/ui/IconBrand';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'IconBrand',\n  inputs: [\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'one tone', value: 'onetone' },\n        { label: 'two tone', value: 'twotone' },\n        { label: 'one tone w/ dark circle', value: 'onetonedarkcircle' },\n        { label: 'two tone w/ dark circle', value: 'twotonedarkcircle' },\n        { label: 'two tone w/ light circle', value: 'twotonelightcircle' },\n      ],\n    },\n    {\n      prop: 'icon',\n      type: 'string',\n    },\n  ]\n}\n\n<IconBrand icon=\"home\" size=\"24px\" variant=\"twotonedarkcircle\"/>\n")),(0,i.kt)("h2",{id:"icons"},"Icons"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"icon")," property to adjust which icon is being selected."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="alert" size={48} />\n  <IconBrand icon="piggy_bank" size={48} />\n  <IconBrand icon="music" size={48} />\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," property to adjust the size of an icon by setting it to a specific number. The default size is set to 24."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="home" />\n  <IconBrand icon="home" size={32} />\n  <IconBrand icon="home" size={48} />\n  <IconBrand icon="home" size={64} />\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"brand-icon-variants"},"Brand Icon Variants"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," property to change the style of Brand icons. Available variants are ",(0,i.kt)("inlineCode",{parentName:"p"},"twotonedarkcircle"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"twotonelightcircle"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"twotone"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"onetonedarkcircle"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"onetone"),". The default variant is ",(0,i.kt)("inlineCode",{parentName:"p"},"twotonedarkcircle"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Grid columns={5} span={{ md: \'50%\', lg: \'20%\' }}>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        onetonedarkcircle\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetonedarkcircle" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetonedarkcircle" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetonedarkcircle" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetonedarkcircle" />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        twotonedarkcircle\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonedarkcircle" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonedarkcircle" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonedarkcircle" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonedarkcircle" />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        twotonelightcircle\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonelightcircle" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonelightcircle" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonelightcircle" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonelightcircle" />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        onetone\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetone" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetone" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetone" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <Layout.Space space={48} />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        twotone\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotone" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotone" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotone" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <Layout.Space space={48} />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n</Grid>\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Icon}\n  rows={[\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the icon',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The svg content of the icon',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the icon',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the icon',\n    },\n    {\n      name: 'isScreenReadable',\n      type: 'boolean',\n      description:\n        'Indicate whether the icon is screen readable or not. If the icon is Screen Readable, then provide a title',\n    },\n    {\n      name: 'onProcessSVG',\n      type: 'function',\n      description: 'The svg content of the icon',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description:\n        '(not currently functioning) Pre programmed sizes for the icons',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={IconBrand}\n  rows={[\n    {\n      name: 'icon',\n      type: 'string',\n      description: 'Name of the brand icon',\n    },\n    {\n      name: 'variant',\n      type: 'twotonedarkcircle | twotonelightcircle | twotone | onetonedarkcircle | onetone',\n      description: 'The style/color variation of the brand icon',\n    },\n    {\n      name: 'brand',\n      type: 'uhc | optum',\n      description:\n        'indicates which brand you want your icon from. This changes the colors of the icon to match the brand you select',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the brand icon',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set color option 1 of the brand icon',\n    },\n    {\n      name: 'color2',\n      type: 'string',\n      description: 'Set color option 2 of the brand icon',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the brand icon',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Icon}\n  rows={[\n    {\n      name: 'icon-root',\n      description: 'Icon root element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={IconBrand}\n  rows={[\n    {\n      name: 'icon-brand-root',\n      description: 'IconBrand root element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("h2",{id:"meaningful-or-control-icons"},"Meaningful or Control Icons"),(0,i.kt)("p",null,"If the icon is being used in a setting where it is the only element providing meaning, then that same meaning should be conveyed to screen reader users. The below implementation provides examples of situations in which the property ",(0,i.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," should be set to true and the ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," property is required and should describe the purpose of the image."),(0,i.kt)("p",null,"Example 1: An alert icon is used to convey a sense of urgency; there is adjacent text (\u201cThere is a data outage\u201d) but the text doesn't include any words that convey urgency. So, in this case, the icon should have a text alternative such as \u201cAlert\u201d or \u201cWarning\u201d."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand title="alert" icon="alert" isScreenReadable={true} size={24} />\n  <div>There is a data outage</div>\n</Layout.Group>\n')),(0,i.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog. There is no adjacent text, so the icon should have a text alternative of \u201cclose\u201d or \u201cclose window\u201d.",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial title="close" icon="close" isScreenReadable={true} size={24} />\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"decorative-icons"},"Decorative Icons"),(0,i.kt)("p",null,"If the icon is being used in a setting in which it just a decorative element (which is the default case for icons), then the icon should be ignored by screen readers. The below implementation provides example of which situations would be classified as decorative. Since the default of ",(0,i.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," is set to false no specific changes need to be made for decorative icons."),(0,i.kt)("p",null,"Example 1: An alert icon is used next to an urgent message and the word \u201cAlert\u201d is included in the adjacent text. In this case, the icon becomes decorative in nature and should be ignored by screen readers."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="alert" size={24} />\n  <div>Alert: There is a data outage</div>\n</Layout.Group>\n')),(0,i.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog; the word \u201cClose\u201d appears to the right of the button. In this case, the icon should be considered decorative and ignored by screen readers.",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial icon="close" size={24} />\n  <div>Close</div>\n</Layout.Group>\n'))),(0,i.kt)(u,{label:"Brand Icons",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<h2>Brand Icons</h2>\n")),(0,i.kt)("br",null),"Abyss uses Brand's branded iconography that is designed to aid wayfinding, draw attention, and support messaging.",(0,i.kt)("p",null,"The source for these design icons can be found in the ",(0,i.kt)(m,{href:"https://brand.uhc.com/iconography-library",mdxType:"ExitLink"},"Brand Icons Library"),"."),(0,i.kt)(g,{brand:"uhc",mdxType:"IconLibrary"})))}b.isMDXComponent=!0},17454:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"colors",title:"Colors",category:"Foundations",pagination_prev:"foundations/uhc/brandmark",pagination_next:"foundations/uhc/typography"},s=void 0,d={unversionedId:"foundations/uhc/colors",id:"foundations/uhc/colors",isDocsHomePage:!1,title:"Colors",description:"Overview",source:"@site/docs/foundations/uhc/colors.md",sourceDirName:"foundations/uhc",slug:"/foundations/uhc/colors",permalink:"/foundations/uhc/colors",tags:[],version:"current",frontMatter:{id:"colors",title:"Colors",category:"Foundations",pagination_prev:"foundations/uhc/brandmark",pagination_next:"foundations/uhc/typography"},sidebar:"docs",previous:{title:"Brandmark",permalink:"/foundations/uhc/brandmark"},next:{title:"Typography",permalink:"/foundations/uhc/typography"}},p=[{value:"Overview",id:"overview",children:[],level:2},{value:"Primary Palette",id:"primary-palette",children:[],level:2},{value:"Secondary",id:"secondary",children:[],level:2},{value:"Accent",id:"accent",children:[],level:2},{value:"Interactive",id:"interactive",children:[{value:"Tint",id:"tint",children:[],level:3}],level:2},{value:"Supporting",id:"supporting",children:[{value:"Status",id:"status",children:[],level:3},{value:"Neutrals",id:"neutrals",children:[],level:3}],level:2},{value:"Accessibility",id:"accessibility",children:[],level:2}],c={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Color differentiates our brands and helps create consistent experiences across our digital products. We use color to help our users know exactly what they need to focus on."),(0,i.kt)("p",null,"We are committed to complying with the Web Content Accessibility Guidelines AA standard contrast ratios. To do this, choose primary, secondary, and extended colors that support usability by ensuring sufficient color contrast between elements."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"primary-palette"},"Primary Palette"),(0,i.kt)("p",null,"Our bold primary palette includes blues, neutrals and white and is used in logical ways throughout our products, marketing and sales to guide the eye and highlight important features. Utilizing our softer secondary colors, we bring warmth to the user experience to impart optimism and confidence."),(0,i.kt)("p",null,"We use blue ($primary1) for primary actions, buttons, text links, for indicating progress and representing authentication. Neutral ($gray8) is used primarily for body text and headings, and white ($primary2) is used for page backgrounds. These colors are used in combination wherever a color theme may be desired. The Abyss theme can be adjusted on a case by case basis to allow for custom color components."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$primary1" name="Blue">\n      Used as the main color of our components. Primarily used as the color that\n      fills, outlines, or as the most prominent color.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$primary2" name="White">\n      Used as the secondary color of our components. Primarily used for\n      backgrounds or to contrast with $primary1.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"secondary"},"Secondary"),(0,i.kt)("p",null,"Secondary colors are mostly used when a designer uses one or more of the brand's illustrated assets within a digital solution."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$secondary1" name="Bright Blue">\n      Use as accents to bring warmth and lightness to our imagery and graphic\n      treatments.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$secondary2" name="Gold">\n      Use as accents to bring warmth and lightness to our imagery and graphic\n      treatments.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$secondary3" name="Orange">\n      Use as accents to bring warmth and lightness to our imagery and graphic\n      treatments.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"accent"},"Accent"),(0,i.kt)("p",null,"The accent color is used to keep things fresh and interesting. We lean on this color more frequently when brand awareness is high, or on our own properties where we control the surrounding environment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$accent1" name="Accent Blue">\n      Use in small details in brand elements.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"interactive"},"Interactive"),(0,i.kt)("p",null,"Our interactive palette contains a variety of colors make every moment feel on-brand and every interaction informative. Each color is selected intentionally to provide meaningful feedback within our products."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$interactive1" name="Interactive Active">\n      Use for elements the user can interact with such as links or icons.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$interactive2" name="Interactive Hover">\n      Use when implementing hover for an $interactive1 element.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$interactive3" name="Interactive Light">\n      Use when implementing hover for a secondary button.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$interactive4" name="High Impact">\n      Use for elements that have a high impact or that is highly stressed.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$interactive5" name="High Impact Hover">\n      Use when implementing hover for an $interactive4 element.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$interactive6" name="High Impact Light">\n      Use when implementing hover for a secondary high impact button.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"tint"},"Tint"),(0,i.kt)("p",null,"Tints are reserved for containing boxes to highlight information. Tints are used for background fills, visual sectioning, and callouts. They appear behind scrollable content to add visual sectioning and accents."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$tint1" name="Bright Blue 5%">\n      (Extra Light Blue)\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$tint2" name="Bright Blue 10%">\n      Use as a background color for delineation in layouts.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$tint3" name="Bright Blue 20%">\n      Use in most cases where a tint is needed.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$tint4" name="Bright Blue 40%">\n      Use for delineation in charts where Bright Blue 20% is already in use.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"supporting"},"Supporting"),(0,i.kt)("p",null,"Supporting colors are primarily used for infographics and data visualizations."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$supporting1" name="Violet">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$supporting2" name="Iris">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$supporting3" name="Lagoon">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$supporting4" name="Rainwater">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$supporting5" name="Strawberry">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$supporting6" name="Apple">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("h3",{id:"status"},"Status"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$success1" name="Success">\n      Use to indicate success to the user such as upon completion of a form.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$success2" name="Success Light">\n      Use for a hover or unfocused version of success.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$error1" name="Error">\n      Use to indicate an error to the user such as when a form submission fails.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$error2" name="Error Light">\n      Use for a hover or unfocused version of error.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$warning1" name="Warning">\n      Use to indicate a warning to the user such as when a form submission goes\n      through but may be inaccurate.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$warning2" name="Warning Light">\n      Use for a hover or unfocused version of warning.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$info1" name="Info">\n      Use to indicate information to the user such as after a form is submitted\n      and important information needs to be conveyed.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$info2" name="Info Light">\n      Use for a hover or unfocused version of info.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("h3",{id:"neutrals"},"Neutrals"),(0,i.kt)("p",null,'Neutrals have varying degrees of saturation that allow for the appropriate level of warmth across marketing and product. Typically they are used for text and subtle backgrounds when we don\'t want to draw too much attention to a particular touchpoint or convey information such as "disabled". Gray tints are limited to print when black is the only color option.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$white" name="White">\n      Use White as a background or to contrast with darker colors. Implement\n      white where it will never be necessary for the color theme to change.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray1" name="Gray 1">\n      Use as a background color for delineation in Layouts.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray2" name="Gray 2">\n      Use as a background color for delineation in Layouts.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray3" name="Gray 3">\n      Use as a background color for delineation in Layouts.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray4" name="Gray 4">\n      Use for additional delineation in Layouts.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray5" name="Gray 5">\n      Use for disabled text only.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray6" name="Gray 6">\n      Use for paragraph text.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray7" name="Gray 7">\n      Use for labels and borders. When used on white background it may be used\n      for legal copy.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray8" name="Gray 8">\n      Use for headings h4-h6, body text and dark accents such as outlines, and\n      actions.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$black" name="Black">\n      Use for headings, body text and dark accents such as outlines, and\n      actions.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"accessibility"},"Accessibility"),(0,i.kt)("p",null,"Color choices that are accessible ensure everyone can not only see every element on a page, but also understand a specific, intended meaning. You want everyone to be able to see the difference between two colors right next to or on top of each other."),(0,i.kt)("p",null,"Contrast refers to the perceived difference between foreground and background colors. People with low vision or color blindness, and those who have difficulty seeing the differences between colors all can have trouble seeing where one element ends and another begins. As we age, the shape of our eyes changes and that affects both how we perceive color and how well we can distinguish variations in color. If the contrast between different elements is too low, people may not be able to see them at all."),(0,i.kt)("p",null,"Contrast is expressed as a ratio with the first number representing the foreground color and the second representing the background color. For example, 3:1 means the foreground item color is three times more intense or visible than the background value. Contrast rules apply to text as well as any content that conveys meaning, including icons, graphics and form elements. Tools such as Colour Contrast Analyser or WebAIM's online color contrast tool are useful for verifying contrast ratios."),(0,i.kt)("p",null,"Color and contrast choices within a digital experience are accessible when people can:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"See UI elements and content"),(0,i.kt)("li",{parentName:"ul"},"Understand and interpret information"),(0,i.kt)("li",{parentName:"ul"},"Take action")),(0,i.kt)("p",null,"Our aim is to provide a contrast ratio that can be perceived by all users. For this reason, UnitedHealthcare has embraced a minimum contrast ratio of 4.5:1 (foreground vs background) for UI elements and content that convey meaning."),(0,i.kt)("b",null,"Recommendations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Include color combinations, good contrast and poor contrast, in design documentation"),(0,i.kt)("li",{parentName:"ul"},"Communicate meaning with more than just color, such as with color and descriptive text"),(0,i.kt)("li",{parentName:"ul"},"Give focus indicators a unique presentation that meets contrast requirements on all backgrounds")),(0,i.kt)("b",null,"Test for a minimum contrast ratio 4.5 to 1 for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Non-bolded text smaller than 24 pixels (18 points)"),(0,i.kt)("li",{parentName:"ul"},"Bold text smaller than 18 pixels (14 points)"),(0,i.kt)("li",{parentName:"ul"},"Essential icons that are close to body text size")),(0,i.kt)("b",null,"Test that non-text elements that communicate information meet a minimum contrast ratio of 3 to 1 for all states:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Icons"),(0,i.kt)("li",{parentName:"ul"},"Data visualizations"),(0,i.kt)("li",{parentName:"ul"},"Focus indicators"),(0,i.kt)("li",{parentName:"ul"},"Controls, including their borders or boundaries"),(0,i.kt)("li",{parentName:"ul"},"Non-bolded text at or above 24 pixels (18 points)"),(0,i.kt)("li",{parentName:"ul"},"Bold text at or above 18 pixels (14 points) in size")),(0,i.kt)("p",null,"Don't worry about contrast for logos and disabled elements. Watch out for using color alone to communicate meaning. People who are color blind or blind cannot perceive the meaning by color alone."))}u.isMDXComponent=!0},21549:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"typography",title:"Typography",category:"Foundations",description:"Typography for UHC brands",pagination_prev:"foundations/uhc/colors",pagination_next:"foundations/uhc/icon-brand"},d=void 0,p={unversionedId:"foundations/uhc/typography",id:"foundations/uhc/typography",isDocsHomePage:!1,title:"Typography",description:"Typography for UHC brands",source:"@site/docs/foundations/uhc/typography.md",sourceDirName:"foundations/uhc",slug:"/foundations/uhc/typography",permalink:"/foundations/uhc/typography",tags:[],version:"current",frontMatter:{id:"typography",title:"Typography",category:"Foundations",description:"Typography for UHC brands",pagination_prev:"foundations/uhc/colors",pagination_next:"foundations/uhc/icon-brand"},sidebar:"docs",previous:{title:"Colors",permalink:"/foundations/uhc/colors"},next:{title:"IconBrand",permalink:"/foundations/uhc/icon-brand"}},c=[{value:"Overview",id:"overview",children:[],level:2},{value:"Headings",id:"headings",children:[],level:2},{value:"Display",id:"display",children:[{value:"<b>Recommendations</b>",id:"recommendations",children:[],level:4}],level:2},{value:"Body Copy Text",id:"body-copy-text",children:[{value:"<b>Recommendations</b>",id:"recommendations-1",children:[],level:4}],level:2},{value:"Accessibility",id:"accessibility",children:[],level:2}],u=(a="ExitLink",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Typography is the art and technique of arranging type to make written language legible. In the Abyss library, ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/heading"},"Heading")," and ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/text"},"Text")," dive into the detail behind text formatting for UHC branding. More in depth guidance on typography can be found below and in the ",(0,r.kt)(u,{href:"https://brand.uhc.com/typography",mdxType:"ExitLink"},"UHC Brand Page"),"."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"headings"},"Headings"),(0,r.kt)("p",null,"Headings identify chunks of related content on a page and establish the hierarchy showing how those chunks of content relate to each other. If someone reads only the headings on a page, they will get a general understanding of the information presented."),(0,r.kt)("p",null,"HTML defines six heading levels: H1 to H6."),(0,r.kt)("p",null,"H1 identifies an entire page, or overall topic, and is the most important level. There should only be 1 H1 per page."),(0,r.kt)("p",null,"Find further documentation in the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/heading"},"Heading")," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Layout.Stack grow>\n  <Docs.TypeTile type="h1">\n    <Heading>Heading 1</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type="h2">\n    <Heading offset={1}>Heading 2</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type="h3">\n    <Heading offset={2}>Heading 3</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type="h4">\n    <Heading offset={3}>Heading 4</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type="h5">\n    <Heading offset={4}>Heading 5</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type="h6">\n    <Heading offset={5}>Heading 6</Heading>\n  </Docs.TypeTile>\n</Layout.Stack>\n')),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"display"},"Display"),(0,r.kt)("p",null,"Display sizes are headers with H1 tags that have a greater size than a regular H1."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Layout.Stack grow>\n  <Docs.TypeTile type={'h1[data-display=\"1\"]'}>\n    <Heading display={1}>Display 1</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type={'h1[data-display=\"2\"]'}>\n    <Heading display={2}>Display 2</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type={'h1[data-display=\"3\"]'}>\n    <Heading display={3}>Display 3</Heading>\n  </Docs.TypeTile>\n</Layout.Stack>\n")),(0,r.kt)("h4",{id:"recommendations"},(0,r.kt)("b",null,"Recommendations")),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("b",null,"Always")," have an H1 heading for the page title"),(0,r.kt)("li",null,"Keep headings scannable"),(0,r.kt)("li",null,"Headings are always sentence-case"),(0,r.kt)("li",null,"Do not use punctuation in headings")),(0,r.kt)("b",null,"IMPORTANT: For way-finding, every page must have an H1 available (especially for screen readers) that describes the main purpose of the page such as \u201cClaims & Benefits\u201d"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"body-copy-text"},"Body Copy Text"),(0,r.kt)("p",null,"UHC Sans is our primary typeface for body copy. It is available in 3 weights \u2014 Medium, Semibold and Bold. All weights are available in italics."),(0,r.kt)("p",null,"Regular copy is the default style for the majority of text on pages. Small copy is the secondary style for context on pages and is used for secondary text styles, as well as footnotes and legal messaging or less important content. Find further documentation in the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/text"},"Text Component"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Layout.Stack grow>\n  <Docs.TypeTile\n    fontSize="18px"\n    lineHeight="24px"\n    fontWeight="$normal"\n    color="$black"\n  >\n    <Label>Body 1 - LG</Label>\n    <Text size="$lg">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n      tempor incididunt. Lorem ipsum dolor sit amet, consectetur adipisicing\n      elit, sed do eiusmod tempor incididunt. Lorem ipsum dolor sit amet,\n      consectetur adipisicing elit, sed do eiusmod tempor incididunt.\n    </Text>\n  </Docs.TypeTile>\n  <Docs.TypeTile\n    fontSize="16px"\n    lineHeight="20px"\n    fontWeight="$normal"\n    color="$black"\n  >\n    <Label>Body 2 - MD</Label>\n    <Text size="$md">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n      tempor incididunt. Lorem ipsum dolor sit amet, consectetur adipisicing\n      elit, sed do eiusmod tempor incididunt. Lorem ipsum dolor sit amet,\n      consectetur adipisicing elit, sed do eiusmod tempor incididunt.\n    </Text>\n  </Docs.TypeTile>\n  <Docs.TypeTile\n    fontSize="14.22px"\n    lineHeight="16px"\n    fontWeight="$normal"\n    color="$black"\n  >\n    <Label>Body 3 - SM</Label>\n    <Text size="$sm">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n      tempor incididunt. Lorem ipsum dolor sit amet, consectetur adipisicing\n      elit, sed do eiusmod tempor incididunt. Lorem ipsum dolor sit amet,\n      consectetur adipisicing elit, sed do eiusmod tempor incididunt.\n    </Text>\n  </Docs.TypeTile>\n  <Docs.TypeTile\n    fontSize="12.64px"\n    lineHeight="16px"\n    fontWeight="$normal"\n    color="$black"\n  >\n    <Label>Small 1 - XS</Label>\n    <Text size="$xs">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n      tempor incididunt. Lorem ipsum dolor sit amet, consectetur adipisicing\n      elit, sed do eiusmod tempor incididunt. Lorem ipsum dolor sit amet,\n      consectetur adipisicing elit, sed do eiusmod tempor incididunt.\n    </Text>\n  </Docs.TypeTile>\n</Layout.Stack>\n')),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"recommendations-1"},(0,r.kt)("b",null,"Recommendations")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("i",null,"Italics")," are used only when referencing books, movies, albums or publication titles"),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("b",null,"UHC Sans Semibold")," instead of UHC Sans Medium to ensure legibility in digital spaces when type is over photography or reversed out of UHC Blue at small sizes"),(0,r.kt)("li",{parentName:"ul"},"People read 25% slower onscreen, and they skim rather than read"),(0,r.kt)("li",{parentName:"ul"},"Web text should be short and scannable"),(0,r.kt)("li",{parentName:"ul"},"Write no more than 50% of the text you would have used in a hardcopy publication"),(0,r.kt)("li",{parentName:"ul"},"Write for scannability: don't require users to read long continuous blocks of text")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"accessibility"},"Accessibility"),(0,r.kt)("p",null,"It is best to have just one H1 on a page. Headings H2 through H6 help people understand the structure of the page and how content is organized. Headings also help people who use assistive technology move through the page content."),(0,r.kt)("b",null,"Define page structure:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Describe the topic or purpose of a page in the document title"),(0,r.kt)("li",{parentName:"ul"},"Start titles for browser tabs and windows with the page title and end them with the site name"),(0,r.kt)("li",{parentName:"ul"},"Define sections of a page using headings and ARIA landmarks, including how sections should reflow for responsive breakpoints"),(0,r.kt)("li",{parentName:"ul"},"If a page has a complex layout, it can be helpful to illustrate the tab order and reading order in design documentation"),(0,r.kt)("li",{parentName:"ul"},"Group related items using a list structure"),(0,r.kt)("li",{parentName:"ul"},"When text is used as a heading, assign appropriate heading tags (h1 to h6)"),(0,r.kt)("li",{parentName:"ul"},"Follow heading hierarchy on every page: A single H1 and others in sequence")),(0,r.kt)("p",null,"Headings chosen for visual style rather than following hierarchy semantics. Doing so can make it difficult for people using assistive technology to navigate a page."),(0,r.kt)("hr",null),(0,r.kt)("b",null,"Things to avoid or watch out for:"),(0,r.kt)("p",null,"Avoid using heading tags for visual effect alone. Heading tags convey meaning to assistive technology that helps people understand relationships in the page content."),(0,r.kt)("p",null,"Always use HTML heading tags to style headings. A tag gives special meaning to the text that cannot be conveyed using visual formatting or CSS. People who use screen readers need to hear the information called out explicitly as a heading to be able to understand the purpose of the text."),(0,r.kt)("p",null,"Be cautious about using heading tags in page footers, headers or to describe site navigation. Some U.S. states require heading tags to be used only within the main content area of a page."),(0,r.kt)("b",null,"Review the page to confirm that an H1 is present and:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Visible whenever possible (not hidden using CSS unless the scenario requires it)"),(0,r.kt)("li",{parentName:"ul"},"Appears as the first heading on the page")),(0,r.kt)("b",null,"Inspect the code and confirm that heading tags:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Are used in numerical order without gaps"),(0,r.kt)("li",{parentName:"ul"},"Are used for headings (preferred); in cases where use of heading tags is not feasible, ARIA is used to indicate heading roles"),(0,r.kt)("li",{parentName:"ul"},"Review the page with a screen reader to confirm that headings are presented in the order expected")),(0,r.kt)("b",null,"Specify type (and container) size using root em (rem) units."),(0,r.kt)("p",null,"Rem units are sized relative to the base type size for the document, the base browser type size, rather than the size used within their containing element. Rems are preferred over ems, pixels or points. Em unit sizes can be challenging to manage due to parent-child relationship complexities. Points and pixels are static measurements that do not allow for a flexible presentation."),(0,r.kt)("p",null,"Use rem units in CSS to specify type and container sizes. For reliable and flexible sizing, use rem units instead of pixels for media queries as well."),(0,r.kt)("b",null,"Avoid specifying a fixed container height.")," Allowing the type size and padding to set the height of a container ensures the text is always visible and readable. It helps to avoid weird overflow or clipping issues.",(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Change the browser setting for text (font) size to anything larger than the default size and review the page. If is unreadable or unusable, then the text is not using rem units.")))}g.isMDXComponent=!0},66275:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"brandmark",category:"Foundations",title:"Brandmark",description:"Logos/Brandmarks for UHG brands.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=2398%3A21821",pagination_prev:null},s=void 0,d={unversionedId:"foundations/uhg/brandmark",id:"foundations/uhg/brandmark",isDocsHomePage:!1,title:"Brandmark",description:"Logos/Brandmarks for UHG brands.",source:"@site/docs/foundations/uhg/Brandmark.md",sourceDirName:"foundations/uhg",slug:"/foundations/uhg/brandmark",permalink:"/foundations/uhg/brandmark",tags:[],version:"current",frontMatter:{id:"brandmark",category:"Foundations",title:"Brandmark",description:"Logos/Brandmarks for UHG brands.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=2398%3A21821",pagination_prev:null},sidebar:"docs",next:{title:"Colors",permalink:"/foundations/uhg/colors"}},p=[{value:"Brand",id:"brand",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Variant",id:"variant",children:[],level:2},{value:"Color",id:"color",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("BrandmarkLibrary"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Brandmark } from '@abyss/web/ui/Brandmark';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Brandmark',\n  inputs: [\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'affiliate',\n      type: 'select',\n      options: [\n        { label: 'uhg', value: 'uhg' },\n      ],\n    },\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'lockup', value: 'lockup' },\n      ]\n    },\n    {\n      prop: 'color',\n      type: 'select',\n      options: [\n        { label: 'blue', value: 'blue' },\n        { label: 'black', value: 'black' },\n        { label: 'white', value: 'white' },\n      ]\n    },\n  ]\n}\n\n<Box color=\"$primary1\" padding=\"50px\">\n  <Brandmark\n    brand=\"uhg\"\n    size=\"100%\"\n    affiliate=\"uhg\"\n    variant=\"lockup\"\n    color=\"white\"\n  />\n</Box>\n")),(0,i.kt)("h2",{id:"brand"},"Brand"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"brand")," property to adjust which brand is being selected."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Box color="$white" padding="50px">\n    <Brandmark\n      brand="uhg"\n      size="$lg"\n      affiliate="uhg"\n      variant="lockup"\n      color="blue"\n    />\n  </Box>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," property to adjust the size of the brandmark."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Box color="$white" padding="50px">\n    <Brandmark\n      brand="uhg"\n      size="$sm"\n      affiliate="uhg"\n      variant="lockup"\n      color="blue"\n    />\n  </Box>\n  <Box color="$white" padding="50px">\n    <Brandmark\n      brand="uhg"\n      size="$lg"\n      affiliate="uhg"\n      variant="lockup"\n      color="blue"\n    />\n  </Box>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"variant"},"Variant"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," property to select the required brandmark variants."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Box color="$primary1" padding="50px">\n    <Brandmark\n      brand="uhg"\n      size="$lg"\n      affiliate="uhg"\n      variant="lockup"\n      color="white"\n    />\n  </Box>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"color"},"Color"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"color")," property to select available brandmark colors."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Box color="$primary1" padding="50px">\n    <Brandmark\n      brand="uhg"\n      size="$lg"\n      affiliate="uhg"\n      variant="lockup"\n      color="white"\n    />\n  </Box>\n  <Box color="$white" padding="50px">\n    <Brandmark\n      brand="uhg"\n      size="$lg"\n      affiliate="uhg"\n      variant="lockup"\n      color="black"\n    />\n  </Box>\n</Layout.Group>\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Brandmark}\n  rows={[\n    {\n      name: 'brand',\n      type: 'uhg',\n      description: 'Indicates which brand you want your brandmark from',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the brandmark',\n    },\n    {\n      name: 'affiliate',\n      type: '',\n      description: 'Indicates the brandmark affiliate',\n    },\n    {\n      name: 'variant',\n      type: 'lockup',\n      description: 'Indicates the brandmark variant',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set color option of the brandmark',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Brandmark}\n  rows={[\n    {\n      name: 'brandmark',\n      description: 'Brandmark root element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Brandmarks",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<h2>Brandmarks</h2>\n")),(0,i.kt)("br",null),(0,i.kt)("p",null,"You can use the search functionality to find the required brandmark. Brandmarks can be searched using their affiliates, variants or colors."),(0,i.kt)(m,{brand:"uhg",mdxType:"BrandmarkLibrary"})))}h.isMDXComponent=!0},13277:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"icon-brand",slug:"/foundations/uhg/icon-brand",category:"Foundations",title:"IconBrand",description:"Used to implement Brand icons and adapt their properties.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A10709",pagination_prev:"foundations/uhg/typography",pagination_next:null},s=void 0,d={unversionedId:"foundations/uhg/icon-brand",id:"foundations/uhg/icon-brand",isDocsHomePage:!1,title:"IconBrand",description:"Used to implement Brand icons and adapt their properties.",source:"@site/docs/foundations/uhg/IconBrand.md",sourceDirName:"foundations/uhg",slug:"/foundations/uhg/icon-brand",permalink:"/foundations/uhg/icon-brand",tags:[],version:"current",frontMatter:{id:"icon-brand",slug:"/foundations/uhg/icon-brand",category:"Foundations",title:"IconBrand",description:"Used to implement Brand icons and adapt their properties.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A10709",pagination_prev:"foundations/uhg/typography",pagination_next:null},sidebar:"docs",previous:{title:"Typography",permalink:"/foundations/uhg/typography"}},p=[{value:"Icons",id:"icons",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Brand Icon Variants",id:"brand-icon-variants",children:[],level:2},{value:"Meaningful or Control Icons",id:"meaningful-or-control-icons",children:[],level:2},{value:"Decorative Icons",id:"decorative-icons",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("IconLibrary"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { IconBrand } from '@abyss/web/ui/IconBrand';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'IconBrand',\n  inputs: [\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'one tone', value: 'onetone' },\n        { label: 'two tone', value: 'twotone' },\n        { label: 'one tone w/ dark circle', value: 'onetonedarkcircle' },\n        { label: 'two tone w/ dark circle', value: 'twotonedarkcircle' },\n        { label: 'two tone w/ light circle', value: 'twotonelightcircle' },\n      ],\n    },\n    {\n      prop: 'icon',\n      type: 'string',\n    },\n  ]\n}\n\n<IconBrand icon=\"home\" size=\"24px\" variant=\"twotonedarkcircle\"/>\n")),(0,i.kt)("h2",{id:"icons"},"Icons"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"icon")," property to adjust which icon is being selected."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="alert" size={48} />\n  <IconBrand icon="piggy_bank" size={48} />\n  <IconBrand icon="music" size={48} />\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," property to adjust the size of an icon by setting it to a specific number. The default size is set to 24."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="home" />\n  <IconBrand icon="home" size={32} />\n  <IconBrand icon="home" size={48} />\n  <IconBrand icon="home" size={64} />\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"brand-icon-variants"},"Brand Icon Variants"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," property to change the style of Brand icons. Available variants are ",(0,i.kt)("inlineCode",{parentName:"p"},"twotonedarkcircle"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"twotonelightcircle"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"twotone"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"onetonedarkcircle"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"onetone"),". The default variant is ",(0,i.kt)("inlineCode",{parentName:"p"},"twotonedarkcircle"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Grid columns={5} span={{ md: \'50%\', lg: \'20%\' }}>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        onetonedarkcircle\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetonedarkcircle" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetonedarkcircle" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetonedarkcircle" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetonedarkcircle" />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        twotonedarkcircle\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonedarkcircle" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonedarkcircle" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonedarkcircle" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonedarkcircle" />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        twotonelightcircle\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonelightcircle" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonelightcircle" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonelightcircle" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonelightcircle" />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        onetone\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetone" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetone" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetone" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <Layout.Space space={48} />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        twotone\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotone" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotone" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotone" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <Layout.Space space={48} />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n</Grid>\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Icon}\n  rows={[\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the icon',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The svg content of the icon',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the icon',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the icon',\n    },\n    {\n      name: 'isScreenReadable',\n      type: 'boolean',\n      description:\n        'Indicate whether the icon is screen readable or not. If the icon is Screen Readable, then provide a title',\n    },\n    {\n      name: 'onProcessSVG',\n      type: 'function',\n      description: 'The svg content of the icon',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description:\n        '(not currently functioning) Pre programmed sizes for the icons',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={IconBrand}\n  rows={[\n    {\n      name: 'icon',\n      type: 'string',\n      description: 'Name of the brand icon',\n    },\n    {\n      name: 'variant',\n      type: 'twotonedarkcircle | twotonelightcircle | twotone | onetonedarkcircle | onetone',\n      description: 'The style/color variation of the brand icon',\n    },\n    {\n      name: 'brand',\n      type: 'uhc | optum | uhg',\n      description:\n        'indicates which brand you want your icon from. This changes the colors of the icon to match the brand you select',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the brand icon',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set color option 1 of the brand icon',\n    },\n    {\n      name: 'color2',\n      type: 'string',\n      description: 'Set color option 2 of the brand icon',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the brand icon',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Icon}\n  rows={[\n    {\n      name: 'icon-root',\n      description: 'Icon root element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={IconBrand}\n  rows={[\n    {\n      name: 'icon-brand-root',\n      description: 'IconBrand root element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("h2",{id:"meaningful-or-control-icons"},"Meaningful or Control Icons"),(0,i.kt)("p",null,"If the icon is being used in a setting where it is the only element providing meaning, then that same meaning should be conveyed to screen reader users. The below implementation provides examples of situations in which the property ",(0,i.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," should be set to true and the ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," property is required and should describe the purpose of the image."),(0,i.kt)("p",null,"Example 1: An alert icon is used to convey a sense of urgency; there is adjacent text (\u201cThere is a data outage\u201d) but the text doesn't include any words that convey urgency. So, in this case, the icon should have a text alternative such as \u201cAlert\u201d or \u201cWarning\u201d."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand title="alert" icon="alert" isScreenReadable={true} size={24} />\n  <div>There is a data outage</div>\n</Layout.Group>\n')),(0,i.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog. There is no adjacent text, so the icon should have a text alternative of \u201cclose\u201d or \u201cclose window\u201d.",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial title="close" icon="close" isScreenReadable={true} size={24} />\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"decorative-icons"},"Decorative Icons"),(0,i.kt)("p",null,"If the icon is being used in a setting in which it just a decorative element (which is the default case for icons), then the icon should be ignored by screen readers. The below implementation provides example of which situations would be classified as decorative. Since the default of ",(0,i.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," is set to false no specific changes need to be made for decorative icons."),(0,i.kt)("p",null,"Example 1: An alert icon is used next to an urgent message and the word \u201cAlert\u201d is included in the adjacent text. In this case, the icon becomes decorative in nature and should be ignored by screen readers."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="alert" size={24} />\n  <div>Alert: There is a data outage</div>\n</Layout.Group>\n')),(0,i.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog; the word \u201cClose\u201d appears to the right of the button. In this case, the icon should be considered decorative and ignored by screen readers.",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial icon="close" size={24} />\n  <div>Close</div>\n</Layout.Group>\n'))),(0,i.kt)(u,{label:"Brand Icons",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<h2>Brand Icons</h2>\n")),(0,i.kt)("p",null,"Abyss uses Brand's branded iconography that is designed to aid wayfinding, draw attention and support messaging."),(0,i.kt)(m,{brand:"uhg",mdxType:"IconLibrary"})))}h.isMDXComponent=!0},97884:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"colors",title:"Colors",category:"Foundations",pagination_prev:"foundations/uhg/brandmark",pagination_next:"foundations/uhg/typography"},s=void 0,d={unversionedId:"foundations/uhg/colors",id:"foundations/uhg/colors",isDocsHomePage:!1,title:"Colors",description:"Overview",source:"@site/docs/foundations/uhg/colors.md",sourceDirName:"foundations/uhg",slug:"/foundations/uhg/colors",permalink:"/foundations/uhg/colors",tags:[],version:"current",frontMatter:{id:"colors",title:"Colors",category:"Foundations",pagination_prev:"foundations/uhg/brandmark",pagination_next:"foundations/uhg/typography"},sidebar:"docs",previous:{title:"Brandmark",permalink:"/foundations/uhg/brandmark"},next:{title:"Typography",permalink:"/foundations/uhg/typography"}},p=[{value:"Overview",id:"overview",children:[],level:2},{value:"Primary",id:"primary",children:[],level:2},{value:"Secondary",id:"secondary",children:[],level:2},{value:"Accent",id:"accent",children:[],level:2},{value:"Interactive",id:"interactive",children:[{value:"Tint",id:"tint",children:[],level:3}],level:2},{value:"Supporting",id:"supporting",children:[{value:"Status",id:"status",children:[],level:3},{value:"Neutrals",id:"neutrals",children:[],level:3}],level:2},{value:"Accessibility",id:"accessibility",children:[],level:2}],c={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Color differentiates our brands and helps create consistent experiences across our digital products. We use color to help our users know exactly what they need to focus on."),(0,i.kt)("p",null,"We are committed to complying with the Web Content Accessibility Guidelines AA standard contrast ratios. To do this, choose primary, secondary, and extended colors that support usability by ensuring sufficient color contrast between elements."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"primary"},"Primary"),(0,i.kt)("p",null,"Our bold primary palette is used in logical ways throughout our products, marketing and sales to guide the eye and highlight important features. Utilizing our softer secondary colors, we bring warmth to the user experience to impart optimism and confidence."),(0,i.kt)("p",null,"We use blue ($primary1) for primary actions, buttons, text links, for indicating progress and representing authentication. These colors are used in combination wherever a color theme may be desired. The Abyss theme can be adjusted on a case by case basis to allow for custom color components."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$primary1" name="Dark Blue">\n      Primary typography, navigation bar, button background, and component\n      headers. This is the most common occuring blue, and should be used the\n      most often.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$primary2" name="White">\n      Used as the secondary color of our components. Primarily used for\n      backgrounds or to contrast with $primary1.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"secondary"},"Secondary"),(0,i.kt)("p",null,"Secondary colors are mostly used when a designer uses one or more of the brand's illustrated assets within a digital solution."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$secondary1" name="Bright Blue">\n      Use as accents to bring warmth and lightness to our imagery and graphic\n      treatments.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$secondary2" name="Gold">\n      Use as accents to bring warmth and lightness to our imagery and graphic\n      treatments.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$secondary3" name="Orange">\n      Use as accents to bring warmth and lightness to our imagery and graphic\n      treatments.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"accent"},"Accent"),(0,i.kt)("p",null,"The accent color is used to keep things fresh and interesting. We lean on this color more frequently when brand awareness is high, or on our own properties where we control the surrounding environment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$accent1" name="Accent Berry">\n      Use in communications, but can vary in amount from larger floods of color\n      to small details in brand elements.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"interactive"},"Interactive"),(0,i.kt)("p",null,"Our interactive palette contains a variety of colors make every moment feel on-brand and every interaction informative. Each color is selected intentionally to provide meaningful feedback within our products."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$interactive1" name="Interactive Active">\n      Use for elements the user can interact with such as links or icons.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$interactive2" name="Interactive Hover">\n      Use when implementing hover for an $interactive1 element.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$interactive3" name="Interactive Light">\n      Use when implementing hover for a secondary button.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"tint"},"Tint"),(0,i.kt)("p",null,"Tints are reserved for containing boxes to highlight information. Tints are used for background fills, visual sectioning, and callouts. They appear behind scrollable content to add visual sectioning and accents."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$tint1" name="Bright Blue 5%">\n      (Extra Light Blue)\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$tint2" name="Bright Blue 10%">\n      Use as a background color for delineation in layouts.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$tint3" name="Bright Blue 20%">\n      Use in most cases where a tint is needed.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$tint4" name="Bright Blue 40%">\n      Use for delineation in charts where Bright Blue 20% is already in use.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"supporting"},"Supporting"),(0,i.kt)("p",null,"Supporting colors are primarily used for infographics and data visualizations."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$supporting1" name="Violet">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$supporting2" name="Iris">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$supporting3" name="Lagoon">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$supporting4" name="Rainwater">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$supporting5" name="Strawberry">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$supporting6" name="Apple">\n      Use in digital spaces, for infographic and data visualizations.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("h3",{id:"status"},"Status"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$success1" name="Success">\n      Use to indicate success to the user such as upon completion of a form.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$success2" name="Success Light">\n      Use for a hover or unfocused version of success.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$error1" name="Error">\n      Use to indicate an error to the user such as when a form submission fails.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$error2" name="Error Light">\n      Use for a hover or unfocused version of error.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$warning1" name="Warning">\n      Use to indicate a warning to the user such as when a form submission goes\n      through but may be inaccurate.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$warning2" name="Warning Light">\n      Use for a hover or unfocused version of warning.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$info1" name="Info">\n      Use to indicate information to the user such as after a form is submitted\n      and important information needs to be conveyed.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$info2" name="Info Light">\n      Use for a hover or unfocused version of info.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("h3",{id:"neutrals"},"Neutrals"),(0,i.kt)("p",null,'Neutrals have varying degrees of saturation that allow for the appropriate level of warmth across marketing and product. Typically they are used for text and subtle backgrounds when we don\'t want to draw too much attention to a particular touchpoint or convey information such as "disabled". Gray tints are limited to print when black is the only color option.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Grid columns={1}>\n  <Grid.Col span={1}>\n    <Docs.ColorTile color="$white" name="White">\n      Use White as a background or to contrast with darker colors. Implement\n      white where it will never be necessary for the color theme to change.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray1" name="Gray 1">\n      Use as a background color for delineation in Layouts.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray2" name="Gray 2">\n      Use as a background color for delineation in Layouts.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray3" name="Gray 3">\n      Use as a background color for delineation in Layouts.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray4" name="Gray 4">\n      Use for additional delineation in Layouts.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray5" name="Gray 5">\n      Use for disabled text only.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray6" name="Gray 6">\n      Use for paragraph text.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray7" name="Gray 7">\n      Use for labels and borders. When used on white background it may be used\n      for legal copy.\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$gray8" name="Gray 8">\n      Use for headings h4-h6, body text and dark accents such as outlines, and\n      actions\n    </Docs.ColorTile>\n    <Docs.ColorTile color="$black" name="Black">\n      Use for headings, body text and dark accents such as outlines, and\n      actions.\n    </Docs.ColorTile>\n  </Grid.Col>\n</Grid>\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"accessibility"},"Accessibility"),(0,i.kt)("p",null,"Color choices that are accessible ensure everyone can not only see every element on a page, but also understand a specific, intended meaning. You want everyone to be able to see the difference between two colors right next to or on top of each other."),(0,i.kt)("p",null,"Contrast refers to the perceived difference between foreground and background colors. People with low vision or color blindness, and those who have difficulty seeing the differences between colors all can have trouble seeing where one element ends and another begins. As we age, the shape of our eyes changes and that affects both how we perceive color and how well we can distinguish variations in color. If the contrast between different elements is too low, people may not be able to see them at all."),(0,i.kt)("p",null,"Contrast is expressed as a ratio with the first number representing the foreground color and the second representing the background color. For example, 3:1 means the foreground item color is three times more intense or visible than the background value. Contrast rules apply to text as well as any content that conveys meaning, including icons, graphics and form elements. Tools such as Colour Contrast Analyser or WebAIM's online color contrast tool are useful for verifying contrast ratios."),(0,i.kt)("p",null,"Color and contrast choices within a digital experience are accessible when people can:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"See UI elements and content"),(0,i.kt)("li",{parentName:"ul"},"Understand and interpret information"),(0,i.kt)("li",{parentName:"ul"},"Take action")),(0,i.kt)("p",null,"Our aim is to provide a contrast ratio that can be perceived by all users. For this reason, UnitedHealthcare has embraced a minimum contrast ratio of 4.5:1 (foreground vs background) for UI elements and content that convey meaning."),(0,i.kt)("b",null,"Recommendations"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Include color combinations, good contrast and poor contrast, in design documentation"),(0,i.kt)("li",{parentName:"ul"},"Communicate meaning with more than just color, such as with color and descriptive text"),(0,i.kt)("li",{parentName:"ul"},"Give focus indicators a unique presentation that meets contrast requirements on all backgrounds")),(0,i.kt)("b",null,"Test for a minimum contrast ratio 4.5 to 1 for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Non-bolded text smaller than 24 pixels (18 points)"),(0,i.kt)("li",{parentName:"ul"},"Bold text smaller than 18 pixels (14 points)"),(0,i.kt)("li",{parentName:"ul"},"Essential icons that are close to body text size")),(0,i.kt)("b",null,"Test that non-text elements that communicate information meet a minimum contrast ratio of 3 to 1 for all states:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Icons"),(0,i.kt)("li",{parentName:"ul"},"Data visualizations"),(0,i.kt)("li",{parentName:"ul"},"Focus indicators"),(0,i.kt)("li",{parentName:"ul"},"Controls, including their borders or boundaries"),(0,i.kt)("li",{parentName:"ul"},"Non-bolded text at or above 24 pixels (18 points)"),(0,i.kt)("li",{parentName:"ul"},"Bold text at or above 18 pixels (14 points) in size")),(0,i.kt)("p",null,"Don't worry about contrast for logos and disabled elements. Watch out for using color alone to communicate meaning. People who are color blind or blind cannot perceive the meaning by color alone."))}u.isMDXComponent=!0},65405:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"typography",title:"Typography",category:"Foundations",description:"Typography for UHG brands",pagination_prev:"foundations/uhg/colors",pagination_next:"foundations/uhg/icon-brand"},d=void 0,p={unversionedId:"foundations/uhg/typography",id:"foundations/uhg/typography",isDocsHomePage:!1,title:"Typography",description:"Typography for UHG brands",source:"@site/docs/foundations/uhg/typography.md",sourceDirName:"foundations/uhg",slug:"/foundations/uhg/typography",permalink:"/foundations/uhg/typography",tags:[],version:"current",frontMatter:{id:"typography",title:"Typography",category:"Foundations",description:"Typography for UHG brands",pagination_prev:"foundations/uhg/colors",pagination_next:"foundations/uhg/icon-brand"},sidebar:"docs",previous:{title:"Colors",permalink:"/foundations/uhg/colors"},next:{title:"IconBrand",permalink:"/foundations/uhg/icon-brand"}},c=[{value:"Overview",id:"overview",children:[],level:2},{value:"Headings",id:"headings",children:[],level:2},{value:"Display",id:"display",children:[{value:"<b>Recommendations</b>",id:"recommendations",children:[],level:4}],level:2},{value:"Body Copy Text",id:"body-copy-text",children:[{value:"<b>Recommendations</b>",id:"recommendations-1",children:[],level:4}],level:2},{value:"Accessibility",id:"accessibility",children:[],level:2}],u=(a="ExitLink",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Typography is the art and technique of arranging type to make written language legible. In the Abyss library, ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/heading"},"Heading")," and ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/text"},"Text")," dive into the detail behind text formatting for UHG branding. More in depth guidance on typography can be found below and in the ",(0,r.kt)(u,{href:"https://uhgazure.sharepoint.com/sites/Policies/SitePages/Brand-Materials.aspx",mdxType:"ExitLink"},"UHG Brand Resources")," Sharepoint."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"headings"},"Headings"),(0,r.kt)("p",null,"Headings identify chunks of related content on a page and establish the hierarchy showing how those chunks of content relate to each other. If someone reads only the headings on a page, they will get a general understanding of the information presented."),(0,r.kt)("p",null,"HTML defines six heading levels: H1 to H6."),(0,r.kt)("p",null,"H1 identifies an entire page, or overall topic, and is the most important level. There should only be 1 H1 per page."),(0,r.kt)("p",null,"Find further documentation in the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/heading"},"Heading")," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Layout.Stack grow>\n  <Docs.TypeTile type="h1">\n    <Heading>Heading 1</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type="h2">\n    <Heading offset={1}>Heading 2</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type="h3">\n    <Heading offset={2}>Heading 3</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type="h4">\n    <Heading offset={3}>Heading 4</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type="h5">\n    <Heading offset={4}>Heading 5</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type="h6">\n    <Heading offset={5}>Heading 6</Heading>\n  </Docs.TypeTile>\n</Layout.Stack>\n')),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"display"},"Display"),(0,r.kt)("p",null,"Display sizes are headers with H1 tags that have a greater size than a regular H1."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Layout.Stack grow>\n  <Docs.TypeTile type={'h1[data-display=\"1\"]'}>\n    <Heading display={1}>Display 1</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type={'h1[data-display=\"2\"]'}>\n    <Heading display={2}>Display 2</Heading>\n  </Docs.TypeTile>\n  <Docs.TypeTile type={'h1[data-display=\"3\"]'}>\n    <Heading display={3}>Display 3</Heading>\n  </Docs.TypeTile>\n</Layout.Stack>\n")),(0,r.kt)("h4",{id:"recommendations"},(0,r.kt)("b",null,"Recommendations")),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("b",null,"Always")," have an H1 heading for the page tile"),(0,r.kt)("li",null,"Keep headings scannable"),(0,r.kt)("li",null,"Headings are always sentence-case"),(0,r.kt)("li",null,"Do not use punctuation in headings")),(0,r.kt)("b",null,"IMPORTANT: For way-finding, every page must have an H1 available (especially for screen readers) that describes the main purpose of the page such as \u201cClaims & Benefits\u201d"),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"body-copy-text"},"Body Copy Text"),(0,r.kt)("p",null,"Graphik is the primary typeface for body copy. It is available in 5 weights \u2014 Light, Regular, Medium, SemiBold, and Bold. All weights are available in italics."),(0,r.kt)("p",null,"Regular copy is the default style for the majority of text on pages. Small copy is the secondary style for context on pages and is used for secondary text styles, as well as footnotes and legal messaging or less important content. Find further documentation in the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/text"},"Text Component"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<Layout.Stack grow>\n  <Docs.TypeTile\n    fontSize="18px"\n    lineHeight="24px"\n    fontWeight="$normal"\n    color="$black"\n  >\n    <Label>Body 1 - LG</Label>\n    <Text size="$lg">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n      tempor incididunt. Lorem ipsum dolor sit amet, consectetur adipisicing\n      elit, sed do eiusmod tempor incididunt. Lorem ipsum dolor sit amet,\n      consectetur adipisicing elit, sed do eiusmod tempor incididunt.\n    </Text>\n  </Docs.TypeTile>\n  <Docs.TypeTile\n    fontSize="16px"\n    lineHeight="20px"\n    fontWeight="$normal"\n    color="$black"\n  >\n    <Label>Body 2 - MD</Label>\n    <Text size="$md">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n      tempor incididunt. Lorem ipsum dolor sit amet, consectetur adipisicing\n      elit, sed do eiusmod tempor incididunt. Lorem ipsum dolor sit amet,\n      consectetur adipisicing elit, sed do eiusmod tempor incididunt.\n    </Text>\n  </Docs.TypeTile>\n  <Docs.TypeTile\n    fontSize="14.22px"\n    lineHeight="16px"\n    fontWeight="$normal"\n    color="$black"\n  >\n    <Label>Body 3 - SM</Label>\n    <Text size="$sm">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n      tempor incididunt. Lorem ipsum dolor sit amet, consectetur adipisicing\n      elit, sed do eiusmod tempor incididunt. Lorem ipsum dolor sit amet,\n      consectetur adipisicing elit, sed do eiusmod tempor incididunt.\n    </Text>\n  </Docs.TypeTile>\n  <Docs.TypeTile\n    fontSize="12.64px"\n    lineHeight="16px"\n    fontWeight="$normal"\n    color="$black"\n  >\n    <Label>Small 1 - XS</Label>\n    <Text size="$xs">\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n      tempor incididunt. Lorem ipsum dolor sit amet, consectetur adipisicing\n      elit, sed do eiusmod tempor incididunt. Lorem ipsum dolor sit amet,\n      consectetur adipisicing elit, sed do eiusmod tempor incididunt.\n    </Text>\n  </Docs.TypeTile>\n</Layout.Stack>\n')),(0,r.kt)("hr",null),(0,r.kt)("h4",{id:"recommendations-1"},(0,r.kt)("b",null,"Recommendations")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("i",null,"Italics")," are used only when referencing books, movies, albums or publication tiles"),(0,r.kt)("li",{parentName:"ul"},"People read 25% slower onscreen, and they skim rather than read"),(0,r.kt)("li",{parentName:"ul"},"Web text should be short and scannable"),(0,r.kt)("li",{parentName:"ul"},"Write no more than 50% of the text you would have used in a hardcopy publication"),(0,r.kt)("li",{parentName:"ul"},"Write for scannability: don't require users to read long continuous blocks of text")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"accessibility"},"Accessibility"),(0,r.kt)("p",null,"It is best to have just one H1 on a page. Headings H2 through H6 help people understand the structure of the page and how content is organized. Headings also help people who use assistive technology move through the page content."),(0,r.kt)("b",null,"Define page structure:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Describe the topic or purpose of a page in the document tile"),(0,r.kt)("li",{parentName:"ul"},"Start tiles for browser tabs and windows with the page tile and end them with the site name"),(0,r.kt)("li",{parentName:"ul"},"Define sections of a page using headings and ARIA landmarks, including how sections should reflow for responsive breakpoints"),(0,r.kt)("li",{parentName:"ul"},"If a page has a complex layout, it can be helpful to illustrate the tab order and reading order in design documentation"),(0,r.kt)("li",{parentName:"ul"},"Group related items using a list structure"),(0,r.kt)("li",{parentName:"ul"},"When text is used as a heading, assign appropriate heading tags (h1 to h6)"),(0,r.kt)("li",{parentName:"ul"},"Follow heading hierarchy on every page: A single H1 and others in sequence")),(0,r.kt)("p",null,"Headings chosen for visual style rather than following hierarchy semantics. Doing so can make it difficult for people using assistive technology to navigate a page."),(0,r.kt)("hr",null),(0,r.kt)("b",null,"Things to avoid or wach out for:"),(0,r.kt)("p",null,"Avoid using heading tags for visual effect alone. Heading tags convey meaning to assistive technology that helps people understand relationships in the page content."),(0,r.kt)("p",null,"Always use HTML heading tags to style headings. A tag gives special meaning to the text that cannot be conveyed using visual formatting or CSS. People who use screen readers need to hear the information called out explicily as a heading to be able to understand the purpose of the text."),(0,r.kt)("p",null,"Be cautious about using heading tags in page footers, headers or to describe site navigation. Some U.S. states require heading tags to be used only within the main content area of a page."),(0,r.kt)("b",null,"Review the page to confirm that an H1 is present and:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Visible whenever possible (not hidden using CSS unless the scenario requires it)"),(0,r.kt)("li",{parentName:"ul"},"Appears as the first heading on the page")),(0,r.kt)("b",null,"Inspect the code and confirm that heading tags:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Are used in numerical order without gaps"),(0,r.kt)("li",{parentName:"ul"},"Are used for headings (preferred); in cases where use of heading tags is not feasible, ARIA is used to indicate heading roles"),(0,r.kt)("li",{parentName:"ul"},"Review the page with a screen reader to confirm that headings are presented in the order expected")),(0,r.kt)("b",null,"Specify type (and container) size using root em (rem) units."),(0,r.kt)("p",null,"Rem units are sized relative to the base type size for the document, the base browser type size, rather than the size used within their containing element. Rems are preferred over ems, pixels or points. Em unit sizes can be challenging to manage due to parent-child relationship complexities. Points and pixels are static measurements that do not allow for a flexible presentation."),(0,r.kt)("p",null,"Use rem units in CSS to specify type and container sizes. For reliable and flexible sizing, use rem units instead of pixels for media queries as well."),(0,r.kt)("b",null,"Avoid specifying a fixed container height.")," Allowing the type size and padding to set the height of a container ensures the text is always visible and readable. It helps to avoid weird overflow or clipping issues.",(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Change the browser setting for text (font) size to anything larger than the default size and review the page. If is unreadable or unusable, then the text is not using rem units.")))}g.isMDXComponent=!0},66693:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"about",slug:"/about",title:"About Abyss",pagination_prev:"overview/overview",pagination_next:"overview/releases"},d=void 0,p={unversionedId:"overview/about",id:"overview/about",isDocsHomePage:!1,title:"About Abyss",description:"What is Abyss?",source:"@site/docs/overview/about.md",sourceDirName:"overview",slug:"/about",permalink:"/about",tags:[],version:"current",frontMatter:{id:"about",slug:"/about",title:"About Abyss",pagination_prev:"overview/overview",pagination_next:"overview/releases"},sidebar:"docs",previous:{title:"Overview",permalink:"/overview"},next:{title:"Releases",permalink:"/releases"}},c=[{value:"What is Abyss?",id:"what-is-abyss",children:[],level:2},{value:"How Abyss works",id:"how-abyss-works",children:[],level:2},{value:"We support adoption",id:"we-support-adoption",children:[{value:"We host working sessions and meetups.",id:"we-host-working-sessions-and-meetups",children:[],level:5},{value:"Our components and elements are regularly maintained.",id:"our-components-and-elements-are-regularly-maintained",children:[],level:5},{value:"We provide support for our users.",id:"we-provide-support-for-our-users",children:[],level:5}],level:2},{value:"Guiding Principles",id:"guiding-principles",children:[],level:2},{value:"We maintain assets",id:"we-maintain-assets",children:[{value:"Overview",id:"overview",children:[],level:5},{value:"Component Library",id:"component-library",children:[],level:5},{value:"Design Kit",id:"design-kit",children:[],level:5},{value:"Brand",id:"brand",children:[],level:5}],level:2},{value:"The Abyss Team",id:"the-abyss-team",children:[],level:2}],u=(a="ExitLink",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"what-is-abyss"},"What is Abyss?"),(0,r.kt)("p",null,"Abyss is a design system containing a Design Kit and a Component Library, all published on this Abyss documentation site. The design system includes a number of pre-built, reusable assets including components, hooks and theming guidelines that allow our users to build and maintain products faster. By opting into Abyss, product teams minimize time spent designing and building, letting them focus on addressing specific client use cases."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"() => {\n  const src = utils.useBaseUrl('/img/graphics/whatis.svg');\n  return (\n    <Box color=\"none\" style={{ borderRadius: '5px' }} padding=\"$xl\">\n      <img src={src} />\n    </Box>\n  );\n};\n")),(0,r.kt)("h2",{id:"how-abyss-works"},"How Abyss works"),(0,r.kt)("p",null,"This diagram showcases the five-step workflow the Abyss team works through to create and develop reusable UI components. A Design System contains reusable UI components that helps teams build complex, durable and accessible user interfaces across projects. Since both designers and developers contribute to Abyss, the design system serves as a single source of truth across the organization's common components."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"() => {\n  const src = utils.useBaseUrl('/img/graphics/workflow.svg');\n  return (\n    <Box color=\"none\" style={{ borderRadius: '5px' }} padding=\"$xl\">\n      <img src={src} />\n    </Box>\n  );\n};\n")),(0,r.kt)("h2",{id:"we-support-adoption"},"We support adoption"),(0,r.kt)("h5",{id:"we-host-working-sessions-and-meetups"},"We host working sessions and meetups."),(0,r.kt)("p",null,"The Abyss team hosts regular working sessions for designers and developers to interact with the design system, ask questions and collaborate on changing elements."),(0,r.kt)("h5",{id:"our-components-and-elements-are-regularly-maintained"},"Our components and elements are regularly maintained."),(0,r.kt)("p",null,"The Abyss team creates, supports and maintains our elements, and offers triage support for our user base. Teams can use these well-defined elements, and keep up with changes in our Release notes."),(0,r.kt)("h5",{id:"we-provide-support-for-our-users"},"We provide support for our users."),(0,r.kt)("p",null,"The Abyss team engages with our users primarily through our ",(0,r.kt)("a",{parentName:"p",href:"/contact-us"},"Contact Us")," form. A member of the Abyss team responds to all issues, and when a member of your team joins the Abyss Admiral team, they'll be able to contribute. On an ad hoc basis, there are also tutorials and onboarding sessions available for new users."),(0,r.kt)("h2",{id:"guiding-principles"},"Guiding Principles"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"() => {\n  const guidingList = [\n    {\n      id: 1,\n      icon: 'chat',\n      title: 'Abyss puts the user first.',\n      description:\n        'A dedicated design team keeps our end users front of mind through usability testing and peer reviews.',\n    },\n    {\n      id: 2,\n      icon: 'network',\n      title: 'Abyss is flexible.',\n      description:\n        'Abyss enables teams to leverage reusable and customizable backend components, keeping their products lean and easy to maintain.',\n    },\n    {\n      id: 3,\n      icon: 'care',\n      title: 'Abyss is inclusive.',\n      description:\n        'Users of all abilities can use Abyss components once they are reviewed from a design and development standard, following WCAG guidelines and A11y best practices.',\n    },\n    {\n      id: 4,\n      icon: 'bar_chart',\n      title: 'Abyss builds consistency.',\n      description:\n        'As more teams adopt the use of Abyss, the use of repeatable patterns and functionality create a friendly and familiar experience for our end users.',\n    },\n  ];\n  return (\n    <Grid columns={2}>\n      {guidingList.map((item, index) => {\n        return (\n          <Grid.Col key={index} span={1}>\n            <Box color=\"$white\" padding=\"$xs\">\n              <Card.Section>\n                <IconBrand\n                  brand=\"uhc\"\n                  color=\"$primary1\"\n                  icon={item.icon}\n                  size={50}\n                />\n              </Card.Section>\n\n              <Heading\n                offset={3}\n                size=\"$lg\"\n                fontWeight=\"bold\"\n                textAlign=\"center\"\n              >\n                {item.title}\n              </Heading>\n              <Card.Section style={{ textAlign: 'center' }}>\n                <Text size=\"$md\">{item.description}</Text>\n              </Card.Section>\n            </Box>\n          </Grid.Col>\n        );\n      })}\n    </Grid>\n  );\n};\n")),(0,r.kt)("h2",{id:"we-maintain-assets"},"We maintain assets"),(0,r.kt)("h5",{id:"overview"},"Overview"),(0,r.kt)("p",null,"At its core, Abyss contains elements, components and patterns for how to design and build with them. Beyond this core is a distributed ecosystem of sites that adopt and utilize the Abyss design system within our organization and among our partners."),(0,r.kt)("h5",{id:"component-library"},"Component Library"),(0,r.kt)("p",null,"Abyss supports React-based code implementation. The library is continually evolving and adapting to our clients needs, so learn more about how you can contact us for questions, and requests. If you're a developer, learn about installing and implementing Abyss in our ",(0,r.kt)("a",{parentName:"p",href:"/developers/getting-started"},"Developer Toolkit"),"."),(0,r.kt)("h5",{id:"design-kit"},"Design Kit"),(0,r.kt)("p",null,"We maintain the ",(0,r.kt)(u,{href:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1",mdxType:"ExitLink"},"Abyss Design Kit")," on ",(0,r.kt)(u,{href:"https://www.figma.com/",mdxType:"ExitLink"},"Figma")," containing Abyss components, and design patterns, foundations and guidelines. As an internal UHG employee, you have access to all Abyss Design Kit assets and can pull them directly into your products."),(0,r.kt)("h5",{id:"brand"},"Brand"),(0,r.kt)("p",null,"The brand guidance begins with the foundations in the Brand Center - ",(0,r.kt)(u,{href:"https://brand.uhc.com/",mdxType:"ExitLink"},"UHC"),"/",(0,r.kt)(u,{href:"https://brand.optum.com/",mdxType:"ExitLink"},"Optum")," brand. For questions regarding branding, reach out to the brand team at: ",(0,r.kt)("a",{parentName:"p",href:"mailto:brand.team@uhc.com"},"brand.team@uhc.com")," or ",(0,r.kt)("a",{parentName:"p",href:"mailto:optumbrand@optum.com"},"optumbrand@optum.com"),"."),(0,r.kt)("h2",{id:"the-abyss-team"},"The Abyss Team"),(0,r.kt)("p",null,"To contact the team for support and questions, check out our ",(0,r.kt)("a",{parentName:"p",href:"/contact-us"},"Contact Us")," page."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"() => {\n  const teamList = [\n    {\n      image: 'surendra-bandi.jpg',\n      name: 'Surendra Bandi',\n      title: 'Principal Engineer',\n    },\n    {\n      image: 'john-hollow.jpg',\n      name: 'John Hollow',\n      title: 'Lead Architect',\n    },\n    {\n      image: 'bradley-hennen.jpg',\n      name: 'Bradley Hennen',\n      title: 'Lead Engineer',\n    },\n    {\n      image: 'denys-zayets.jpg',\n      name: 'Denys Zayets',\n      title: 'Lead UX Designer',\n    },\n    {\n      image: 'becca-jackelen.jpg',\n      name: 'Becca Hanson Jackelen',\n      title: 'Sr Product Manager',\n    },\n    {\n      image: 'matt-miller.jpg',\n      name: 'Matt Miller',\n      title: 'Product Delivery Manager',\n    },\n    {\n      image: 'paul-oxborrow.jpg',\n      name: 'Paul Oxborrow',\n      title: 'Prin A11y Engineer',\n    },\n    {\n      image: 'megan-posusta.jpg',\n      name: 'Megan Posusta',\n      title: 'Product Manager',\n    },\n    {\n      image: 'eliana-betancur.jpg',\n      name: 'Eliana Betancur',\n      title: 'UX Engineer',\n    },\n    {\n      image: 'jess-wolff.jpg',\n      name: 'Jessica Wolff',\n      title: 'UX Engineer',\n    },\n    {\n      image: 'tony-braasch.jpg',\n      name: 'Tony Braasch',\n      title: 'Frontend Engineer',\n    },\n    {\n      image: 'scott-houser.jpg',\n      name: 'Scott Houser',\n      title: 'Frontend Engineer',\n    },\n    {\n      image: '',\n      name: 'Sharan Kandagatla',\n      title: 'Frontend Engineer',\n    },\n  ];\n\n  return (\n    <Flex justify=\"flex-start\" alignItems=\"stretch\" alignContent=\"center\">\n      {teamList.map((item) => {\n        const path = item.image ? `img/team/${item.image}` : `img/logo.png`;\n        const src = utils.useBaseUrl(path);\n\n        return (\n          <Card\n            key={item.name}\n            css={{\n              marginRight: '$md',\n              marginBottom: '$md',\n              marginTop: '$lg',\n              justifyContent: 'center',\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'center',\n              alignItems: 'center',\n              padding: '$sm',\n            }}\n          >\n            <Layout.Group>\n              <img\n                src={src}\n                style={{\n                  width: '50px',\n                  borderRadius: '100%',\n                  margin: '0 auto',\n                }}\n              />\n              <div>\n                <Label size=\"$md\">{item.name}</Label>\n                <Text>{item.title}</Text>\n              </div>\n            </Layout.Group>\n          </Card>\n        );\n      })}\n      <Popover\n        title=\"Previous contributors\"\n        content={\n          <ul>\n            <li>- Andy Li</li>\n            <li>- Anees Azeez</li>\n            <li>- Benson Nyakango</li>\n            <li>- Bishesh Karki</li>\n            <li>- Brandon Schenck</li>\n            <li>- Lindsay Thron</li>\n            <li>- Michael McGillicuddy</li>\n            <li>- Nicki Rios</li>\n            <li>- Oscar Palomino</li>\n            <li>- Shilpa Asranna</li>\n            <li>- Teja Kankanala</li>\n            <li>- Xander Nelson</li>\n          </ul>\n        }\n        position=\"right\"\n        showClose={false}\n      >\n        <Card\n          css={{\n            'abyss-card-root': {\n              marginBottom: '$md',\n              marginTop: '$lg',\n              justifyContent: 'center',\n              display: 'flex',\n              flexDirection: 'row',\n              justifyContent: 'center',\n              alignItems: 'center',\n              padding: '$lg',\n            },\n          }}\n        >\n          <Label size=\"md\">+ more</Label>\n        </Card>\n      </Popover>\n    </Flex>\n  );\n};\n")))}g.isMDXComponent=!0},62838:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"accessibility",slug:"/accessibility",title:"Accessibility",pagination_prev:"overview/releases",pagination_next:"overview/product-resources"},d=void 0,p={unversionedId:"overview/accessibility",id:"overview/accessibility",isDocsHomePage:!1,title:"Accessibility",description:"Overview",source:"@site/docs/overview/accessibility.md",sourceDirName:"overview",slug:"/accessibility",permalink:"/accessibility",tags:[],version:"current",frontMatter:{id:"accessibility",slug:"/accessibility",title:"Accessibility",pagination_prev:"overview/releases",pagination_next:"overview/product-resources"},sidebar:"docs",previous:{title:"Releases",permalink:"/releases"},next:{title:"Product Resources",permalink:"/product-resources"}},c=[{value:"Overview",id:"overview",children:[],level:2},{value:"Interactive components",id:"interactive-components",children:[],level:2},{value:"Color contrast",id:"color-contrast",children:[],level:2},{value:"Visually hidden content",id:"visually-hidden-content",children:[],level:2},{value:"Icons",id:"icons",children:[{value:"Meaningful or Control Icons",id:"meaningful-or-control-icons",children:[],level:3},{value:"Decorative Icons",id:"decorative-icons",children:[],level:3}],level:2},{value:"Additional resources",id:"additional-resources",children:[],level:2}],u=(a="ExitLink",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Products and web properties need to be accessible to everyone, including those with vision, hearing, cognitive, or motor impairments. Accessible design is everyone's responsibility, from information and user experience design, through to development, and on into help and support."),(0,r.kt)("p",null,"It is about understanding the users' journeys and proactively anticipating their needs. To make sure our assets are accessible to everyone, we follow the four principles of the WCAG Guidelines:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Perceivable: It can be perceived by at least one of a person's senses."),(0,r.kt)("li",{parentName:"ul"},"Operable: All interactions are operable through a variation of input methods."),(0,r.kt)("li",{parentName:"ul"},"Understandable: Information and operation of the interface must be understandable."),(0,r.kt)("li",{parentName:"ul"},"Robust: Content can be interpreted by a variety of assistive technologies and withstand changes in these technologies.")),(0,r.kt)("h2",{id:"interactive-components"},"Interactive components"),(0,r.kt)("p",null,"Abyss contains interactive components such as button, data table, and modal, which are designed and developed using WAI-ARIA roles, properties and states, and should be operable using assistive technologies (such as screen readers and keyboards)."),(0,r.kt)("p",null,"Because Abyss components are purposefully created to be fairly generic, developers may need to include further ARIA roles, properties and states, as well as Javascript behaviors to more accurately convey the functionality of the component. This, along with a table of keyboard interactions, and a testing environment for screen readers can be found on the Accessibility tab of each component."),(0,r.kt)("p",null,"An important point about WAI-ARIA attributes is that they don't affect any aspect of the webpage besides the information exposed by the browser's accessibility API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Button',\n  inputs: [\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'solid', value: 'solid' },\n        { label: 'outline', value: 'outline' },\n        { label: 'ghost', value: 'ghost' },\n      ],\n    },\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean'\n    },\n  ],\n}\n\n<Button>Click Here!</Button>\n")),(0,r.kt)("br",null),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Button\"\n  rows={[\n    {\n      name: 'Space',\n      description: 'Activates the button',\n    },\n    {\n      name: 'Enter',\n      description: 'Activates the button',\n    },\n  ]}\n/>\n")),(0,r.kt)("h2",{id:"color-contrast"},"Color contrast"),(0,r.kt)("p",null,"The color palette used in the Abyss library are combined to adhere to the ",(0,r.kt)(u,{href:"https://www.w3.org/TR/WCAG21/#contrast-minimum",mdxType:"ExitLink"},"WCAG 2.1 text color contrast ratio of 4.5:1, and 3:1"),". In the Abyss Design Kit, we created a chart showing the color contrast ratio and the pass/fail rate. Developers are encouraged to test their specific uses of color, and when necessary, compare their use of colors to this chart to ensure adequate color contrast ratio."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'<iframe\n  width="100%"\n  height="450"\n  src="https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2Ftk08Md4NBBVUPNHQYthmqp%2FAbyss-Design-System%3Fnode-id%3D1025%253A13039"\n  allow="fullscreen"\n></iframe>\n')),(0,r.kt)("h2",{id:"visually-hidden-content"},"Visually hidden content"),(0,r.kt)("p",null,"Visually hidden content refers to content that is visually hidden, but remains accessible to assistive technology. This content can be styled using the ",(0,r.kt)("a",{parentName:"p",href:"/web/hooks/use-visually-hidden/"},"useVisuallyHidden hook")," from the Abyss library.\nThis can be useful in situations where additional visual information or cues need to be conveyed to non-visual users, or in interactive control situations where the component is focusable."),(0,r.kt)("h2",{id:"icons"},"Icons"),(0,r.kt)("h3",{id:"meaningful-or-control-icons"},"Meaningful or Control Icons"),(0,r.kt)("p",null,"If the icon is being used in a setting where it is the only element providing meaning, then that same meaning should be conveyed to screen reader users. The below implementation provides examples of situations in which the property ",(0,r.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," should be set to true and the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," property is required and should describe the purpose of the image."),(0,r.kt)("p",null,"Example 1: An alert icon is used to convey a sense of urgency; there is adjacent text (\u201cThere is a data outage\u201d) but the text doesn't include any words that convey urgency. So, in this case, the icon should have a text alternative such as \u201cAlert\u201d or \u201cWarning\u201d."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand title="alert" icon="alert" isScreenReadable={true} size={24} />\n  <div>There is a data outage</div>\n</Layout.Group>\n')),(0,r.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog. There is no adjacent text, so the icon should have a text alternative of \u201cclose\u201d or \u201cclose window\u201d.",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial title="close" icon="close" isScreenReadable={true} size={24} />\n</Layout.Group>\n')),(0,r.kt)("h3",{id:"decorative-icons"},"Decorative Icons"),(0,r.kt)("p",null,"If the icon is being used in a setting in which it just a decorative element (which is the default case for icons), then the icon should be ignored by screen readers. The below implementation provides example of which situations would be classified as decorative. Since the default of ",(0,r.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," is set to false no specific changes need to be made for decorative icons."),(0,r.kt)("p",null,"Example 1: An alert icon is used next to an urgent message and the word \u201cAlert\u201d is included in the adjacent text. In this case, the icon becomes decorative in nature and should be ignored by screen readers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="alert" size={24} />\n  <div>Alert: There is a data outage</div>\n</Layout.Group>\n')),(0,r.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog; the word \u201cClose\u201d appears to the right of the button. In this case, the icon should be considered decorative and ignored by screen readers.",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial icon="close" size={24} />\n  <div>Close</div>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"additional-resources"},"Additional resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://www.w3.org/WAI/WCAG21/Understanding/",mdxType:"ExitLink"},"Web Content Accessibility Guidelines (WCAG) 2.1")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://www.a11yproject.com/",mdxType:"ExitLink"},"The A11Y Project")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility",mdxType:"ExitLink"},"MDN accessibility documentation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://webaim.org/resources/contrastchecker/",mdxType:"ExitLink"},"Color Contrast Analyser (CCA)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://validator.w3.org/favelets.html",mdxType:"ExitLink"},"W3 validator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://labs.levelaccess.com/index.php/Category:Favlet",mdxType:"ExitLink"},"Level Access Favlet testing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://www.digitala11y.com/accessibility-bookmarklets-testing/",mdxType:"ExitLink"},"Digital A11y")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)(u,{href:"https://adrianroselli.com/2012/06/accessibility-bookmarklets-and-tools.html",mdxType:"ExitLink"},"Accessibility Bookmarklets and Tools"))))}g.isMDXComponent=!0},2027:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"contact-us",slug:"/contact-us",title:"Contact Us",pagination_prev:"overview/product-resources",pagination_next:null},d=void 0,p={unversionedId:"overview/contact-us",id:"overview/contact-us",isDocsHomePage:!1,title:"Contact Us",description:"Abyss Teams Channels",source:"@site/docs/overview/contact-us.md",sourceDirName:"overview",slug:"/contact-us",permalink:"/contact-us",tags:[],version:"current",frontMatter:{id:"contact-us",slug:"/contact-us",title:"Contact Us",pagination_prev:"overview/product-resources",pagination_next:null},sidebar:"docs",previous:{title:"Product Resources",permalink:"/product-resources"}},c=[{value:"Abyss Teams Channels",id:"abyss-teams-channels",children:[],level:2},{value:"Abyss Office Hours",id:"abyss-office-hours",children:[],level:2},{value:"Submit a Request",id:"submit-a-request",children:[],level:2}],u=(a="ContactForm",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"abyss-teams-channels"},"Abyss Teams Channels"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Channel"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Link"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"General"),(0,r.kt)("td",{parentName:"tr",align:"left"},"The General Teams channel is for asking questions and address bug fixes related to our Abyss components"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://teams.microsoft.com/l/channel/19%3a56d97ff66adf46dfbc733a3351ba3b9a%40thread.tacv2/General?groupId=e073e644-8517-49d9-aaed-9b8557978369&tenantId=db05faca-c82a-4b9d-b9c5-0f64b6755421"},"General Teams Channel"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Abyss Design Support"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Abyss Design Support Teams channel is for asking design questions, addressing bug fixes, and learning about release updates from our Figma Design Kit, foundations, and guidance."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://teams.microsoft.com/l/channel/19%3ab134c832df7b454a87d54a0fe1af051b%40thread.tacv2/Design%2520Support?groupId=e073e644-8517-49d9-aaed-9b8557978369&tenantId=db05faca-c82a-4b9d-b9c5-0f64b6755421"},"Design Support Teams Channel"))))),(0,r.kt)("h2",{id:"abyss-office-hours"},"Abyss Office Hours"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Meeting"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Link"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Development"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Development office hours invites Abyss Admirals and other developers to ask implementation questions and address bugs identified while using Abyss components. ",(0,r.kt)("br",null),(0,r.kt)("br",null)," 1. Abyss Office Hours occur weekly on Thursdays @ 8:30am CT ",(0,r.kt)("br",null)," 2. You can submit a topic by posting in the General Teams channel and we will discuss during the next office hours. Topics submitted through the Contact Us Form will be discussed in the next Abyss PMC."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://teams.microsoft.com/l/meetup-join/19%3ameeting_MTdkODUwYzQtZTNiZS00M2EyLWJmOTMtOGJjMTU4YTYyNWU5%40thread.v2/0?context=%7b%22Tid%22%3a%22db05faca-c82a-4b9d-b9c5-0f64b6755421%22%2c%22Oid%22%3a%22d5140f05-c25a-491a-8c4f-ad6da5e23bad%22%7d"},"Join Abyss Office Hours Teams Meeting"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Figma Design Working Sessions"),(0,r.kt)("td",{parentName:"tr",align:"left"},"Figma Working Sessions invite designers, developers and product teams to collaborate on the Abyss Design System. Even if you don't know Figma, these sessions invite all Abyss users and potential users to engage in the creation of future components! ",(0,r.kt)("br",null),(0,r.kt)("br",null)," The working sessions occur weekly, and are split up in two groups ",(0,r.kt)("li",null,(0,r.kt)("strong",{parentName:"td"},"Consumer"),"\xa0Figma Working Session: Wednesdays @ 1:30pm")," ",(0,r.kt)("li",null,(0,r.kt)("strong",{parentName:"td"},"Provider"),"\xa0Figma Working Session: Thursday @ 1:30pm"),(0,r.kt)("br",null)," Simply drop your topic idea in the Abyss Design Support channel, or in our Contact Us form, and we'll cover it in a future working session. Topics can include questions, bug fixes, developer issues, feature requests, general team support, or anything you think would be beneficial to have collaboration on! Check out our\xa0",(0,r.kt)("a",{parentName:"td",href:"https://www.figma.com/file/qfNoTDIXDztYFd4SEKDG7K/Archive%3A-Figma-working-session?node-id=0%3A1&t=KCrEKjpFoaLcZoKL-3"},"previous Figma Working Session topics here")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://teams.microsoft.com/l/meetup-join/19%3ab134c832df7b454a87d54a0fe1af051b%40thread.tacv2/1672858072155?context=%7b%22Tid%22%3a%22db05faca-c82a-4b9d-b9c5-0f64b6755421%22%2c%22Oid%22%3a%227847c37e-64da-4629-90f4-f0e210fb525d%22%7d"},"Join Provider Figma Working Session Teams Meeting"))))),(0,r.kt)("h2",{id:"submit-a-request"},"Submit a Request"),(0,r.kt)("p",null,"This form can be used to submit questions, defects, enhancement requests, or new component requests. Please provide all relevant details and supporting attachments in your submission. Upon submission, you will receive an email confirmation with the idea number to track your request. New requests will be discussed in the weekly Abyss PMC."),(0,r.kt)(u,{mdxType:"ContactForm"}))}g.isMDXComponent=!0},52483:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"overview",slug:"/overview",title:"Overview",hide_table_of_contents:!0,pagination_prev:null,pagination_next:"overview/about"},d=void 0,p={unversionedId:"overview/overview",id:"overview/overview",isDocsHomePage:!1,title:"Overview",description:"Welcome to Abyss! Access the About Abyss page to learn why we created Abyss, the problems it solves, and the ecosystem supporting it. Please visit the Abyss Aha Roadmap to see details for upcoming releases or the Release Notes page to learn about the latest updates.",source:"@site/docs/overview/overview.md",sourceDirName:"overview",slug:"/overview",permalink:"/overview",tags:[],version:"current",frontMatter:{id:"overview",slug:"/overview",title:"Overview",hide_table_of_contents:!0,pagination_prev:null,pagination_next:"overview/about"},sidebar:"docs",next:{title:"About Abyss",permalink:"/about"}},c=[],u=(a="ExitLink",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:""}),(0,r.kt)("p",null,"Welcome to Abyss! Access the ",(0,r.kt)("a",{parentName:"p",href:"/about"},"About Abyss")," page to learn why we created Abyss, the problems it solves, and the ecosystem supporting it. Please visit the ",(0,r.kt)(u,{href:"https://optum.aha.io/bookmarks/custom_pivots/7176297200126773391",mdxType:"ExitLink"},"Abyss Aha Roadmap")," to see details for upcoming releases or the ",(0,r.kt)("a",{parentName:"p",href:"/releases"},"Release Notes")," page to learn about the latest updates."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"() => {\n  const overviewLinks = [\n    {\n      image: 'overview-developer.svg',\n      title: `I'm a developer`,\n      description:\n        'Learn about the Component Library, reusable assets and the checklist for getting started with Abyss.',\n      href: '/developers/getting-started',\n    },\n    {\n      image: 'overview-design.svg',\n      title: `I'm a designer`,\n      description:\n        'Learn about our Design Kit, foundations, guidance and our checklist for getting started with Abyss.',\n      href: '/designers/design-kit',\n    },\n    {\n      image: 'overview-a11y.svg',\n      title: `I'm an A11y engineer`,\n      description: `Accessible design is everyone's responsibility, from UX design, through to development, and on into help and support.`,\n      href: '/accessibility',\n    },\n    {\n      image: 'overview-product.svg',\n      title: `I'm a product owner`,\n      description:\n        'Learn about the important role Product Owners and Product Managers play in creating solutions with Abyss.',\n      href: '/product-resources',\n    },\n    {\n      image: 'overview-explore.svg',\n      title: `I'm just exploring Abyss`,\n      description:\n        'Check out the tools to learn more about Abyss, and our onboarding process into the Design System.',\n      href: '/about',\n    },\n  ];\n  return overviewLinks.map((link) => {\n    const src = utils.useBaseUrl(`img/graphics/${link.image}`);\n    const linksrc = utils.useBaseUrl(link.href);\n    return (\n      <Card key={link.href} css={{ maxHeight: '250px', marginBottom: '$md' }}>\n        <Grid>\n          <Grid.Col span={3} css={{ alignSelf: 'center' }}>\n            <img src={src} style={{ display: 'flex', maxHeight: '250px' }} />\n          </Grid.Col>\n          <Grid.Col span={9}>\n            <Box\n              padding=\"$md\"\n              align=\"start\"\n              color=\"none\"\n              style={{ justifyContent: 'center' }}\n            >\n              <Heading offset={4}>{link.title}</Heading>\n              <p>{link.description}</p>\n              <Docs.Button variant=\"outline\" href={linksrc}>\n                Get started\n              </Docs.Button>\n            </Box>\n          </Grid.Col>\n        </Grid>\n      </Card>\n    );\n  });\n};\n")))}g.isMDXComponent=!0},67802:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"product-resources",slug:"/product-resources",title:"Product Resources",pagination_prev:"overview/accessibility",pagination_next:"overview/contact-us"},d=void 0,p={unversionedId:"overview/product-resources",id:"overview/product-resources",isDocsHomePage:!1,title:"Product Resources",description:"Overview",source:"@site/docs/overview/product-resources.md",sourceDirName:"overview",slug:"/product-resources",permalink:"/product-resources",tags:[],version:"current",frontMatter:{id:"product-resources",slug:"/product-resources",title:"Product Resources",pagination_prev:"overview/accessibility",pagination_next:"overview/contact-us"},sidebar:"docs",previous:{title:"Accessibility",permalink:"/accessibility"},next:{title:"Contact Us",permalink:"/contact-us"}},c=[{value:"Overview",id:"overview",children:[],level:2},{value:"How does Abyss work?",id:"how-does-abyss-work",children:[],level:2},{value:"Versioning",id:"versioning",children:[],level:2},{value:"Branding",id:"branding",children:[],level:2},{value:"Accessibility",id:"accessibility",children:[],level:2},{value:"Support",id:"support",children:[],level:2}],u=(a="ExitLink",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The Abyss Design Systems offers both a design and development framework for teams developing products. As a product manager, you are crucial to unlocking all the benefits of Abyss for your products."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Speaking a Common Language")," - Integrating Abyss into your development and design processes creates a common language of components, or building blocks, that can be used to speak clearly about how front-end development can solve business problems."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Accessibility")," - All components within Abyss are designed and developed with ",(0,r.kt)(u,{href:"https://www.w3.org/WAI/standards-guidelines/wcag/",mdxType:"ExitLink"},"Web Content Accessibility Guidelines (WCAG)")," compliance to save your team\u2019s time during design development, and testing."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"End User Consistency")," - Standardizing experiences for our end users will promote familiarity, brand consistency, and efficiency in completing jobs to be done."),(0,r.kt)("h2",{id:"how-does-abyss-work"},"How does Abyss work?"),(0,r.kt)("p",null,"Abyss plugs into the design and development processes by creating reusable components in a React-based framework for developers and in a Figma library for designers. To use Abyss to its full potential, your application should be built on React and your designers should be able to utilize Figma. Product Managers can leverage the Abyss documentation on this portal to converse with designers about the components that will be used to build the experience. These components can then be included in the user story refinement with the development team to ensure alignment to the business requirements."),(0,r.kt)("p",null,"Abyss is constantly working on new components to expand our library of tools. Getting to know the tools available to your team can help with solving business problems and communication between teams. Use the section headers of the left navigation to explore the types of components and their associated variations."),(0,r.kt)("h2",{id:"versioning"},"Versioning"),(0,r.kt)("p",null,"Abyss publishes 1-2 new minor versions every month, releasing new components, defect fixes, and functionality. You are not expected to consistently be on the newest version, but an upgrade is required to receive code updates. Our team works with the ",(0,r.kt)("a",{parentName:"p",href:"/developers/abyss-admirals/"},"Abyss Admirals")," to communicate new versions, and Admirals are mainly responsible for keeping your product as up to date as possible. Minor ",(0,r.kt)("a",{parentName:"p",href:"../releases"},"releases")," after Version 1.0 and later are backwards compatible, and it should be a small incremental effort to keep your application updated based on your needs.\nTo view updates from past releases, see our Releases page. If you would like to be on the email distribution for Release updates, please submit a Support Request via ",(0,r.kt)("a",{parentName:"p",href:"../contact-us"},"Contact Us"),"."),(0,r.kt)("h2",{id:"branding"},"Branding"),(0,r.kt)("p",null,"When using UHG, Optum, or UHC themed branding, your product should maintain up-to-date brand guidelines. To ensure your product receives the latest updates, talk to your development partners about using our themeProvider to set your application\u2019s theme through Abyss."),(0,r.kt)("p",null,"Use the Theme dropdown in the header of this site to see components in any major brand, including brand foundations. For additional brand guidance, visit ",(0,r.kt)(u,{href:"https://brand.uhc.com/",mdxType:"ExitLink"},"UHC")," or ",(0,r.kt)(u,{href:"https://brand.optum.com/",mdxType:"ExitLink"},"Optum")," Brand Centers."),(0,r.kt)("h2",{id:"accessibility"},"Accessibility"),(0,r.kt)("p",null,"All components within Abyss are designed and developed with Web Content Accessibility Guidelines (WCAG) compliance to save your team\u2019s time during design, development, and testing.\nMore information on interactive, keyboard, and visual compliance can be found on the ",(0,r.kt)("a",{parentName:"p",href:"../accessibility"},"Accessibility")," page of the Abyss site, and in the Accessibility tab of every component."),(0,r.kt)("h2",{id:"support"},"Support"),(0,r.kt)("p",null,"The Abyss component library is continually evolving and adapting to meet our customer\u2019s needs. If the Abyss team can help update an existing component or create a new component, we would love to work with you to ensure the Abyss design system continues to meet your team\u2019s needs."),(0,r.kt)("p",null,"To log a request, please utilize the ",(0,r.kt)("a",{parentName:"p",href:"../contact-us"},"Contact Us")," form to submit details related to your product, type of request, supporting details, attachments, and priority. Upon submission, you will receive an Aha! idea reference number to track your request and communicate with us."),(0,r.kt)("p",null,"Requests can come from anyone working with Abyss, including developers, designers, product managers or project managers, but we recommend keeping partners informed of the request to prevent duplicative requests."),(0,r.kt)("p",null,"For ongoing support and contribution, your development team should have an Abyss Admiral assigned. If you are using Abyss but don\u2019t have an Admiral assigned, please submit a Support Request via ",(0,r.kt)("a",{parentName:"p",href:"../contact-us"},"Contact Us")," with the Admiral\u2019s contact information. They will be invited to weekly Abyss Admiral Office Hours hosted by our development leads."),(0,r.kt)("p",null,"Similarly, your design partner should be invited to the weekly Abyss Design Working Session hosted by our design leads. This session is also open to Product partners. If you and/or your designer would like to attend, please submit a Support Request via ",(0,r.kt)("a",{parentName:"p",href:"../contact-us"},"Contact Us")," with the appropriate contact information."))}g.isMDXComponent=!0},55319:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"releases",slug:"/releases",title:"Releases",pagination_prev:"overview/about",pagination_next:"overview/product-resources"},d=void 0,p={unversionedId:"overview/releases",id:"overview/releases",isDocsHomePage:!1,title:"Releases",description:"",source:"@site/docs/overview/releases.md",sourceDirName:"overview",slug:"/releases",permalink:"/releases",tags:[],version:"current",frontMatter:{id:"releases",slug:"/releases",title:"Releases",pagination_prev:"overview/about",pagination_next:"overview/product-resources"},sidebar:"docs",previous:{title:"About Abyss",permalink:"/about"},next:{title:"Product Resources",permalink:"/product-resources"}},c=[],u=(a="Releases",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{mdxType:"Releases"}))}g.isMDXComponent=!0},91772:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"use-collapse",category:"UI & DOM",title:"useCollapse",description:"Show or hide associated section of content.",pagination_prev:"web/hooks/use-print",pagination_next:"web/hooks/use-media-query"},s=void 0,d={unversionedId:"web/hooks/use-collapse",id:"web/hooks/use-collapse",isDocsHomePage:!1,title:"useCollapse",description:"Show or hide associated section of content.",source:"@site/docs/web/hooks/useCollapse.md",sourceDirName:"web/hooks",slug:"/web/hooks/use-collapse",permalink:"/web/hooks/use-collapse",tags:[],version:"current",frontMatter:{id:"use-collapse",category:"UI & DOM",title:"useCollapse",description:"Show or hide associated section of content.",pagination_prev:"web/hooks/use-print",pagination_next:"web/hooks/use-media-query"},sidebar:"docs",previous:{title:"usePrint",permalink:"/web/hooks/use-print"},next:{title:"useMediaQuery",permalink:"/web/hooks/use-media-query"}},p=[{value:"Usage",id:"usage",children:[],level:2},{value:"Maximum Duration",id:"maximum-duration",children:[],level:2},{value:"Collapsing Multiple",id:"collapsing-multiple",children:[],level:2},{value:"Properties",id:"properties",children:[],level:2}],c={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useCollapse } from '@abyss/web/hooks/useCollapse';\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultIsOpen")," prop to set the initial state for collapse container. The ",(0,i.kt)("inlineCode",{parentName:"p"},"duration")," prop is defaulted to ",(0,i.kt)("inlineCode",{parentName:"p"},"300ms"),", we can pass custom values to vary the transition time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { collapseProps, buttonProps, isOpen } = useCollapse();\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Label>Collapse Example:</Label>\n        <Link {...buttonProps}>{isOpen ? 'Collapse' : 'Expand'}</Link>\n      </Layout.Group>\n      <div {...collapseProps}>\n        <ul style={{ listStyle: 'inside' }}>\n          <li>Aliquam non felis convallis, tempus eros vel, sagittis augue.</li>\n          <li>\n            Praesent hendrerit ipsum viverra, facilisis risus et, sollicitudin\n            massa.\n          </li>\n          <li>Morbi tincidunt metus vitae quam semper hendrerit.</li>\n          <li>\n            Fusce accumsan mi ut risus molestie, pretium fringilla risus\n            consectetur.\n          </li>\n          <li>Nullam vel mi gravida, eleifend est vitae, semper mauris.</li>\n        </ul>\n      </div>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"maximum-duration"},"Maximum Duration"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"duration")," prop allows Maximum value of ",(0,i.kt)("inlineCode",{parentName:"p"},"1500ms")," for the transition timing to show and hide content. If developer enters the duration greater than max duration value(1500ms) we will assign duration to ",(0,i.kt)("inlineCode",{parentName:"p"},"1500ms"),". default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"300ms"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { collapseProps, buttonProps, isOpen } = useCollapse({\n    duration: 1500,\n  });\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Label>Collapse Example:</Label>\n        <Link {...buttonProps}>{isOpen ? 'Collapse' : 'Expand'}</Link>\n      </Layout.Group>\n      <p style={{ margin: 0 }}>Showing Content Based on Duration</p>\n      <div {...collapseProps}>\n        <ul style={{ listStyle: 'inside' }}>\n          <li>Aliquam non felis convallis, tempus eros vel, sagittis augue.</li>\n          <li>\n            Praesent hendrerit ipsum viverra, facilisis risus et, sollicitudin\n            massa.\n          </li>\n          <li>Morbi tincidunt metus vitae quam semper hendrerit.</li>\n          <li>\n            Fusce accumsan mi ut risus molestie, pretium fringilla risus\n            consectetur.\n          </li>\n          <li>Nullam vel mi gravida, eleifend est vitae, semper mauris.</li>\n        </ul>\n      </div>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"collapsing-multiple"},"Collapsing Multiple"),(0,i.kt)("p",null,"To control the expand/collapse functionality of multiple collapsible containers utilize the ",(0,i.kt)("inlineCode",{parentName:"p"},"CollapseProvider"),". Visit the ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/collapse-provider"},"CollapseProvider")," page for more details and examples on implementation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const CollapseList = ({ defaultIsOpen }) => {\n    const { collapseProps, buttonProps, isOpen } = useCollapse({\n      defaultIsOpen,\n    });\n    return (\n      <React.Fragment>\n        <Layout.Group>\n          <Label>Collapse Example:</Label>\n          <Link {...buttonProps}>{isOpen ? 'Collapse' : 'Expand'}</Link>\n        </Layout.Group>\n        <div {...collapseProps}>\n          <ul style={{ listStyle: 'inside' }}>\n            <li>\n              Aliquam non felis convallis, tempus eros vel, sagittis augue.\n            </li>\n            <li>\n              Praesent hendrerit ipsum viverra, facilisis risus et, sollicitudin\n              massa.\n            </li>\n            <li>Morbi tincidunt metus vitae quam semper hendrerit.</li>\n            <li>\n              Fusce accumsan mi ut risus molestie, pretium fringilla risus\n              consectetur.\n            </li>\n            <li>Nullam vel mi gravida, eleifend est vitae, semper mauris.</li>\n          </ul>\n        </div>\n      </React.Fragment>\n    );\n  };\n  return (\n    <CollapseProvider>\n      <CollapseProvider.Button\n        css={{\n          'abyss-collapse-button-root': {\n            marginBottom: '10px',\n          },\n        }}\n      />\n      <CollapseList defaultIsOpen />\n      <CollapseList defaultIsOpen={false} />\n    </CollapseProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"useCollapse(\n  defaultIsOpen?: boolean,\n  ref?: object,\n  duration?: number,\n): object;\n")))}u.isMDXComponent=!0},30446:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"use-countdown",category:"Utilities",title:"useCountdown",description:"The useCountdown is a custom hook for countdown capility.",pagination_prev:"web/hooks/use-media-query",pagination_next:null},s=void 0,d={unversionedId:"web/hooks/use-countdown",id:"web/hooks/use-countdown",isDocsHomePage:!1,title:"useCountdown",description:"The useCountdown is a custom hook for countdown capility.",source:"@site/docs/web/hooks/useCountdown.md",sourceDirName:"web/hooks",slug:"/web/hooks/use-countdown",permalink:"/web/hooks/use-countdown",tags:[],version:"current",frontMatter:{id:"use-countdown",category:"Utilities",title:"useCountdown",description:"The useCountdown is a custom hook for countdown capility.",pagination_prev:"web/hooks/use-media-query",pagination_next:null},sidebar:"docs",previous:{title:"useMediaQuery",permalink:"/web/hooks/use-media-query"}},p=[{value:"Callback Function",id:"callback-function",children:[],level:2},{value:"Reset Countdown Time",id:"reset-countdown-time",children:[],level:2},{value:"Set Countdown Time",id:"set-countdown-time",children:[],level:2},{value:"Output",id:"output",children:[],level:2}],c={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useCountdown } from '@abyss/web/hooks/useCountdown';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const { formattedTime } = useCountdown({ time: 10 * 60 * 1000 });\n\n  return <Text size="$xl">{formattedTime}</Text>;\n};\n')),(0,i.kt)("h2",{id:"callback-function"},"Callback Function"),(0,i.kt)("p",null,"You can specify a callback function that will be executed every time the countdown reaches zero."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isComplete, setComplete] = useState(false);\n  const onCompleted = () => setComplete(true);\n\n  const { formattedTime } = useCountdown({ time: 15 * 1000, onCompleted });\n\n  if (isComplete) {\n    return (\n      <Text size="$xl" color="$error1">\n        Time\'s Up!\n      </Text>\n    );\n  }\n\n  return <Text size="$xl">{formattedTime}</Text>;\n};\n')),(0,i.kt)("h2",{id:"reset-countdown-time"},"Reset Countdown Time"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"resetCountdown")," function returned by the hook to reset the countdown back to its starting value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isComplete, setComplete] = useState(false);\n  const onCompleted = () => setComplete(true);\n\n  const { formattedTime, resetCountdown } = useCountdown({\n    time: 5 * 1000,\n    onCompleted,\n  });\n\n  if (isComplete) {\n    return (\n      <Layout.Stack>\n        <Text size="$xl" color="$error1">\n          Time\'s Up!\n        </Text>\n        <Button\n          size="sm"\n          onClick={() => {\n            resetCountdown();\n            setComplete(false);\n          }}\n        >\n          Reset Countdown\n        </Button>\n      </Layout.Stack>\n    );\n  }\n\n  return (\n    <Layout.Stack>\n      <Text size="$xl">{formattedTime}</Text>\n      <Button\n        size="sm"\n        onClick={() => {\n          resetCountdown();\n          setComplete(false);\n        }}\n      >\n        Reset Countdown\n      </Button>\n    </Layout.Stack>\n  );\n};\n')),(0,i.kt)("h2",{id:"set-countdown-time"},"Set Countdown Time"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"setCountdownTme")," function returned by the hook to set the countdown to a new time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isComplete, setComplete] = useState(true);\n  const onCompleted = () => setComplete(true);\n\n  const { formattedTime, setCountdownTime } = useCountdown({\n    time: 0,\n    onCompleted,\n  });\n\n  if (isComplete) {\n    return (\n      <React.Fragment>\n        <Text size="$xl" color="$error1">\n          Time\'s Up!\n        </Text>\n        <Layout.Group>\n          <Button\n            size="sm"\n            onClick={() => {\n              setCountdownTime(3 * 1000);\n              setComplete(false);\n            }}\n          >\n            Set countdown to 3 seconds\n          </Button>\n          <Button\n            size="sm"\n            onClick={() => {\n              setCountdownTime(5 * 1000);\n              setComplete(false);\n            }}\n          >\n            Set countdown to 5 seconds\n          </Button>\n          <Button\n            size="sm"\n            onClick={() => {\n              setCountdownTime(8 * 1000);\n              setComplete(false);\n            }}\n          >\n            Set countdown to 8 seconds\n          </Button>\n        </Layout.Group>\n      </React.Fragment>\n    );\n  }\n\n  return <Text size="$xl">{formattedTime}</Text>;\n};\n')),(0,i.kt)("h2",{id:"output"},"Output"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const countdown = useCountdown({ time: 31556952000 });\n\n  return <pre>{JSON.stringify(countdown, null, 2)}</pre>;\n};\n")))}u.isMDXComponent=!0},91106:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"use-form",category:"State Management",title:"useForm",description:"The useForm is custom hook for managing forms with ease. It takes optional arguments.",pagination_prev:"web/hooks/use-visually-hidden",pagination_next:"web/hooks/use-form-field-Array"},s=void 0,d={unversionedId:"web/hooks/use-form",id:"web/hooks/use-form",isDocsHomePage:!1,title:"useForm",description:"The useForm is custom hook for managing forms with ease. It takes optional arguments.",source:"@site/docs/web/hooks/useForm.md",sourceDirName:"web/hooks",slug:"/web/hooks/use-form",permalink:"/web/hooks/use-form",tags:[],version:"current",frontMatter:{id:"use-form",category:"State Management",title:"useForm",description:"The useForm is custom hook for managing forms with ease. It takes optional arguments.",pagination_prev:"web/hooks/use-visually-hidden",pagination_next:"web/hooks/use-form-field-Array"},sidebar:"docs",previous:{title:"useVisuallyHidden",permalink:"/web/hooks/use-visually-hidden"},next:{title:"useFormFieldArray",permalink:"/web/hooks/use-form-field-Array"}},p=[{value:"Usage",id:"usage",children:[],level:2},{value:"Default Values",id:"default-values",children:[],level:2},{value:"Form State",id:"form-state",children:[],level:2},{value:"Watch",id:"watch",children:[],level:2},{value:"Handle Submit",id:"handle-submit",children:[],level:2},{value:"Validate Model",id:"validate-model",children:[],level:2},{value:"Reset",id:"reset",children:[],level:2},{value:"Set Error",id:"set-error",children:[],level:2},{value:"Clear Errors",id:"clear-errors",children:[],level:2},{value:"Set Value",id:"set-value",children:[],level:2},{value:"Set Focus",id:"set-focus",children:[],level:2},{value:"Get Values",id:"get-values",children:[],level:2},{value:"Trigger",id:"trigger",children:[],level:2},{value:"Cross-Field Validation Example",id:"cross-field-validation-example",children:[],level:2},{value:"Form Input Autofill",id:"form-input-autofill",children:[],level:2},{value:"Autofill Off",id:"autofill-off",children:[],level:2}],c={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useForm } from '@abyss/web/hooks/useForm';\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    // Do something on submit\n    alert(`FormData:  ${JSON.stringify(data)}`);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <TextInput\n        dataTestid="firstName"\n        label="First Name"\n        model="firstName"\n        validators={{ required: true }}\n      />\n      <TextInput\n        dataTestid="lastName"\n        label="Last Name"\n        model="lastName"\n        validators={{ required: true }}\n      />\n      <Layout.Space />\n      <Button type="submit">Submit</Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"default-values"},"Default Values"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  // Default Values Passed into useForm\n  const form = useForm({\n    defaultValues: {\n      firstName: \'John\',\n      lastName: \'Doe\',\n    },\n  });\n\n  const onSubmit = (data) => {\n    alert(`FormData:  ${JSON.stringify(data)}`);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <TextInput\n        label="First Name"\n        model="firstName"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="Last Name"\n        model="lastName"\n        validators={{ required: true }}\n      />\n      <Layout.Space />\n      <Button type="submit">Submit</Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"form-state"},"Form State"),(0,i.kt)("p",null,"This object contains information about the form state. If you want to subscribe to formState via useEffect, make sure that you place the entire formState in the optional array."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const form = useForm();\n\nconst {\n  errors, // An object with field errors\n  isDirty, // Set to true after the user modifies any of the inputs.\n  isValid, // Set to true if the form doesn't have any errors.\n  isValidating, // Set to true during validation.\n  isSubmitting, // true if the form is currently being submitted. false if otherwise.\n  isSubmitted, // Set to true after the form is submitted.\n  isSubmitSuccessful, //    Indicate the form was successfully submitted without any Promise rejection or Error been threw within the handleSubmit callback.\n  submitCount, //   Number of times the form was submitted.\n  touchedFields, // An object containing all the inputs the user has interacted with.\n  dirtyFields, // An object with the user-modified fields.\n} = form.formState;\n")),(0,i.kt)("h2",{id:"watch"},"Watch"),(0,i.kt)("p",null,"This will watch specified inputs and return their values. It is useful for determining what to render."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    alert(`FormData:  ${JSON.stringify(data)}`);\n  };\n\n  // Watch one field\n  const WatchField = form.watch(\'firstName\');\n\n  // Target specific fields by their names\n  const WatchFields = form.watch([\'firstName\', \'lastName\']);\n\n  // Watch everything by passing no arguments\n  const WatchAllFields = form.watch();\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <TextInput\n          label="First Name"\n          model="firstName"\n          validators={{ required: true }}\n        />\n        <TextInput\n          label="Last Name"\n          model="lastName"\n          validators={{ required: true }}\n        />\n        <Layout.Space />\n        <Button type="submit">Submit</Button>\n      </FormProvider>\n      <div>\n        <p>Watch One Field: {JSON.stringify(WatchField)}</p>\n        <p>Watch Multiple Fields: {JSON.stringify(WatchFields)}</p>\n        <p>Watch All Fields: {JSON.stringify(WatchAllFields)}</p>\n      </div>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"handle-submit"},"Handle Submit"),(0,i.kt)("p",null,"This function will receive the form data if form validation is successful."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      firstName: \'John\',\n      lastName: \'Doe\',\n    },\n  });\n\n  const onSubmit = (data, e) => alert(\'onSubmit\');\n  const onError = (errors, e) => alert(\'onError\');\n\n  return (\n    <FormProvider state={form} onSubmit={form.handleSubmit(onSubmit, onError)}>\n      <TextInput\n        label="First Name"\n        model="firstName"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="Last Name"\n        model="lastName"\n        validators={{ required: true }}\n      />\n      <Layout.Space />\n      <Button type="submit">Submit</Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"validate-model"},"Validate Model"),(0,i.kt)("p",null,"This function will receive the model data if form validation is successful."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      firstName: \'John\',\n    },\n  });\n\n  const handleValidateFirst = () => {\n    form.validate(\n      \'firstName\',\n      (data) => {\n        alert(`FormData:  ${JSON.stringify(data)}`);\n      },\n      (error) => {\n        delete error.ref;\n        alert(`Error:  ${JSON.stringify(error)}`);\n      }\n    );\n  };\n\n  const handleValidateLast = () => {\n    form.validate(\n      \'lastName\',\n      (data) => {\n        alert(`FormData:  ${JSON.stringify(data)}`);\n      },\n      (error) => {\n        delete error.ref;\n        alert(`Error:  ${JSON.stringify(error)}`);\n      }\n    );\n  };\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="First Name"\n        model="firstName"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="Last Name"\n        model="lastName"\n        validators={{ required: true }}\n      />\n      <Layout.Space />\n      <Layout.Group>\n        <Button type="button" onClick={handleValidateFirst}>\n          Validate First Name\n        </Button>\n        <Button type="button" onClick={handleValidateLast}>\n          Validate Last Name\n        </Button>\n      </Layout.Group>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"reset"},"Reset"),(0,i.kt)("p",null,"Reset either the entire form state or part of the form state."),(0,i.kt)("p",null,"When invoking reset({ value }) without supplying defaultValues via useForm, the library will replace defaultValues with a shallow clone value object which you provide (not deepClone)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// \u274c avoid the following with deep nested default values\nconst defaultValues = { object: { deepNest: { file: new File() } } };\nuseForm({ defaultValues });\nreset(defaultValues); // share the same reference\n\n// \u2705 it's safer with the following, as we only doing shallow clone with defaultValues\nuseForm({ deepNest: { file: new File() } });\nreset({ deepNest: { file: new File() } });\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      firstName: \'John\',\n      lastName: \'Doe\',\n    },\n  });\n\n  const reset = () => {\n    form.reset();\n  };\n\n  const resetWithValue = () => {\n    form.reset({ firstName: \'John\' });\n  };\n\n  const resetWithOptions = () => {\n    form.reset(\n      {\n        lastName: \'Doe\',\n      },\n      {\n        keepErrors: true,\n        keepDirty: true,\n        keepIsSubmitted: false,\n        keepTouched: false,\n        keepIsValid: false,\n        keepSubmitCount: false,\n      }\n    );\n  };\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="First Name"\n        model="firstName"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="Last Name"\n        model="lastName"\n        validators={{ required: true }}\n      />\n      <Layout.Space />\n      <Layout.Group>\n        <Button type="button" onClick={reset}>\n          Reset\n        </Button>\n        <Button type="button" onClick={resetWithValue}>\n          Reset With Value\n        </Button>\n        <Button type="button" onClick={resetWithOptions}>\n          Reset With Options\n        </Button>\n      </Layout.Group>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"set-error"},"Set Error"),(0,i.kt)("p",null,"The function allows you to manually set one or more errors."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      firstName: 'John',\n      lastName: 'Doe',\n    },\n  });\n\n  // Set single error\n  const setSingleError = () => {\n    form.setError('firstName', {\n      type: 'manual',\n      message: 'There is an error with your name!',\n    });\n  };\n\n  // Set multiple errors\n  const setMultipleErrors = () => {\n    [\n      {\n        type: 'manual',\n        name: 'firstName',\n        message: 'Check first name',\n      },\n      {\n        type: 'manual',\n        name: 'lastName',\n        message: 'Check last name',\n      },\n    ].forEach(({ name, type, message }) => {\n      form.setError(name, { type, message });\n    });\n  };\n\n  // Set error for single field errors\n  React.useEffect(() => {\n    form.setError('firstName', {\n      types: {\n        required: 'This is required',\n        minLength: 'This is minLength',\n      },\n    });\n  }, []);\n\n  return (\n    <FormProvider state={form}>\n      <TextInput label=\"First Name\" model=\"firstName\" />\n      <TextInput label=\"Last Name\" model=\"lastName\" />\n      <Layout.Space />\n      <Layout.Group>\n        <Button type=\"button\" onClick={() => setSingleError()}>\n          Set Single Error\n        </Button>\n        <Button type=\"button\" onClick={() => setMultipleErrors()}>\n          Set Multiple Errors\n        </Button>\n      </Layout.Group>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"clear-errors"},"Clear Errors"),(0,i.kt)("p",null,"This function can manually clear errors in the form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      firstName: 'John',\n      lastName: 'Doe',\n      phone: '555-555-5555',\n    },\n  });\n\n  const resetErrors = () => {\n    [\n      {\n        type: 'manual',\n        name: 'firstName',\n        message: 'Required',\n      },\n      {\n        type: 'manual',\n        name: 'lastName',\n        message: 'Required',\n      },\n      {\n        type: 'manual',\n        name: 'phone',\n        message: 'Required',\n      },\n    ].forEach(({ name, type, message }) => {\n      form.setError(name, { type, message });\n    });\n  };\n\n  // Clear single error\n  const clearSingleErrors = () => {\n    form.clearErrors('firstName');\n  };\n\n  // Clear multiple errors\n  const clearMultipleErrors = () => {\n    form.clearErrors(['firstName', 'lastName']);\n  };\n\n  // Clear all errors\n  const clearAllErrors = () => {\n    form.clearErrors();\n  };\n\n  return (\n    <FormProvider state={form}>\n      <TextInput label=\"First Name\" model=\"firstName\" />\n      <TextInput label=\"Last Name\" model=\"lastName\" />\n      <TextInput label=\"Phone\" model=\"phone\" mask=\"phone\" />\n      <Layout.Space />\n      <Layout.Group>\n        <Button type=\"button\" variant=\"outline\" onClick={() => resetErrors()}>\n          Set Errors\n        </Button>\n        <Button type=\"button\" onClick={() => clearSingleErrors()}>\n          Clear Single Error\n        </Button>\n        <Button type=\"button\" onClick={() => clearMultipleErrors()}>\n          Clear Multiple Error\n        </Button>\n        <Button type=\"button\" onClick={() => clearAllErrors()}>\n          Clear All Errors\n        </Button>\n      </Layout.Group>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"set-value"},"Set Value"),(0,i.kt)("p",null,"This function allows you to dynamically set the value of a registered field. At the same time, it tries to avoid unnecessary re-rerenders."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const setSingleValue = () => {\n    form.setValue(\'firstName\', \'Bob\');\n  };\n\n  const setValueWithOptions = () => {\n    form.setValue(\'lastName\', \'Luo\', {\n      shouldValidate: true,\n      shouldDirty: true,\n    });\n  };\n\n  return (\n    <FormProvider state={form}>\n      <TextInput label="First Name" model="firstName" />\n      <TextInput label="Last Name" model="lastName" />\n      <Layout.Space />\n      <Layout.Group>\n        <Button type="button" onClick={() => setSingleValue()}>\n          Set Value\n        </Button>\n        <Button type="button" onClick={() => setValueWithOptions()}>\n          Set Value With Options\n        </Button>\n      </Layout.Group>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"set-focus"},"Set Focus"),(0,i.kt)("p",null,"This method will allow users to programmatically focus on input. Make sure input's ref is registered into the hook form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const setFocus = () => {\n    form.setFocus(\'firstName\');\n  };\n\n  return (\n    <FormProvider state={form}>\n      <TextInput label="First Name" model="firstName" />\n      <TextInput label="Last Name" model="lastName" />\n      <Layout.Space />\n      <Button type="button" onClick={() => setFocus()}>\n        Set Focus\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"get-values"},"Get Values"),(0,i.kt)("p",null,"An optimized helper for reading form values. The difference between watch and getValues is that getValues will not trigger re-renders or subscribe to input changes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      firstName: \'John\',\n      lastName: \'Doe\',\n      phone: \'555-555-5555\',\n    },\n  });\n\n  // Read an individual field value by name\n  const singleValue = form.getValues(\'firstName\');\n\n  // Read multiple fields by name\n  const multipleValues = form.getValues([\'firstName\', \'lastName\']);\n\n  // Reads all form values\n  const allValues = form.getValues();\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form}>\n        <TextInput label="First Name" model="firstName" />\n        <TextInput label="Last Name" model="lastName" />\n        <TextInput label="Phone" model="phone" mask="phone" />\n      </FormProvider>\n      <Layout.Space />\n      <p>Single Value: {JSON.stringify(singleValue)}</p>\n      <p>Multiple Values: {JSON.stringify(multipleValues)}</p>\n      <p>All Values: {JSON.stringify(allValues)}</p>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"trigger"},"Trigger"),(0,i.kt)("p",null,"Manually triggers form or input validation. This method is also useful when you have dependant validation (input validation depends on another input's value)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  // Trigger one input to validate\n  const triggerSingle = () => {\n    form.trigger(\'firstName\');\n  };\n\n  // Trigger multiple inputs to validate\n  const triggerMultiple = () => {\n    form.trigger([\'firstName\', \'lastName\']);\n  };\n\n  // Trigger entire form to validate\n  const triggerAll = () => {\n    form.trigger();\n  };\n\n  const clearErrors = () => {\n    form.clearErrors();\n  };\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="First Name"\n        model="firstName"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="Last Name"\n        model="lastName"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="Phone"\n        model="phone"\n        mask="phone"\n        validators={{ required: true }}\n      />\n      <Layout.Space />\n      <Layout.Group>\n        <Button type="button" onClick={() => triggerSingle()}>\n          Trigger Single\n        </Button>\n        <Button type="button" onClick={() => triggerMultiple()}>\n          Trigger Multiple\n        </Button>\n        <Button type="button" onClick={() => triggerAll()}>\n          Trigger All\n        </Button>\n        <Button type="button" variant="outline" onClick={() => clearErrors()}>\n          Clear Errors\n        </Button>\n      </Layout.Group>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"cross-field-validation-example"},"Cross-Field Validation Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <TextInput\n        label="First Name"\n        model="firstName"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="Middle Name"\n        model="middleName"\n        validators={{\n          validate: (v) => {\n            const checkValue = form.getValues(\'lastName-check\');\n            if (!checkValue && !v) {\n              return \'Required\';\n            }\n          },\n        }}\n      />\n      <Checkbox\n        label="No Middle Name"\n        model="lastName-check"\n        onChange={() => {\n          form.trigger(\'middleName\');\n        }}\n      />\n      <TextInput\n        label="Last Name"\n        model="lastName"\n        validators={{ required: true }}\n      />\n      <Layout.Space />\n      <Button type="submit">Submit</Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"form-input-autofill"},"Form Input Autofill"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const inputs = [\n    {\n      label: 'Title',\n      autoComplete: 'honorific-prefix',\n    },\n    {\n      label: 'First Name',\n      autoComplete: 'given-name',\n    },\n    {\n      label: 'Middle Name',\n      autoComplete: 'additional-name',\n    },\n    {\n      label: 'Last Name',\n      autoComplete: 'family-name',\n    },\n    {\n      label: 'Nickname',\n      autoComplete: 'nickname',\n    },\n    {\n      label: 'Email',\n      autoComplete: 'email',\n    },\n    {\n      label: 'Username',\n      autoComplete: 'username',\n    },\n    {\n      label: 'Current Password',\n      autoComplete: 'current-password',\n    },\n    {\n      label: 'New Password',\n      autoComplete: 'new-password',\n    },\n    {\n      label: 'One Time Code',\n      autoComplete: 'one-time-code',\n    },\n    {\n      label: 'Organization Title',\n      autoComplete: 'organization-title',\n    },\n    {\n      label: 'Organization',\n      autoComplete: 'organization',\n    },\n    {\n      label: 'Address',\n      autoComplete: 'street-address',\n    },\n    {\n      label: 'Address Line 1',\n      autoComplete: 'address-line1',\n    },\n    {\n      label: 'Address Line 2',\n      autoComplete: 'address-line2',\n    },\n    {\n      label: 'Country',\n      autoComplete: 'country',\n    },\n    {\n      label: 'Country Name',\n      autoComplete: 'country-name',\n    },\n    {\n      label: 'Postal Code',\n      autoComplete: 'postal-code',\n    },\n    {\n      label: 'Name on Credit Card',\n      autoComplete: 'cc-name',\n    },\n    {\n      label: 'First Name on Credit Card',\n      autoComplete: 'cc-given-name',\n    },\n    {\n      label: 'Middle Name on Credit Card',\n      autoComplete: 'cc-additional-name',\n    },\n    {\n      label: 'Last Name on Credit Card',\n      autoComplete: 'cc-family-name',\n    },\n    {\n      label: 'Credit Card Number',\n      autoComplete: 'cc-number',\n    },\n    {\n      label: 'Credit Card Expiration Date',\n      autoComplete: 'cc-exp',\n    },\n    {\n      label: 'Credit Card Expiration Month',\n      autoComplete: 'cc-exp-month',\n    },\n    {\n      label: 'Credit Card Expiration Year',\n      autoComplete: 'cc-exp-year',\n    },\n    {\n      label: 'Credit Card CSC Code',\n      autoComplete: 'cc-csc',\n    },\n    {\n      label: 'Credit Card Type',\n      autoComplete: 'cc-type',\n    },\n    {\n      label: 'Transation Currency',\n      autoComplete: 'transaction-currency',\n    },\n    {\n      label: 'Transation Amount',\n      autoComplete: 'transaction-amount',\n    },\n    {\n      label: 'Birth Date',\n      autoComplete: 'bday',\n    },\n    {\n      label: 'Birth Day',\n      autoComplete: 'bday-day',\n    },\n    {\n      label: 'Birth Month',\n      autoComplete: 'bday-month',\n    },\n    {\n      label: 'Birth Year',\n      autoComplete: 'bday-year',\n    },\n    {\n      label: 'Gender',\n      autoComplete: 'sex',\n    },\n    {\n      label: 'Phone Number',\n      autoComplete: 'tel',\n    },\n  ];\n\n  const handleSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider\n      state={form}\n      onSubmit={handleSubmit}\n      autoComplete=\"on\"\n      style={{ display: 'flex', flexWrap: 'wrap' }}\n    >\n      {inputs.map((item) => {\n        return (\n          <div key={item.autoComplete} style={{ width: '33%' }}>\n            <TextInput\n              key={item.autoComplete}\n              label={item.label}\n              model={item.autoComplete}\n              autoComplete={item.autoComplete}\n              subText={item.autoComplete}\n              width=\"98%\"\n            />\n          </div>\n        );\n      })}\n      <Layout.Space />\n      <Button type=\"submit\">Submit</Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"autofill-off"},"Autofill Off"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const handleSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={handleSubmit} autoComplete="off">\n      <TextInput label="First Name" model="name.firstname" autoComplete="off" />\n      <Layout.Space />\n      <Button type="submit">Submit</Button>\n    </FormProvider>\n  );\n};\n')))}u.isMDXComponent=!0},84645:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"use-form-field-Array",category:"State Management",title:"useFormFieldArray",description:"The useFormFieldArray is custom hook for working with uncontrolled Field Arrays (dynamic inputs). This hook supplies you with functions for manipulating the array/list of fields.",pagination_prev:"web/hooks/use-form",pagination_next:"web/hooks/use-overlay"},d=void 0,p={unversionedId:"web/hooks/use-form-field-Array",id:"web/hooks/use-form-field-Array",isDocsHomePage:!1,title:"useFormFieldArray",description:"The useFormFieldArray is custom hook for working with uncontrolled Field Arrays (dynamic inputs). This hook supplies you with functions for manipulating the array/list of fields.",source:"@site/docs/web/hooks/useFormFieldArray.md",sourceDirName:"web/hooks",slug:"/web/hooks/use-form-field-Array",permalink:"/web/hooks/use-form-field-Array",tags:[],version:"current",frontMatter:{id:"use-form-field-Array",category:"State Management",title:"useFormFieldArray",description:"The useFormFieldArray is custom hook for working with uncontrolled Field Arrays (dynamic inputs). This hook supplies you with functions for manipulating the array/list of fields.",pagination_prev:"web/hooks/use-form",pagination_next:"web/hooks/use-overlay"},sidebar:"docs",previous:{title:"useForm",permalink:"/web/hooks/use-form"},next:{title:"useOverlay",permalink:"/web/hooks/use-overlay"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Fields",id:"fields",children:[],level:2},{value:"Append",id:"append",children:[],level:2},{value:"Prepend",id:"prepend",children:[],level:2},{value:"Insert",id:"insert",children:[],level:2},{value:"Swap",id:"swap",children:[],level:2},{value:"Move",id:"move",children:[],level:2},{value:"Replace",id:"replace",children:[],level:2},{value:"Remove",id:"remove",children:[],level:2},{value:"Additional Documentation",id:"additional-documentation",children:[],level:2}],u=(a="ExitLink",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useFormFieldArray } from '@abyss/web/hooks/useFormFieldArray';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const defaultFormValues = {\n    data: [{ firstName: 'Bill', lastName: 'Lou' }],\n  };\n\n  const replaceFormValues = [\n    { firstName: 'replaceBill', lastName: 'replaceLou' },\n    { firstName: 'replaceBill-2', lastName: 'replaceLou-2' },\n  ];\n\n  const form = useForm({\n    defaultValues: defaultFormValues,\n  });\n\n  const { fields, append, prepend, insert, swap, move, replace, remove } =\n    useFormFieldArray({\n      control: form.control,\n      name: 'data',\n    });\n\n  const handleSubmit = (data) => {\n    console.log('Submitted', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        <Layout.Group style={{ marginBotton: 50 }}>\n          <Button\n            onClick={() => {\n              append({\n                firstName: 'appendBill',\n                lastName: 'appendLuo',\n              });\n            }}\n          >\n            Append\n          </Button>\n          <Button\n            onClick={() => {\n              prepend({\n                firstName: 'prependBill',\n                lastName: 'prependLou',\n              });\n            }}\n          >\n            Prepend\n          </Button>\n          <Button\n            onClick={() => {\n              insert(parseInt(1, 10), {\n                firstName: 'insertBill',\n                lastName: 'insertLuo',\n              });\n            }}\n          >\n            Insert\n          </Button>\n          <Button\n            onClick={() => {\n              swap(0, 1);\n            }}\n          >\n            Swap\n          </Button>\n          <Button\n            onClick={() => {\n              move(0, 1);\n            }}\n          >\n            Move\n          </Button>\n        </Layout.Group>\n        {fields.map((field, index) => {\n          return (\n            <div key={field.id} style={{ marginTop: 20 }}>\n              <div>Row #{index + 1}</div>\n              <TextInput\n                label=\"First Name\"\n                isClearable\n                model={`data.${index}.firstName`}\n              />\n              <TextInput\n                label=\"Last Name\"\n                isClearable\n                model={`data.${index}.lastName`}\n              />\n            </div>\n          );\n        })}\n        <Layout.Group css={{ marginTop: 20, marginLeft: 5 }}>\n          <Button isDisabled={!(fields.length > 0)} type=\"submit\">\n            Submit\n          </Button>\n          <Button\n            onClick={() => {\n              form.reset(defaultFormValues);\n            }}\n          >\n            Reset\n          </Button>\n          <Button\n            isDisabled={!(fields.length > 0)}\n            onClick={() => {\n              remove();\n            }}\n          >\n            Remove All Rows\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"fields"},"Fields"),(0,r.kt)("p",null,"This object contains the defaultValue and key for all your inputs. It's important to assign defaultValue to the inputs."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The field.id (and not index) must be added as the component key to prevent re-renders breaking the fields.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"// \u2705 correct:\n{fields.map((field, index) => (\n  <div key={field.id}>\n    <TextInput ... />\n  </div>\n))}\n// \u2705 correct:\n{fields.map((field, index) => <TextInput key={field.id} ... />)}\n// \u274c incorrect:\n{fields.map((field, index) => <TextInput key={index} ... />)}\n")),(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"useFieldArray automatically generates a unique identifier named id which is used for key prop. For more information why this is required: ",(0,r.kt)(u,{href:"https://reactjs.org/docs/lists-and-keys.html#keys",mdxType:"ExitLink"},"React lists and keys"),".",(0,r.kt)("br",null),(0,r.kt)("br",null),"When your array field contains objects with the key name id, useFieldArray will overwrite and remove it. If you want to keep the id field in your array of objects, you must use keyName prop to change to other name. Refer to the following example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const { fields } = useFieldArray({\n  keyName: 'key', // by default key name is id, and input value with name id will be omitted\n});\n\n{\n  fields.map((field, index) => (\n    <div key={field.key}>\n      // key name changed\n      <TextInput {...register('test.id')} /> // input value id will be retained\n    </div>\n  ));\n}\n")),(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When you append, prepend, insert and update the field array, the obj can't be empty object rather need to supply all your input's defaultValues.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"append(); \u274c\nappend({}); \u274c\nappend({ firstName: 'bill', lastName: 'luo' }); \u2705\n")),(0,r.kt)("h2",{id:"append"},"Append"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"append()")," function to append input/inputs to the end of your fields and focus."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const defaultFormValues = {\n    append: [{ firstName: 'Bill', lastName: 'Lou' }],\n  };\n\n  const form = useForm({\n    defaultValues: defaultFormValues,\n  });\n\n  const { fields, append } = useFormFieldArray({\n    control: form.control,\n    name: 'append',\n  });\n\n  const handleSubmit = (data) => {\n    console.log('Submitted', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        {fields.map((field, index) => {\n          return (\n            <div key={field.id} style={{ marginTop: 20 }}>\n              <div>Row #{index + 1}</div>\n              <TextInput\n                label=\"First Name\"\n                isClearable\n                model={`append.${index}.firstName`}\n              />\n              <TextInput\n                label=\"Last Name\"\n                isClearable\n                model={`append.${index}.lastName`}\n              />\n            </div>\n          );\n        })}\n        <Layout.Group css={{ marginTop: 20 }}>\n          <Button type=\"submit\">Submit</Button>\n          <Button\n            onClick={() => {\n              form.reset(defaultFormValues);\n            }}\n          >\n            Reset\n          </Button>\n          <Button\n            onClick={() => {\n              append({\n                firstName: 'appendBill',\n                lastName: 'appendLuo',\n              });\n            }}\n          >\n            Append\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"prepend"},"Prepend"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"prepend()")," function to prepend input/inputs to the start of your fields and focus."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const defaultFormValues = {\n    prepend: [{ firstName: 'Bill', lastName: 'Lou' }],\n  };\n\n  const form = useForm({\n    defaultValues: defaultFormValues,\n  });\n\n  const { fields, prepend } = useFormFieldArray({\n    control: form.control,\n    name: 'prepend',\n  });\n\n  const handleSubmit = (data) => {\n    console.log('Submitted', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        {fields.map((field, index) => {\n          return (\n            <div key={field.id} style={{ marginTop: 20 }}>\n              <div>Row #{index + 1}</div>\n              <TextInput\n                label=\"First Name\"\n                isClearable\n                model={`prepend.${index}.firstName`}\n              />\n              <TextInput\n                label=\"Last Name\"\n                isClearable\n                model={`prepend.${index}.lastName`}\n              />\n            </div>\n          );\n        })}\n        <Layout.Group css={{ marginTop: 20 }}>\n          <Button type=\"submit\">Submit</Button>\n          <Button\n            onClick={() => {\n              form.reset(defaultFormValues);\n            }}\n          >\n            Reset\n          </Button>\n          <Button\n            onClick={() => {\n              prepend({ firstName: 'prependBill', lastName: 'prependLou' });\n            }}\n          >\n            Prepend\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"insert"},"Insert"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"insert()")," function to insert input/inputs at particular position and focus."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const defaultFormValues = {\n    insert: [\n      { firstName: 'Bill', lastName: 'Lou' },\n      { firstName: 'Bill-2', lastName: 'Lou-2' },\n    ],\n  };\n\n  const form = useForm({\n    defaultValues: defaultFormValues,\n  });\n\n  const { fields, insert, remove } = useFormFieldArray({\n    control: form.control,\n    name: 'insert',\n  });\n\n  const handleSubmit = (data) => {\n    console.log('Submitted', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        {fields.map((field, index) => {\n          return (\n            <div key={field.id} style={{ marginTop: 20 }}>\n              <div>Row #{index + 1}</div>\n              <TextInput\n                label=\"First Name\"\n                isClearable\n                model={`insert.${index}.firstName`}\n              />\n              <TextInput\n                label=\"Last Name\"\n                isClearable\n                model={`insert.${index}.lastName`}\n              />\n            </div>\n          );\n        })}\n        <Layout.Group css={{ marginTop: 20 }}>\n          <Button type=\"submit\">Submit</Button>\n          <Button\n            onClick={() => {\n              form.reset(defaultFormValues);\n            }}\n          >\n            Reset\n          </Button>\n          <Button\n            onClick={() => {\n              insert(parseInt(1, 10), {\n                firstName: 'insertBill',\n                lastName: 'insertLuo',\n              });\n            }}\n          >\n            Insert\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"swap"},"Swap"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"swap()")," function to swap input/inputs position."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const defaultFormValues = {\n    swap: [\n      { firstName: 'Bill', lastName: 'Lou' },\n      { firstName: 'swapBill', lastName: 'swapLou' },\n    ],\n  };\n\n  const form = useForm({\n    defaultValues: defaultFormValues,\n  });\n\n  const { fields, swap, remove } = useFormFieldArray({\n    control: form.control,\n    name: 'swap',\n  });\n\n  const handleSubmit = (data) => {\n    console.log('Submitted', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        {fields.map((field, index) => {\n          return (\n            <div key={field.id} style={{ marginTop: 20 }}>\n              <div>Row #{index + 1}</div>\n              <TextInput\n                label=\"First Name\"\n                isClearable\n                model={`swap.${index}.firstName`}\n              />\n              <TextInput\n                label=\"Last Name\"\n                isClearable\n                model={`swap.${index}.lastName`}\n              />\n            </div>\n          );\n        })}\n        <Layout.Group css={{ marginTop: 20 }}>\n          <Button type=\"submit\">Submit</Button>\n          <Button\n            onClick={() => {\n              swap(0, 1);\n            }}\n          >\n            Swap\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"move"},"Move"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"move()")," function to move input/inputs to another position."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const defaultFormValues = {\n    move: [\n      { firstName: 'Bill', lastName: 'Lou' },\n      { firstName: 'moveBill', lastName: 'moveLou' },\n    ],\n  };\n\n  const form = useForm({\n    defaultValues: defaultFormValues,\n  });\n\n  const { fields, move } = useFormFieldArray({\n    control: form.control,\n    name: 'move',\n  });\n\n  const handleSubmit = (data) => {\n    console.log('Submitted', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        {fields.map((field, index) => {\n          return (\n            <div key={field.id} style={{ marginTop: 20 }}>\n              <div>Row #{index + 1}</div>\n              <TextInput\n                label=\"First Name\"\n                isClearable\n                model={`move.${index}.firstName`}\n              />\n              <TextInput\n                label=\"Last Name\"\n                isClearable\n                model={`move.${index}.lastName`}\n              />\n            </div>\n          );\n        })}\n        <Layout.Group css={{ marginTop: 20 }}>\n          <Button type=\"submit\">Submit</Button>\n          <Button\n            onClick={() => {\n              move(0, 1);\n            }}\n          >\n            Move\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"replace"},"Replace"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"replace()")," function to replace the entire field array values with a custom list of objects."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const replaceFormValues = [\n    { firstName: 'replaceBill', lastName: 'replaceLou' },\n    { firstName: 'replaceBill-2', lastName: 'replaceLou-2' },\n  ];\n\n  const defaultFormValues = {\n    data: [\n      { firstName: 'Bill', lastName: 'Lou' },\n      { firstName: 'Bill-2', lastName: 'Lou-2' },\n    ],\n  };\n  const form = useForm({\n    defaultValues: defaultFormValues,\n  });\n\n  const { fields, replace } = useFormFieldArray({\n    control: form.control,\n    name: 'data',\n  });\n\n  const handleSubmit = (data) => {\n    console.log('Submitted', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        {fields.map((field, index) => {\n          return (\n            <div key={field.id} style={{ marginTop: 20 }}>\n              <div>Row #{index + 1}</div>\n              <TextInput\n                label=\"First Name\"\n                isClearable\n                model={`data.${index}.firstName`}\n              />\n              <TextInput\n                label=\"Last Name\"\n                isClearable\n                model={`data.${index}.lastName`}\n              />\n            </div>\n          );\n        })}\n        <Layout.Group css={{ marginTop: 20 }}>\n          <Button type=\"submit\">Submit</Button>\n          <Button\n            onClick={() => {\n              form.reset(defaultFormValues);\n            }}\n          >\n            Reset\n          </Button>\n          <Button\n            onClick={() => {\n              replace(replaceFormValues);\n            }}\n          >\n            Replace All Values\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"remove"},"Remove"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"remove()")," function to remove elements at a particular position (or positions) in the list, or remove all of them when no index is provided."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const defaultFormValues = {\n    remove: [\n      { firstName: 'removeBill', lastName: 'removeLou' },\n      { firstName: 'removeBill-2', lastName: 'removeLou-2' },\n      { firstName: 'removeBill-3', lastName: 'removeLou-3' },\n    ],\n  };\n  const form = useForm({\n    defaultValues: defaultFormValues,\n  });\n\n  const { fields, remove } = useFormFieldArray({\n    control: form.control,\n    name: 'remove',\n  });\n\n  const handleSubmit = (data) => {\n    console.log('Submitted', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        {fields.map((field, index) => {\n          return (\n            <div key={field.id} style={{ marginTop: 20 }}>\n              <Layout.Group>\n                <div>Row #{index + 1}</div>\n                <Button\n                  size=\"$sm\"\n                  onClick={() => {\n                    remove(index);\n                  }}\n                >\n                  Remove\n                </Button>\n              </Layout.Group>\n              <TextInput\n                label=\"First Name\"\n                isClearable\n                model={`remove.${index}.firstName`}\n              />\n              <TextInput\n                label=\"Last Name\"\n                isClearable\n                model={`remove.${index}.lastName`}\n              />\n            </div>\n          );\n        })}\n        <Layout.Group css={{ marginTop: 20 }}>\n          <Button isDisabled={!(fields.length > 0)} type=\"submit\">\n            Submit\n          </Button>\n          <Button\n            onClick={() => {\n              form.reset(defaultFormValues);\n            }}\n          >\n            Reset\n          </Button>\n          <Button\n            isDisabled={!(fields.length > 1)}\n            onClick={() => {\n              remove([0, 1]);\n            }}\n          >\n            Remove First Two Rows\n          </Button>\n          <Button\n            isDisabled={!(fields.length > 0)}\n            onClick={() => {\n              remove();\n            }}\n          >\n            Remove All Rows\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"additional-documentation"},"Additional Documentation"),(0,r.kt)("p",null,"This hook is a renaming of the useFieldArray hook from ",(0,r.kt)(u,{href:"https://react-hook-form.com/",mdxType:"ExitLink"},"React Form Hook"),". If you would like to see a more detailed description for the usage of this hook, you can view the ",(0,r.kt)(u,{href:"https://react-hook-form.com/api/usefieldarray",mdxType:"ExitLink"},"documentation here"),"."))}g.isMDXComponent=!0},18818:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"use-media-query",category:"UI & DOM",title:"useMediaQuery",description:"Subscribe to media queries with window.matchMedia",pagination_prev:"web/hooks/use-collapse",pagination_next:"web/hooks/use-countdown"},s=void 0,d={unversionedId:"web/hooks/use-media-query",id:"web/hooks/use-media-query",isDocsHomePage:!1,title:"useMediaQuery",description:"Subscribe to media queries with window.matchMedia",source:"@site/docs/web/hooks/useMediaQuery.md",sourceDirName:"web/hooks",slug:"/web/hooks/use-media-query",permalink:"/web/hooks/use-media-query",tags:[],version:"current",frontMatter:{id:"use-media-query",category:"UI & DOM",title:"useMediaQuery",description:"Subscribe to media queries with window.matchMedia",pagination_prev:"web/hooks/use-collapse",pagination_next:"web/hooks/use-countdown"},sidebar:"docs",previous:{title:"useCollapse",permalink:"/web/hooks/use-collapse"},next:{title:"useCountdown",permalink:"/web/hooks/use-countdown"}},p=[{value:"Usage",id:"usage",children:[],level:2},{value:"Server Side Rendering",id:"server-side-rendering",children:[],level:2},{value:"Properties",id:"properties",children:[],level:2}],c={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useMediaQuery } from '@abyss/web/hooks/useMediaQuery';\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"useMediaQuery")," hook leverages the window.matchMedia() API and will return false if api is not available unless initial value is provided in the second argument."),(0,i.kt)("p",null,"Resize browser window to trigger window.matchMedia event:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const matches = useMediaQuery('(min-width: 900px)');\n\n  return (\n    <Badge variant={matches ? 'success' : 'info'}>\n      Breakpoint {matches ? 'matches' : 'does not match'}\n    </Badge>\n  );\n};\n")),(0,i.kt)("h2",{id:"server-side-rendering"},"Server Side Rendering"),(0,i.kt)("p",null,"If you are using server side rendering the ",(0,i.kt)("inlineCode",{parentName:"p"},"useMediaQuery")," hook will always return false as the window.matchMedia api is not available. To overcome this, you can override the initial value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const matches = useMediaQuery('(max-width: 700px)', true, {\n  getInitialValueInEffect: false,\n});\n")),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"useMediaQuery(\n  query: string,\n  initialValue?: boolean,\n  options?: {\n    getInitialValueInEffect: boolean;\n  }\n): boolean;\n")))}u.isMDXComponent=!0},19214:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"use-overlay",category:"State Management",title:"useOverlay",description:"The useOverlay is a custom hook for managing overlays like modal and Drawer with ease.",pagination_prev:"web/hooks/use-form-field-Array",pagination_next:"web/hooks/use-pagination"},s=void 0,d={unversionedId:"web/hooks/use-overlay",id:"web/hooks/use-overlay",isDocsHomePage:!1,title:"useOverlay",description:"The useOverlay is a custom hook for managing overlays like modal and Drawer with ease.",source:"@site/docs/web/hooks/useOverlay.md",sourceDirName:"web/hooks",slug:"/web/hooks/use-overlay",permalink:"/web/hooks/use-overlay",tags:[],version:"current",frontMatter:{id:"use-overlay",category:"State Management",title:"useOverlay",description:"The useOverlay is a custom hook for managing overlays like modal and Drawer with ease.",pagination_prev:"web/hooks/use-form-field-Array",pagination_next:"web/hooks/use-pagination"},sidebar:"docs",previous:{title:"useFormFieldArray",permalink:"/web/hooks/use-form-field-Array"},next:{title:"usePagination",permalink:"/web/hooks/use-pagination"}},p=[{value:"Usage",id:"usage",children:[],level:2}],c={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useOverlay } from '@abyss/web/hooks/useOverlay';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const modal = useOverlay('useOverlay-modal');\n\n  const state = modal.getState();\n\n  return (\n    <>\n      <Button\n        onClick={() => modal.open({ firstName: 'John', lastName: 'Doe' })}\n        aria-haspopup=\"dialog\"\n      >\n        Toggle Modal\n      </Button>\n\n      <pre style={{ marginTop: 20 }}>Modal State: {JSON.stringify(state)}</pre>\n\n      <Modal title=\"Custom Title\" model=\"useOverlay-modal\">\n        <Modal.Section>\n          <p>First Name: {state.data && state.data.firstName}</p>\n          <p>Last Name: {state.data && state.data.lastName}</p>\n        </Modal.Section>\n      </Modal>\n    </>\n  );\n};\n")),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"useOverlay")," hook to handle the state of any overlay like ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/modal"},"Modal")," and ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/drawer"},"Drawer"),". The overlay must be passed a unique ",(0,i.kt)("inlineCode",{parentName:"p"},"model"),". Pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"model")," of the overlay you want to target to ",(0,i.kt)("inlineCode",{parentName:"p"},"useOverlay")," to manipulate the state of that overlay."),(0,i.kt)("p",null,"Methods returned include ",(0,i.kt)("inlineCode",{parentName:"p"},"open"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"close"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"toggle"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"getState"),"."),(0,i.kt)("p",null,"You can pass data into ",(0,i.kt)("inlineCode",{parentName:"p"},"open"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"close"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"toggle")," to be injected into the modal."),(0,i.kt)("p",null,"Applications must be wrapped in an OverlayProvider. Find additional resources on our overlay provider in ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/overlay-provider"},"OverlayProvider"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"<OverlayProvider>\n  <App>{children}</App>\n</OverlayProvider>\n")))}u.isMDXComponent=!0},94747:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"use-pagination",category:"State Management",title:"usePagination",description:"The usePagination is a custom hook for pagination capability.",pagination_prev:"web/hooks/use-overlay",pagination_next:"web/hooks/use-countdown"},s=void 0,d={unversionedId:"web/hooks/use-pagination",id:"web/hooks/use-pagination",isDocsHomePage:!1,title:"usePagination",description:"The usePagination is a custom hook for pagination capability.",source:"@site/docs/web/hooks/usePagination.md",sourceDirName:"web/hooks",slug:"/web/hooks/use-pagination",permalink:"/web/hooks/use-pagination",tags:[],version:"current",frontMatter:{id:"use-pagination",category:"State Management",title:"usePagination",description:"The usePagination is a custom hook for pagination capability.",pagination_prev:"web/hooks/use-overlay",pagination_next:"web/hooks/use-countdown"},sidebar:"docs",previous:{title:"useOverlay",permalink:"/web/hooks/use-overlay"},next:{title:"useCountdown",permalink:"/web/hooks/use-countdown"}},p=[{value:"Pagination Props",id:"pagination-props",children:[],level:2},{value:"Step Indicator Use Case",id:"step-indicator-use-case",children:[],level:2}],c={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { usePagination } from '@abyss/web/hooks/usePagination';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 6 });\n\n  return (\n    <React.Fragment>\n      <Heading>Page: {paginationProps.state.currentPage}</Heading>\n      <Layout.Group style={{ marginTop: 10 }}>\n        <Button\n          onClick={paginationProps.previousPage}\n          variant="outline"\n          isDisabled={!paginationProps.canPreviousPage}\n        >\n          Previous\n        </Button>\n        <Button\n          onClick={paginationProps.nextPage}\n          isDisabled={!paginationProps.canNextPage}\n        >\n          Next\n        </Button>\n      </Layout.Group>\n      <pre style={{ marginTop: 20 }}>\n        {JSON.stringify(paginationProps, null, 2)}\n      </pre>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"pagination-props"},"Pagination Props"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"const pagination = usePagination({ pages: 10 });\n\nconst {\n  canNextPage, //  Boolean to check if next page can be accessed\n  canPreviousPage, // Boolean to check if previous page can be accessed\n  gotoPage, // Callback to go to a certain page\n  nextPage, // Callback to go to next page\n  lastPage, // Callback to go to last page\n  firstPage, // Callback to go to first page\n  pageCount, // Callback to go to a certain page\n  pageIndex, // Index of current page\n  previousPage, // Callback to go to a previous page\n  setData, // Function to set active data\n  state, // Includes currentPage, pageIndex, pageCount, rows, rowCount\n} = pagination;\n")),(0,i.kt)("h2",{id:"step-indicator-use-case"},"Step Indicator Use Case"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"usePagination")," hook to handle the state and props of pagination. Methods returned include ",(0,i.kt)("inlineCode",{parentName:"p"},"setData"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"gotoPage"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"previousPage"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"nextPage"),"."),(0,i.kt)("p",null,"Find additional resources on how usePagination can be used to support Step Indicator in the ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/step-indicator"},"Step Indicator")," page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 7, start: 2 });\n\n  return (\n    <>\n      <StepIndicator currentStep={paginationProps.state.pageIndex}>\n        <StepIndicator.Step label="Step 1" />\n        <StepIndicator.Step label="Step 2" />\n        <StepIndicator.Step label="Step 3" />\n        <StepIndicator.Step label="Step 4" />\n        <StepIndicator.Step label="Step 5" />\n      </StepIndicator>\n\n      <pre style={{ marginTop: 20 }}>\n        {JSON.stringify(paginationProps, null, 2)}\n      </pre>\n\n      <Layout.Group style={{ marginTop: 10 }}>\n        <Button\n          onClick={paginationProps.previousPage}\n          variant="outline"\n          isDisabled={!paginationProps.canPreviousPage}\n        >\n          Previous\n        </Button>\n        <Button\n          onClick={paginationProps.nextPage}\n          isDisabled={!paginationProps.canNextPage}\n        >\n          Next\n        </Button>\n      </Layout.Group>\n    </>\n  );\n};\n')))}u.isMDXComponent=!0},78599:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"use-print",category:"State Management",title:"usePrint",description:"The usePrint is a custom hook for managing how people can print your pages/save them to pdfs.",pagination_prev:"web/hooks/use-pagination",pagination_next:"web/hooks/use-collapse"},s=void 0,d={unversionedId:"web/hooks/use-print",id:"web/hooks/use-print",isDocsHomePage:!1,title:"usePrint",description:"The usePrint is a custom hook for managing how people can print your pages/save them to pdfs.",source:"@site/docs/web/hooks/usePrint.md",sourceDirName:"web/hooks",slug:"/web/hooks/use-print",permalink:"/web/hooks/use-print",tags:[],version:"current",frontMatter:{id:"use-print",category:"State Management",title:"usePrint",description:"The usePrint is a custom hook for managing how people can print your pages/save them to pdfs.",pagination_prev:"web/hooks/use-pagination",pagination_next:"web/hooks/use-collapse"},sidebar:"docs",previous:{title:"usePagination",permalink:"/web/hooks/use-pagination"},next:{title:"useCollapse",permalink:"/web/hooks/use-collapse"}},p=[{value:"Usage",id:"usage",children:[],level:2},{value:"Examples",id:"examples",children:[],level:2}],c={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { usePrint } from '@abyss/web/hooks/usePrint';\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"printPage()")," is a function provided by usePrint that will open the print window.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"savePDF()")," is a function provided by usePrint that will save your page as a pdf to your device.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"createPDF()")," is a function provided by usePrint that will create a PDF file object of your page."))),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("p",null,"Refer to ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/print-provider"},"PrintProvider")," for example usage of ",(0,i.kt)("inlineCode",{parentName:"p"},"usePrint")," and the three functions provided."))}u.isMDXComponent=!0},5643:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"use-visually-hidden",category:"Accessibility",title:"useVisuallyHidden",description:"The useVisuallyHidden is a custom hook for visually hiding content.",pagination_prev:null,pagination_next:"web/hooks/use-form"},s=void 0,d={unversionedId:"web/hooks/use-visually-hidden",id:"web/hooks/use-visually-hidden",isDocsHomePage:!1,title:"useVisuallyHidden",description:"The useVisuallyHidden is a custom hook for visually hiding content.",source:"@site/docs/web/hooks/useVisuallyHidden.md",sourceDirName:"web/hooks",slug:"/web/hooks/use-visually-hidden",permalink:"/web/hooks/use-visually-hidden",tags:[],version:"current",frontMatter:{id:"use-visually-hidden",category:"Accessibility",title:"useVisuallyHidden",description:"The useVisuallyHidden is a custom hook for visually hiding content.",pagination_prev:null,pagination_next:"web/hooks/use-form"},sidebar:"docs",next:{title:"useForm",permalink:"/web/hooks/use-form"}},p=[{value:"Usage",id:"usage",children:[],level:2}],c={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useVisuallyHidden } from '@abyss/web/hooks/useVisuallyHidden';\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"export const useVisuallyHidden = () => {\n  const visuallyHiddenProps = {\n    style: {\n      border: 0,\n      clip: 'rect(0 0 0 0)',\n      clipPath: 'inset(50%)',\n      height: 1,\n      margin: '0 -1px -1px 0',\n      overflow: 'hidden',\n      padding: 0,\n      position: 'absolute',\n      width: 1,\n      whiteSpace: 'nowrap',\n    },\n  };\n\n  return { visuallyHiddenProps };\n};\n")))}u.isMDXComponent=!0},70384:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"accordion",category:"Content",title:"Accordion",description:"A vertically stacked list of headers that reveal or hide associated sections of content.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1188",pagination_prev:null,pagination_next:"web/ui/card"},s=void 0,d={unversionedId:"web/ui/accordion",id:"web/ui/accordion",isDocsHomePage:!1,title:"Accordion",description:"A vertically stacked list of headers that reveal or hide associated sections of content.",source:"@site/docs/web/ui/Accordion.md",sourceDirName:"web/ui",slug:"/web/ui/accordion",permalink:"/web/ui/accordion",tags:[],version:"current",frontMatter:{id:"accordion",category:"Content",title:"Accordion",description:"A vertically stacked list of headers that reveal or hide associated sections of content.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1188",pagination_prev:null,pagination_next:"web/ui/card"},sidebar:"docs",next:{title:"Card",permalink:"/web/ui/card"}},p=[{value:"Type Multiple",id:"type-multiple",children:[],level:2},{value:"Default Value - Single",id:"default-value---single",children:[],level:2},{value:"Default Value - Multiple",id:"default-value---multiple",children:[],level:2},{value:"Collapsible",id:"collapsible",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"onValueChange",id:"onvaluechange",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Accordion } from '@abyss/web/ui/Accordion';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Accordion',\n  inputs: [\n    {\n      prop: 'type',\n      type: 'select',\n      options: [\n        { label: 'single', value: 'single' },\n        { label: 'multiple', value: 'multiple' },\n      ],\n    },\n    {\n      prop: 'defaultValue',\n      type: 'select',\n      options: [\n        { label: 'none', value: '' },\n        { label: 'sandbox-1', value: 'sandbox-1' },\n        { label: 'sandbox-2', value: 'sandbox-2' },\n        { label: 'sandbox-3', value: 'sandbox-3' },\n      ],\n    },\n    {\n      prop: 'isCollapsible',\n      type: 'boolean',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n  ]\n}\n\n<Accordion>\n  <Accordion.Item value=\"sandbox-1\">\n    <Accordion.Trigger>Sandbox Accordion 1</Accordion.Trigger>\n    <Accordion.Content>\n      SUPRISE - Sandbox Accordion 1\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value=\"sandbox-2\">\n    <Accordion.Trigger>Sandbox Accordion 2</Accordion.Trigger>\n    <Accordion.Content>\n      SURPRISE - Sandbox Accordion 2\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value=\"sandbox-3\">\n    <Accordion.Trigger>Sandbox Accordion 3</Accordion.Trigger>\n    <Accordion.Content>\n      SURPRISE - Sandbox Accordion 3\n    </Accordion.Content>\n  </Accordion.Item>\n</Accordion>\n")),(0,i.kt)("h2",{id:"type-multiple"},"Type Multiple"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," property to set the accordion to either have ",(0,i.kt)("inlineCode",{parentName:"p"},"single")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"multiple")," open items. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"single"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Accordion type="multiple" isCollapsible>\n  <Accordion.Item value="item-1">\n    <Accordion.Trigger>Is it accessible?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It adheres to the WAI-ARAI design pattern.\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value="item-2">\n    <Accordion.Trigger>Is it unstyled?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It\'s unstyled by default, giving you freedom over the look and feel.\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value="item-3">\n    <Accordion.Trigger>Can it be animated?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes! You can animate the Accordion with CSS or JavaScript.\n    </Accordion.Content>\n  </Accordion.Item>\n</Accordion>\n')),(0,i.kt)("h2",{id:"default-value---single"},"Default Value - Single"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultValue")," property to set an initial accordion to be open based on its ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," property. When type is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"single")," pass in a string."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Accordion defaultValue="item-1" isCollapsible>\n  <Accordion.Item value="item-1">\n    <Accordion.Trigger>Is it accessible?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It adheres to the WAI-ARAI design pattern.\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value="item-2">\n    <Accordion.Trigger>Is it unstyled?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It\'s unstyled by default, giving you freedom over the look and feel.\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value="item-3">\n    <Accordion.Trigger>Can it be animated?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes! You can animate the Accordion with CSS or JavaScript.\n    </Accordion.Content>\n  </Accordion.Item>\n</Accordion>\n')),(0,i.kt)("h2",{id:"default-value---multiple"},"Default Value - Multiple"),(0,i.kt)("p",null,"When the ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," of the accordion is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"multiple")," pass in a string array."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Accordion\n  type="multiple"\n  defaultValue={[\'item-1\', \'item-2\', \'item-3\']}\n  isCollapsible\n>\n  <Accordion.Item value="item-1">\n    <Accordion.Trigger>Is it accessible?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It adheres to the WAI-ARAI design pattern.\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value="item-2">\n    <Accordion.Trigger>Is it unstyled?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It\'s unstyled by default, giving you freedom over the look and feel.\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value="item-3">\n    <Accordion.Trigger>Can it be animated?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes! You can animate the Accordion with CSS or JavaScript.\n    </Accordion.Content>\n  </Accordion.Item>\n</Accordion>\n')),(0,i.kt)("h2",{id:"collapsible"},"Collapsible"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"isCollapsible")," property allows closing content when clicking the trigger for an open item. When ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," you are allowed to collapse all items. When ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," one item will always remain open. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group grow>\n  <Accordion type="single" defaultValue="item-1" isCollapsible>\n    <Accordion.Item value="item-1">\n      <Accordion.Trigger>Collapsible Accordion Item 1</Accordion.Trigger>\n      <Accordion.Content>Accordion Content 1</Accordion.Content>\n    </Accordion.Item>\n\n    <Accordion.Item value="item-2">\n      <Accordion.Trigger>Collapsible Accordion Item 2</Accordion.Trigger>\n      <Accordion.Content>Accordion Content 2</Accordion.Content>\n    </Accordion.Item>\n  </Accordion>\n  <Accordion type="single" defaultValue="item-1">\n    <Accordion.Item value="item-1">\n      <Accordion.Trigger>Default Accordion Item 1</Accordion.Trigger>\n      <Accordion.Content>Accordion Content 1</Accordion.Content>\n    </Accordion.Item>\n\n    <Accordion.Item value="item-2">\n      <Accordion.Trigger>Default Accordion Item 2</Accordion.Trigger>\n      <Accordion.Content>Accordion IContenttem 2</Accordion.Content>\n    </Accordion.Item>\n  </Accordion>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"disabled"},"Disabled"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," property to disable the entire ",(0,i.kt)("inlineCode",{parentName:"p"},"Accordion")," or individual levels. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group grow>\n  <Accordion type="single" defaultValue="item-1" isCollapsible>\n    <Accordion.Item value="item-1">\n      <Accordion.Trigger>Item is not disabled</Accordion.Trigger>\n      <Accordion.Content>Not disabled</Accordion.Content>\n    </Accordion.Item>\n\n    <Accordion.Item isDisabled value="item-2">\n      <Accordion.Trigger>Item disabled</Accordion.Trigger>\n      <Accordion.Content>Disabled</Accordion.Content>\n    </Accordion.Item>\n\n    <Accordion.Item value="item-3">\n      <Accordion.Trigger>Item is not disabled</Accordion.Trigger>\n      <Accordion.Content>Not disabled</Accordion.Content>\n    </Accordion.Item>\n  </Accordion>\n\n  <Accordion type="single" defaultValue="item-1" isDisabled>\n    <Accordion.Item value="item-1">\n      <Accordion.Trigger>Entire Accordion Is Disabled</Accordion.Trigger>\n      <Accordion.Content>Disabled</Accordion.Content>\n    </Accordion.Item>\n\n    <Accordion.Item value="item-2">\n      <Accordion.Trigger>Entire Accordion Is Disabled</Accordion.Trigger>\n      <Accordion.Content>Disabled</Accordion.Content>\n    </Accordion.Item>\n  </Accordion>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"onvaluechange"},"onValueChange"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"onValueChange")," property is an event handler that is called when the expanded state of any item changes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [multiValue, setMultiValue] = useState([]);\n  const [singleValue, setSingleValue] = useState(\'\');\n\n  const onValueChangeMulti = (e) => {\n    console.log(\'Multi Value\', e);\n    setMultiValue(e);\n  };\n\n  const onValueChangeSingle = (e) => {\n    console.log(\'Single Value\', e);\n    setSingleValue(e);\n  };\n\n  return (\n    <Layout.Group grow>\n      <Accordion\n        type="single"\n        defaultValue="item-1"\n        onValueChange={onValueChangeSingle}\n      >\n        <Accordion.Item value="item-1">\n          <Accordion.Trigger>Single Accordion Item 1</Accordion.Trigger>\n          <Accordion.Content>Accordion Content 1</Accordion.Content>\n        </Accordion.Item>\n\n        <Accordion.Item value="item-2">\n          <Accordion.Trigger>Single Accordion Item 2</Accordion.Trigger>\n          <Accordion.Content>Accordion Content 2</Accordion.Content>\n        </Accordion.Item>\n\n        <Accordion.Item value="item-3">\n          <Accordion.Trigger>Single Accordion Item 3</Accordion.Trigger>\n          <Accordion.Content>Accordion Content 3</Accordion.Content>\n        </Accordion.Item>\n      </Accordion>\n\n      <Accordion\n        type="multiple"\n        defaultValue={[\'item-1\']}\n        onValueChange={onValueChangeMulti}\n      >\n        <Accordion.Item value="item-1">\n          <Accordion.Trigger>Multiple Accordion Item 1</Accordion.Trigger>\n          <Accordion.Content>Accordion Content 1</Accordion.Content>\n        </Accordion.Item>\n\n        <Accordion.Item value="item-2">\n          <Accordion.Trigger>Multiple Accordion Item 2</Accordion.Trigger>\n          <Accordion.Content>Accordion Content 2</Accordion.Content>\n        </Accordion.Item>\n\n        <Accordion.Item value="item-3">\n          <Accordion.Trigger>Multiple Accordion Item 3</Accordion.Trigger>\n          <Accordion.Content>Accordion Content 3</Accordion.Content>\n        </Accordion.Item>\n      </Accordion>\n    </Layout.Group>\n  );\n};\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Accordion}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The children element of the accordion',\n    },\n    {\n      name: 'onValueChange',\n      type: 'function',\n      description:\n        'Event handler called when the expanded state of an item changes',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: \"Used to disable the accordion so that it can't be opened\",\n    },\n    {\n      name: 'isCollapsible',\n      type: 'boolean',\n      description: 'Used to make the accordion collapsible',\n    },\n    {\n      name: 'defaultValue',\n      type: 'string | array[string]',\n      description: 'Used to set an initial item or items to be open',\n    },\n    {\n      name: 'type',\n      type: \"'single' | 'multiple'\",\n      description:\n        'Used to set the amount of items able to be opened at one time',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Accordion.Item}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The children element of the accordion item',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: \"Used to disable the item so that it can't be opened\",\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Accordion.Trigger}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The children element of the accordion trigger',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Accordion.Content}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The children element of the accordion content',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Accordion}\n  rows={[\n    {\n      name: 'accordion-root',\n      description: 'Root element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"An accordion is a vertically stacked set of interactive headings that each contain a title, content snippet, or thumbnail representing a section of content. The headings function as controls that enable users to reveal or hide their associated sections of content. Accordions are commonly used to reduce the need to scroll when presenting multiple sections of content on a single page."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#accordion",mdxType:"ExitLink"},"Accordion WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Accordion defaultValue="item-1" isCollapsible>\n  <Accordion.Item value="item-1">\n    <Accordion.Trigger>Is it accessible?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It adheres to the WAI-ARAI design pattern.\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value="item-2">\n    <Accordion.Trigger>Is it unstyled?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes. It\'s unstyled by default, giving you freedom over the look and feel.\n    </Accordion.Content>\n  </Accordion.Item>\n\n  <Accordion.Item value="item-3">\n    <Accordion.Trigger>Can it be animated?</Accordion.Trigger>\n    <Accordion.Content>\n      Yes! You can animate the Accordion with CSS or JavaScript.\n    </Accordion.Content>\n  </Accordion.Item>\n</Accordion>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to the next focusable element; all focusable elements in the accordion are included in the page Tab sequence.',\n    },\n    {\n      name: 'Shift + Tab',\n      description:\n        'Moves focus to the previous focusable element; all focusable elements in the accordion are included in the page Tab sequence.',\n    },\n    {\n      name: 'Enter or Space',\n      description:\n        'When focus is on the accordion header for a collapsed or expanded panel, pressing Enter or Space will expand or collapse the panel respectively.',\n    },\n    {\n      name: 'Arrow Down',\n      description:\n        'If focus is on an accordion header, moves focus to the next accordion header. If focus is on the last accordion header, either does nothing or moves focus to the first accordion header.',\n    },\n    {\n      name: 'Arrow Up',\n      description:\n        'If focus is on an accordion header, moves focus to the previous accordion header. If focus is on the first accordion header, either does nothing or moves focus to the last accordion header.',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},87323:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"action-nav",category:"Navigation",title:"ActionNav",description:"Used to keep track of tasks as well as for navigation.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=2540%3A21341",pagination_prev:"web/ui/icon-material",pagination_next:"web/ui/breadcrumbs"},d=void 0,p={unversionedId:"web/ui/action-nav",id:"web/ui/action-nav",isDocsHomePage:!1,title:"ActionNav",description:"Used to keep track of tasks as well as for navigation.",source:"@site/docs/web/ui/ActionNav.md",sourceDirName:"web/ui",slug:"/web/ui/action-nav",permalink:"/web/ui/action-nav",tags:[],version:"current",frontMatter:{id:"action-nav",category:"Navigation",title:"ActionNav",description:"Used to keep track of tasks as well as for navigation.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=2540%3A21341",pagination_prev:"web/ui/icon-material",pagination_next:"web/ui/breadcrumbs"},sidebar:"docs",previous:{title:"IconMaterial",permalink:"/web/ui/icon-material"},next:{title:"Breadcrumbs",permalink:"/web/ui/breadcrumbs"}},c=[{value:"ActionNav",id:"actionnav",children:[],level:2},{value:"Height",id:"height",children:[],level:2},{value:"ActionNav.Item",id:"actionnavitem",children:[],level:2},{value:"Link",id:"link",children:[{value:"ActionText",id:"actiontext",children:[],level:3},{value:"Href",id:"href",children:[],level:3},{value:"onClick",id:"onclick",children:[],level:3}],level:2},{value:"Icons",id:"icons",children:[{value:"Custom Icon",id:"custom-icon",children:[],level:3},{value:"Hiding Icon",id:"hiding-icon",children:[],level:3},{value:"Variants",id:"variants",children:[],level:3}],level:2},{value:"Icon Title",id:"icon-title",children:[],level:2},{value:"ActionNav.Item",id:"actionnavitem-1",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ActionNav } from '@abyss/web/ui/ActionNav';\n")),(0,r.kt)("h2",{id:"actionnav"},"ActionNav"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"title")," prop can be used to change the title of the header card"),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"subText")," prop can be used to change the subText of the header card"),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"headingLevel")," prop can be used to change the headingLevel of the header card title.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to Do"\n  subText="Take action on any tasks that require attention."\n  headingLevel="h2"\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="info"\n  />\n  <ActionNav.Item\n    title="Task 2"\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n    actionText="5 Tasks Left"\n    variant="warning"\n  />\n</ActionNav>\n')),(0,r.kt)("h2",{id:"height"},"Height"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"height")," prop to adjust the height of the ActionNav. The default size is set to 48px."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<React.Fragment>\n  <ActionNav\n    title="Tasks Left to Do"\n    subText="Take action on any tasks that require attention."\n  >\n    <ActionNav.Item\n      title="Task 1"\n      href="/developers/getting-started/"\n      actionText="3 Tasks Left"\n      variant="info"\n    />\n    <ActionNav.Item\n      title="Task 2"\n      onClick={() => {\n        console.log(\'onClick triggered\');\n      }}\n      actionText="5 Tasks Left"\n      variant="warning"\n    />\n  </ActionNav>\n\n  <ActionNav\n    title="Tasks Left to Do"\n    subText="Take action on any tasks that require attention."\n    height={60}\n  >\n    <ActionNav.Item\n      title="Task 1"\n      href="/developers/getting-started/"\n      actionText="3 Tasks Left"\n      variant="info"\n    />\n    <ActionNav.Item\n      title="Task 2"\n      onClick={() => {\n        console.log(\'onClick triggered\');\n      }}\n      actionText="5 Tasks Left"\n      variant="warning"\n    />\n  </ActionNav>\n\n  <ActionNav\n    title="Tasks Left to Do"\n    subText="Take action on any tasks that require attention."\n    height="80px"\n  >\n    <ActionNav.Item\n      title="Task 1"\n      href="/developers/getting-started/"\n      actionText="3 Tasks Left"\n      variant="info"\n    />\n    <ActionNav.Item\n      title="Task 2"\n      onClick={() => {\n        console.log(\'onClick triggered\');\n      }}\n      actionText="5 Tasks Left"\n      variant="warning"\n    />\n  </ActionNav>\n</React.Fragment>\n')),(0,r.kt)("h2",{id:"actionnavitem"},"ActionNav.Item"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," prop to set the title of the action item."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav title="ActionNav Items With Title">\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="info"\n  />\n  <ActionNav.Item\n    title="Task 2"\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n    actionText="5 Tasks Left"\n    variant="warning"\n  />\n</ActionNav>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav title="ActionNav Items Without Title">\n  <ActionNav.Item\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n    actionText="1 Complete"\n    variant="success"\n  />\n  <ActionNav.Item\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n    actionText="1 Pending"\n    variant="info"\n  />\n  <ActionNav.Item\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n    actionText="1 Requireds Action"\n    variant="warning"\n  />\n</ActionNav>\n')),(0,r.kt)("h2",{id:"link"},"Link"),(0,r.kt)("h3",{id:"actiontext"},"ActionText"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"actionText")," prop to set the description for the action."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to Do"\n  subText="Take action on any tasks that require attention."\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="info"\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n  />\n  <ActionNav.Item\n    id="task-two-id"\n    title={\n      <Layout.Group>\n        Task 2\n        <IconMaterial icon="info" size={20} />\n      </Layout.Group>\n    }\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n    actionText={\n      <Layout.Stack space={0}>\n        2 Tasks Left\n        <Text size="$xs" fontWeight={400} color="$error1">\n          These expire within 5 days.\n        </Text>\n      </Layout.Stack>\n    }\n    variant="error"\n  />\n</ActionNav>\n')),(0,r.kt)("h3",{id:"href"},"Href"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use the ",(0,r.kt)("inlineCode",{parentName:"li"},"href")," prop to set the link to a separate page."),(0,r.kt)("li",{parentName:"ul"},"Use the ",(0,r.kt)("inlineCode",{parentName:"li"},"openNewWindow")," prop to open the link in a new window.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to Do"\n  subText="Take action on any tasks that require attention."\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="info"\n  />\n  <ActionNav.Item\n    title="Task 2"\n    href="/developers/getting-started/"\n    openNewWindow\n    actionText="2 Tasks Left"\n    variant="warning"\n  />\n</ActionNav>\n')),(0,r.kt)("h3",{id:"onclick"},"onClick"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick")," prop to trigger a custom function when the actionText is clicked"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to Do"\n  subText="Take action on any tasks that require attention."\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="info"\n  />\n  <ActionNav.Item\n    title="Task 2"\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n    actionText="5 Tasks Left"\n    variant="warning"\n  />\n</ActionNav>\n')),(0,r.kt)("h2",{id:"icons"},"Icons"),(0,r.kt)("h3",{id:"custom-icon"},"Custom Icon"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"icon")," prop to pass in a specific ",(0,r.kt)("inlineCode",{parentName:"p"},"Icon")," component. Find further guidance on material icons in the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/icon-material"},"Material Icons Tab")," and on accessibility within the ",(0,r.kt)("a",{parentName:"p",href:"/accessibility/#icons"},"Accessibility Icons Section"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to Do"\n  subText="Take action on any tasks that require attention."\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    icon={<IconMaterial icon="home" size={24} />}\n  />\n  <ActionNav.Item\n    title="Task 2"\n    href="https://www.optum.com"\n    actionText="5 Tasks Left"\n    icon={<IconMaterial icon="health_and_safety" size={24} variant="filled" />}\n  />\n</ActionNav>\n')),(0,r.kt)("h3",{id:"hiding-icon"},"Hiding Icon"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"hideIcon")," prop to disable the ",(0,r.kt)("inlineCode",{parentName:"p"},"Template"),". The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to Do"\n  subText="Take action on any tasks that require attention."\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    hideIcon\n  />\n</ActionNav>\n')),(0,r.kt)("h3",{id:"variants"},"Variants"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"variant")," prop to change the style of the type of icon that appears next to the ",(0,r.kt)("inlineCode",{parentName:"p"},"actionText"),". Available variants include ",(0,r.kt)("inlineCode",{parentName:"p"},"'error'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'success'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'warning'")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"'info'"),". The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"'error'")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to Do"\n  subText="Take action on any tasks that require attention."\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="error"\n  />\n  <ActionNav.Item\n    title="Task 2"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="success"\n  />\n  <ActionNav.Item\n    title="Task 3"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="warning"\n  />\n  <ActionNav.Item\n    title="Task 4"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="info"\n  />\n</ActionNav>\n')),(0,r.kt)("h2",{id:"icon-title"},"Icon Title"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"iconTitle")," prop whenever additional meaning must be conveyed beyond what's provided by the action description. When used the icon is accessible by screen readers. For further guidance please see the ",(0,r.kt)("a",{parentName:"p",href:"/accessibility/#icons"},"Accessibility Icons Section"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to Do"\n  subText="Take action on any tasks that require attention."\n  headingLevel="h2"\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="error"\n    iconTitle="Task includes errors. Please resolve before proceeding."\n  />\n  <ActionNav.Item\n    title="Task 2"\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n    actionText="3 Tasks Left"\n    variant="warning"\n    iconTitle="Task includes warnings."\n  />\n</ActionNav>\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ActionNav}\n  rows={[\n    {\n      name: 'children',\n      type: 'array[node]',\n      description:\n        'List of the individual ActionNav items. Does not include the first, header card as that is always present.',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the ActionNav header card.',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Set the subtext of the ActionNav header card.',\n    },\n    {\n      name: 'height',\n      type: 'number | string',\n      description: 'Set the height of the ActionNav bar.',\n    },\n    {\n      name: 'headingLevel',\n      type: 'h1 | h2 | h3 | h4 | h5 | h6',\n      description: 'Set the type of heading the title is in the header card.',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ActionNav.Item}\n  rows={[\n    {\n      name: 'title',\n      type: 'string | node',\n      description: 'Set the title of the section.',\n    },\n    {\n      name: 'actionText',\n      type: 'string | node',\n      description: 'The description for the action.',\n    },\n    {\n      name: 'icon',\n      type: 'string | node',\n      description:\n        'The icon that will be displayed to the right of the actionText.',\n    },\n    {\n      name: 'iconTitle',\n      type: 'string',\n      description: 'Set the title of the selected Alert icon variant.',\n    },\n    {\n      name: 'href',\n      type: 'string',\n      description: 'Link to route to on click when actionText is clicked.',\n    },\n    {\n      name: 'openNewWindow',\n      type: 'boolean',\n      description: 'Set true to open a link in a new browser window',\n    },\n    {\n      name: 'variant',\n      type: \"'info' | 'success' | 'error' | 'warning'\",\n      description:\n        'The variant for the Alert icon in the section (if it is being displayed).',\n    },\n    {\n      name: 'hideIcon',\n      type: 'boolean',\n      description: 'Set to true to hide the AlertIcon.',\n    },\n    {\n      name: 'onClick',\n      type: 'function',\n      description:\n        'Used to trigger a custom function when the actionText is clicked',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={ActionNav}\n  rows={[\n    {\n      name: 'action-nav-root',\n      description: 'The root ActionNav container',\n    },\n    {\n      name: 'action-nav-header',\n      description: 'The header (the first element in the ActionNav) container',\n    },\n    {\n      name: 'action-nav-header-card',\n      description: 'The header card within the header',\n    },\n    {\n      name: 'action-nav-header-text',\n      description: 'The title text of the section',\n    },\n    {\n      name: 'action-nav-text',\n      description: 'The subtext of the section',\n    },\n    {\n      name: 'action-nav-chevron-after',\n      description: 'The chevron shape on the right side of each ActionNav Item',\n    },\n    {\n      name: 'action-nav-list',\n      description: 'The unordered list container around the ActionNav Items',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={ActionNav.Item}\n  rows={[\n    {\n      name: 'action-nav-list-item',\n      description: 'The container for the ActionNav Item',\n    },\n    {\n      name: 'action-nav-header-text',\n      description: 'The title text of the section',\n    },\n    {\n      name: 'action-nav-vertical-rule',\n      description: 'The vertical divider between the header and the subtext',\n    },\n    {\n      name: 'action-nav-link-wrapper',\n      description: 'The wrapper for the navigation link',\n    },\n    {\n      name: 'action-nav-icon',\n      description: 'The icon being displayed with the subtext',\n    },\n    {\n      name: 'action-nav-chevron-before',\n      description: 'The chevron indent on the left side of each ActionNav Item',\n    },\n    {\n      name: 'action-nav-chevron-after',\n      description: 'The chevron shape on the right side of each ActionNav Item',\n    },\n    {\n      name: 'action-nav-link-container',\n      description: 'The div container around the icon, link, and arrow icon',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("p",null,"ActionNav is a navigation tool that is used to keep track of tasks and navigate users to their tasks."),(0,r.kt)("h2",{id:"actionnavitem-1"},"ActionNav.Item"),(0,r.kt)("p",null,"ActionNav.Item is an item in the ActionNav. In order for the ActionNav items to be accessible by screen readers, each ActionNav.Item should have a unique title. If an icon is included the ",(0,r.kt)("inlineCode",{parentName:"p"},"iconTitle")," prop should be used whenever additional meaning must be conveyed beyond what's provided by the action description. For further guidance please see the ",(0,r.kt)("a",{parentName:"p",href:"/accessibility/#icons"},"Accessibility Icons Section"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to do"\n  subText="Take action on any tasks that require attention."\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="info"\n  />\n  <ActionNav.Item\n    title="Task 2"\n    href="https://www.optum.com"\n    actionText="5 Tasks Left"\n    variant="warning"\n    iconTitle="Task includes warnings."\n  />\n</ActionNav>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to the next focusable element; all focusable elements in the ActionNav included in the page Tab sequence.',\n    },\n    {\n      name: 'Enter',\n      description:\n        'When focused on a link in the ActionNav, pressing enter will click on the link and navigate you to its page / external link.',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},86612:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"alert",category:"Feedback",title:"Alert",description:"Provides a brief message about the app processes.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A985",pagination_prev:"web/ui/table",pagination_next:"web/ui/progress-bar"},s=void 0,d={unversionedId:"web/ui/alert",id:"web/ui/alert",isDocsHomePage:!1,title:"Alert",description:"Provides a brief message about the app processes.",source:"@site/docs/web/ui/Alert.md",sourceDirName:"web/ui",slug:"/web/ui/alert",permalink:"/web/ui/alert",tags:[],version:"current",frontMatter:{id:"alert",category:"Feedback",title:"Alert",description:"Provides a brief message about the app processes.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A985",pagination_prev:"web/ui/table",pagination_next:"web/ui/progress-bar"},sidebar:"docs",previous:{title:"Table",permalink:"/web/ui/table"},next:{title:"ProgressBar",permalink:"/web/ui/progress-bar"}},p=[{value:"Children",id:"children",children:[],level:2},{value:"Variants",id:"variants",children:[],level:2},{value:"Change Icon",id:"change-icon",children:[],level:2},{value:"Hide Icon",id:"hide-icon",children:[],level:2},{value:"Title",id:"title",children:[],level:2},{value:"Icon Screen Readable and Icon Title",id:"icon-screen-readable-and-icon-title",children:[],level:2},{value:"Inline Text",id:"inline-text",children:[],level:2},{value:"onClose",id:"onclose",children:[],level:2},{value:"onAction",id:"onaction",children:[],level:2},{value:"actionHref",id:"actionhref",children:[],level:2},{value:"Error Code",id:"error-code",children:[],level:2},{value:"Timezone",id:"timezone",children:[{value:"Meaningful or Control Icons",id:"meaningful-or-control-icons",children:[],level:4},{value:"Decorative Icons",id:"decorative-icons",children:[],level:4},{value:"Close Button Guidance",id:"close-button-guidance",children:[],level:4}],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Alert } from '@abyss/web/ui/Alert';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Alert',\n  inputs: [\n    {\n      prop: 'title',\n      type: 'string',\n    },\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'inlineText',\n      type: 'string',\n    },\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'error', value: 'error' },\n        { label: 'success', value: 'success' },\n        { label: 'info', value: 'info' },\n        { label: 'warning', value: 'warning' },\n      ],\n    },\n    {\n      prop: 'hideIcon',\n      type: 'boolean',\n    },\n  ]\n}\n\n<Alert title=\"Alert Sandbox Title\" variant=\"success\">\n  Alert Sandbox Content\n</Alert>\n")),(0,i.kt)("h2",{id:"children"},"Children"),(0,i.kt)("p",null,"Add Children to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Alert")," component by simply placing elements between the ",(0,i.kt)("inlineCode",{parentName:"p"},"Alert")," tags. Children should be used for adding description text or any additional content you'd like to display below the title."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert title="Alert With Children" variant="success">\n  Description text or whatever additional content you\u2019d like to display below\n  the title goes here.\n</Alert>\n')),(0,i.kt)("h2",{id:"variants"},"Variants"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," property to change the style of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Alert"),". Available variants include ",(0,i.kt)("inlineCode",{parentName:"p"},"'error'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'success'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'warning'")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"'info'"),". The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"'error'")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack grow>\n  <Alert title="Error Alert" />\n  <Alert title="Success Alert" variant="success" />\n  <Alert title="Info Alert" variant="info" />\n  <Alert title="Warning Alert" variant="warning" />\n</Layout.Stack>\n')),(0,i.kt)("h2",{id:"change-icon"},"Change Icon"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"icon")," property to pass in a specific ",(0,i.kt)("inlineCode",{parentName:"p"},"Icon")," component."),(0,i.kt)("p",null,"If the icon is being used in a setting in which it is just a decorative element (which is the default case for icons), then the icon should be ignored by screen readers. The implementation below provides an example of a situation that would be classified as decorative. Since the default of ",(0,i.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," is set to false no specific changes need to be made for decorative icons. Find further guidance on material icons in the ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/icon-material"},"Material Icons Tab"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert\n  icon={<IconMaterial icon="search" />}\n  title="Search Information"\n  variant="info"\n  onClose={() => {}}\n/>\n')),(0,i.kt)("br",null),(0,i.kt)("p",null,"If the icon is being used in a setting where it is the only element providing meaning, then that same meaning should be conveyed to screen reader users. The implementation below provides an example in which the property ",(0,i.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," should be set to true and the ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," property is required and should describe the purpose of the image. Find further guidance on material icons in the ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/icon-material"},"Material Icons Tab"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert\n  icon={\n    <IconMaterial icon="search" isScreenReadable={true} title="Search Info" />\n  }\n  title="Text"\n  variant="info"\n  onClose={() => {}}\n/>\n')),(0,i.kt)("h2",{id:"hide-icon"},"Hide Icon"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"hideIcon")," property to disable the ",(0,i.kt)("inlineCode",{parentName:"p"},"Template"),". The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert hideIcon title="Icon Hidden" />\n')),(0,i.kt)("h2",{id:"title"},"Title"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," property to set the title for the alert."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert title="Error" />\n')),(0,i.kt)("h2",{id:"icon-screen-readable-and-icon-title"},"Icon Screen Readable and Icon Title"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"isIconScreenReadable")," property to make the alert variant icon discoverable by assistive technology. The ",(0,i.kt)("inlineCode",{parentName:"p"},"isIconScreenReable")," property should be used if the meaning of the alert is not given using adjacent text, and the decorative variant icon becomes meaningful."),(0,i.kt)("p",null,"If the variant icon becomes meaningful, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"iconTitle")," property to set a title for the variant icon that conveys the meaning or content that is displayed visually.\nFor more information on meaningful and decorative icons can be found under the accessibility tab."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack grow>\n  <Alert\n    isIconScreenReadable={true}\n    iconTitle="error loading content"\n    title="Nondescript Title"\n  />\n  <Alert\n    isIconScreenReadable={true}\n    iconTitle="Server maintenance"\n    title="Nondescript Title"\n    variant="warning"\n  />\n</Layout.Stack>\n')),(0,i.kt)("h2",{id:"inline-text"},"Inline Text"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"inlineText")," property to utilize a single line alert. ",(0,i.kt)("inlineCode",{parentName:"p"},"inlineText")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," cannot be used in conjunction."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert title="Inline Text" inlineText="Alert with inline text" />\n')),(0,i.kt)("h2",{id:"onclose"},"onClose"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"onClose")," property to handle the action when close button is triggered. The ",(0,i.kt)("inlineCode",{parentName:"p"},"onClose")," property is always required."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isVisible, setIsVisible] = useState(true);\n  const buttonRef = useRef();\n  const toggleVisibility = () => {\n    setIsVisible(!isVisible);\n  };\n  return (\n    <Layout.Stack grow>\n      <Button onClick={toggleVisibility} ref={buttonRef}>\n        Toggle Alert\n      </Button>\n      <Alert\n        title="Alert With onClose Function"\n        isVisible={isVisible}\n        onClose={() => {\n          setIsVisible(false);\n          if (buttonRef.current) {\n            buttonRef.current.focus();\n          }\n        }}\n      />\n    </Layout.Stack>\n  );\n};\n')),(0,i.kt)("h2",{id:"onaction"},"onAction"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"onAction")," property to handle a custom event when the action button is triggered. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"actionText")," property to set the text inside the action button."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert\n  title="Warning with Action Button"\n  variant="warning"\n  onAction={() => {\n    console.log(\'Action Triggered\');\n  }}\n  onClose={() => {\n    console.log(\'Close Triggered\');\n  }}\n  actionText="Custom Action"\n  inlineText="Action button with custom event"\n/>\n')),(0,i.kt)("h2",{id:"actionhref"},"actionHref"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"actionHref")," property to link away to another page when it is clicked. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"actionText")," property to set the text inside the action link. When using an href if the link is external or the ",(0,i.kt)("inlineCode",{parentName:"p"},"openNewWindow")," prop is set to true the action link will open in a new window."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack grow>\n  <Alert\n    title="Success with Action Button"\n    variant="success"\n    actionHref="/overview"\n    actionText="Link"\n    inlineText="Action button with link"\n    onClose={() => {\n      console.log(\'Close Triggered\');\n    }}\n  />\n  <Alert\n    title="Success with Action Button"\n    variant="success"\n    actionHref="https://www.google.com"\n    actionText="Link"\n    inlineText="Action button with link open in new window"\n    onClose={() => {\n      console.log(\'Close Triggered\');\n    }}\n  />\n</Layout.Stack>\n')),(0,i.kt)("h2",{id:"error-code"},"Error Code"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"errorCode")," property to display an error code that is appended with the current date/time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert errorCode="404" title="Error" />\n')),(0,i.kt)("h2",{id:"timezone"},"Timezone"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"timezone")," property to change the timezone of the alert timestamp. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"'America/Chicago'"),". A comprehensive list of valid timezones can be found ",(0,i.kt)(m,{href:"https://www.iplocate.com/en/resources/timezones",mdxType:"ExitLink"},"here"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack grow>\n  <Alert\n    title="Alert With America/Chicago Timezone (Default)"\n    errorCode="404"\n  />\n  <Alert\n    timezone="Europe/London"\n    title="Alert With Europe/London Timezone"\n    errorCode="404"\n  />\n  <Alert\n    timezone="America/New_York"\n    title="Alert With America/New_York Timezone"\n    errorCode="404"\n  />\n</Layout.Stack>\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Alert}\n  rows={[\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Sets the tile for the alert',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the alert component',\n    },\n    {\n      name: 'variant',\n      type: \"'info' | 'success' | 'error' | 'warning'\",\n      description: 'Change the alert style',\n    },\n    {\n      name: 'timezone',\n      type: 'string',\n      description: 'Set the timezone for the errorCode message date/time',\n    },\n    {\n      name: 'errorCode',\n      type: 'string',\n      description:\n        'Set the error code to be displayed in the alert. Current date/time is appended to errorCode',\n    },\n    {\n      name: 'onClose',\n      type: 'function',\n      description: 'Callback fired when the alert is closed, always required',\n    },\n    {\n      name: 'onAction',\n      type: 'function',\n      description: 'Callback fired when the alert is closed',\n    },\n    {\n      name: 'actionText',\n      type: 'string',\n      description: 'Set the onAction text',\n    },\n    {\n      name: 'actionHref',\n      type: 'string',\n      description: 'Set link to route onAction',\n    },\n    {\n      name: 'openNewWindow',\n      type: 'bool',\n      description: 'Flag to have links open in a new window',\n    },\n    {\n      name: 'inlineText',\n      type: 'string',\n      description: 'Set the inline text to utilize a single line alert',\n    },\n    {\n      name: 'icon',\n      type: 'ReactNode',\n      description: 'Change the default icon',\n    },\n    {\n      name: 'hideIcon',\n      type: 'boolean',\n      description: 'Flag to show or hide icon',\n    },\n    {\n      name: 'isVisible',\n      type: 'boolean',\n      description: 'Flag to show or hide Alert',\n    },\n    {\n      name: 'openNewWindow',\n      type: 'bool',\n      description: 'Flag to have links open in a new window',\n    },\n    {\n      name: 'ariaLive',\n      type: \"'polite' | 'assertive' \",\n      description:\n        'Sets the priority with which screen reader should treat updates to live regions',\n    },\n    {\n      name: 'isIconScreenReadable',\n      type: 'bool',\n      description:\n        'Indicate whether the icon is screen readable or not. If the icon is Screen Readable, then provide an iconTitle',\n    },\n    {\n      name: 'iconTitle',\n      type: 'string'\n        'set the title for the icon variant when using isIconScreenReadable',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Alert.Title}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the alert title component',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Alert.Icon}\n  rows={[\n    {\n      name: 'variant',\n      type: \"'info' | 'success' | 'error' | 'warning'\",\n      description: 'Change the alert style',\n      default: '-',\n    },\n    {\n      name: 'variants',\n      type: 'object',\n      description: 'Default variant styles',\n    },\n    {\n      name: 'size',\n      type: 'number',\n      description: 'Size of the icon',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Alert}\n  rows={[\n    {\n      name: 'alert-root',\n      description: 'Alert root element',\n    },\n    {\n      name: 'alert-container',\n      description: 'Alert element container',\n    },\n    {\n      name: 'alert-header-container',\n      description: 'Header element container',\n    },\n    {\n      name: 'alert-header-section',\n      description: 'Alert header element',\n    },\n    {\n      name: 'alert-header-text-container',\n      description: 'Alert text container for title and inline text',\n    },\n    {\n      name: 'alert-title',\n      description: 'Alert title',\n    },\n    {\n      name: 'alert-inline-text',\n      description: 'Alert inline text element',\n    },\n    {\n      name: 'alert-body',\n      description: 'Alert body element',\n    },\n    {\n      name: 'alert-icon-container',\n      description: 'Icon element container',\n    },\n    {\n      name: 'alert-timestamp',\n      description: 'Timestamp',\n    },\n    {\n      name: 'alert-close-button',\n      description: 'Close button',\n    },\n    {\n      name: 'alert-action-button',\n      description: 'Action button',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Alert.Title}\n  rows={[\n    {\n      name: 'alert-title-section',\n      description: 'Title element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Alert.Icon}\n  rows={[\n    {\n      name: 'alert-icon',\n      description: 'Icon element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"An alert is an element that displays a brief, important message in a way that attracts the user's attention without interrupting the user's task. Dynamically rendered alerts are automatically announced by most screen readers, and in some operating systems, they may trigger an alert sound. It is important to note that, at this time, screen readers do not inform users of alerts that are present on the page before page load completes."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#alert",mdxType:"ExitLink"},"Alert WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack grow>\n  <Alert title="Error Alert" variant="error" onClose={() => {}} />\n  <Alert title="Success Alert" variant="success" onClose={() => {}} />\n  <Alert title="Info Alert" variant="info" onClose={() => {}} />\n  <Alert title="Warning Alert" variant="warning" onClose={() => {}} />\n</Layout.Stack>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description: 'Puts focus on the Button inside of the Alert',\n    },\n    {\n      name: 'Enter',\n      description:\n        'When focus is on the Button, pressing enter will press the button inside the alert',\n    },\n    {\n      name: 'Space',\n      description:\n        'When focus is on the Button, pressing space will press the button inside the alert',\n    },\n  ]}\n/>\n")),(0,i.kt)("h4",{id:"meaningful-or-control-icons"},"Meaningful or Control Icons"),(0,i.kt)("p",null,"In the alert below, the icon conveys information that is not conveyed by title text. The icon is considered meaningful (not decorative) and must have a text alternative."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert title="There is a bug!" variant="error" />\n')),(0,i.kt)("h4",{id:"decorative-icons"},"Decorative Icons"),(0,i.kt)("p",null,"In the alert below, since these is sufficient text next to the icon, the icon is considered decorative and and does not need to be exposed to assistive technology."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert title="Warning Alert" variant="warning" />\n')),(0,i.kt)("h4",{id:"close-button-guidance"},"Close Button Guidance"),(0,i.kt)("p",null,"Keyboard operation: if the \u201cclose\u201d button is used on the alert, it must be keyboard accessible. A keyboard only user must be able to tab to the button, and activate it with the space bar and the enter key. When the alert is closed, focus must be placed back to the element that caused it to open or where it previously was on the page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Alert title="Alert With Close Button" onClose={() => {}} />\n')),(0,i.kt)("p",null,"Note: per the WAI ARIA specification, when the \u201calert\u201d role is used, the user should not be required to close the alert. In this case, it is assumed that the close button is provided as a convenience and the user is not explicitly required to close the alert.")))}h.isMDXComponent=!0},58074:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"badge",category:"Data Display",title:"Badge",description:"Provides a small descriptor for UI elements.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=8892%3A42895",pagination_prev:"web/ui/tabs",pagination_next:"web/ui/chip"},d=void 0,p={unversionedId:"web/ui/badge",id:"web/ui/badge",isDocsHomePage:!1,title:"Badge",description:"Provides a small descriptor for UI elements.",source:"@site/docs/web/ui/Badge.md",sourceDirName:"web/ui",slug:"/web/ui/badge",permalink:"/web/ui/badge",tags:[],version:"current",frontMatter:{id:"badge",category:"Data Display",title:"Badge",description:"Provides a small descriptor for UI elements.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=8892%3A42895",pagination_prev:"web/ui/tabs",pagination_next:"web/ui/chip"},sidebar:"docs",previous:{title:"Tabs",permalink:"/web/ui/tabs"},next:{title:"Chip",permalink:"/web/ui/chip"}},c=[{value:"Variants",id:"variants",children:[],level:2},{value:"Rounded",id:"rounded",children:[],level:2},{value:"Outline",id:"outline",children:[],level:2},{value:"Icons",id:"icons",children:[],level:2},{value:"Width",id:"width",children:[],level:2},{value:"Accessibility",id:"accessibility",children:[{value:"Decorative Icons",id:"decorative-icons",children:[],level:4},{value:"Meaningful Colors",id:"meaningful-colors",children:[],level:4}],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Badge } from '@abyss/web/ui/Badge';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Badge',\n  inputs: [\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'success', value: 'success' },\n        { label: 'warning', value: 'warning' },\n        { label: 'error', value: 'error' },\n        { label: 'info', value: 'info' },\n        { label: 'neutral', value: 'neutral' },\n      ]\n    },\n    {\n      prop: 'rounded',\n      type: 'boolean',\n    },\n    {\n      prop: 'outline',\n      type: 'boolean',\n    },\n  ]\n}\n\n<Badge>Badge Sandbox</Badge>\n")),(0,r.kt)("h2",{id:"variants"},"Variants"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"variant")," property to set the color of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Badge"),".\nThe options are ",(0,r.kt)("inlineCode",{parentName:"p"},"success"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"warning"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"error"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"info"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"neutral"),". The default is ",(0,r.kt)("inlineCode",{parentName:"p"},"success"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Grid columns={2}>\n  <Grid.Col>\n    <Layout.Stack alignItems="left" space={20}>\n      <Badge variant="success">Success Badge</Badge>\n      <Badge variant="warning">Warning Badge</Badge>\n      <Badge variant="error">Error Badge</Badge>\n      <Badge variant="info">Info Badge</Badge>\n      <Badge variant="neutral">Neutral Badge</Badge>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack alignItems="left" space={20}>\n      <Badge variant="success" outline>\n        Success Badge\n      </Badge>\n      <Badge variant="warning" outline>\n        Warning Badge\n      </Badge>\n      <Badge variant="error" outline>\n        Error Badge\n      </Badge>\n      <Badge variant="info" outline>\n        Info Badge\n      </Badge>\n      <Badge variant="neutral" outline>\n        Neutral Badge\n      </Badge>\n    </Layout.Stack>\n  </Grid.Col>\n</Grid>\n')),(0,r.kt)("h2",{id:"rounded"},"Rounded"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"rounded")," property to change the style of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Badge")," from rounded or squared. The default is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Badge variant="info" outline ariaText="information">\n    Squared Badge\n  </Badge>\n  <Badge rounded variant="info" outline ariaText="information">\n    Rounded Badge\n  </Badge>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"outline"},"Outline"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"outline")," property to turn on the outline of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Badge"),". The default is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Badge variant="info" ariaText="information">\n    Badge\n  </Badge>\n  <Badge outline variant="info" ariaText="information">\n    Outline Badge\n  </Badge>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"icons"},"Icons"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"icon")," property to set the icon of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Badge"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Badge\n    icon={\n      <IconMaterial\n        icon="check_circle"\n        size="$sm"\n        color="$success1"\n        variant="filled"\n      />\n    }\n    variant="success"\n  >\n    Complete\n  </Badge>\n  <Badge\n    icon={\n      <IconMaterial\n        icon="remove_circle"\n        size="$sm"\n        color="$error1"\n        variant="filled"\n      />\n    }\n    variant="error"\n  >\n    Incomplete\n  </Badge>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"width"},"Width"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Badge")," component has a max width of 200px. Excess text will truncate."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Badge\n  icon={\n    <IconMaterial\n      ariaText="information"\n      icon="info"\n      size="$sm"\n      color="$info1"\n      variant="filled"\n    />\n  }\n  variant="info"\n>\n  Max width of 200 pixels. excess text will truncate.\n</Badge>\n')),(0,r.kt)("h2",{id:"accessibility"},"Accessibility"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ariaText")," prop to provide additional information denoted by the color. For more information visit the accessibility tab."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Badge ariaText="warning" variant="warning" outline>\n  Warning\n</Badge>\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Badge}\n  rows={[\n    {\n      name: 'rounded',\n      type: 'boolean',\n      description: 'Change the badge style',\n    },\n    {\n      name: 'outline',\n      type: 'boolean',\n      description: 'Add an outline to the badge.',\n    },\n    {\n      name: 'variant',\n      type: '\"success\" | \"warning\" | \"error\" | \"info\" | \"neutral\"',\n      description: 'Set the color of the badge',\n    },\n    {\n      name: 'icon',\n      type: 'node',\n      description: 'Adds an icon to the Badge component',\n    },\n    {\n      name: 'children',\n      type: 'node',\n      description: 'The text to be input into the Badge component',\n    },\n    {\n      name: 'ariaText',\n      type: 'string',\n      description: 'Sets the hidden text used for accessibility purposes',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Badge}\n  rows={[\n    {\n      name: 'badge-root',\n      description: 'Badge root element',\n    },\n    {\n      name: 'badge-icon',\n      description: 'Badge icon element',\n    },\n    {\n      name: 'badge-content',\n      description: 'Badge content element',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},"Badges are not focusable, visual text elements used to show a status for quick recognition. Avoid using badge for text truncated beyond 200 pixels, because it will not be accessible.",(0,r.kt)("h4",{id:"decorative-icons"},"Decorative Icons"),(0,r.kt)("p",null,"In the badge below, since there is sufficient text next to the icon, the icon is considered decorative and and does not need to be exposed to assistive technology."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Badge\n  icon={\n    <IconMaterial\n      icon="warning"\n      size="$sm"\n      color="$warning1"\n      variant="filled"\n    />\n  }\n  variant="warning"\n  outline\n>\n  Warning\n</Badge>\n')),(0,r.kt)("h4",{id:"meaningful-colors"},"Meaningful Colors"),(0,r.kt)("p",null,"Conveying Meaning Via Color Alone: Color must not used as the only means of conveying information, actions, prompting a response, or distinguishing elements. Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies \u2013 such as screen readers. Ensure that information denoted by the color is either obvious from the content itself (e.g. the visible text), or is included through alternative means, such as additional text hidden with the .sr-only class. This can also be done by using the ariaText prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Badge ariaText="warning" variant="warning" outline>\n  Warning\n</Badge>\n'))))}g.isMDXComponent=!0},59660:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"box",category:"Layout",title:"Box",description:"Used as a blanket filler to surround just about any component(s) with color or create a box of predefined size.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3763%3A25282",pagination_prev:"web/ui/toggle-tabs",pagination_next:"web/ui/divider"},d=void 0,p={unversionedId:"web/ui/box",id:"web/ui/box",isDocsHomePage:!1,title:"Box",description:"Used as a blanket filler to surround just about any component(s) with color or create a box of predefined size.",source:"@site/docs/web/ui/Box.md",sourceDirName:"web/ui",slug:"/web/ui/box",permalink:"/web/ui/box",tags:[],version:"current",frontMatter:{id:"box",category:"Layout",title:"Box",description:"Used as a blanket filler to surround just about any component(s) with color or create a box of predefined size.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3763%3A25282",pagination_prev:"web/ui/toggle-tabs",pagination_next:"web/ui/divider"},sidebar:"docs",previous:{title:"ToggleTabs",permalink:"/web/ui/toggle-tabs"},next:{title:"Divider",permalink:"/web/ui/divider"}},c=[{value:"Padding",id:"padding",children:[],level:2},{value:"Color",id:"color",children:[],level:2},{value:"Align",id:"align",children:[],level:2},{value:"Width",id:"width",children:[],level:2},{value:"Height",id:"height",children:[],level:2},{value:"Multi Component Usage",id:"multi-component-usage",children:[],level:2},{value:"Containers",id:"containers",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Box } from '@abyss/web/ui/Box';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Box',\n  inputs: [\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'color',\n      type: 'string',\n    },\n    {\n      prop: 'padding',\n      type: 'string',\n    },\n    {\n      prop: 'height',\n      type: 'string',\n    },\n    {\n      prop: 'width',\n      type: 'string',\n    },\n  ]\n}\n\n<Box color=\"$gray3\">Box Sandbox</Box>\n")),(0,r.kt)("h2",{id:"padding"},"Padding"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"padding")," property to adjust the ammount of padding around the contents of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Box"),". The padding prop can take in px, rem, em and the Abyss standardized sizes. The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"$md"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<React.Fragment>\n  <Box padding="$sm">Small Padding</Box>\n  <br />\n  <Box>Medium Padding - Default</Box>\n  <br />\n  <Box padding="$lg">Large Padding</Box>\n</React.Fragment>\n')),(0,r.kt)("h2",{id:"color"},"Color"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"color")," property to set the color of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Box"),". The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"$gray2"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<React.Fragment>\n  <Box>Gray2 - Default</Box>\n  <Box color="$primary1">\n    <Label color="$white">White on Primary1</Label>\n  </Box>\n</React.Fragment>\n')),(0,r.kt)("h2",{id:"align"},"Align"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"align")," property to adjust the alignment of children within the ",(0,r.kt)("inlineCode",{parentName:"p"},"Box"),". The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"center"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<React.Fragment>\n  <Box align="start">Start</Box>\n  <br />\n  <Box>Center - Default</Box>\n  <br />\n  <Box align="end">End</Box>\n</React.Fragment>\n')),(0,r.kt)("h2",{id:"width"},"Width"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," property to adjust the width of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Box"),". The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"100%"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Box width="500">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque\n    elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam\n    consequat. Lorem ipsum dolor sit amet\n  </Box>\n  <Box width={500}>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque\n    elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam\n    consequat. Lorem ipsum dolor sit amet\n  </Box>\n  <Box width="50%">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque\n    elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam\n    consequat. Lorem ipsum dolor sit amet\n  </Box>\n</Layout.Stack>\n')),(0,r.kt)("h2",{id:"height"},"Height"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"height")," property to adjust the height of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Box"),". The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"100%"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<React.Fragment>\n  <Box color="$tint2" padding="$md" height="150">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque\n    elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam\n    consequat. Lorem ipsum dolor sit amet\n  </Box>\n  <br />\n  <Box color="$tint2" padding="$md" height={150}>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque\n    elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam\n    consequat. Lorem ipsum dolor sit amet\n  </Box>\n</React.Fragment>\n')),(0,r.kt)("h2",{id:"multi-component-usage"},"Multi Component Usage"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Box")," surround groups of components and provides customized colored background."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group alignLayout="center">\n  <Box color="$white" padding="$md">\n    <Layout.Stack grow space={2}>\n      <IconBrand icon="airplane" size={24} variant="onetonedarkcircle" />\n      <IconBrand icon="airplane" size={24} variant="twotonedarkcircle" />\n      <IconBrand icon="airplane" size={24} variant="twotonelightcircle" />\n    </Layout.Stack>\n  </Box>\n  <Box color="$tint2" padding="$md">\n    <Layout.Stack grow space={2}>\n      <IconBrand icon="airplane" size={24} variant="onetonedarkcircle" />\n      <IconBrand icon="airplane" size={24} variant="twotonedarkcircle" />\n      <IconBrand icon="airplane" size={24} variant="twotonelightcircle" />\n    </Layout.Stack>\n  </Box>\n  <Box color="$tint4" padding="$md">\n    <Layout.Stack grow space={2}>\n      <IconBrand icon="airplane" size={24} variant="onetonedarkcircle" />\n      <IconBrand icon="airplane" size={24} variant="twotonedarkcircle" />\n      <IconBrand icon="airplane" size={24} variant="twotonelightcircle" />\n    </Layout.Stack>\n  </Box>\n  <Box color="$primary1" padding="$md">\n    <Layout.Stack grow space={2}>\n      <IconBrand icon="airplane" size={24} variant="onetonedarkcircle" />\n      <IconBrand icon="airplane" size={24} variant="twotonedarkcircle" />\n      <IconBrand icon="airplane" size={24} variant="twotonelightcircle" />\n    </Layout.Stack>\n  </Box>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"containers"},"Containers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Card>\n  <Card.Title color="$gray8" backgroundColor="$gray3">\n    <Box color="$interactive3" padding="$md">\n      Check out this text inside a box container inside a card container\n    </Box>\n  </Card.Title>\n</Card>\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Box}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the box component',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'The color of the box',\n    },\n    {\n      name: 'padding',\n      type: 'number | string',\n      description: 'Padding between the box and the elements it contains',\n    },\n    {\n      name: 'width',\n      type: 'number | string',\n      description: 'The width of the box',\n    },\n    {\n      name: 'height',\n      type: 'number | string',\n      description: 'The height of the box',\n    },\n    {\n      name: 'align',\n      type: \"'start' | 'center' | 'end'\",\n      description: 'The horizontal alignment of children inside the box',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Box}\n  rows={[\n    {\n      name: 'box-root',\n      description: 'Box root element',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},75116:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"breadcrumbs",category:"Navigation",title:"Breadcrumbs",description:"Used to separate nodes and assist navigation.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A999",pagination_prev:"web/ui/action-nav",pagination_next:"web/ui/button"},s=void 0,d={unversionedId:"web/ui/breadcrumbs",id:"web/ui/breadcrumbs",isDocsHomePage:!1,title:"Breadcrumbs",description:"Used to separate nodes and assist navigation.",source:"@site/docs/web/ui/Breadcrumbs.md",sourceDirName:"web/ui",slug:"/web/ui/breadcrumbs",permalink:"/web/ui/breadcrumbs",tags:[],version:"current",frontMatter:{id:"breadcrumbs",category:"Navigation",title:"Breadcrumbs",description:"Used to separate nodes and assist navigation.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A999",pagination_prev:"web/ui/action-nav",pagination_next:"web/ui/button"},sidebar:"docs",previous:{title:"ActionNav",permalink:"/web/ui/action-nav"},next:{title:"Button",permalink:"/web/ui/button"}},p=[{value:"Usage",id:"usage",children:[],level:2},{value:"Comparator",id:"comparator",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Space",id:"space",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Breadcrumbs } from '@abyss/web/ui/Breadcrumbs';\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Integrate Breadcrumbs with Router by using Links and Router Routes. The breadcrumbs will know what breadcrumb items to display based on the URL of the current location."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const Page = ({ title }) => {\n    return (\n      <div>\n        <Router.MetaTags>\n          <title>{title}</title>\n          <meta name=\"description\" content={title + 'Page'} />\n        </Router.MetaTags>\n        <Heading css={{ 'abyss-heading-root': { margin: '16px 0px' } }}>\n          {title} Page\n        </Heading>\n      </div>\n    );\n  };\n\n  return (\n    <RouterProvider type=\"memory\">\n      <React.Fragment>\n        <Breadcrumbs\n          divider=\"/\"\n          items={[\n            { title: 'Home', href: '/' },\n            { title: 'Getting Started', href: '/getting-started/' },\n            { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n          ]}\n        />\n\n        <Router.Routes>\n          <Router.Route path=\"/\" element={<Page title=\"Home\" />} />\n          <Router.Route\n            path=\"/getting-started/\"\n            element={<Page title=\"Getting Started\" />}\n          />\n          <Router.Route\n            path=\"/web/ui/breadcrumbs/\"\n            element={<Page title=\"Breadcrumbs\" />}\n          />\n        </Router.Routes>\n        <Card>\n          <Card.Title>\n            Click on these links to mimic the use of breadcrumb navigation{' '}\n          </Card.Title>\n          <Card.Section>\n            <ul style={{ display: 'inline-flex' }}>\n              <li style={{ marginRight: '15px' }}>\n                <Link href=\"/\">Home Page</Link>\n              </li>\n              <li style={{ marginRight: '15px' }}>\n                <Link href=\"/getting-started/\">Getting Started</Link>\n              </li>\n              <li style={{ marginRight: '15px' }}>\n                <Link href=\"/web/ui/breadcrumbs/\">Breadcrumbs</Link>\n              </li>\n            </ul>\n          </Card.Section>\n        </Card>\n      </React.Fragment>\n    </RouterProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"comparator"},"Comparator"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"comparator")," prop takes in a custom callback function to directly handle the determination of what breadcrumbs are displayed. This function is called as part of a ",(0,i.kt)("inlineCode",{parentName:"p"},"findIndex()")," loop through the breadcrumb items and includes two arguments, the breadcrumb item href and current location object. This function must return a value of ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,"Note: if this prop is not utilized the default comparison is between the breadcrumb item href and the current location pathname."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const Page = ({ title }) => {\n    return (\n      <div>\n        <Router.MetaTags>\n          <title>{title}</title>\n          <meta name=\"description\" content={title + 'Page'} />\n        </Router.MetaTags>\n        <Heading css={{ 'abyss-heading-root': { margin: '16px 0px' } }}>\n          {title} Page\n        </Heading>\n      </div>\n    );\n  };\n\n  const customComparator = (href, location) => {\n    console.log('breadcrumb item href', href);\n    console.log('current location object', location);\n    return href.includes(location.hash) && href.includes(location.pathname);\n  };\n\n  return (\n    <RouterProvider type=\"memory\">\n      <React.Fragment>\n        <Breadcrumbs\n          divider=\"/\"\n          items={[\n            { title: 'Home', href: '/' },\n            { title: 'Getting Started', href: '/getting-started/' },\n            { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs#space' },\n          ]}\n          comparator={customComparator}\n        />\n\n        <Router.Routes>\n          <Router.Route path=\"/\" element={<Page title=\"Home\" />} />\n          <Router.Route\n            path=\"/getting-started/\"\n            element={<Page title=\"Getting Started\" />}\n          />\n          <Router.Route\n            path=\"/web/ui/breadcrumbs/\"\n            element={<Page title=\"Breadcrumbs\" />}\n          />\n        </Router.Routes>\n        <Card>\n          <Card.Title>\n            Click on these links to mimic the use of breadcrumb navigation{' '}\n          </Card.Title>\n          <Card.Section>\n            <ul style={{ display: 'inline-flex' }}>\n              <li style={{ marginRight: '15px' }}>\n                <Link href=\"/\">Home Page</Link>\n              </li>\n              <li style={{ marginRight: '15px' }}>\n                <Link href=\"/getting-started/\">Getting Started</Link>\n              </li>\n              <li style={{ marginRight: '15px' }}>\n                <Link href=\"/web/ui/breadcrumbs#space\">Breadcrumbs</Link>\n              </li>\n            </ul>\n          </Card.Section>\n        </Card>\n      </React.Fragment>\n    </RouterProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," prop to change the overall size of the breadcrumb."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <React.Fragment>\n      <Breadcrumbs\n        divider=\"/\"\n        size=\"$sm\"\n        items={[\n          { title: 'Home', href: '/' },\n          {\n            title: 'Getting Started',\n            href: '/developers/getting-started/',\n          },\n          { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n        ]}\n      />\n      <Breadcrumbs\n        size=\"$md\"\n        items={[\n          { title: 'Home', href: '/' },\n          {\n            title: 'Getting Started',\n            href: '/developers/getting-started/',\n          },\n          { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n        ]}\n      />\n      <Breadcrumbs\n        size=\"$lg\"\n        items={[\n          { title: 'Home', href: '/' },\n          {\n            title: 'Getting Started',\n            href: '/developers/getting-started/',\n          },\n          { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n        ]}\n      />\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"space"},"Space"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"space")," prop to add space between the nodes and divider."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <Breadcrumbs\n    items={[\n      { title: 'Home', href: '/' },\n      { title: 'Getting Started', href: '/developers/getting-started/' },\n      { title: 'Breadcrumbs', href: '/web/ui/Breadcrumbs/' },\n    ]}\n  />\n  <Breadcrumbs\n    space=\"16px\"\n    items={[\n      { title: 'Home', href: '/' },\n      { title: 'Getting Started', href: '/developers/getting-started/' },\n      { title: 'Breadcrumbs', href: '/web/ui/Breadcrumbs/' },\n    ]}\n  />\n  <Breadcrumbs\n    space=\"24px\"\n    items={[\n      { title: 'Home', href: '/' },\n      { title: 'Getting Started', href: '/developers/getting-started/' },\n      { title: 'Breadcrumbs', href: '/web/ui/Breadcrumbs/' },\n    ]}\n  />\n</React.Fragment>\n"))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Breadcrumbs}\n  rows={[\n    {\n      name: 'items',\n      type: 'array[shape]',\n      description:\n        'List of the individual breadcrumb items. { title: string, href: string }',\n    },\n    {\n      name: 'divider',\n      type: 'ReactNode | string',\n      description: 'Used to separate breadcrumb items',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the breadcrumbs',\n    },\n    {\n      name: 'sizes',\n      type: 'object',\n      description: 'Default size options of the breadcrumbs',\n    },\n    {\n      name: 'space',\n      type: 'number | string',\n      description: 'Set the space between breadcrumbs',\n    },\n    {\n      name: 'comparator',\n      type: 'function',\n      description:\n        'Callback function used to determine which breadcrumbs should be displayed',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Breadcrumbs}\n  rows={[\n    {\n      name: 'breadcrumbs-root',\n      description: 'Breadcrumbs List root element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"A breadcrumb trail consists of a list of links to the parent pages of the current page in hierarchical order. It helps users find their place within a website or web application. Breadcrumbs are often placed horizontally before a page's main content."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#breadcrumb",mdxType:"ExitLink"},"Breadcrumb WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <Breadcrumbs\n      divider=\"/\"\n      items={[\n        { title: 'Home', href: '/' },\n        { title: 'Getting Started', href: '/developers/getting-started/' },\n        { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n      ]}\n    />\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Not Applicable',\n      description: 'Not Applicable',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},41123:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"button",category:"Navigation",title:"Button",description:"Used to trigger an action or event, such as submitting a form, opening a dialog, cancelling an action, or performing a delete operation.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1006",pagination_prev:"web/ui/breadcrumbs",pagination_next:"web/ui/link"},s=void 0,d={unversionedId:"web/ui/button",id:"web/ui/button",isDocsHomePage:!1,title:"Button",description:"Used to trigger an action or event, such as submitting a form, opening a dialog, cancelling an action, or performing a delete operation.",source:"@site/docs/web/ui/Button.md",sourceDirName:"web/ui",slug:"/web/ui/button",permalink:"/web/ui/button",tags:[],version:"current",frontMatter:{id:"button",category:"Navigation",title:"Button",description:"Used to trigger an action or event, such as submitting a form, opening a dialog, cancelling an action, or performing a delete operation.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1006",pagination_prev:"web/ui/breadcrumbs",pagination_next:"web/ui/link"},sidebar:"docs",previous:{title:"Breadcrumbs",permalink:"/web/ui/breadcrumbs"},next:{title:"Link",permalink:"/web/ui/link"}},p=[{value:"Size",id:"size",children:[],level:2},{value:"Variant",id:"variant",children:[],level:2},{value:"Inserting Elements",id:"inserting-elements",children:[],level:2},{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Href",id:"href",children:[],level:2},{value:"Disabled Guidance",id:"disabled-guidance",children:[],level:2},{value:"Loading",id:"loading",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Button } from '@abyss/web/ui/Button';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Button',\n  inputs: [\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'solid', value: 'solid' },\n        { label: 'outline', value: 'outline' },\n        { label: 'ghost', value: 'ghost' },\n      ],\n    },\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean'\n    },\n  ],\n}\n\n<Button>Click Here!</Button>\n")),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," prop to change the size of the button. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"16px")," || ",(0,i.kt)("inlineCode",{parentName:"p"},"$md"),". The size prop can take in px, rem, em and the Abyss standardized $sm, $md, and $lg."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Layout.Group>\n    <Button rounded size="$sm">\n      <IconMaterial icon="home" color="$white" />\n    </Button>\n    <Button rounded size="$md">\n      <IconMaterial icon="home" color="$white" />\n    </Button>\n    <Button rounded size="$lg">\n      <IconMaterial icon="home" color="$white" />\n    </Button>\n  </Layout.Group>\n  <Layout.Group>\n    <Button size="$sm">Small</Button>\n    <Button size="$md">Medium</Button>\n    <Button size="$lg">Large</Button>\n  </Layout.Group>\n  <Layout.Group>\n    <Button size="$sm" variant="outline">\n      Small\n    </Button>\n    <Button size="$md" variant="outline">\n      Medium\n    </Button>\n    <Button size="$lg" variant="outline">\n      Large\n    </Button>\n  </Layout.Group>\n</Layout.Stack>\n')),(0,i.kt)("h2",{id:"variant"},"Variant"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," prop to change the visual style of the Button. You can set the value to ",(0,i.kt)("inlineCode",{parentName:"p"},"solid"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"outline")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"ghost"),".\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"solid")," variant is for the principal call to action on the page.\nPrimary buttons should only appear once per screen (not including the application header, modal dialog, or side panel). The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"solid"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Button>Primary Button</Button>\n  <Button variant="outline">Secondary Button</Button>\n  <Button variant="ghost" rounded size="$sm">\n    <IconMaterial icon="home" />\n  </Button>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"inserting-elements"},"Inserting Elements"),(0,i.kt)("p",null,"Insert elements into the Button component using the ",(0,i.kt)("inlineCode",{parentName:"p"},"before")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"after")," props."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isDisabled, setIsDisabled] = useState(true);\n\n  return (\n    <Layout.Stack>\n      <Layout.Group>\n        <Button\n          variant="outline"\n          before={<IconMaterial icon="arrow_back" color="$primary1" />}\n        >\n          Previous\n        </Button>\n        <Button after={<IconMaterial icon="arrow_forward" color="$white" />}>\n          Next\n        </Button>\n      </Layout.Group>\n      <Layout.Group>\n        <Button\n          variant="outline"\n          isDisabled\n          before={\n            <IconMaterial\n              icon="arrow_back"\n              color={isDisabled ? \'$gray5\' : \'$primary1\'}\n            />\n          }\n        >\n          Previous\n        </Button>\n        <Button\n          isDisabled\n          after={\n            <IconMaterial\n              icon="arrow_forward"\n              color={isDisabled ? \'$gray5\' : \'$white\'}\n            />\n          }\n        >\n          Next\n        </Button>\n      </Layout.Group>\n    </Layout.Stack>\n  );\n};\n')),(0,i.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({});\n\n  const onSubmit = (data) => {\n    console.log('Submitted');\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <Button type=\"submit\">Form Submit</Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"usestate"},"useState"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const onSubmit = () => {\n    console.log('Submitted');\n  };\n\n  return <Button onClick={onSubmit}>State Submit</Button>;\n};\n")),(0,i.kt)("h2",{id:"href"},"Href"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"href")," prop to change have the button link away to another page when it is clicked"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Button href="/web/ui/Button/">Href button </Button>\n')),(0,i.kt)("h2",{id:"disabled-guidance"},"Disabled Guidance"),(0,i.kt)("p",null,"It is recommended that a screen reader is provided a ",(0,i.kt)("i",null,"reason")," for a button being in a disabled state. For example if a form submit button is disabled because all fields must have valid inputs before the user is allowed to submit the form, it can be helpful to convey this information so the user understands why the button is disabled. Target the disabled button state with the prop ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled"),", and use the ",(0,i.kt)("inlineCode",{parentName:"p"},"aria-describedby")," attribute and the ",(0,i.kt)("inlineCode",{parentName:"p"},"VisuallyHidden")," component to point to off-screen content that conveys the reason for the disabled state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<React.Fragment>\n  <Button isDisabled aria-describedby="reason-disabled">\n    Submit\n  </Button>\n  <VisuallyHidden id="reason-disabled">\n    The submit button is disabled because form fields have invalid input.\n  </VisuallyHidden>\n</React.Fragment>\n')),(0,i.kt)("h2",{id:"loading"},"Loading"),(0,i.kt)("p",null,"A UI concept which merges the loading spinner indicator into the action that invokes it. Primarily intended for use with forms where it gives users immediate feedback upon pressing submit."),(0,i.kt)("p",null,"To use the Loading Spinner, the ",(0,i.kt)("inlineCode",{parentName:"p"},"ariaLoadingLabel")," prop is required. Be as descriptive as possible when coming up with a description. Common labels are 'Submitting Form', 'Downloading Files', 'Content is loading', etc."),(0,i.kt)("p",null,"When button is passed the ",(0,i.kt)("inlineCode",{parentName:"p"},"ariaLoadingLabel")," prop, it also takes in the ",(0,i.kt)("inlineCode",{parentName:"p"},"isLoading")," attribute to dynamically toggle the Loading Spinner to populate after the text within button."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<Button isLoading={true} ariaLoadingLabel="Downloading Files">\n  Submit\n</Button>\n')),(0,i.kt)("br",null),(0,i.kt)("p",null,"With this feature, the accessibility of spinner changes so when being read by a screen reader, the ",(0,i.kt)(m,{href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions",mdxType:"ExitLink"},"live region")," of the button will be read. Visit the ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/loading-spinner"},"Loading Spinner")," documentation to learn more about this accessibility feature."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const toggleLoading = () => {\n    setIsLoading(!isLoading);\n  };\n\n  const onSubmit = () => {\n    console.log('Submit Clicked');\n  };\n\n  return (\n    <Layout.Group>\n      <Button onClick={toggleLoading}>Toggle Loading</Button>\n      <Button\n        isLoading={isLoading}\n        ariaLoadingLabel=\"Downloading Files\"\n        onClick={onSubmit}\n      >\n        Submit\n      </Button>\n    </Layout.Group>\n  );\n};\n"))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Button}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the button component',\n    },\n    {\n      name: 'variant',\n      type: \"'solid' | 'outline' | 'ghost'\",\n      description: 'Change the button style',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to disable the button',\n    },\n    {\n      name: 'before',\n      type: 'ReactNode',\n      description: 'Insert element into button component before children',\n    },\n    {\n      name: 'after',\n      type: 'ReactNode',\n      description: 'Insert element into button component after children',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the button',\n    },\n    {\n      name: 'sizes',\n      type: 'object',\n      description: 'Default size options',\n    },\n    {\n      name: 'orientation',\n      type: \"'horizontal' | 'vertical'\",\n      description: 'Orientation of the ripple effect on click',\n    },\n    {\n      name: 'href',\n      type: 'string',\n      description: 'Link to route to on click',\n    },\n    {\n      name: 'isLoading',\n      type: 'boolean',\n      description:\n        'Flag to disable/enable loading spinner inside button. \"ariaLoadingLabel\" is required to use \"isLoading\"',\n    },\n    {\n      name: 'isAnimated',\n      type: 'boolean',\n      description: 'Flag to disable/enable ripple effect on button click',\n    },\n    {\n      name: 'ariaLoadingLabel',\n      type: 'string',\n      description:\n        'Text to describe what is happening while the loading spinner is active inside the Button component',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Button}\n  rows={[\n    {\n      name: 'button-root',\n      description: 'Button root element',\n    },\n    {\n      name: 'button-link',\n      description: 'Link element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,'A button is a widget that enables users to trigger an action or event, such as submitting a form, opening a dialog, canceling an action, or performing a delete operation. A common convention for informing users that a button launches a dialog is to append "\u2026" (ellipsis) to the button label, e.g., "Save as\u2026".'),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#button",mdxType:"ExitLink"},"Button WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Button',\n  inputs: [\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'solid', value: 'solid' },\n        { label: 'outline', value: 'outline' },\n        { label: 'ghost', value: 'ghost' },\n      ],\n    },\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean'\n    },\n  ],\n}\n\n<Button>Click Here!</Button>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Space',\n      description: 'Activates the button',\n    },\n    {\n      name: 'Enter',\n      description: 'Activates the button',\n    },\n  ]}\n/>\n")),(0,i.kt)("h3",null,"Disabled Accessibility Guidance"),(0,i.kt)("p",null,"It is recommended that a screen reader is provided a ",(0,i.kt)("i",null,"reason")," for a button being in a disabled state. For example if a form submit button is disabled because all fields must have valid inputs before the user is allowed to submit the form, it can be helpful to convey this information so the user understands why the button is disabled. Target the disabled button state with the prop ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled"),", and use the ",(0,i.kt)("inlineCode",{parentName:"p"},"aria-describedby")," attribute and the ",(0,i.kt)("inlineCode",{parentName:"p"},"VisuallyHidden")," component to point to off-screen content that conveys the reason for the disabled state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<React.Fragment>\n  <Button isDisabled aria-describedby="reason-disabled">\n    Submit\n  </Button>\n  <VisuallyHidden id="reason-disabled">\n    The submit button is disabled because form fields have invalid input.\n  </VisuallyHidden>\n</React.Fragment>\n')),(0,i.kt)("h3",null,"Loading State Button"),(0,i.kt)("p",null,"For a loading state, button pulls in the Loading Spinner component and renders a status message to convey the action of loading without taking focus."),(0,i.kt)("p",null,"Loading Spinner is programmed through the ",(0,i.kt)("inlineCode",{parentName:"p"},"ariaLoadingLabel")," property, and has been tested using a screen reader to present a status message to assistive technology without receiving focus."),(0,i.kt)("p",null,"Following the requirements of WAI-ARIA, Loading Spinner follows the requirements ",(0,i.kt)(m,{href:"https://www.w3.org/WAI/WCAG21/Understanding/status-messages.html",mdxType:"ExitLink"},"4.1.3: Status Messages"),". Status messages are defined by WCAG as messages that provide information on the success or results of a user action, but do not change the users context (i.e. take focus)."),(0,i.kt)("p",null,"The Toggle Loading button below can be used to toggle the loading state of the Submit button for screen readers."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const toggleLoading = () => {\n    setIsLoading(!isLoading);\n  };\n\n  const onSubmit = () => {\n    console.log('Submit Clicked');\n  };\n\n  return (\n    <Layout.Group>\n      <Button onClick={toggleLoading}>Toggle Loading</Button>\n      <Button\n        isLoading={isLoading}\n        ariaLoadingLabel=\"Downloading Files\"\n        onClick={onSubmit}\n      >\n        Submit\n      </Button>\n    </Layout.Group>\n  );\n};\n")),(0,i.kt)("h3",null,"Triggering Elements"),(0,i.kt)("p",null,'Use the aria-haspopup attribute on buttons or other triggering elements that open content like dialogs, listboxes, trees, menus, grids, etc.\xa0 Use a corresponding value that indicates what kind of popup will be displayed when the trigger element is activated. In turn, the element that pops up must be of the role indicated. For example use aria-haspop="dialog" on buttons that open modal dialogs. Be sure to include role="dialog" on the containing element of the dialog itself, too.'),(0,i.kt)("p",null,"See the docs on 'haspop' for more details:",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-haspopup"},"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-haspopup"),"\naria-haspopup - Accessibility | MDN\nThe aria-haspopup attribute indicates the availability and type of interactive popup element that can be triggered by the element on which the attribute is set.")))}h.isMDXComponent=!0},88151:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"card",category:"Content",title:"Card",description:"A single or multi-section container used to display content related to a single subject.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1181",pagination_prev:"web/ui/accordion",pagination_next:"web/ui/carousel"},d=void 0,p={unversionedId:"web/ui/card",id:"web/ui/card",isDocsHomePage:!1,title:"Card",description:"A single or multi-section container used to display content related to a single subject.",source:"@site/docs/web/ui/Card.md",sourceDirName:"web/ui",slug:"/web/ui/card",permalink:"/web/ui/card",tags:[],version:"current",frontMatter:{id:"card",category:"Content",title:"Card",description:"A single or multi-section container used to display content related to a single subject.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1181",pagination_prev:"web/ui/accordion",pagination_next:"web/ui/carousel"},sidebar:"docs",previous:{title:"Accordion",permalink:"/web/ui/accordion"},next:{title:"Carousel",permalink:"/web/ui/carousel"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Section",id:"section",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Collapse",id:"collapse",children:[],level:2},{value:"Inner Card",id:"inner-card",children:[],level:2},{value:"Sticky",id:"sticky",children:[],level:2},{value:"Custom Examples",id:"custom-examples",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Card } from '@abyss/web/ui/Card';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Card',\n  inputs: [\n    {\n      prop: 'header',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'select',\n      options: [\n        { label: 'medium', value: 'medium' },\n        { label: 'small', value: 'small' },\n      ],\n    },\n    {\n      prop: 'collapse',\n      type: 'boolean',\n    },\n  ]\n}\n\n<Card header=\"Hello Title\">\n  <Card.Section>\n    Hello section\n  </Card.Section>\n</Card>\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Card>\n  <Box color="$white">\n    <Label>Here\'s a base card container</Label>\n    <Text>Wrapping any component</Text>\n  </Box>\n</Card>\n')),(0,r.kt)("h2",{id:"section"},"Section"),(0,r.kt)("p",null,"Card can be implemented with any combination of sections."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  return (\n    <Card header="Hello title">\n      <Card.Section>Hello section</Card.Section>\n      <Card.Section>Hello section</Card.Section>\n    </Card>\n  );\n};\n')),(0,r.kt)("h2",{id:"size"},"Size"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," property to make the card size smaller, The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"medium"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  return (\n    <Layout.Group>\n      <Card header="Medium Size Card">\n        <Card.Section>\n          A card can be used to display content related to a single subject. The\n          content can consist of multiple elements of varying types and sizes.\n        </Card.Section>\n      </Card>\n      <Card size="small" header="Small Size Card">\n        <Card.Section>\n          A card can be used to display content related to a single subject. The\n          content can consist of multiple elements of varying types and sizes.\n        </Card.Section>\n      </Card>\n    </Layout.Group>\n  );\n};\n')),(0,r.kt)("h2",{id:"collapse"},"Collapse"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"collapse")," prop to make card component collapsible. The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". See ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/collapse-provider"},"CollapseProvider")," for collapsing and expanding multiple cards in unison."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  return (\n    <Card header="Card Collapse" collapse>\n      <Card.Section>\n        A card can be used to display content related to a single subject. The\n        content can consist of multiple elements of varying types and sizes.\n      </Card.Section>\n    </Card>\n  );\n};\n')),(0,r.kt)("h2",{id:"inner-card"},"Inner Card"),(0,r.kt)("p",null,"Cards can be nesting within one another to further break down the content."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <Card header=\"Standard Card\">\n      <Card.Section>\n        <Card\n          header=\"Inner Card\"\n          css={{\n            'abyss-card-title': {\n              minHeight: 60,\n              color: '$gray9',\n              fontSize: '$sm',\n            },\n          }}\n        >\n          <Card.Section\n            css={{ 'abyss-card-section': { color: '$gray9', fontSize: '$sm' } }}\n          >\n            A card can be used to display content related to a single subject.\n            The content can consist of multiple elements of varying types and\n            sizes.\n          </Card.Section>\n        </Card>\n        <Card\n          header=\"Inner Card\"\n          css={{\n            'abyss-card-title': {\n              minHeight: 60,\n              color: '$gray9',\n              fontSize: '$sm',\n            },\n          }}\n        >\n          <Card.Section\n            css={{ 'abyss-card-section': { color: '$gray9', fontSize: '$sm' } }}\n          >\n            A card can be used to display content related to a single subject.\n            The content can consist of multiple elements of varying types and\n            sizes.\n          </Card.Section>\n        </Card>\n      </Card.Section>\n    </Card>\n  );\n};\n")),(0,r.kt)("h2",{id:"sticky"},"Sticky"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"FloatingSection")," component to create a sticky section. Sticky sections will not work when ",(0,r.kt)("inlineCode",{parentName:"p"},"collapse")," is active."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n    },\n    {\n      title: 'Open New Tab',\n      onClick: () => {\n        console.log('Open New Tab!');\n      },\n    },\n    {\n      title: 'Save As...',\n      onClick: () => {\n        console.log('Save As...');\n      },\n      icon: <IconMaterial icon=\"save\" />,\n    },\n  ];\n  const form = useForm({});\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  const options = [\n    { value: 'react', label: 'React' },\n    { value: 'ng', label: 'Angular' },\n    { value: 'svelte', label: 'Svelte' },\n    { value: 'vue', label: 'Vue' },\n    { value: 'alpine', label: 'Alpine' },\n    { value: 'ember', label: 'Ember' },\n    { value: 'stimulus', label: 'Stimulus' },\n    { value: 'preact', label: 'Preact' },\n  ];\n\n  const Header = (\n    <div\n      style={{\n        width: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n      }}\n    >\n      Fill Out Form\n      <DropdownMenu\n        hideLabel\n        label=\"Options\"\n        after={<IconMaterial icon=\"more_vert\" />}\n        menuItems={menuItems}\n      />\n    </div>\n  );\n\n  return (\n    <Card header={Header}>\n      <Card.Section>\n        <FormProvider state={form} onSubmit={onSubmit} highlighted>\n          <Layout.Stack alignItems=\"left\" grow>\n            <SelectInput\n              label=\"Select List Usage\"\n              model=\"selectlist\"\n              placeholder=\"Select List Form Provider\"\n              options={options}\n              validators={{ required: true }}\n            />\n            <SelectInputMulti\n              label=\"Your favorite framework/library\"\n              placeholder=\"Pick one\"\n              model=\"frameworks\"\n              isSearchable\n              options={options}\n              validators={{ required: true }}\n            />\n            <DateInput model=\"test-date\" validators={{ required: true }} />\n            <TextInput\n              label=\"TextInput Form\"\n              placeholder=\"Form\"\n              model=\"textForm\"\n              isClearable\n              validators={{ required: true }}\n            />\n            <DateInputRange\n              model=\"test-form-date\"\n              validators={{ required: true }}\n            />\n            <TextInputArea\n              label=\"TextInputArea\"\n              model=\"textAreaForm\"\n              validators={{ required: true }}\n            />\n          </Layout.Stack>\n        </FormProvider>\n      </Card.Section>\n      <FloatingSection\n        css={{\n          'abyss-floating-section-root': {\n            minHeight: '72px',\n            display: 'flex',\n            alignItems: 'center',\n            padding: '$md',\n            justifyContent: 'space-around',\n          },\n        }}\n      >\n        <DropdownMenu\n          hideLabel\n          label=\"Options\"\n          after={<IconMaterial icon=\"more_horiz\" />}\n          menuItems={menuItems}\n        />\n        <Divider orientation=\"vertical\" height={40} color=\"$gray3\" />\n        <Link\n          onClick={() => {\n            console.log('Delete Section!');\n          }}\n        >\n          <IconMaterial icon=\"delete_forever\" />\n        </Link>\n        <Divider orientation=\"vertical\" height={40} color=\"$gray3\" />\n        <Button\n          onClick={() => {\n            form.reset();\n          }}\n        >\n          Reset\n        </Button>\n      </FloatingSection>\n    </Card>\n  );\n};\n")),(0,r.kt)("h2",{id:"custom-examples"},"Custom Examples"),(0,r.kt)("p",null,"Customize a card by adding components inside of a section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  return (\n    <Card collapse header="Word of the Day">\n      <Card.Section>\n        <IconMaterial icon="home" size={48} />\n        <Heading size="lg" fontWeight="bold">\n          be-nev-o-lent\n        </Heading>\n        <Text>Adjective</Text>\n        <br />\n        <Text size="sm">well meaning and kindly. "a benevolent smile"</Text>\n      </Card.Section>\n      <Card.Section>\n        <Link>Learn More</Link>\n      </Card.Section>\n    </Card>\n  );\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  return (\n    <Card\n      css={{\n        \'abyss-card-root\': {\n          width: \'max-content\',\n        },\n      }}\n    >\n      <Card.Section\n        css={{\n          \'abyss-card-section\': {\n            padding: \'0px\',\n          },\n        }}\n      >\n        <Box\n          height="300px"\n          width="342px"\n          padding="0px"\n          css={{\n            \'abyss-box-root\': {\n              backgroundImage: `url(${utils.useBaseUrl(\n                \'img/graphics/card-image-example.png\'\n              )})`,\n              backgroundRepeat: \'no-repeat\',\n              backgroundSize: \'cover\',\n            },\n          }}\n        />\n      </Card.Section>\n      <Card.Section>\n        <Layout.Group space={20}>\n          <IconMaterial icon="star" size={75} />\n          <Layout.Stack alignItems="left">\n            <Text size="md" fontWeight="$semibold">\n              Card Title\n            </Text>\n            <Text size="sm" fontWeight="$normal" color="$gray7">\n              Card Description\n            </Text>\n          </Layout.Stack>\n        </Layout.Group>\n      </Card.Section>\n      <Card.Section\n        css={{\n          \'abyss-card-section\': { padding: \'$sm 0\' },\n        }}\n      >\n        <Layout.Group\n          css={{\n            \'abyss-layout-group\': {\n              justifyContent: \'space-evenly\',\n            },\n          }}\n        >\n          <Link\n            onClick={() => {\n              console.log(\'Bookmark Section!\');\n            }}\n          >\n            <IconMaterial icon="bookmark" />\n          </Link>\n          <Divider\n            orientation="vertical"\n            height={40}\n            color="$gray3"\n            margin="0"\n          />\n          <Link\n            onClick={() => {\n              console.log(\'Delete Section!\');\n            }}\n          >\n            <IconMaterial icon="delete_forever" />\n          </Link>\n          <Divider\n            orientation="vertical"\n            height={40}\n            color="$gray3"\n            margin="0"\n          />\n          <Link\n            onClick={() => {\n              console.log(\'Edit Section!\');\n            }}\n          >\n            <IconMaterial icon="edit" />\n          </Link>\n        </Layout.Group>\n      </Card.Section>\n    </Card>\n  );\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Card}\n  rows={[\n    {\n      name: 'fullHeight',\n      type: 'boolean',\n      description: 'Flag to set card to full height',\n    },\n    {\n      name: 'header',\n      type: 'String | ReactNode',\n      description: 'Header of card component',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'Text for the main card component',\n    },\n    {\n      name: 'size',\n      type: \"'medium' | 'small'\",\n      description: 'Size of card component',\n    },\n    {\n      name: 'collapse',\n      type: 'boolean',\n      description: 'To make card collapsible',\n    },\n    {\n      name: 'defaultIsOpen',\n      type: 'boolean',\n      description: 'Set the default collapse state when collapse is active',\n    },\n    {\n      name: 'isOpen',\n      type: 'boolean',\n      description: 'Control state of collapse',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Card.Section}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Card component',\n    },\n    {\n      name: 'backgroundColor',\n      type: 'string',\n      description: 'Set the background color of the card',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Card.Header}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Card component',\n    },\n    {\n      name: 'fullHeight',\n      type: 'boolean',\n      description: 'Flag to set card to full height',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the card content',\n    },\n    {\n      name: 'backgroundColor',\n      type: 'string',\n      description: 'Set the background color of the card',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Card}\n  rows={[\n    {\n      name: 'card-root',\n      description: 'Card root element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Card.Section}\n  rows={[\n    {\n      name: 'card-section',\n      description: 'Card body element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Card.Header}\n  rows={[\n    {\n      name: 'card-title',\n      description: 'Card header element',\n    },\n    {\n      name: 'card-collapse-button-container',\n      description: 'Card collapse button container',\n    },\n    {\n      name: 'card-collapse-button',\n      description: 'Card collapse button',\n    },\n    {\n      name: 'card-collapse-button-icon',\n      description: 'Card collapse button icon',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},6048:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"carousel",category:"Content",title:"Carousel",description:"Displays information through a series of slides.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3578%3A23477",pagination_prev:"web/ui/card",pagination_next:"web/ui/drag-and-drop"},s=void 0,d={unversionedId:"web/ui/carousel",id:"web/ui/carousel",isDocsHomePage:!1,title:"Carousel",description:"Displays information through a series of slides.",source:"@site/docs/web/ui/Carousel.md",sourceDirName:"web/ui",slug:"/web/ui/carousel",permalink:"/web/ui/carousel",tags:[],version:"current",frontMatter:{id:"carousel",category:"Content",title:"Carousel",description:"Displays information through a series of slides.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3578%3A23477",pagination_prev:"web/ui/card",pagination_next:"web/ui/drag-and-drop"},sidebar:"docs",previous:{title:"Card",permalink:"/web/ui/card"},next:{title:"DragAndDrop",permalink:"/web/ui/drag-and-drop"}},p=[{value:"Usage",id:"usage",children:[],level:2},{value:"No Loop",id:"no-loop",children:[],level:2},{value:"Autoplay",id:"autoplay",children:[{value:"Autoplay Delay",id:"autoplay-delay",children:[],level:3}],level:2},{value:"SlidesPerView",id:"slidesperview",children:[],level:2},{value:"Compact",id:"compact",children:[],level:2},{value:"Color Variants",id:"color-variants",children:[],level:2},{value:"Heading Level",id:"heading-level",children:[],level:2},{value:"Slides",id:"slides",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Carousel } from '@abyss/web/ui/Carousel';\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"render(() => {\n  const content = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.`;\n\n  const src = utils.useBaseUrl('img/graphics/carousel/pillsMd.png');\n\n  const slides = Array.from(Array(4).keys()).map((i) => {\n    return (\n      <Slide height=\"300px\">\n        <img src={src} style={{ height: '300px' }} alt=\"bottle of pills\" />\n        <Slide.Container>\n          <Slide.Title>Title {i + 1}</Slide.Title>\n          <Slide.Content>{content}</Slide.Content>\n          <Slide.Button href=\"https://www.google.com\">Primary</Slide.Button>\n        </Slide.Container>\n      </Slide>\n    );\n  });\n\n  return (\n    <Carousel\n      slides={slides}\n      autoplay\n      prevSlideOnClick={() => console.log('previous slide button clicked')}\n      nextSlideOnClick={() => console.log('next slide button clicked')}\n    />\n  );\n});\n")),(0,i.kt)("h2",{id:"no-loop"},"No Loop"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"noLoop")," property to set whether the slides should loop to the start. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'render(() => {\n  const content = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.`;\n\n  const src = utils.useBaseUrl(\'img/graphics/carousel/pillsMd.png\');\n\n  const slides = Array.from(Array(4).keys()).map((i) => {\n    return (\n      <Slide height="300px">\n        <img src={src} style={{ height: \'300px\' }} alt="bottle of pills" />\n        <Slide.Container>\n          <Slide.Title>Title {i + 1}</Slide.Title>\n          <Slide.Content>{content}</Slide.Content>\n          <Slide.Button href="https://www.google.com">Primary</Slide.Button>\n        </Slide.Container>\n      </Slide>\n    );\n  });\n\n  return <Carousel slides={slides} noLoop />;\n});\n')),(0,i.kt)("h2",{id:"autoplay"},"Autoplay"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"autoplay")," property to initialize the carousel's autoplay. The slides will cycle at a consistent pace until paused. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'render(() => {\n  const content = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.`;\n\n  const src = utils.useBaseUrl(\'img/graphics/carousel/pillsMd.png\');\n\n  const slides = Array.from(Array(4).keys()).map((i) => {\n    return (\n      <Slide height="300px">\n        <img src={src} style={{ height: \'300px\' }} alt="bottle of pills" />\n        <Slide.Container>\n          <Slide.Title>Title {i + 1}</Slide.Title>\n          <Slide.Content>{content}</Slide.Content>\n          <Slide.Button href="https://www.google.com">Primary</Slide.Button>\n        </Slide.Container>\n      </Slide>\n    );\n  });\n\n  return <Carousel slides={slides} autoplay />;\n});\n')),(0,i.kt)("h3",{id:"autoplay-delay"},"Autoplay Delay"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"autoplayDelay")," property to set the delay between slide transitions when ",(0,i.kt)("inlineCode",{parentName:"p"},"autoplay")," is on. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"3000")," ms. For accessibility purposes the minimum value allowed is 3 seconds."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'render(() => {\n  const content = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.`;\n\n  const src = utils.useBaseUrl(\'img/graphics/carousel/pillsMd.png\');\n\n  const slides = Array.from(Array(4).keys()).map((i) => {\n    return (\n      <Slide height="300px">\n        <img src={src} style={{ height: \'300px\' }} alt="bottle of pills" />\n        <Slide.Container>\n          <Slide.Title>Title {i + 1}</Slide.Title>\n          <Slide.Content>{content}</Slide.Content>\n          <Slide.Button href="https://www.google.com">Primary</Slide.Button>\n        </Slide.Container>\n      </Slide>\n    );\n  });\n\n  return <Carousel slides={slides} autoplay autoplayDelay={5000} />;\n});\n')),(0,i.kt)("h2",{id:"slidesperview"},"SlidesPerView"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"slidesPerView")," property to change how many slides are viewed at one time. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'render(() => {\n  const content = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.`;\n\n  const src = utils.useBaseUrl(\'img/graphics/carousel/pillsMd.png\');\n\n  const slides = Array.from(Array(4).keys()).map((i) => {\n    return (\n      <Slide height="300px">\n        <Slide.Container>\n          <Slide.Title>Title {i + 1}</Slide.Title>\n          <Slide.Content>{content}</Slide.Content>\n          <Slide.Button href="https://www.google.com">Primary</Slide.Button>\n        </Slide.Container>\n      </Slide>\n    );\n  });\n  return <Carousel slidesPerView={2} slides={slides} />;\n});\n')),(0,i.kt)("h2",{id:"compact"},"Compact"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"compact")," property to make the carousel smaller. The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'render(() => {\n  const content = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.`;\n\n  const src = utils.useBaseUrl(\'img/graphics/carousel/pillsMd.png\');\n\n  const slides = Array.from(Array(2).keys()).map((i) => {\n    return (\n      <Slide height="300px" compact>\n        <Slide.Container>\n          <Slide.Title>Title {i + 1}</Slide.Title>\n          <Slide.Content>{content}</Slide.Content>\n          <Slide.Button href="https://www.google.com">Primary</Slide.Button>\n        </Slide.Container>\n      </Slide>\n    );\n  });\n  return <Carousel compact slides={slides} />;\n});\n')),(0,i.kt)("h2",{id:"color-variants"},"Color Variants"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," property to set the color variant of the carousel. The options are ",(0,i.kt)("inlineCode",{parentName:"p"},"default"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"white"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"primary"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"secondary"),". The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"default"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"render(() => {\n  const content = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore.`;\n  const src = utils.useBaseUrl('img/graphics/carousel/pillsMd.png');\n  const variants = ['default', 'white', 'primary', 'secondary'];\n  const slides = variants.map((variant) => {\n    return Array.from(Array(2).keys()).map((i) => {\n      return (\n        <Slide height=\"300px\" variant={variant} compact>\n          <Slide.Container>\n            <Slide.Title>Title {i + 1}</Slide.Title>\n            <Slide.Content>{content}</Slide.Content>\n            <Slide.Button href=\"https://www.google.com\">Primary</Slide.Button>\n          </Slide.Container>\n        </Slide>\n      );\n    });\n  });\n  return (\n    <Grid columns={2}>\n      <Grid.Col>\n        <Layout.Stack space={20}>\n          <Carousel compact variant={'default'} slides={slides[0]} />\n          <Carousel compact variant={'white'} slides={slides[1]} />\n        </Layout.Stack>\n      </Grid.Col>\n      <Grid.Col>\n        <Layout.Stack space={20}>\n          <Carousel compact variant={'primary'} slides={slides[2]} />\n          <Carousel compact variant={'secondary'} slides={slides[3]} />\n        </Layout.Stack>\n      </Grid.Col>\n    </Grid>\n  );\n});\n")),(0,i.kt)("h2",{id:"heading-level"},"Heading Level"),(0,i.kt)("p",null,"You can set the heading level of the title by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"headingLevel")," prop. The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"h3"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'render(() => {\n  const content = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.`;\n\n  const src = utils.useBaseUrl(\'img/graphics/carousel/pillsMd.png\');\n\n  const slides = Array.from(Array(4).keys()).map((i) => {\n    return (\n      <Slide height="300px">\n        <img src={src} style={{ height: \'300px\' }} alt="bottle of pills" />\n        <Slide.Container>\n          <Slide.Title headingLevel="h4">Title {i + 1}</Slide.Title>\n          <Slide.Content>{content}</Slide.Content>\n          <Slide.Button href="https://www.google.com">Primary</Slide.Button>\n        </Slide.Container>\n      </Slide>\n    );\n  });\n\n  return <Carousel slides={slides} autoplay />;\n});\n')),(0,i.kt)("h2",{id:"slides"},"Slides"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"slides")," prop to set custom slides for the carousel."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const data = [\n  {\n    title: 'Go Paperless!',\n    content:\n      'Get most commercial claim letters online and stop receiving paper....',\n    link: 'Watch',\n    to: 'https://www.google.com',\n    icon: 'clipboard',\n  },\n  {\n    title: 'Provider Relief Funding',\n    content:\n      'As part of the CARES Act, UnitedHealth Group is helping HHS distribute $3 billion in immediate relief funding...',\n    link: 'Get More Information',\n    to: 'https://www.google.com',\n    icon: 'cost',\n  },\n];\n\nconst SlideWrapper = styled('div', {\n  display: 'flex',\n  flexDirection: 'row',\n  width: '100%',\n  height: 225,\n  overflow: 'hidden',\n  borderWidth: 1,\n  borderStyle: 'solid',\n  borderColor: '$gray4',\n});\n\nconst ImageContent = styled('div', {\n  flex: '0 0 35%',\n  maxWidth: '35%',\n  display: 'block',\n  boxSizing: 'border-box',\n  position: 'relative',\n  backgroundColor: 'white',\n});\n\nconst ImageWrapper = styled('div', {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n});\n\nconst ContentWrapper = styled('div', {\n  flex: '1 1 0%',\n  display: 'block',\n  boxSizing: 'border-box',\n  padding: 25,\n  borderLeftWidth: 1,\n  borderStyle: 'solid',\n  borderColor: '$gray4',\n  backgroundColor: '$tint2',\n  alignContent: 'flex-start',\n});\n\nconst Title = styled('h3', {\n  paddingBottom: 10,\n  fontSize: 26,\n  lineHeight: '26px',\n  color: '$primary1',\n  fontWeight: 'bold',\n});\n\nconst Content = styled('div', {\n  paddingBottom: 10,\n  paddingRight: 30,\n  fontSize: 15,\n  lineHeight: 1.5,\n  maxHeight: 100,\n  overflow: 'hidden',\n});\n\nconst slides = data.map((item, index) => (\n  <SlideWrapper key={index}>\n    <ImageContent>\n      <ImageWrapper>\n        <IconBrand size={150} icon={item.icon} />\n      </ImageWrapper>\n    </ImageContent>\n    <ContentWrapper>\n      <Title>{item.title}</Title>\n      <Content>{item.content}</Content>\n      <Link href={item.to}>{item.link}</Link>\n    </ContentWrapper>\n  </SlideWrapper>\n));\n\nrender(() => {\n  return <Carousel slides={slides} />;\n});\n"))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Carousel}\n  rows={[\n    {\n      name: 'slides',\n      type: 'array[node]',\n      description: 'Each individual slide node stored in an array',\n    },\n    {\n      name: 'slidesPerView',\n      type: 'number',\n      description: 'Number of slides',\n    },\n    {\n      name: 'autoplay',\n      type: 'boolean',\n      description: 'Indicate whether autoplay is active',\n    },\n    {\n      name: 'loop',\n      type: 'boolean',\n      description: 'Indicate whether the slides should be looped',\n    },\n    {\n      name: 'compact',\n      type: 'boolean',\n      description: 'Shrinks the Carousel to 400px width',\n    },\n    {\n      name: 'variant',\n      type: \"'default' | 'white' | 'primary' | 'secondary'\",\n      description: 'Applies a color theme to the carousel',\n    },\n    {\n      name: 'autoplayDelay',\n      type: 'number',\n      description: 'Delay between slide transitions when autoplay is active',\n    },\n    {\n      name: 'prevSlideOnClick',\n      type: 'function',\n      description: 'Callback fired when previous slide nav button is clicked',\n    },\n    {\n      name: 'nextSlideOnClick',\n      type: 'function',\n      description: 'Callback fired when next slide nav button is clicked',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Slide}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The children node of the SwiperSlide.container',\n    },\n    {\n      name: 'compact',\n      type: 'boolean',\n      description: 'Shrinks the container to 400px width',\n    },\n    {\n      name: 'height',\n      type: 'number | string',\n      description: 'Controls the height of the slide',\n    },\n    {\n      name: 'variant',\n      type: \"'default' | 'white' | 'primary' | 'secondary'\",\n      description: 'Applies a color theme to the carousel',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Slide.Title}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The children node of the SwiperSlide.Title',\n    },\n    {\n      name: 'headingLevel',\n      type: \"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\",\n      description: 'Set the heading level of the title',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Slide.Content}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The children node of the SwiperSlide.Content',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Slide.Button}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The children node of the SwiperSlide.Button',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Slide.Container}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The children node of the SwiperSlide.ContentWrapper',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Carousel}\n  rows={[\n    {\n      name: 'carousel-root',\n      description: 'Carousel root element',\n    },\n    {\n      name: 'carousel-swiper-container',\n      description: 'Swiper container',\n    },\n    {\n      name: 'carousel-swiper',\n      description: 'Swiper element',\n    },\n    {\n      name: 'carousel-slide-container',\n      description: 'Carousel slide container',\n    },\n    {\n      name: 'carousel-nav-container-left',\n      description: 'Left nav container',\n    },\n    {\n      name: 'carousel-nav-icon-left',\n      description: 'Left nav icon',\n    },\n    {\n      name: 'carousel-nav-container-right',\n      description: 'Right nav container',\n    },\n    {\n      name: 'carousel-nav-icon-right',\n      description: 'Right nav icon',\n    },\n    {\n      name: 'carousel-controls',\n      description: 'Carousel controls',\n    },\n    {\n      name: 'carousel-pagination-container',\n      description: 'Pagination buttons container',\n    },\n    {\n      name: 'carousel-pagination',\n      description: 'Pagination buttons',\n    },\n    {\n      name: 'carousel-play-pause-button',\n      description: 'Play and pause button',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Slide}\n  rows={[\n    {\n      name: 'slide-container',\n      description: 'Slide container element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Slide.Title}\n  rows={[\n    {\n      name: 'slide-title',\n      description: 'Slide title element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Slide.Content}\n  rows={[\n    {\n      name: 'slide-content',\n      description: 'Slide content element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Slide.Button}\n  rows={[\n    {\n      name: 'slide-button',\n      description: 'Slide button element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Slide.Container}\n  rows={[\n    {\n      name: 'slide-content-wrapper',\n      description: 'Wraps the title, content, and button elements',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,'A carousel presents a set of items, referred to as slides, by sequentially displaying a subset of one or more slides. Typically, one slide is displayed at a time, and users can activate a next or previous slide control that hides the current slide and "rotates" the next or previous slide into view. In some implementations, rotation automatically starts when the page loads, and it may also automatically stop once all the slides have been displayed. While a slide may contain any type of content, image carousels where each slide contains nothing more than a single image are common.'),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#carousel",mdxType:"ExitLink"},"Carousel WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'render(() => {\n  const content = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.`;\n\n  const src = utils.useBaseUrl(\'img/graphics/carousel/pillsMd.png\');\n\n  const slides = Array.from(Array(4).keys()).map((i) => {\n    return (\n      <Slide height="300px">\n        <img src={src} style={{ height: \'300px\' }} alt="bottle of pills" />\n        <Slide.Container>\n          <Slide.Title>Title {i + 1}</Slide.Title>\n          <Slide.Content>{content}</Slide.Content>\n          <Slide.Button href="https://www.google.com">Primary</Slide.Button>\n        </Slide.Container>\n      </Slide>\n    );\n  });\n\n  return <Carousel slides={slides} autoplay />;\n});\n')),(0,i.kt)("h1",{id:"autoplay-delay-1"},"Autoplay Delay"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"autoplayDelay")," property to set the delay between slide transitions when ",(0,i.kt)("inlineCode",{parentName:"p"},"autoplay")," is on. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"3000")," ms. For accessibility purposes the minimum value allowed is 3 seconds."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'render(() => {\n  const content = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.`;\n\n  const src = utils.useBaseUrl(\'img/graphics/carousel/pillsMd.png\');\n\n  const slides = Array.from(Array(4).keys()).map((i) => {\n    return (\n      <Slide height="300px">\n        <img src={src} style={{ height: \'300px\' }} alt="bottle of pills" />\n        <Slide.Container>\n          <Slide.Title>Title {i + 1}</Slide.Title>\n          <Slide.Content>{content}</Slide.Content>\n          <Slide.Button href="https://www.google.com">Primary</Slide.Button>\n        </Slide.Container>\n      </Slide>\n    );\n  });\n\n  return <Carousel slides={slides} autoplay autoplayDelay={5000} />;\n});\n')),(0,i.kt)("h1",{id:"autoplay-pausing"},"Autoplay Pausing"),(0,i.kt)("p",null,"All motion must pause as soon as a user hovers over the carousel with their pointer OR any part of the carousel receives focus via keyboard/tab or pointer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'render(() => {\n  const content = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.`;\n\n  const src = utils.useBaseUrl(\'img/graphics/carousel/pillsMd.png\');\n\n  const slides = Array.from(Array(4).keys()).map((i) => {\n    return (\n      <Slide height="300px">\n        <img src={src} style={{ height: \'300px\' }} alt="bottle of pills" />\n        <Slide.Container>\n          <Slide.Title>Title {i + 1}</Slide.Title>\n          <Slide.Content>{content}</Slide.Content>\n          <Slide.Button href="https://www.google.com">Primary</Slide.Button>\n        </Slide.Container>\n      </Slide>\n    );\n  });\n\n  return <Carousel slides={slides} autoplay />;\n});\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab and Shift + Tab',\n      description:\n        'Move focus through the interactive elements of the carousel as specified by the page tab sequence -- scripting for Tab is not necessary',\n    },\n    {\n      name: 'Button',\n      description:\n        'Button elements implement the keyboard interaction defined in the button pattern. Note: Activating the rotation control, next slide, and previous slide do not move focus, so users may easily repetitively activate them as many times as desired',\n    },\n    {\n      name: 'Rotation Control',\n      description:\n        'If present, the rotation control is the first element in the Tab sequence inside the carousel. It is essential that it precede the rotating content so it can be easily located',\n    },\n    {\n      name: 'Tab elements',\n      description:\n        'If tab elements are used for slide picker controls, they implement the keyboard interaction defined in the Tabs Pattern',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},88363:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"checkbox",category:"Forms",title:"Checkbox",description:"Used to mark an option as true/checked or false/not checked.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=506%3A11843",pagination_prev:"web/ui/progress-bar",pagination_next:"web/ui/checkbox-group"},s=void 0,d={unversionedId:"web/ui/checkbox",id:"web/ui/checkbox",isDocsHomePage:!1,title:"Checkbox",description:"Used to mark an option as true/checked or false/not checked.",source:"@site/docs/web/ui/Checkbox.md",sourceDirName:"web/ui",slug:"/web/ui/checkbox",permalink:"/web/ui/checkbox",tags:[],version:"current",frontMatter:{id:"checkbox",category:"Forms",title:"Checkbox",description:"Used to mark an option as true/checked or false/not checked.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=506%3A11843",pagination_prev:"web/ui/progress-bar",pagination_next:"web/ui/checkbox-group"},sidebar:"docs",previous:{title:"ProgressBar",permalink:"/web/ui/progress-bar"},next:{title:"CheckboxGroup",permalink:"/web/ui/checkbox-group"}},p=[{value:"States",id:"states",children:[],level:2},{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Checkbox } from '@abyss/web/ui/Checkbox';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Checkbox',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'isIndeterminate',\n      type: 'boolean',\n    },\n  ]\n}\n\n() => {\n  const [isChecked, setChecked] = useState(true);\n\n  return (\n    <Checkbox\n      label=\"I agree\"\n      isChecked={isChecked}\n      onChange={e => setChecked(e.target.checked)}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"states"},"States"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"Default")," - The default checkbox is unchecked."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"isChecked")," - Use the `isChecked` prop to mark a checkbox as checked."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"Indeterminate")," - Use the `indeterminate` prop to set the checkbox as indeterminate, which overrides the `checked` prop."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"Disabled")," - Use the `isDisabled` prop to disable a checkbox. A disabled checkbox is unusable and un-clickable."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"Subtext")," - Use the `subText` prop to insert helpful text below the checkbox."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"Error Message")," - Use the `errorMessage` prop to display a custom error message below the checkbox."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"Hidden Label")," - Use the `hideLabel` prop to hide the label but retain screen reader accessibility.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      indeterminate: true,\n      \'indeterminate-disabled\': true,\n      disabledchecked: true,\n    },\n  });\n  const [isChecked, setChecked] = useState(true);\n\n  return (\n    <FormProvider state={form}>\n      <Checkbox label="Default Checkbox" />\n      <Checkbox label="Checked Checkbox" isChecked={isChecked} />\n      <Checkbox\n        label="Indeterminate Checkbox"\n        model="indeterminate"\n        isIndeterminate\n      />\n      <Checkbox label="Disabled Checkbox" model="disabled" isDisabled />\n      <Checkbox\n        label="Disabled Checked Checkbox"\n        model="disabledchecked"\n        isChecked\n        isDisabled\n      />\n      <Checkbox\n        label="Disabled Indeterminate Checkbox"\n        model="indeterminate-disabled"\n        isIndeterminate\n        isDisabled\n      />\n      <Checkbox label="Checkbox with Subtext" subText="Subtext Message" />\n      <Checkbox label="Checkbox with Error" errorMessage="Error Message" />\n      <Checkbox\n        label="Hidden Label"\n        subText="Hidden Label (and subtext)"\n        hideLabel\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <Checkbox\n        label="Form Checkbox"\n        model="form-checkbox"\n        validators={{ required: true }}\n      />\n      <Button type="submit" size="$sm" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"usestate"},"useState"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isChecked, setChecked] = useState(true);\n\n  return (\n    <Checkbox\n      label="State Checkbox"\n      isChecked={isChecked}\n      onChange={(e) => setChecked(e.target.checked)}\n    />\n  );\n};\n')),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," prop to set the height/width of the checkbox, default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"md"),". Can use predefined sizes or custom number to set size."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <Checkbox label="xs checkbox" size="xs" model="size-xs" />\n      <Checkbox label="sm checkbox" size="sm" model="size-sm" />\n      <Checkbox label="md checkbox" model="size-md" />\n      <Checkbox label="lg checkbox" size="lg" model="size-lg" />\n      <Checkbox label="xl checkbox" size="xl" model="size-xl" />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isChecked, setChecked] = React.useState(false);\n\n  return (\n    <Checkbox\n      isChecked={isChecked}\n      onChange={(e) => setChecked(e.target.checked)}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    />\n  );\n};\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Checkbox}\n  rows={[\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired everytime the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    {\n      name: 'isChecked',\n      type: 'boolean',\n      description: 'Flag to turn checkbox on or off',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Label of the checkbox',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'validators',\n      type: 'object',\n      description: 'Rules for checkbox validation',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Height and width of the checkbox',\n    },\n    {\n      name: 'sizes',\n      type: 'object',\n      description: 'Set size options of the checkbox',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the checkbox. If true, the checkbox will be disabled',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the checkbox component',\n    },\n    {\n      name: 'isIndeterminate',\n      type: 'boolean',\n      description: 'Set the checkbox to indeterminate or not',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Set the subtext displayed below the checkbox',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Set the error message displayed below the checkbox',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the checkbox',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description: 'Value of checkbox',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Checkbox}\n  rows={[\n    {\n      name: 'checkbox-root',\n      description: 'Checkbox root element',\n    },\n    {\n      name: 'checkbox',\n      description: 'Checkbox input element',\n    },\n    {\n      name: 'checkbox-icon',\n      description: 'Icon element',\n    },\n    {\n      name: 'checkbox-label',\n      description: 'Label element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},"WAI-ARIA supports two types of checkbox widgets:",(0,i.kt)("p",null,"Dual-state: The most common type of checkbox, it allows the user to toggle between two choices -- checked and not checked.\nTri-state: This type of checkbox supports an additional third state known as partially checked.\nOne common use of a tri-state checkbox can be found in software installers where a single tri-state checkbox is used to represent and control the state of an entire group of install options. And, each option in the group can be individually turned on or off with a dual state checkbox."),(0,i.kt)("p",null,"If all options in the group are checked, the overall state is represented by the tri-state checkbox displaying as checked.\nIf some of the options in the group are checked, the overall state is represented with the tri-state checkbox displaying as partially checked.\nIf none of the options in the group are checked, the overall state of the group is represented with the tri-state checkbox displaying as not checked.\nThe user can use the tri-state checkbox to change all options in the group with a single action:"),(0,i.kt)("p",null,"Checking the overall checkbox checks all options in the group.\nUnchecking the overall checkbox will uncheck all options in the group.\nAnd, In some implementations, the system may remember which options were checked the last time the overall status was partially checked. If this feature is provided, activating the overall checkbox a third time recreates that partially checked state where only some options in the group are checked."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#checkbox",mdxType:"ExitLink"},"Checkbox WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Checkbox',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'isIndeterminate',\n      type: 'boolean',\n    },\n  ]\n}\n\n() => {\n  const [isChecked, setChecked] = useState(true);\n\n  return (\n    <Checkbox\n      label=\"I agree\"\n      checked={isChecked}\n      onChange={e => setChecked(e.target.checked)}\n    />\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Space',\n      description:\n        'When the checkbox has focus, pressing the Space key changes the state of the checkbox.',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},32522:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"checkbox-group",category:"Forms",title:"CheckboxGroup",description:"Allows a user to select one or multiple items from a list.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A23398",pagination_prev:"web/ui/checkbox",pagination_next:"web/ui/checkbox-tree"},d=void 0,p={unversionedId:"web/ui/checkbox-group",id:"web/ui/checkbox-group",isDocsHomePage:!1,title:"CheckboxGroup",description:"Allows a user to select one or multiple items from a list.",source:"@site/docs/web/ui/CheckboxGroup.md",sourceDirName:"web/ui",slug:"/web/ui/checkbox-group",permalink:"/web/ui/checkbox-group",tags:[],version:"current",frontMatter:{id:"checkbox-group",category:"Forms",title:"CheckboxGroup",description:"Allows a user to select one or multiple items from a list.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A23398",pagination_prev:"web/ui/checkbox",pagination_next:"web/ui/checkbox-tree"},sidebar:"docs",previous:{title:"Checkbox",permalink:"/web/ui/checkbox"},next:{title:"CheckboxTree",permalink:"/web/ui/checkbox-tree"}},c=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Validation",id:"validation",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Subtext",id:"subtext",children:[],level:2},{value:"Error Message",id:"error-message",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Display",id:"display",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { CheckboxGroup } from '@abyss/web/ui/CheckboxGroup';\n")),(0,r.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      \'checkbox-form\': [\'two\'],\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <CheckboxGroup label="CheckboxGroup useForm" model="checkbox-form">\n        <Checkbox label="Option 1" value="one" />\n        <Checkbox label="Option 2" value="two" />\n        <Checkbox label="Option 3" value="three" />\n      </CheckboxGroup>\n      <Button type="submit" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = React.useState([\'1\']);\n\n  const onSubmit = () => {\n    console.log(\'submitted\', value);\n  };\n\n  return (\n    <React.Fragment>\n      <CheckboxGroup\n        label="CheckboxGroup useState"\n        value={value}\n        onChange={(e) => {\n          setValue(e);\n        }}\n      >\n        <Checkbox label="Option 1" value="1" />\n        <Checkbox label="Option 2" value="2" />\n        <Checkbox label="Option 3" value="3" />\n      </CheckboxGroup>\n      <Button onClick={onSubmit} style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"validation"},"Validation"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"validators")," prop to pass in required or custom validations like minimum selection amount."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <CheckboxGroup\n        label="What are your favorite sports?"\n        model="checkbox-group-validation"\n        validators={{\n          required: true,\n          validate: (value) =>\n            (value && value.length >= 2) || \'Select At Least 2 Options\',\n        }}\n      >\n        <Checkbox label="Soccer" value="soccer" />\n        <Checkbox label="Football" value="football" />\n        <Checkbox label="Baseball" value="baseball" />\n        <Checkbox label="Golf" value="golf" />\n        <Checkbox label="Other" value="other" />\n      </CheckboxGroup>\n      <Button type="submit" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"label"},"Label"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," prop to add a custom checkbox group label."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <CheckboxGroup label="Custom Group Label" model="label">\n        <Checkbox label="Option 1" value="one" />\n        <Checkbox label="Option 2" value="two" />\n        <Checkbox label="Option 3" value="three" />\n      </CheckboxGroup>\n      <Button type="submit" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"disabled"},"Disabled"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to disable the entire group."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <CheckboxGroup label="Custom Group Label" model="label" isDisabled>\n        <Checkbox label="Option 1" value="one" />\n        <Checkbox label="Option 2" value="two" />\n        <Checkbox label="Option 3" value="three" />\n      </CheckboxGroup>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"subtext"},"Subtext"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"subText")," prop to insert helpful text below the checkbox group."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <CheckboxGroup\n        label="Sub Text"\n        subText="Custom Sub Text"\n        model="checkbox-form"\n      >\n        <Checkbox label="Option 1" value="one" />\n        <Checkbox label="Option 2" value="two" />\n        <Checkbox label="Option 3" value="three" />\n      </CheckboxGroup>\n      <Button type="submit" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"error-message"},"Error Message"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to insert a custom error message below the checkbox group."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = React.useState([\'1\']);\n\n  const onSubmit = () => {\n    console.log(\'submitted\', value);\n  };\n\n  return (\n    <React.Fragment>\n      <CheckboxGroup\n        label="Error Message"\n        errorMessage="Custom Error Message"\n        value={value}\n        onChange={(e) => {\n          setValue(e);\n        }}\n      >\n        <Checkbox label="Option 1" value="1" />\n        <Checkbox label="Option 2" value="2" />\n      </CheckboxGroup>\n      <Button onClick={onSubmit} style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = React.useState([\'1\']);\n\n  return (\n    <CheckboxGroup\n      value={value}\n      onChange={(e) => {\n        setValue(e);\n      }}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    >\n      <Checkbox label="Option 1" value="1" />\n      <Checkbox label="Option 2" value="2" />\n    </CheckboxGroup>\n  );\n};\n')),(0,r.kt)("h2",{id:"size"},"Size"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," prop to set the height/width of the checkbox. Can use predefined sizes or custom number to set size."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      \'size-sm\': [\'one\', \'two\'],\n      \'size-lg\': [\'one\', \'two\'],\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <CheckboxGroup label="Size Small" model="size-sm" size="sm">\n        <Checkbox label="Option 1" value="one" />\n        <Checkbox label="Option 2" value="two" />\n      </CheckboxGroup>\n      <CheckboxGroup label="Size Large" model="size-lg" size="lg">\n        <Checkbox label="Option 1" value="one" />\n        <Checkbox label="Option 2" value="two" />\n      </CheckboxGroup>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"display"},"Display"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"display")," prop to set the orientation of the checkboxes. Available variants include ",(0,r.kt)("inlineCode",{parentName:"p"},"'column'")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"'row'"),". The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"'column'"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <CheckboxGroup label="Custom Group Display" display="row" model="display">\n        <Checkbox label="Row option 1" value="one" />\n        <Checkbox label="Row option 2" value="two" />\n        <Checkbox label="Row Option 3" value="three" />\n      </CheckboxGroup>\n      <Button type="submit" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={CheckboxGroup}\n  rows={[\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired everytime the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Label of the checkbox group',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'validators',\n      type: 'object',\n      description: 'Rules for checkbox validation',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Height and width of the checkbox',\n    },\n    {\n      name: 'display',\n      type: 'string',\n      description: 'Set the direction that the checkboxes display',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element the checkbox group wraps',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Set the subtext displayed below the checkbox group',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Set the error message displayed below the checkbox group',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the checkbox group',\n    },\n    {\n      name: 'isRequired',\n      type: 'boolean',\n      description: 'Flag to set if checkbox is required',\n    },\n    {\n      name: 'value',\n      type: 'array[string]',\n      description: '',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the checkbox group. If true, the checkbox group will be disabled',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={CheckboxGroup}\n  rows={[\n    {\n      name: 'checkbox-group-root',\n      description: 'Checkbox group root element',\n    },\n    {\n      name: 'checkbox-group-label',\n      description: 'Label element',\n    },\n    {\n      name: 'checkbox-group-container',\n      description: 'Checkbox group container',\n    },\n    {\n      name: 'checkbox-group-descriptors',\n      description: 'Descriptor element',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},2582:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"checkbox-tree",category:"Forms",title:"CheckboxTree",description:"Allows a user to select one or multiple items from an expandable/collapsible tree",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A23398",pagination_prev:"web/ui/checkbox-group",pagination_next:"web/ui/content-editor"},d=void 0,p={unversionedId:"web/ui/checkbox-tree",id:"web/ui/checkbox-tree",isDocsHomePage:!1,title:"CheckboxTree",description:"Allows a user to select one or multiple items from an expandable/collapsible tree",source:"@site/docs/web/ui/CheckboxTree.md",sourceDirName:"web/ui",slug:"/web/ui/checkbox-tree",permalink:"/web/ui/checkbox-tree",tags:[],version:"current",frontMatter:{id:"checkbox-tree",category:"Forms",title:"CheckboxTree",description:"Allows a user to select one or multiple items from an expandable/collapsible tree",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A23398",pagination_prev:"web/ui/checkbox-group",pagination_next:"web/ui/content-editor"},sidebar:"docs",previous:{title:"CheckboxGroup",permalink:"/web/ui/checkbox-group"},next:{title:"ContentEditor",permalink:"/web/ui/content-editor"}},c=[{value:"Usage",id:"usage",children:[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:3},{value:"useState",id:"usestate",children:[],level:3},{value:"Manage Other Props with useState",id:"manage-other-props-with-usestate",children:[],level:3}],level:2},{value:"Nodes",id:"nodes",children:[{value:"Label",id:"label",children:[],level:3},{value:"Value",id:"value",children:[],level:3},{value:"Children",id:"children",children:[],level:3},{value:"Disabled",id:"disabled",children:[],level:3},{value:"Show Checkbox",id:"show-checkbox",children:[],level:3},{value:"Title",id:"title",children:[],level:3}],level:2},{value:"Checked",id:"checked",children:[],level:2},{value:"onCheck",id:"oncheck",children:[],level:2},{value:"onClick",id:"onclick",children:[],level:2},{value:"Validation",id:"validation",children:[],level:2},{value:"Label",id:"label-1",children:[],level:2},{value:"Subtext",id:"subtext",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Disabled",id:"disabled-1",children:[],level:2},{value:"showExpandAll",id:"showexpandall",children:[],level:2},{value:"Only Leaf Checkboxes",id:"only-leaf-checkboxes",children:[],level:2},{value:"Check Model",id:"check-model",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { CheckboxTree } from '@abyss/web/ui/CheckboxTree';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'CheckboxTree',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'string',\n    },\n    {\n      prop: 'subText',\n      type: 'string',\n    },\n    {\n      prop: 'id',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'disabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'onlyLeafCheckboxes',\n      type: 'boolean',\n    },\n    {\n      prop: 'showExpandAll',\n      type: 'boolean',\n    },\n    {\n      prop: 'allExpanded',\n      type: 'boolean',\n    },\n  ]\n}\n\n() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n              children: [\n                {\n                  value: '/app/Http/Controllers/WelcomeController.js',\n                  label: 'WelcomeController.js',\n                },\n              ],\n            },\n            {\n              value: '/app/Http/routes.js',\n              label: 'routes.js',\n            },\n          ],\n        },\n        {\n          value: '/app/Providers',\n          label: 'Providers',\n          children: [\n            {\n              value: '/app/Providers/EventServiceProvider.js',\n              label: 'EventServiceProvider.js',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      value: '/config',\n      label: 'config',\n      children: [\n        {\n          value: '/config/app.js',\n          label: 'app.js',\n        },\n        {\n          value: '/config/database.js',\n          label: 'database.js',\n        },\n      ],\n    },\n    {\n      value: '/public',\n      label: 'public',\n      children: [\n        {\n          value: '/public/assets/',\n          label: 'assets',\n          children: [\n            {\n              value: '/public/assets/style.css',\n              label: 'style.css',\n            },\n          ],\n        },\n        {\n          value: '/public/index.html',\n          label: 'index.html',\n        },\n      ],\n    },\n    {\n      value: '/.env',\n      label: '.env',\n    },\n    {\n      value: '/.gitignore',\n      label: '.gitignore',\n    },\n    {\n      value: '/README.md',\n      label: 'README.md',\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n\n  return (\n    <CheckboxTree\n      label=\"Test Label\"\n      subText=\"Test Subtext\"\n      id=\"checkbox tree container\"\n      nodes={nodes}\n      checked={checked}\n      onCheck={(checked) => setChecked(checked)}\n      onClick={(expanded) => setClick(expanded)}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"The list of which nodes are currently checked can be managed in two ways, the ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," hook and the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook:"),(0,r.kt)("h3",{id:"useform-recommended"},"useForm (Recommended)"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      'checkbox-form': ['/app/Http/Controllers/WelcomeController.js'],\n    },\n  });\n  const onSubmit = (data) => {\n    console.log('submitted', data);\n  };\n\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <CheckboxTree\n        label=\"useForm Example\"\n        nodes={nodes}\n        model=\"checkbox-form\"\n        allExpanded\n      />\n      <Button type=\"submit\" size=\"$sm\" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h3",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const [checked, setChecked] = useState([\n    '/app/Http/Controllers/WelcomeController.js',\n  ]);\n\n  const onSubmit = () => {\n    console.log('Submitted', checked);\n  };\n\n  return (\n    <React.Fragment>\n      <CheckboxTree\n        label=\"useState Example\"\n        nodes={nodes}\n        checked={checked}\n        onCheck={(e) => {\n          setChecked(e);\n        }}\n        allExpanded\n      />\n      <Button onClick={onSubmit} style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h3",{id:"manage-other-props-with-usestate"},"Manage Other Props with useState"),(0,r.kt)("p",null,"Note that whether you use ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," to manage the list of checked nodes, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," to modify the other props. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      'checkbox-form': ['/app/Http/Controllers/WelcomeController.js'],\n    },\n  });\n  const onSubmit = (data) => {\n    console.log('submitted', data);\n  };\n\n  const initialNodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const [nodes, setNodes] = useState(initialNodes);\n  const [disabled, setDisabled] = useState(false);\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <CheckboxTree\n        label=\"Extra useState Functionality\"\n        nodes={nodes}\n        disabled={disabled}\n        model=\"checkbox-form\"\n        allExpanded\n      />\n      <Button type=\"submit\" size=\"$sm\" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n      <Button onClick={() => setDisabled(!disabled)} style={{ marginTop: 16 }}>\n        Toggle Disabled\n      </Button>\n      <Button\n        onClick={() => setNodes(nodes.slice(0, -1))}\n        style={{ marginTop: 16 }}\n      >\n        Remove Last Node\n      </Button>\n      <Button\n        onClick={() =>\n          setNodes([\n            ...nodes,\n            {\n              value: `Node #${nodes.length + 1}`,\n              label: `Node #${nodes.length + 1}`,\n            },\n          ])\n        }\n        style={{ marginTop: 16 }}\n      >\n        Add Node\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h2",{id:"nodes"},"Nodes"),(0,r.kt)("p",null,"The CheckboxTree is made up of nodes, which are specified by passing a list of the node objects into the ",(0,r.kt)("inlineCode",{parentName:"p"},"nodes")," prop. This property is required. Each node has the following properties:"),(0,r.kt)("h3",{id:"label"},"Label"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," prop to set what will appear on the tree for this node. This does not need to match the node's ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," property. This property is required."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      label: 'This is the label prop',\n      value: 'This value can be different than the label',\n    },\n  ];\n\n  return <CheckboxTree label=\"Label Example\" nodes={nodes} />;\n};\n")),(0,r.kt)("h3",{id:"value"},"Value"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," prop to set a unique identifier for the node. No two nodes in the tree can have the same ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),". This property is required."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: 'Readme 1',\n      label: '/README.md',\n    },\n    {\n      value: 'Readme 2',\n      label: '/README.md',\n    },\n  ];\n\n  return (\n    <CheckboxTree label=\"Same Display Name, Different Values\" nodes={nodes} />\n  );\n};\n")),(0,r.kt)("h3",{id:"children"},"Children"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"children")," prop to create an array of child nodes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  return <CheckboxTree label=\"Children Example\" nodes={nodes} allExpanded />;\n};\n")),(0,r.kt)("h3",{id:"disabled"},"Disabled"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"disabled")," prop to disable a node, preventing it from being checked or clicked on. Its default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n              disabled: true,\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  return (\n    <CheckboxTree label=\"Disabled Node Example\" nodes={nodes} allExpanded />\n  );\n};\n")),(0,r.kt)("h3",{id:"show-checkbox"},"Show Checkbox"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showCheckbox")," prop to show or hide a checkbox. Its default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'This node has showCheckbox set to false',\n              showCheckbox: false,\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'This node has showCheckbox as its default (true)',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  return (\n    <CheckboxTree label=\"Show Checkbox Disabled\" nodes={nodes} allExpanded />\n  );\n};\n")),(0,r.kt)("h3",{id:"title"},"Title"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," prop to a custom title attribute for the node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'Custom title prop',\n      title: 'This is the title prop',\n    },\n  ];\n\n  return <CheckboxTree label=\"Title Example\" nodes={nodes} showExpandAll />;\n};\n")),(0,r.kt)("h2",{id:"checked"},"Checked"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"checked")," prop to specify which nodes are checked. If you are using ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," to manage checked nodes, you do not need to pass a value for this property; if you are using ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," for checked nodes, make sure to update your ",(0,r.kt)("inlineCode",{parentName:"p"},"checked")," prop when nodes are checked (using the ",(0,r.kt)("inlineCode",{parentName:"p"},"onCheck")," prop), or else the tree will not update properly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n        },\n      ],\n    },\n\n    {\n      value: '/README.md',\n      label: 'README.md',\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n  return (\n    <CheckboxTree\n      label=\"Checked Example\"\n      nodes={nodes}\n      checked={checked}\n      onCheck={(checked) => setChecked(checked)}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"oncheck"},"onCheck"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onCheck")," fuction to trigger a custom function when a checkbox is checked. You can use this to update your checked state from useState, or to do something else entirely."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n              children: [\n                {\n                  value: '/app/Http/Controllers/WelcomeController.js',\n                  label: 'WelcomeController.js',\n                },\n              ],\n            },\n            {\n              value: '/app/Http/routes.js',\n              label: 'routes.js',\n            },\n          ],\n        },\n        {\n          value: '/app/Providers',\n          label: 'Providers',\n          children: [\n            {\n              value: '/app/Providers/EventServiceProvider.js',\n              label: 'EventServiceProvider.js',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      value: '/config',\n      label: 'config',\n      children: [\n        {\n          value: '/config/app.js',\n          label: 'app.js',\n        },\n        {\n          value: '/config/database.js',\n          label: 'database.js',\n        },\n      ],\n    },\n    {\n      value: '/public',\n      label: 'public',\n      children: [\n        {\n          value: '/public/assets/',\n          label: 'assets',\n          children: [\n            {\n              value: '/public/assets/style.css',\n              label: 'style.css',\n            },\n          ],\n        },\n        {\n          value: '/public/index.html',\n          label: 'index.html',\n        },\n      ],\n    },\n    {\n      value: '/.env',\n      label: '.env',\n    },\n    {\n      value: '/.gitignore',\n      label: '.gitignore',\n    },\n    {\n      value: '/README.md',\n      label: 'README.md',\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n  return (\n    <CheckboxTree\n      label=\"onCheck Example\"\n      nodes={nodes}\n      checked={checked}\n      onCheck={(checked) => {\n        setChecked(checked);\n        console.log(\n          'A node was just checked.  Now the checked nodes are: ',\n          checked\n        );\n      }}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"onclick"},"onClick"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick")," prop to trigger a custom function when the label of a node is clicked. When a function is given for ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick"),", clicking the label will no longer check the node by default, you will need to click the checkbox directly (unless in your ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick")," function you check the node). The callback function is passed the object of the node that was clicked."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/node1',\n      label: 'Click me to see a message logged to the console',\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n  return (\n    <React.Fragment>\n      <CheckboxTree\n        label=\"onClick Example\"\n        nodes={nodes}\n        checked={checked}\n        onClick={(e) => console.log('This node was just clicked: ', e)}\n      />\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"validation"},"Validation"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"validators")," prop to specify 1) if at least one option is required to be checked, and 2) custom validations, specified by a callback function that is passed in the selected nodes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      'checkbox-form': ['/README.md'],\n    },\n  });\n  const onSubmit = (data) => {\n    console.log('submitted', data);\n  };\n\n  const nodes = [\n    {\n      value: '/.env',\n      label: '.env',\n    },\n    {\n      value: '/.gitignore',\n      label: '.gitignore',\n    },\n    {\n      value: '/README.md',\n      label: 'README.md',\n    },\n  ];\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <CheckboxTree\n        label=\"Validation Example - Must check at least two options\"\n        nodes={nodes}\n        allExpanded\n        model=\"checkbox-form\"\n        validators={{\n          required: true,\n          validate: (value) =>\n            (value && value.length >= 2) || 'Select At Least 2 Options',\n        }}\n      />\n      <Button type=\"submit\" style={{ marginTop: 16 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h2",{id:"label-1"},"Label"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," prop to add a display label that will appear above the tree."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/README.md',\n      label: '/README.md',\n    },\n  ];\n\n  return <CheckboxTree label=\"This is the label prop\" nodes={nodes} />;\n};\n")),(0,r.kt)("h2",{id:"subtext"},"Subtext"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"subText")," prop to insert helpful text below the label."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n    },\n  ];\n\n  return (\n    <CheckboxTree\n      label=\"Custom Group Label\"\n      subText=\"This is the subText prop\"\n      nodes={nodes}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const nodes = [\n    {\n      value: \'/app\',\n      label: \'app\',\n    },\n  ];\n\n  return (\n    <CheckboxTree\n      nodes={nodes}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    />\n  );\n};\n')),(0,r.kt)("h2",{id:"size"},"Size"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," prop to set the height/width of the checkboxes. The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"md"),". Can use predefined sizes or a custom number to set size."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n  return (\n    <CheckboxTree\n      label=\"Small Checkbox Tree\"\n      nodes={nodes}\n      checked={checked}\n      allExpanded\n      size=\"sm\"\n    />\n  );\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  return (\n    <CheckboxTree label=\"Default Checkbox Tree\" nodes={nodes} allExpanded />\n  );\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n  return (\n    <CheckboxTree\n      label=\"Large Checkbox Tree\"\n      nodes={nodes}\n      checked={checked}\n      allExpanded\n      size=\"lg\"\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"disabled-1"},"Disabled"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"disabled")," prop to disable all nodes. The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  return (\n    <CheckboxTree\n      label=\"Tree Disabled Example\"\n      nodes={nodes}\n      allExpanded\n      disabled\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"showexpandall"},"showExpandAll"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showExpandAll")," prop to show two buttons for expanding and collapsing all nodes. The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n              children: [\n                {\n                  value: '/app/Http/Controllers/WelcomeController.js',\n                  label: 'WelcomeController.js',\n                },\n              ],\n            },\n            {\n              value: '/app/Http/routes.js',\n              label: 'routes.js',\n            },\n          ],\n        },\n        {\n          value: '/app/Providers',\n          label: 'Providers',\n          children: [\n            {\n              value: '/app/Providers/EventServiceProvider.js',\n              label: 'EventServiceProvider.js',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      value: '/config',\n      label: 'config',\n      children: [\n        {\n          value: '/config/app.js',\n          label: 'app.js',\n        },\n        {\n          value: '/config/database.js',\n          label: 'database.js',\n        },\n      ],\n    },\n    {\n      value: '/public',\n      label: 'public',\n      children: [\n        {\n          value: '/public/assets/',\n          label: 'assets',\n          children: [\n            {\n              value: '/public/assets/style.css',\n              label: 'style.css',\n            },\n          ],\n        },\n        {\n          value: '/public/index.html',\n          label: 'index.html',\n        },\n      ],\n    },\n    {\n      value: '/.env',\n      label: '.env',\n    },\n    {\n      value: '/.gitignore',\n      label: '.gitignore',\n    },\n    {\n      value: '/README.md',\n      label: 'README.md',\n    },\n  ];\n\n  return (\n    <CheckboxTree\n      label=\"Show Expand All Example - Click the buttons on the right\"\n      nodes={nodes}\n      showExpandAll\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"only-leaf-checkboxes"},"Only Leaf Checkboxes"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onlyLeafCheckboxes")," prop to alter the tree such that checkboxes only show for leaf nodes. The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n              children: [\n                {\n                  value: '/app/Http/Controllers/WelcomeController.js',\n                  label: 'WelcomeController.js',\n                },\n              ],\n            },\n            {\n              value: '/app/Http/routes.js',\n              label: 'routes.js',\n            },\n          ],\n        },\n        {\n          value: '/app/Providers',\n          label: 'Providers',\n          children: [\n            {\n              value: '/app/Providers/EventServiceProvider.js',\n              label: 'EventServiceProvider.js',\n            },\n          ],\n        },\n      ],\n    },\n    {\n      value: '/config',\n      label: 'config',\n      children: [\n        {\n          value: '/config/app.js',\n          label: 'app.js',\n        },\n        {\n          value: '/config/database.js',\n          label: 'database.js',\n        },\n      ],\n    },\n    {\n      value: '/public',\n      label: 'public',\n      children: [\n        {\n          value: '/public/assets/',\n          label: 'assets',\n          children: [\n            {\n              value: '/public/assets/style.css',\n              label: 'style.css',\n            },\n          ],\n        },\n        {\n          value: '/public/index.html',\n          label: 'index.html',\n        },\n      ],\n    },\n    {\n      value: '/.env',\n      label: '.env',\n    },\n    {\n      value: '/.gitignore',\n      label: '.gitignore',\n    },\n    {\n      value: '/README.md',\n      label: 'README.md',\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n  return (\n    <CheckboxTree\n      label=\"Only Leaf Checkboxes Example\"\n      nodes={nodes}\n      checked={checked}\n      allExpanded\n      onlyLeafCheckboxes=\"true\"\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"check-model"},"Check Model"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"checkModel")," prop to especify which checked nodes should be stored in the checked array. Possible values are ",(0,r.kt)("inlineCode",{parentName:"p"},"leaf")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"all"),"; when it is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"leaf"),", only checked leaf nodes will be stored in the checked array (no parents), while ",(0,r.kt)("inlineCode",{parentName:"p"},"all")," will contain all checked nodes. The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"leaf"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app - Click me to see that only leaf nodes are printed below',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n  return (\n    <React.Fragment>\n      <CheckboxTree\n        label=\"CheckModel Example - Leaf\"\n        nodes={nodes}\n        checked={checked}\n        onCheck={(checked) => setChecked(checked)}\n        allExpanded\n      />\n      <Text>Checked nodes: {checked.join(', ')}</Text>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const nodes = [\n    {\n      value: '/app',\n      label: 'app - Click me to see that all nodes are printed below',\n      children: [\n        {\n          value: '/app/Http',\n          label: 'Http',\n          children: [\n            {\n              value: '/app/Http/Controllers',\n              label: 'Controllers',\n            },\n            {\n              value: '/app/Http/Controllers/WelcomeController.js',\n              label: 'WelcomeController.js',\n            },\n          ],\n        },\n      ],\n    },\n  ];\n\n  const [checked, setChecked] = useState([]);\n\n  return (\n    <React.Fragment>\n      <CheckboxTree\n        label=\"CheckModel Example - All\"\n        nodes={nodes}\n        checked={checked}\n        onCheck={(checked) => setChecked(checked)}\n        checkModel=\"all\"\n        allExpanded\n      />\n      <Text>Checked nodes: {checked.join(', ')}</Text>\n    </React.Fragment>\n  );\n};\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={CheckboxTree}\n  rows={[\n    {\n      name: 'nodes',\n      type: 'array',\n      description: 'Required. Specifies the tree nodes and their children',\n    },\n    {\n      name: 'disabled',\n      type: 'bool',\n      description: 'Disables all nodes',\n    },\n    {\n      name: 'checkModel',\n      type: '\"leaf\" | \"all\"',\n      description:\n        'Specifies whether all checked nodes will be stored in the checked array, or just the leaf nodes',\n    },\n    {\n      name: 'checked',\n      type: 'array',\n      description: 'Specifies the checked nodes',\n    },\n    {\n      name: 'onlyLeafCheckboxes',\n      type: 'bool',\n      description: 'If true, checkboxes will only be shown for leaf nodes',\n    },\n    {\n      name: 'showExpandAll',\n      type: 'bool',\n      description: 'Show buttons for expanding and collapsing all nodes',\n    },\n    {\n      name: 'onClick',\n      type: 'function',\n      description: \"Callback fired everytime a node's label is clicked\",\n    },\n    {\n      name: 'onCheck',\n      type: 'function',\n      description: 'Callback fired everytime the a node is checked',\n    },\n    {\n      name: 'size',\n      type: 'string',\n      description: 'Set the height/width of the checkboxes',\n    },\n    {\n      name: 'allExpanded',\n      type: 'bool',\n      description:\n        'If true, the checkbox tree will be fully expanded and cannot be collapsed',\n    },\n    {\n      name: 'validators',\n      type: 'object',\n      description: 'Rules for checkbox validation',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Checkbox tree label',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Error message to be displayed below the label',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Text displayed below the label',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the label',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={CheckboxTree}\n  rows={[\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Required. Label of the node',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description: 'Required. Unique identifier of the node',\n    },\n    {\n      name: 'children',\n      type: 'array',\n      description: 'Child nodes of this node',\n    },\n    {\n      name: 'disabled',\n      type: 'bool',\n      description: 'Disables the node',\n    },\n    {\n      name: 'showCheckbox',\n      type: 'bool',\n      description: 'Shows the checkbox next to the node',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={CheckboxTree}\n  rows={[\n    {\n      name: 'expand-collapse-all-container',\n      description: 'Collapse container',\n    },\n    {\n      name: 'expand-all-btn',\n      description: 'Expand All button',\n    },\n    {\n      name: 'collapse-all-btn',\n      description: 'Collapse All button',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={CheckboxTree}\n  rows={[\n    {\n      name: 'checkbox-tree-tree-node',\n      description: 'Checkbox tree node',\n    },\n    {\n      name: 'checkbox-tree-expand-all-container',\n      description: 'Checkbox tree expand container',\n    },\n    {\n      name: 'checkbox-tree-expand-all-icon',\n      description: 'Checkbox tree icon element',\n    },\n    {\n      name: 'checkbox-tree-label',\n      description: 'Label element',\n    },\n    {\n      name: 'checkbox-tree-descriptors',\n      description: 'Descriptor element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={CheckboxTree}\n  rows={[\n    {\n      name: 'checkbox-node-label',\n      description: 'Checkbox node label element',\n    },\n    {\n      name: 'select-input-icon-container',\n      description: 'Icon container',\n    },\n    {\n      name: 'bare-node-label',\n      description: 'Node label element',\n    },\n    {\n      name: 'expand-button-container',\n      description: 'Expand button Container',\n    },\n    {\n      name: 'expand-button-icon',\n      description: 'Expand Button Icon',\n    },\n\n    ,\n  ]}\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Space',\n      description:\n        'When the checkbox has focus, pressing the Space key changes the state of the checkbox.',\n    },\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to the checkbox item and can be used to move down the checkbox tree',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},99689:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"chip",category:"Data Display",title:"Chip",description:"Chips are compact elements that represent an action, input or attribute.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=9438%3A37669",pagination_prev:"web/ui/badge",pagination_next:"web/ui/code-highlighter"},d=void 0,p={unversionedId:"web/ui/chip",id:"web/ui/chip",isDocsHomePage:!1,title:"Chip",description:"Chips are compact elements that represent an action, input or attribute.",source:"@site/docs/web/ui/Chip.md",sourceDirName:"web/ui",slug:"/web/ui/chip",permalink:"/web/ui/chip",tags:[],version:"current",frontMatter:{id:"chip",category:"Data Display",title:"Chip",description:"Chips are compact elements that represent an action, input or attribute.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=9438%3A37669",pagination_prev:"web/ui/badge",pagination_next:"web/ui/code-highlighter"},sidebar:"docs",previous:{title:"Badge",permalink:"/web/ui/badge"},next:{title:"CodeHighlighter",permalink:"/web/ui/code-highlighter"}},c=[{value:"Icon",id:"icon",children:[],level:2},{value:"onClose",id:"onclose",children:[],level:2},{value:"Group",id:"group",children:[],level:2},{value:"Outline",id:"outline",children:[],level:2},{value:"Width",id:"width",children:[{value:"Decorative Icons",id:"decorative-icons",children:[],level:4}],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Chip } from '@abyss/web/ui/Chip';\n")),(0,r.kt)("h2",{id:"icon"},"Icon"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"icon")," prop to pass in a specific Icon component. Find further guidance on material icons in the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/icon-material"},"Material Icons Tab"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Chip\n  icon={\n    <IconMaterial icon="info" size="$sm" color="$gray8" variant="outlined" />\n  }\n  text="Chip"\n  onClose={() => {}}\n/>\n')),(0,r.kt)("h2",{id:"onclose"},"onClose"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onClose")," function to handle the action when close button is triggered."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Chip\n  icon={\n    <IconMaterial\n      icon="star_outline"\n      size="$sm"\n      color="$gray8"\n      variant="outlined"\n    />\n  }\n  onClose={() => {}}\n  text="Chip with a close button"\n/>\n')),(0,r.kt)("h2",{id:"group"},"Group"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Chip.Group")," to group multiple chips together. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," to give the group of chips a label. ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," is required."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Chip.Group title="Chip Group Example">\n  <Layout.Stack>\n    <Chip\n      icon={\n        <IconMaterial\n          icon="star_outline"\n          size="$sm"\n          color="$gray8"\n          variant="outlined"\n        />\n      }\n      onClose={() => {}}\n      text="Chip in Group"\n    />\n    <Chip\n      icon={\n        <IconMaterial\n          icon="house"\n          size="$sm"\n          color="$gray8"\n          variant="outlined"\n        />\n      }\n      onClose={() => {}}\n      text="Chip in Group"\n    />\n    <Chip\n      icon={\n        <IconMaterial\n          icon="filter"\n          size="$sm"\n          color="$gray8"\n          variant="outlined"\n        />\n      }\n      onClose={() => {}}\n      text="Chip in Group"\n    />\n  </Layout.Stack>\n</Chip.Group>\n')),(0,r.kt)("h2",{id:"outline"},"Outline"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"outline")," prop to enable or disable the border around the chip."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Chip onClose={() => {}} text="Outlined Chip" outline />\n  <Chip onClose={() => {}} text="Default Chip" />\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"width"},"Width"),(0,r.kt)("p",null,"Chips have a max width of 200px. Exceeding the max width will truncate the content and can be seen with a popover by clicking on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Chip"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Chip\n  icon={\n    <IconMaterial\n      icon="star_outline"\n      size="$sm"\n      color="$gray8"\n      variant="outlined"\n    />\n  }\n  onClose={() => {}}\n  text="Lorem ipsum dolor sit amet, consectetur adipiscing elit."\n/>\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Chip}\n  rows={[\n    {\n      name: 'children',\n      type: 'node',\n      description: 'The text to be input into the chip component',\n    },\n    {\n      name: 'outline',\n      type: 'boolean',\n      description: 'Flag to enable/disable border around chip',\n    },\n    {\n      name: 'icon',\n      type: 'node',\n      description: 'The icon to be input into the chip component',\n    },\n    {\n      name: 'onClose',\n      type: 'function',\n      description: 'Callback fired when the user activates the close button',\n    },\n    {\n      name: 'ariaCloseLabel',\n      type: 'string',\n      description: 'The text to describe the action of the close button',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Chip.Group}\n  rows={[\n    {\n      name: 'children',\n      type: 'node',\n      description: 'Chip components',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Title of chip group',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Chip}\n  rows={[\n    {\n      name: 'chip-root',\n      description: 'chip root element',\n    },\n    {\n      name: 'chip-icon',\n      description: 'chip icon container',\n    },\n    {\n      name: 'chip-close-button',\n      description: 'chip close button element',\n    },\n    {\n      name: 'chip-close-button-icon',\n      description: 'chip close icon element',\n    },\n    {\n      name: 'chip-popover',\n      description: 'chip popover element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Chip.Group}\n  rows={[\n    {\n      name: 'chip-group',\n      description: 'chip group root element',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},"Chips are focusable, and truncated with an ellipsis at 200px. Once a chip has been removed, it cannot be re-rendered. These are primarily used for Select List Multi, and Data Table filter.",(0,r.kt)("h4",{id:"decorative-icons"},"Decorative Icons"),(0,r.kt)("p",null,"In the chip below, since there is sufficient text next to the icon, the icon is considered decorative and and does not need to be exposed to assistive technology. Find further guidance on material icons in the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/icon-material"},"Material Icons Tab"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Chip\n  icon={\n    <IconMaterial\n      icon="star_outline"\n      size="$sm"\n      color="$gray8"\n      variant="outlined"\n    />\n  }\n  onClose={() => {}}\n  text="Chip"\n/>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Space',\n      description: \"Activates the chip's popover or close button\",\n    },\n    {\n      name: 'Enter',\n      description: \"Activates the chip's popover or close button\",\n    },\n    {\n      name: 'Tab',\n      description: 'Changes focus to the next element in chip',\n    },\n    {\n      name: 'Alt + Tab',\n      description: 'Changes focus to the previous element in chip',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},28878:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"code-highlighter",category:"Data Display",title:"CodeHighlighter",description:"Used to highlight segments of code.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A26369",pagination_prev:"web/ui/chip",pagination_next:"web/ui/data-table"},s=void 0,d={unversionedId:"web/ui/code-highlighter",id:"web/ui/code-highlighter",isDocsHomePage:!1,title:"CodeHighlighter",description:"Used to highlight segments of code.",source:"@site/docs/web/ui/CodeHighlighter.md",sourceDirName:"web/ui",slug:"/web/ui/code-highlighter",permalink:"/web/ui/code-highlighter",tags:[],version:"current",frontMatter:{id:"code-highlighter",category:"Data Display",title:"CodeHighlighter",description:"Used to highlight segments of code.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A26369",pagination_prev:"web/ui/chip",pagination_next:"web/ui/data-table"},sidebar:"docs",previous:{title:"Chip",permalink:"/web/ui/chip"},next:{title:"DataTable",permalink:"/web/ui/data-table"}},p=[{value:"Language",id:"language",children:[],level:2},{value:"Show Line Numbers",id:"show-line-numbers",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { CodeHighlighter } from '@abyss/web/ui/CodeHighlighter';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'CodeHighlighter',\n  inputs: [\n    {\n      prop: 'code',\n      type: 'string',\n    },\n    {\n      prop: 'language',\n      type: 'string',\n    },\n    {\n      prop: 'showLineNumbers',\n      type: 'boolean',\n    },\n  ]\n}\n\n<CodeHighlighter code=\"console.log('hello world!');\" language=\"js\" />\n")),(0,i.kt)("h2",{id:"language"},"Language"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"language")," prop to set the desired language for highlighting. See the following ",(0,i.kt)(m,{href:"https://prismjs.com/#supported-languages",mdxType:"ExitLink"},"documentation")," for the complete list of supported languages and their corresponding values. Default value is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"jsx")," (React JSX)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const defaultCodeSnippet = `body {\n  background-color: lightblue;\n}\n\nh1 {\n  color: white;\n  text-align: center;\n}\n\np {\n  font-family: verdana;\n  font-size: 20px;\n}`;\n\n  const [value, setValue] = useState(defaultCodeSnippet);\n\n  return (\n    <React.Fragment>\n      <CodeHighlighter code={value} language=\"css\" />\n      <Divider />\n      <TextInputArea\n        label=\"Code\"\n        value={value}\n        rows={4}\n        disableAutoSize\n        onChange={(e) => setValue(e.target.value)}\n        css={{\n          'abyss-text-input-area-root': { marginBottom: '$md' },\n        }}\n      />\n      <Button\n        css={{ 'abyss-button-root': { marginBottom: '$lg' } }}\n        onClick={() => setValue('')}\n      >\n        Clear\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"show-line-numbers"},"Show Line Numbers"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"showLineNumbers")," prop to display line numbers within your highlighted code block."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const defaultCodeSnippet = `<div>\n  <h1>Hello World</h1>\n</div>`;\n\n  return (\n    <CodeHighlighter\n      code={defaultCodeSnippet}\n      language="html"\n      showLineNumbers\n    />\n  );\n};\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={CodeHighlighter}\n  rows={[\n    {\n      name: 'code',\n      type: 'string',\n      description: 'The code to be highlighted',\n    },\n    {\n      name: 'language',\n      type: 'string',\n      description: 'The type of coding language to highlight',\n    },\n    {\n      name: 'theme',\n      type: 'shape',\n      description: 'The theme used for the highlighter',\n      default: '-',\n    },\n    {\n      name: 'showLineNumbers',\n      type: 'boolean',\n      description: 'Display line numbers',\n      default: 'false',\n    },\n    {\n      name: 'showBorder',\n      type: 'boolean',\n      description: 'Display border around code block',\n      default: 'true',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={CodeHighlighter}\n  rows={[\n    {\n      name: 'code-highlighter-root',\n      description: 'CodeHighlighter root element',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},88614:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"collapse-provider",category:"Providers",title:"CollapseProvider",description:"Collapse/expand all collapsible children within the provider.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Web?node-id=19283%3A68923&t=JCj9pCNkF0FPfk5f-0",pagination_prev:"web/ui/tooltip",pagination_next:"web/ui/form-provider"},d=void 0,p={unversionedId:"web/ui/collapse-provider",id:"web/ui/collapse-provider",isDocsHomePage:!1,title:"CollapseProvider",description:"Collapse/expand all collapsible children within the provider.",source:"@site/docs/web/ui/CollapseProvider.md",sourceDirName:"web/ui",slug:"/web/ui/collapse-provider",permalink:"/web/ui/collapse-provider",tags:[],version:"current",frontMatter:{id:"collapse-provider",category:"Providers",title:"CollapseProvider",description:"Collapse/expand all collapsible children within the provider.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Web?node-id=19283%3A68923&t=JCj9pCNkF0FPfk5f-0",pagination_prev:"web/ui/tooltip",pagination_next:"web/ui/form-provider"},sidebar:"docs",previous:{title:"Tooltip",permalink:"/web/ui/tooltip"},next:{title:"FormProvider",permalink:"/web/ui/form-provider"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"CollapseProvider.Button",id:"collapseproviderbutton",children:[],level:2},{value:"defaultIsOpen",id:"defaultisopen",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { CollapseProvider } from '@abyss/web/ui/CollapseProvider';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Wrap any number of collapsible child components utilizing the ",(0,r.kt)("a",{parentName:"p",href:"/web/hooks/use-collapse/"},"useCollapse")," hook in the ",(0,r.kt)("inlineCode",{parentName:"p"},"CollapseProvider")," to allow for collapse/expand control of all children."),(0,r.kt)("h2",{id:"collapseproviderbutton"},"CollapseProvider.Button"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"CollapseProvider.Button")," within the CollapseProvider to interface directly with the collapse/expand functionality. The collapsed state will be uncontrolled and handled internally by the component. If you'd like to provide a default state to all collapsible child components utilize the ",(0,r.kt)("a",{parentName:"p",href:"#defaultisopen"},"defaultIsOpen")," prop detailed below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <CollapseProvider>\n      <CollapseProvider.Button\n        css={{\n          'abyss-collapse-button-root': {\n            marginBottom: '10px',\n          },\n        }}\n      />\n      <Card header=\"Single Card Collapse\" collapse>\n        <Card.Section>\n          This card can collapse and expand independently or with use of\n          CollapseProvider\n        </Card.Section>\n      </Card>\n      <Card header=\"Single Card Collapse\" collapse defaultIsOpen={false}>\n        <Card.Section>\n          This card can collapse and expand independently or with use of\n          CollapseProvider\n        </Card.Section>\n      </Card>\n    </CollapseProvider>\n  );\n};\n")),(0,r.kt)("h2",{id:"defaultisopen"},"defaultIsOpen"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultIsOpen")," prop to set a default collapse state for all collapsible child components within the CollapseProvider. This should be utilized when using ",(0,r.kt)("inlineCode",{parentName:"p"},"Collapse.Button"),". Default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <CollapseProvider defaultIsOpen={false}>\n      <CollapseProvider.Button\n        css={{\n          'abyss-collapse-button-root': {\n            marginBottom: '10px',\n          },\n        }}\n      />\n      <Card header=\"Single Card Collapse\" collapse>\n        <Card.Section>\n          This first card can collapse and expand independently or with use of\n          CollapseProvider\n        </Card.Section>\n      </Card>\n      <Card header=\"Single Card Collapse\" collapse>\n        <Card.Section>\n          This second card can collapse and expand independently or with use of\n          CollapseProvider\n        </Card.Section>\n      </Card>\n    </CollapseProvider>\n  );\n};\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={CollapseProvider}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description:\n        'Collapsible child components of the collapse provider component',\n    },\n    {\n      name: 'defaultIsOpen',\n      type: 'boolean',\n      description: 'Set default collapse state for all collapsible children',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={CollapseProvider.Button}\n  rows={[\n    {\n      name: 'collapse-button-root',\n      description: 'Button root element',\n    },\n    {\n      name: 'expand-all-button',\n      description: 'Expand all button element',\n    },\n    {\n      name: 'expand-all-button-icon',\n      description: 'Expand all button icon',\n    },\n    {\n      name: 'expand-all-button-text',\n      description: 'Expand all button text',\n    },\n    {\n      name: 'collapse-all-button',\n      description: 'Collapse all button element',\n    },\n    {\n      name: 'collapse-all-button-icon',\n      description: 'Collapse all button icon element',\n    },\n    {\n      name: 'collapse-all-button-text',\n      description: 'Collapse all button text',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},93413:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"content-editor",category:"Forms",title:"ContentEditor",description:"A simple markdown editor with preview.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=8257%3A26401",pagination_prev:"web/ui/checkbox-tree",pagination_next:"web/ui/date-input"},d=void 0,p={unversionedId:"web/ui/content-editor",id:"web/ui/content-editor",isDocsHomePage:!1,title:"ContentEditor",description:"A simple markdown editor with preview.",source:"@site/docs/web/ui/ContentEditor.md",sourceDirName:"web/ui",slug:"/web/ui/content-editor",permalink:"/web/ui/content-editor",tags:[],version:"current",frontMatter:{id:"content-editor",category:"Forms",title:"ContentEditor",description:"A simple markdown editor with preview.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=8257%3A26401",pagination_prev:"web/ui/checkbox-tree",pagination_next:"web/ui/date-input"},sidebar:"docs",previous:{title:"CheckboxTree",permalink:"/web/ui/checkbox-tree"},next:{title:"DateInput",permalink:"/web/ui/date-input"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Rendering Abyss Components",id:"rendering-abyss-components",children:[],level:2},{value:"Height",id:"height",children:[],level:2},{value:"Preview Only",id:"preview-only",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ContentEditor } from '@abyss/web/ui/ContentEditor';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState(`\n# Heading level 1\n\n## Heading level 2\n\n### Heading level 3\n\n#### Heading level 4\n\n##### Heading level 5\n\n###### Heading level 6\n\n<br>\n\n**bold text**\n\n*italicized text*\n\n---\n\n[Example Link](https://www.example.com)`);\n\n  return (\n    <ContentEditor value={value} onChange={(e) => setValue(e.target.value)} />\n  );\n};\n")),(0,r.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," hook gets values from the component state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      'content-editor': 'FormProvider Default Value',\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <ContentEditor model=\"content-editor\" />\n      <Button type=\"submit\" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h2",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('State Default Value');\n\n  return (\n    <ContentEditor value={value} onChange={(e) => setValue(e.target.value)} />\n  );\n};\n")),(0,r.kt)("h2",{id:"rendering-abyss-components"},"Rendering Abyss Components"),(0,r.kt)("p",null,"You can render the default set of Abyss components (see below) by simply calling the component. For example, to render the Abyss button component, simply type ",(0,r.kt)("inlineCode",{parentName:"p"},"<Button>Button</Button>"),"."),(0,r.kt)("p",null,"Default Components:\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/button"},"Button")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/badge"},"Badge")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/checkbox"},"Checkbox")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/checkbox-group"},"CheckboxGroup")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/checkbox-tree"},"CheckboxTree")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/card"},"Card")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/chip"},"Chip")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/date-input"},"DateInput")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/dropdown-menu"},"DropdownMenu")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/heading"},"Heading")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/icon"},"Icon")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/icon-material"},"IconMaterial")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/label"},"Label")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/layout"},"Layout")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/link"},"Link")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/radio-group"},"RadioGroup")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/table"},"Table")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/text"},"Text")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/text-input"},"TextInput")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/text-input-area"},"TextInputArea")," /\n",(0,r.kt)("a",{parentName:"p",href:"/web/ui/toggle-switch"},"ToggleSwitch")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(`## Abyss Components:\n\n<br>\n<Button>Edit Me!</Button>\n\n<br>\n<br>\n\n<IconMaterial icon="home" size="24px" />\n\n<br>\n<br>\n\n<Badge>Badge</Badge>\n\n<br>\n<br>\n\n<CheckboxGroup label=\'CheckboxGroup\' >\n  <Checkbox label="Option 1" value="one" />\n  <Checkbox label="Option 2" value="two" />\n  <Checkbox label="Option 3" value="three" />\n</CheckboxGroup>\n\n<br>\n<br>\n\n<Label size="sm">Small label</Label>\n<Label size="md">Medium label</Label>\n<Label size="lg">Large label</Label>`);\n\n  return (\n    <ContentEditor value={value} onChange={(e) => setValue(e.target.value)} />\n  );\n};\n')),(0,r.kt)("h2",{id:"height"},"Height"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"height")," property to adjust the height of the content editor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('');\n\n  return (\n    <ContentEditor\n      height=\"250px\"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"preview-only"},"Preview Only"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"previewOnly")," prop to hide the markdown editor section. The default is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState(`\n# Heading level 1\n\n## Heading level 2\n\n### Heading level 3\n\n#### Heading level 4\n\n##### Heading level 5\n\n###### Heading level 6\n\n<br>\n\n**bold text**\n\n*italicized text*\n\n---\n\n[Example Link](https://www.example.com)`);\n\n  return (\n    <ContentEditor\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n      previewOnly\n    />\n  );\n};\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ContentEditor}\n  rows={[\n    {\n      name: 'height',\n      type: 'string | number ',\n      description: 'Set the height of the content editor',\n    },\n    {\n      name: 'previewOnly',\n      type: 'boolean',\n      description: 'When set to true the markdown editor section is hidden',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={ContentEditor}\n  rows={[\n    {\n      name: 'content-editor-root',\n      description: 'Content Editor root',\n    },\n    {\n      name: 'content-editor-markdown-input-container',\n      description: 'Content Editor Markdown Input Container',\n    },\n    {\n      name: 'content-editor-markdown-input-title',\n      description: 'Content Editor Markdown Input Title',\n    },\n    {\n      name: 'content-editor-markdown-text-input',\n      description: 'Content Editor Markdown Text Input',\n    },\n    {\n      name: 'content-editor-preview-container',\n      description: 'Content Editor Preview Container',\n    },\n    {\n      name: 'content-editor-preview-title',\n      description: 'Content Editor Preview Title',\n    },\n    {\n      name: 'content-editor-preview-area',\n      description: 'Content Editor Preview Area',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description: 'Moves focus to the next focusable element.',\n    },\n    {\n      name: 'Shift + Tab',\n      description: 'Moves focus to the previous focusable element.',\n    },\n    {\n      name: 'PageUp',\n      description:\n        'When focus is on the scrollable element, pressing PageUp will scroll up.',\n    },\n    {\n      name: 'PageDown',\n      description:\n        'When focus is on the scrollable element, pressing PageDown will scroll down.',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},93093:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"data-table",category:"Data Display",title:"DataTable",description:"Displays a matrix of information with columns, rows, and information that can operate dynamically.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3139%3A23110",pagination_prev:"web/ui/code-highlighter",pagination_next:"web/ui/indicator"},d=void 0,p={unversionedId:"web/ui/data-table",id:"web/ui/data-table",isDocsHomePage:!1,title:"DataTable",description:"Displays a matrix of information with columns, rows, and information that can operate dynamically.",source:"@site/docs/web/ui/DataTable.md",sourceDirName:"web/ui",slug:"/web/ui/data-table",permalink:"/web/ui/data-table",tags:[],version:"current",frontMatter:{id:"data-table",category:"Data Display",title:"DataTable",description:"Displays a matrix of information with columns, rows, and information that can operate dynamically.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3139%3A23110",pagination_prev:"web/ui/code-highlighter",pagination_next:"web/ui/indicator"},sidebar:"docs",previous:{title:"CodeHighlighter",permalink:"/web/ui/code-highlighter"},next:{title:"Indicator",permalink:"/web/ui/indicator"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Table Settings",id:"table-settings",children:[],level:2},{value:"Resize Columns",id:"resize-columns",children:[],level:2},{value:"Minimum Column Width",id:"minimum-column-width",children:[],level:2},{value:"Overriding Default Column Widths",id:"overriding-default-column-widths",children:[],level:2},{value:"Fullscreen",id:"fullscreen",children:[],level:2},{value:"Display Settings",id:"display-settings",children:[],level:2},{value:"Download Table",id:"download-table",children:[{value:"Remove CSV Columns",id:"remove-csv-columns",children:[],level:3}],level:2},{value:"Update Table Data",id:"update-table-data",children:[],level:2},{value:"Column Sort",id:"column-sort",children:[],level:2},{value:"SortType",id:"sorttype",children:[],level:2},{value:"Bulk Actions",id:"bulk-actions",children:[],level:2},{value:"Individual Actions",id:"individual-actions",children:[],level:2},{value:"Custom Table Header Section",id:"custom-table-header-section",children:[],level:2},{value:"Custom Table Header Buttons",id:"custom-table-header-buttons",children:[],level:2},{value:"Selection",id:"selection",children:[],level:2},{value:"Single Selection",id:"single-selection",children:[],level:2},{value:"Expansion Rows",id:"expansion-rows",children:[],level:2},{value:"Filtering",id:"filtering",children:[{value:"Global Filtering",id:"global-filtering",children:[],level:3},{value:"Column Filtering",id:"column-filtering",children:[{value:"Initial Filters",id:"initial-filters",children:[],level:4},{value:"Column Filter Types",id:"column-filter-types",children:[],level:4},{value:"Remove Filter Columns",id:"remove-filter-columns",children:[],level:4}],level:3}],level:2},{value:"Custom Headers",id:"custom-headers",children:[],level:2},{value:"Custom Cells",id:"custom-cells",children:[],level:2},{value:"Custom CSV",id:"custom-csv",children:[],level:2},{value:"Data Test ID",id:"data-test-id",children:[],level:2},{value:"Pagination",id:"pagination",children:[{value:"Page Size Options",id:"page-size-options",children:[],level:3},{value:"Hide Top Pagination",id:"hide-top-pagination",children:[],level:3},{value:"Hide Bottom Pagination",id:"hide-bottom-pagination",children:[],level:3},{value:"Pagination Result Count Override",id:"pagination-result-count-override",children:[],level:3}],level:2},{value:"Server-Side Pagination",id:"server-side-pagination",children:[{value:"API Pagination Call",id:"api-pagination-call",children:[],level:3},{value:"API Query Options",id:"api-query-options",children:[],level:3},{value:"Manual Global Filter",id:"manual-global-filter",children:[],level:3},{value:"Manual Column Filters",id:"manual-column-filters",children:[],level:3},{value:"Manual Sort By",id:"manual-sort-by",children:[],level:3},{value:"Custom Row IDs",id:"custom-row-ids",children:[],level:3},{value:"Triggering Data Refresh",id:"triggering-data-refresh",children:[{value:"Disable On Load",id:"disable-on-load",children:[],level:4}],level:3}],level:2},{value:"Custom Messaging",id:"custom-messaging",children:[{value:"No Data Message",id:"no-data-message",children:[],level:3},{value:"Error Message",id:"error-message",children:[],level:3}],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { DataTable } from '@abyss/web/ui/DataTable';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"The data table's features are ideal for organizing and displaying data in a UI. The column headers can sort data in ascending or descending order, rows can be expanded to progressively disclose information, and single or batch actions can be taken on rows."),(0,r.kt)("p",null,"The data table toolbar gives a location for primary buttons, search, filtering, table display settings, and other utilities."),(0,r.kt)("p",null,"Data tables should be used to organize and display data. They are ideal if your user must navigate to a specific piece of data to complete a task or if you need to display all of a user's resources."),(0,r.kt)("p",null,"Data tables should be not be used when a more complex display of the data or interactions are required or as a replacement for a spreadsheet application."),(0,r.kt)("p",null,"Data tables should be placed in a page's main content area and given plenty of space to display data without truncation. Avoid placing data tables inside modals or smaller containers where the information can feel cramped or needs truncation."),(0,r.kt)("p",null,"The data table ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," prop is required and applied as an aria-label to the root ",(0,r.kt)("inlineCode",{parentName:"p"},"<table>")," element but if you'd like to hide the title header pass in the ",(0,r.kt)("inlineCode",{parentName:"p"},"hideTitleHeader")," prop."),(0,r.kt)("p",null,"Below is an example of data table component that utilizes other Abyss components like ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/badge"},"Badge"),", ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/icon-material"},"Icon"),", and ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/link"},"Link")," as a cell item."),(0,r.kt)("p",null,"For data table cells that overflow you can use leverage the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/link"},"Link")," and ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/Drawer"},"Drawer")," component to display additional data. The ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/Drawer"},"Drawer")," components content is fully customizable, currently represented in list of values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getRandomVariant = () => {\n    const variants = [`success`, `warning`, `error`, `info`, `neutral`];\n    const random = Math.floor(Math.random() * 5);\n    return variants[random];\n  };\n\n  const getRandomBool = () => {\n    return Math.random() < 0.5;\n  };\n\n  const getOverFlowData = (row) => {\n    let value;\n    if (row % 2 === 0) {\n      value = [];\n      for (let i = 0; i < 10; i++) {\n        const random = Math.floor(Math.random() * (row * (i + 2)));\n        const temp = 160409583 + i + 1 + random;\n        value.push(temp);\n      }\n    } else {\n      const random = Math.floor(Math.random() * row);\n      value = 161585930 + random;\n    }\n    return value;\n  };\n\n  const createData = (count) => {\n    const data = [];\n    for (let i = 0; i < count; i++) {\n      const variant = getRandomVariant();\n      data.push({\n        col1: `Col 1/Row ${i + 1}`,\n        col2: 'Table Data',\n        col3: 'Table Data',\n        col4: getOverFlowData(i + 1),\n        col5: variant,\n        col6: 'Table Data',\n        col7: getRandomBool(),\n      });\n    }\n    return data;\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: (\n          <React.Fragment>\n            <div>Table Data 1</div>\n            <a href=\"https://www.google.com\">What is this?</a>\n          </React.Fragment>\n        ),\n        accessor: 'col1',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Table Data 2',\n        accessor: 'col2',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        disableSortBy: true,\n        canReorderColumn: false,\n        Cell: ({ value }) => {\n          return (\n            <Layout.Group>\n              <IconMaterial icon=\"bookmarks\" size=\"sm\" />\n              {value}\n            </Layout.Group>\n          );\n        },\n      },\n      {\n        Header: 'Table Data 3',\n        accessor: 'col3',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        label: 'Table Data 3',\n        Cell: ({ value }) => {\n          return <Link href=\"https://www.google.com\">{value}</Link>;\n        },\n      },\n      {\n        Header: 'Overflow Data',\n        accessor: 'col4',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        disableSortBy: true,\n        canReorderColumn: false,\n        Cell: ({ value, row }) => {\n          const isArray = Array.isArray(value);\n          if (isArray && !value.length) return '';\n          return (\n            <Layout.Group css={{ justifyContent: 'space-between' }}>\n              {isArray ? value[0] : value}\n              {isArray && (\n                <Link\n                  size=\"$sm\"\n                  onClick={() => drawer.open({ value })}\n                  aria-haspopup=\"dialog\"\n                >\n                  See All\n                </Link>\n              )}\n            </Layout.Group>\n          );\n        },\n      },\n      {\n        Header: 'Table Data 5',\n        accessor: 'col5',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        disableSortBy: true,\n        canReorderColumn: false,\n        Cell: ({ value }) => {\n          const badgeLabel = value.charAt(0).toUpperCase() + value.slice(1);\n          return <Badge variant={value}>{badgeLabel} Badge</Badge>;\n        },\n      },\n      {\n        Header: 'Table Data 6',\n        accessor: 'col6',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        disableSortBy: true,\n        canReorderColumn: false,\n        Cell: ({ value }) => {\n          return (\n            <Layout.Group css={{ justifyContent: 'space-between' }}>\n              {value}\n              <IconMaterial icon=\"info\" size=\"sm\" />\n            </Layout.Group>\n          );\n        },\n      },\n      {\n        Header: 'Favorite',\n        accessor: 'col7',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        disableSortBy: true,\n        canReorderColumn: false,\n        sortType: 'basic',\n        minWidth: 100,\n        width: 100,\n        disableResizing: true,\n        Cell: ({ value, cellActions, row, ...props }) => {\n          return (\n            <label for={row.id}>\n              <VisuallyHidden>Add To Favorites</VisuallyHidden>\n              <input\n                id={row.id}\n                type=\"checkbox\"\n                onChange={() => {\n                  cellActions.modifyRow(row, { col7: !value });\n                }}\n                style={{\n                  height: '25px',\n                  overflow: 'hidden',\n                  position: 'absolute',\n                  width: '25px',\n                  cursor: 'pointer',\n                }}\n              />\n              <IconMaterial icon={value ? 'star' : 'star_border'} size=\"md\" />\n            </label>\n          );\n        },\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => [...createData(200)], []);\n\n  const bulkActions = [\n    {\n      onClick: ({ deleteRows }) => {\n        deleteRows();\n      },\n      icon: <IconMaterial icon=\"delete\" />,\n      label: 'Delete Rows',\n      isSeparated: true,\n    },\n    {\n      onClick: ({ modifyRows }) => {\n        modifyRows({ col1: 'Modified Cell' });\n      },\n      label: 'Modify Cells',\n    },\n    {\n      onClick: ({ modifyRows }) => {\n        modifyRows({\n          col1: `Modified Col 1`,\n          col2: `Modified Col 2`,\n          col3: `Modified Col 3`,\n        });\n      },\n      label: 'Modify Rows',\n      icon: <IconMaterial icon=\"mark_as_unread\" />,\n      isSingle: true,\n    },\n  ];\n\n  const individualActions = [\n    {\n      onClick: ({ deleteRow, row }) => {\n        deleteRow(row);\n      },\n      checkDisabled: (row) => {\n        return row.index % 4 === 0;\n      },\n      icon: <IconMaterial icon=\"delete\" />,\n      label: 'Delete Row',\n      isSeparated: true,\n    },\n    {\n      onClick: ({ modifyRow, row }) => {\n        modifyRow(row, { col1: 'Modified Cell' });\n      },\n      label: 'Modify Cell',\n    },\n    {\n      onClick: ({ modifyRow, row }) => {\n        modifyRow(row, {\n          col1: `Modified Col 1`,\n          col2: `Modified Col 2`,\n          col3: `Modified Col 3`,\n        });\n      },\n      label: 'Modify Row',\n      icon: <IconMaterial icon=\"mark_as_unread\" />,\n    },\n  ];\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    showSelection: true,\n    bulkActions,\n    individualActions,\n    showPagination: true,\n    showGlobalFilter: true,\n    showTableSettings: true,\n    showFullscreenButton: true,\n    showDownloadButton: true,\n    showFilterDataset: true,\n    showColumnVisibilityConfig: true,\n    additionalPaginationText: '(Can insert extra text here)',\n    uniqueStorageId: 'data-table-usage',\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n    onColumnVisibilityOpen: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  const drawer = useOverlay('cellOverflow-drawer');\n  const { data: drawerData } = drawer.getState();\n\n  return (\n    <React.Fragment>\n      <DataTable title=\"Data Table Example\" tableState={dataTableProps} />\n      <Drawer title=\"Cell Overflow Data\" model=\"cellOverflow-drawer\">\n        <Drawer.Section>\n          {drawerData &&\n            drawerData.value.map((item) => {\n              return (\n                <p key={item} style={{ marginBottom: 30 }}>\n                  {item}\n                </p>\n              );\n            })}\n        </Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"table-settings"},"Table Settings"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showColumnVisibilityConfig")," prop to allow the users to customize the visibility and order of the columns. You can restrict the users ability to toggle visibility and reorder columns by passing in the ",(0,r.kt)("inlineCode",{parentName:"p"},"canToggleVisibility")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"canReorderColumn")," respectively in the column config. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"isHiddenByDefault")," column prop to have a set of columns that are hidden by default that the user can toggle on/off. Pass ",(0,r.kt)("inlineCode",{parentName:"p"},"showColumn")," set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to override the ",(0,r.kt)("inlineCode",{parentName:"p"},"isHiddenByDefault")," config."),(0,r.kt)("p",null,"If you need the current configuration of the columns pass a callback function to the ",(0,r.kt)("inlineCode",{parentName:"p"},"onColumnVisibilityClose")," prop to receive the most recent columns on close of the column management drawer. To automatically store the column order and visibility, pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"uniqueStorageId")," prop to have the config stored locally."),(0,r.kt)("p",null,"If you need the current configuration of the columns pass a callback function to the ",(0,r.kt)("inlineCode",{parentName:"p"},"onColumnVisibilityOpen")," prop to receive the most recent columns on open of the column management drawer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(5, 4);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n        canReorderColumn: false,\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n        canToggleVisibilty: true,\n        isHiddenByDefault: true,\n        showColumn: true,\n        disableSortBy: true,\n        canReorderColumn: false,\n      },\n      {\n        Header: 'Column 3',\n        accessor: 'col3',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        canReorderColumn: true,\n        label: 'HSA',\n      },\n      {\n        Header: 'Column 4',\n        accessor: 'col4',\n        canToggleVisibilty: true,\n        isHiddenByDefault: true,\n        disableSortBy: true,\n        canReorderColumn: true,\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    showColumnVisibilityConfig: true,\n    showPagination: false,\n    uniqueStorageId: 'data-table-local-storage',\n    onColumnVisibilityClose: (columns) => console.log('columns', columns),\n    onColumnVisibilityOpen: (columns) => console.log('columns', columns),\n  });\n\n  const handleOnClick = () => {\n    dataTableProps.setColumns(newColumns, true);\n    dataTableProps.setData(newData, true);\n  };\n\n  return <DataTable title=\"Column Settings\" tableState={dataTableProps} />;\n};\n")),(0,r.kt)("h2",{id:"resize-columns"},"Resize Columns"),(0,r.kt)("p",null,"You can resize columns in the table by clicking and dragging the divider between two column headers. To disable resizing across the entire table, pass ",(0,r.kt)("inlineCode",{parentName:"p"},"disableResizing: true")," into the table options, or to prevent a specific column from being resized, pass ",(0,r.kt)("inlineCode",{parentName:"p"},"disableResizing: true")," into its respective column object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(100, 3);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Non-resizable column',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n        disableResizing: true,\n      },\n      {\n        Header: 'Resizable Column 1',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Resizable Column 2',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n      },\n    ],\n    []\n  );\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showTableSettings: true,\n    pageSizeOptions: [5, 10, 15],\n  });\n\n  return (\n    <DataTable title=\"Resize Columns\" tableState={dataTablePropsPagination} />\n  );\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(100, 3);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Table Resizing Disabled',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Non-resizable Column 2',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Non-resizable Column 3',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n      },\n    ],\n    []\n  );\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    disableResizing: true,\n    showTableSettings: true,\n    pageSizeOptions: [5, 10, 15],\n  });\n\n  return (\n    <DataTable\n      title=\"Resizing Disabled\"\n      tableState={dataTablePropsPagination}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"minimum-column-width"},"Minimum Column Width"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"minColumnWidth")," prop to set the minimum column width for columns in the table. The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"150")," pixels."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(100, 3);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Min Width: 300px (1)',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Min Width: 300px (2)',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Min Width: 300px (3)',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n      },\n    ],\n    []\n  );\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    minColumnWidth: 300,\n    pageSizeOptions: [5, 10, 15],\n  });\n\n  return (\n    <DataTable\n      title=\"Minimum Column Width\"\n      tableState={dataTablePropsPagination}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"overriding-default-column-widths"},"Overriding Default Column Widths"),(0,r.kt)("p",null,"Each individual column can receive the ",(0,r.kt)("inlineCode",{parentName:"p"},"minWidth"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"width"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"maxWidth")," properties to set their minimum, default, and maximum widths respectively."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(100, 5);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Default column widths',\n        accessor: 'col1',\n      },\n      {\n        Header: 'Min Width: 300px',\n        accessor: 'col2',\n        minWidth: 300,\n      },\n      {\n        Header: 'Starting Width: 250px',\n        accessor: 'col3',\n        width: 250,\n      },\n      {\n        Header: 'Max Width: 200px',\n        accessor: 'col4',\n        maxWidth: 200,\n      },\n    ],\n    []\n  );\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    pageSizeOptions: [5, 10, 15],\n  });\n\n  return (\n    <DataTable\n      title=\"Overriding Column Widths\"\n      tableState={dataTablePropsPagination}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"fullscreen"},"Fullscreen"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showFullscreenButton")," prop to show a button that will render the table in fullscreen when clicked. The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(100, 3);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Column 3',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n      },\n    ],\n    []\n  );\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showFullscreenButton: true,\n    pageSizeOptions: [10, 20, 30],\n  });\n\n  return (\n    <DataTable\n      title=\"Fullscreen Button\"\n      tableState={dataTablePropsPagination}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"display-settings"},"Display Settings"),(0,r.kt)("p",null,"A dropdown menu for table configuration settings will be present above the table, allowing the user to hide empty columns and resize cells to ",(0,r.kt)("inlineCode",{parentName:"p"},"Comfortable")," (48px) ",(0,r.kt)("inlineCode",{parentName:"p"},"Cozy")," (40px) or ",(0,r.kt)("inlineCode",{parentName:"p"},"Compact")," (34px). The default cell height is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"Comfortable"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getRandomVariant = () => {\n    const variants = [`success`, `warning`, `error`, `info`, `neutral`];\n    const random = Math.floor(Math.random() * 5);\n    return variants[random];\n  };\n\n  const createData = (count) => {\n    const data = [];\n    for (let i = 0; i < count; i++) {\n      const variant = getRandomVariant();\n      data.push({\n        col1: `Col 1/Row ${i + 1}`,\n        col2: 'Table Data',\n        col3: null,\n        col4: variant,\n        col5: null,\n      });\n    }\n    return data;\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Table Data 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Table Data 2',\n        accessor: 'col2',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        disableSortBy: true,\n        canReorderColumn: false,\n        Cell: ({ value }) => {\n          return (\n            <Layout.Group>\n              <IconMaterial icon=\"bookmarks\" size=\"sm\" />\n              {value}\n            </Layout.Group>\n          );\n        },\n      },\n      {\n        Header: 'Table Data 3',\n        accessor: 'col3',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        label: 'Table Data 3',\n      },\n      {\n        Header: 'Table Data 4',\n        accessor: 'col4',\n        canToggleVisibilty: true,\n        isHiddenByDefault: false,\n        disableSortBy: true,\n        canReorderColumn: false,\n        Cell: ({ value }) => {\n          const badgeLabel = value.charAt(0).toUpperCase() + value.slice(1);\n          return <Badge variant={value}>{badgeLabel} Badge</Badge>;\n        },\n      },\n      {\n        Header: 'Table Data 5',\n        accessor: 'col5',\n        canToggleVisibilty: true,\n        isHiddenByDefault: true,\n        disableSortBy: true,\n        canReorderColumn: false,\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => [...createData(10)], []);\n\n  const actions = [\n    {\n      onClick: ({ deleteRows }) => {\n        deleteRows();\n      },\n      icon: <IconMaterial icon=\"delete\" />,\n      label: 'Delete Row',\n    },\n    {\n      onClick: ({ modifyRows }) => {\n        modifyRows({ col1: 'Modified Cell' });\n      },\n      label: 'Modify Cell',\n    },\n    {\n      onClick: ({ modifyRows }) => {\n        modifyRows({\n          col1: `Modified Col 1`,\n          col2: `Modified Col 2`,\n          col3: `Modified Col 3`,\n        });\n      },\n      label: 'Modify Row',\n      icon: <IconMaterial icon=\"mark_as_unread\" />,\n      isSingle: true,\n    },\n  ];\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialData: data,\n    initialColumns: columns,\n    showSelection: true,\n    actions,\n    showPagination: false,\n    showTableSettings: true,\n    additionalPaginationText: '(Can insert extra text here)',\n    uniqueStorageId: 'data-table-usage',\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return (\n    <DataTable title=\"Configuration Settings\" tableState={dataTableProps} />\n  );\n};\n")),(0,r.kt)("h2",{id:"download-table"},"Download Table"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showDownloadButton")," prop to show a dropdown menu that allows you to download the table data. The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"#custom-csv"},"Custom CSV")," for more information on how to apply custom rendering to the table data csv file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(1000, 3);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Column 3',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n      },\n    ],\n    []\n  );\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showDownloadButton: true,\n    pageSizeOptions: [10, 20, 30],\n    showGlobalFilter: true,\n  });\n\n  return (\n    <DataTable title=\"Download Button\" tableState={dataTablePropsPagination} />\n  );\n};\n")),(0,r.kt)("h3",{id:"remove-csv-columns"},"Remove CSV Columns"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"removeCsvColumns")," prop to remove columns from the csv download. The ",(0,r.kt)("inlineCode",{parentName:"p"},"removeCsvColumns")," prop takes an array containing the accessor values from the columns you would like removed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(1000, 3);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Remove on CSV Download',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n      },\n    ],\n    []\n  );\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showDownloadButton: true,\n    pageSizeOptions: [10, 20, 30],\n    showGlobalFilter: true,\n    removeCsvColumns: ['col3'],\n  });\n\n  return (\n    <DataTable\n      title=\"Remove CSV Download\"\n      tableState={dataTablePropsPagination}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"update-table-data"},"Update Table Data"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"setColumns")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"setData")," methods to update the columns and rows in that table. A second parameter of type ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," can be passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"setColumns")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"setData")," to skip page reset, the default is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const { data, columns } = utils.useDocDataTable(5);\n  const { data: newData, columns: newColumns } = utils.useDocDataTable(25);\n\n  const dataTableProps = useDataTable({\n    showColumnSort: true,\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showSelection: true,\n  });\n\n  const handleOnClick = () => {\n    dataTableProps.setColumns(newColumns, true);\n    dataTableProps.setData(newData, true);\n  };\n\n  return (\n    <React.Fragment>\n      <DataTable title="Update Data" tableState={dataTableProps} />\n      <Button onClick={handleOnClick}>Update Data</Button>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"column-sort"},"Column Sort"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showColumnSort")," prop to either turn off or on the ability for the user to sort columns. Pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"disableSortBy")," prop to the column config to toggle the ability to sort or not sort the columns."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const { data, columns } = utils.useDocDataTable(5);\n\n  const dataTableProps = useDataTable({\n    showColumnSort: false,\n    showPagination: false,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  const dataTablePropsSort = useDataTable({\n    showColumnSort: true,\n    showPagination: false,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return (\n    <Layout.Group>\n      <DataTable title="Base" tableState={dataTableProps} />\n      <DataTable title="Sorting" tableState={dataTablePropsSort} />\n    </Layout.Group>\n  );\n};\n')),(0,r.kt)("h2",{id:"sorttype"},"SortType"),(0,r.kt)("p",null,"Pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"sortType")," prop to the column config to sort the column data. It takes following parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"alphanumeric"),": Sorts by mixed alphanumeric values with case-sensitivity.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"alphanumericCaseInsensitive"),": Sorts by mixed alphanumeric values without case-sensitivity."))),(0,r.kt)("p",null,"The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"alphanumericCaseInsensitive"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getRandomVariant = () => {\n    const variants = [1, 3, 'Alpha', 'beta', 'Charlie', 'Theta'];\n    const random = Math.floor(Math.random() * 5);\n    return variants[random];\n  };\n\n  const createData = (count) => {\n    const data = [];\n    for (let i = 0; i < count; i++) {\n      const variant = getRandomVariant();\n      data.push({\n        col1: variant,\n        col2: variant,\n      });\n    }\n    return data;\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Table Data 1',\n        accessor: 'col1',\n        // Default Sort Type\n        sortType: 'alphanumericCaseInsensitive',\n      },\n      {\n        Header: 'Table Data 2',\n        accessor: 'col2',\n        sortType: 'alphanumeric',\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => [...createData(10)], []);\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    showPagination: false,\n  });\n\n  return <DataTable title=\"Data Table Example\" tableState={dataTableProps} />;\n};\n")),(0,r.kt)("h2",{id:"bulk-actions"},"Bulk Actions"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"bulkActions")," prop to add table actions to selected row. Each action's ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick")," function will be passed an object as a parameter, which has the following properties:"),(0,r.kt)("p",null,"Main properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deleteRows")," - a function that deletes the selected rows."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modifyRows")," - a function to modify multiple cells of the selected rows. Takes one parameter, an object where the keys are column IDs to be modified, and their respective values are what the cells will be changed to."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modifyRow")," - a function similar to modifyRows but allows you to designate the specific rows to modify from the selected group. Takes two parameters, the id of the row to be modified and an object where the keys are column IDs to be modified, and their respective values are what the cells will be changed to.")),(0,r.kt)("p",null,"Other properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getSelectedRowIds")," - a function that returns IDs of the selected rows."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"getSelectedRows")," - a function that returns the row object of selected rows. Does not work when ",(0,r.kt)("a",{parentName:"li",href:"#server-side-pagination"},"server-side pagination")," is active."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"clearCache")," - a function that can be called when using ",(0,r.kt)("a",{parentName:"li",href:"#server-side-pagination"},"server-side pagination")," to clear the cached data. This would be useful if you call your API to update the selected rows (using ",(0,r.kt)("inlineCode",{parentName:"li"},"getSelectedRowIds"),"), so you can empty the cache and retrieve the updated data from the API.")),(0,r.kt)("p",null,"Each action must include a label and an icon. Pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"isSingle")," flag into any action to disable the button if the user has more than one row selected. Pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"isSeparated")," flag into any action to create a horizontal divider between that action and the next action."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(200);\n\n  const bulkActions = [\n    {\n      onClick: ({ deleteRows, getSelectedRowIds, clearCache }) => {\n        console.log('Deleting rows: ', getSelectedRowIds());\n        deleteRows();\n      },\n      icon: <IconMaterial icon=\"delete\" />,\n      label: 'Delete Rows',\n      isSeparated: true,\n    },\n    {\n      onClick: ({ modifyRows, getSelectedRowIds, clearCache }) => {\n        console.log('Modifying cells in rows: ', getSelectedRowIds());\n        modifyRows({ col1: 'Modify Cell' });\n      },\n      icon: <IconMaterial icon=\"mark_as_unread\" />,\n      label: 'Modify Cells',\n    },\n    {\n      onClick: ({\n        modifyRows,\n        getSelectedRowIds,\n        clearCache,\n        getSelectedRows,\n      }) => {\n        console.log('getSelectedRows', getSelectedRows());\n        const ids = getSelectedRowIds();\n        modifyRows({\n          col1: `Modified Col1/Row id: ${ids[0]}`,\n          col2: `Modified Col2/Row id: ${ids[0]}`,\n          col3: `Modified Col3/Row id: ${ids[0]}`,\n        });\n      },\n      label: 'Modify Rows',\n      isSingle: true,\n    },\n  ];\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    showSelection: true,\n    defaultSelectedRows: { 1: true, 6: true },\n    bulkActions,\n  });\n\n  return <DataTable title=\"Bulk Actions\" tableState={dataTableProps} />;\n};\n")),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"modifyRow")," whenever you need to control which rows from the selected group should be modified."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isLoading, setLoading] = useState(false);\n\n  const createData = (count) => {\n    const data = [];\n    for (let i = 0; i < count; i++) {\n      data.push({\n        col1: `Col 1/Row ${i + 1}`,\n      });\n    }\n    return data;\n  };\n\n  const data = React.useMemo(() => [...createData(10)], []);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \'Column 1\',\n        accessor: \'col1\',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n        canReorderColumn: false,\n      },\n      {\n        Header: \'Status\',\n        accessor: \'col2\',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n        canReorderColumn: false,\n      },\n    ],\n    []\n  );\n\n  const modifySpecifiedRows = ({\n    getSelectedRowIds,\n    getSelectedRows,\n    modifyRow,\n  }) => {\n    setLoading(true);\n\n    setTimeout(() => {\n      setLoading(false);\n\n      const selectedRowIds = getSelectedRowIds();\n      const selectedRows = getSelectedRows();\n      console.log(\'getSelectedRows\', selectedRows);\n      console.log(\'getSelectedRowIds\', selectedRowIds);\n\n      selectedRows.forEach((row, index) => {\n        const rowId = selectedRowIds[index];\n        if (rowId % 2 === 0) {\n          modifyRow(rowId, {\n            col2: <Badge variant="error">Failed to Complete</Badge>,\n          });\n        } else {\n          modifyRow(rowId, {\n            col2: <Badge variant="success">Completed Successfully</Badge>,\n          });\n        }\n      });\n    }, 1000);\n  };\n\n  const bulkActions = [\n    {\n      onClick: modifySpecifiedRows,\n      label: \'Modify Specified Rows\',\n    },\n  ];\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    showSelection: true,\n    showPagination: false,\n    defaultSelectedRows: { 1: true, 6: true },\n    bulkActions,\n  });\n\n  return (\n    <LoadingOverlay\n      loadingTitle="Please Wait"\n      loadingMessage="Retrieving Information."\n      statusTitle="Status update"\n      statusMessage="Sample message..."\n      ariaLoadingLabel="Example loading aria label"\n      isLoading={isLoading}\n    >\n      <DataTable\n        title="Bulk Actions - Modify Specified Rows"\n        tableState={dataTableProps}\n      />\n    </LoadingOverlay>\n  );\n};\n')),(0,r.kt)("h2",{id:"individual-actions"},"Individual Actions"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"individualActions")," prop to add table actions to individual rows. When ",(0,r.kt)("inlineCode",{parentName:"p"},"individualActions")," is used an 'Actions' column will appear in the table. If an array of action objects is added to ",(0,r.kt)("inlineCode",{parentName:"p"},"individualActions")," each row will have its own ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/dropdown-menu"},"DropDownMenu")," that includes each of the actions within ",(0,r.kt)("inlineCode",{parentName:"p"},"individualActions"),". If only a single action object is added, rather than a dropdown menu the action will be converted to a single button in the style of either a ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/button"},"Button")," or ",(0,r.kt)("a",{parentName:"p",href:"web/ui/link"},"Link")," based on the ",(0,r.kt)("inlineCode",{parentName:"p"},"buttonVariant")," prop value. The single action default style type is link."),(0,r.kt)("p",null,"Each action's ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick")," function will be passed an object as a parameter, which has the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"row")," - the row being interacted with. You will almost always want to pass this into ",(0,r.kt)("inlineCode",{parentName:"li"},"deleteRow")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"modifyRow")," as the row being modified / deleted."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deleteRow")," - a function that deletes a row. Takes one parameter, the row to delete."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modifyRow")," - a function to modify cells in a row. Takes two parameters; the first one is the row to modify, and the second is an object where the keys are column IDs to be modified, and their respective values are what the cells will be changed to."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"clearCache")," - a function that can be called when using ",(0,r.kt)("a",{parentName:"li",href:"#server-side-pagination"},"server-side pagination")," to clear the cached data. This would be useful if you call your API to update the data, so you can empty the cache and retrieve the updated data from the API.")),(0,r.kt)("p",null,"You may provide a ",(0,r.kt)("inlineCode",{parentName:"p"},"checkDisabled")," function to the action, which takes ",(0,r.kt)("inlineCode",{parentName:"p"},"row")," as a parameter and must return ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". If it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", the action will be disabled for that row. Use this function to determine if an action should be disabled; for example, if your table has emails as data and a specific email is marked as read, you would want to disable the action to mark it as read (using ",(0,r.kt)("inlineCode",{parentName:"p"},"checkDisabled")," to check the read / unread field in the row data)."),(0,r.kt)("p",null,"Each action must include a label and an icon. Pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"isSeparated")," flag into any action to create a horizontal divider between that action and the next action."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(100);\n\n  const individualActions = [\n    {\n      onClick: ({ deleteRow, row }) => {\n        deleteRow(row);\n        console.log('deleted row: ', row);\n      },\n      checkDisabled: (row) => {\n        return row.index % 4 === 0;\n      },\n      icon: <IconMaterial icon=\"delete\" />,\n      label: 'Delete Row',\n      isSeparated: true,\n    },\n    {\n      onClick: ({ modifyRow, row }) => {\n        modifyRow(row, { col1: 'Modified Cell' });\n      },\n      label: 'Modify Cell',\n    },\n    {\n      onClick: ({ modifyRow, row }) => {\n        modifyRow(row, {\n          col1: `Modified Col 1`,\n          col2: `Modified Col 2`,\n          col3: `Modified Col 3`,\n        });\n      },\n      label: 'Modify Row',\n      icon: <IconMaterial icon=\"mark_as_unread\" />,\n    },\n  ];\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    showSelection: true,\n    individualActions,\n  });\n\n  return (\n    <DataTable\n      title=\"Individual Actions - Multiple Actions DropDownMenu\"\n      tableState={dataTableProps}\n    />\n  );\n};\n")),(0,r.kt)("p",null,"To use a single action in the style of a ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/link"},"Link")," simply pass in a single object and it will default to the style of a link."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(5);\n\n  const deleteLinkButton = {\n    onClick: ({ deleteRow, row }) => {\n      deleteRow(row);\n      console.log('deleted row: ', row);\n    },\n    checkDisabled: (row) => {\n      return row.index % 4 === 0;\n    },\n    label: 'Delete',\n  };\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    showSelection: true,\n    individualActions: deleteLinkButton,\n  });\n\n  return (\n    <DataTable\n      title=\"Individual Actions - Single Action Link\"\n      tableState={dataTableProps}\n    />\n  );\n};\n")),(0,r.kt)("p",null,"To use a single action in the style of a ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/button"},"Button")," pass in a single object and set the ",(0,r.kt)("inlineCode",{parentName:"p"},"buttonVariant")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(5);\n\n  const deleteButton = {\n    onClick: ({ deleteRow, row }) => {\n      deleteRow(row);\n      console.log('deleted row: ', row);\n    },\n    checkDisabled: (row) => {\n      return row.index % 4 === 0;\n    },\n    buttonVariant: true,\n    label: 'Delete',\n  };\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    showSelection: true,\n    individualActions: deleteButton,\n  });\n\n  return (\n    <DataTable\n      title=\"Individual Actions - Single Action Button\"\n      tableState={dataTableProps}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"custom-table-header-section"},"Custom Table Header Section"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"customHeaderSection")," prop to add custom content to the left side of the table header. If ",(0,r.kt)("a",{parentName:"p",href:"#bulk-actions"},"Bulk Actions")," and/or ",(0,r.kt)("a",{parentName:"p",href:"#custom-table-header-buttons"},"Custom Header Buttons")," are utilized their corresponding buttons will appear to the right of this content."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1',\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n      },\n    ],\n    []\n  );\n\n  const createData = (dataSetValue) => {\n    const data = [];\n    for (let i = 0; i < 10; i++) {\n      data.push({\n        col1: `Data Set ${dataSetValue} - Col 1/Row ${i + 1}`,\n        col2: `Data Set ${dataSetValue} - Col 2/Row ${i + 1}`,\n      });\n    }\n    return data;\n  };\n\n  const [isLoading, setLoading] = useState(false);\n\n  const form = useForm({\n    defaultValues: {\n      'custom-header-section': '1',\n    },\n  });\n\n  const updateTableData = () => {\n    setLoading(true);\n    setTimeout(() => {\n      const currentValue = form.getValues('custom-header-section');\n      const data = createData(currentValue);\n      dataTableProps.setData(data);\n      setLoading(false);\n      form.setFocus('custom-header-section');\n    }, 1000);\n  };\n\n  const customHeaderSection = (\n    <FormProvider state={form}>\n      <SelectInput\n        label=\"Custom Header Section\"\n        placeholder=\"Pick one\"\n        model=\"custom-header-section\"\n        onChange={updateTableData}\n        options={[\n          { label: 'Data Set 1', value: '1' },\n          { label: 'Data Set 2', value: '2' },\n          { label: 'Data Set 3', value: '3' },\n        ]}\n      />\n    </FormProvider>\n  );\n\n  const dataTableProps = useDataTable({\n    initialData: createData('1'),\n    initialColumns: columns,\n    pageSizeDefault: 5,\n    pageSizeOptions: [5, 10],\n    customHeaderSection,\n  });\n\n  return (\n    <LoadingOverlay\n      loadingTitle=\"Please Wait\"\n      loadingMessage=\"Retrieving Information.\"\n      statusTitle=\"Status update\"\n      statusMessage=\"Sample message...\"\n      ariaLoadingLabel=\"Example loading aria label\"\n      isLoading={isLoading}\n    >\n      <DataTable\n        title=\"Custom Table Header Section\"\n        tableState={dataTableProps}\n      />\n    </LoadingOverlay>\n  );\n};\n")),(0,r.kt)("h2",{id:"custom-table-header-buttons"},"Custom Table Header Buttons"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"customHeaderButtons")," prop to create custom buttons that will appear in the table header, to the right of the ",(0,r.kt)("a",{parentName:"p",href:"#bulk-actions"},"Bulk Actions")," dropdown (if it is there). Each custom button can either be a link (with ",(0,r.kt)("inlineCode",{parentName:"p"},"href"),"), a button (with ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick"),"), or a ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/dropdown-menu"},"DropdownMenu")," (with ",(0,r.kt)("inlineCode",{parentName:"p"},"dropdownItems"),")."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"customHeaderButtons")," is an array of objects, where each object takes the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"label")," - the label for the button"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"icon")," - the icon that will be displayed to the left of the label"),(0,r.kt)("li",{parentName:"ul"},"ONE of the following:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"href")," - a link that the page will redirect to when the button is clicked"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onClick")," - a function that will be called when the button is clicked"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dropdownItems")," - an array that will be used to create a ",(0,r.kt)("a",{parentName:"li",href:"/web/ui/dropdown-menu"},"DropdownMenu")," instead of a button; see ",(0,r.kt)("a",{parentName:"li",href:"/web/ui/dropdown-menu"},"the docs of DropdownMenu")," for more information on what to pass.")))),(0,r.kt)("p",null,"NOTE: the maximum number of custom buttons is ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),", so any additional custom buttons included in ",(0,r.kt)("inlineCode",{parentName:"p"},"customHeaderButtons")," will not be rendered."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(200);\n\n  const customHeaderButtons = [\n    {\n      label: 'Custom Button',\n      onClick: () => {\n        console.log('custom button clicked');\n      },\n    },\n    {\n      label: 'Link to Abyss docs',\n      icon: <IconMaterial icon=\"anchor\" size=\"$sm\" />,\n      href: 'https://abyss.uhg.com',\n    },\n  ];\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    pageSizeDefault: 5,\n    pageSizeOptions: [5, 10],\n    customHeaderButtons,\n  });\n\n  return (\n    <DataTable\n      title=\"Custom Table Header Buttons\"\n      tableState={dataTableProps}\n    />\n  );\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(200);\n\n  const customHeaderButtons = [\n    {\n      label: 'Custom Dropdown',\n      icon: <IconMaterial icon=\"build\" size=\"$sm\" />,\n      dropdownItems: [\n        {\n          title: 'Test Action',\n          onClick: () => {\n            console.log('test action clicked');\n          },\n          icon: <IconMaterial icon=\"save\" />,\n        },\n        {\n          title: 'Disabled Test Action',\n          onClick: () => {\n            console.log('disabled test action clicked');\n          },\n          disabled: true,\n        },\n      ],\n    },\n  ];\n\n  const dataTableProps = useDataTable({\n    initialData: data,\n    initialColumns: columns,\n    pageSizeDefault: 5,\n    pageSizeOptions: [5, 10],\n    customHeaderButtons,\n  });\n\n  return (\n    <DataTable\n      title=\"Custom Table Header Dropdown\"\n      tableState={dataTableProps}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"selection"},"Selection"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showSelection")," prop to allow the ability for users to select rows. To set default selected rows use the ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultSelectedRows")," prop, ",(0,r.kt)("inlineCode",{parentName:"p"},"[rowId]: true/false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(100);\n\n  const dataTablePropsPagination = useDataTable({\n    showSelection: true,\n    defaultSelectedRows: { 1: true, 6: true },\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return (\n    <div>\n      <DataTable title=\"Selection\" tableState={dataTablePropsPagination} />\n\n      <pre style={{ maxHeight: '200px', overflow: 'auto' }}>\n        <code>\n          selectedRowIds:\n          {JSON.stringify(\n            dataTablePropsPagination.state.selectedRowIds,\n            null,\n            2\n          )}\n        </code>\n      </pre>\n    </div>\n  );\n};\n")),(0,r.kt)("h2",{id:"single-selection"},"Single Selection"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"singleSelection")," prop to allow the ability for users to select only one row."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(100);\n\n  const dataTablePropsPagination = useDataTable({\n    singleSelection: true,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return (\n    <div>\n      <DataTable\n        title=\"Single Selection\"\n        tableState={dataTablePropsPagination}\n      />\n\n      <pre style={{ maxHeight: '200px', overflow: 'auto' }}>\n        <code>\n          selectedRowIds:\n          {JSON.stringify(\n            dataTablePropsPagination.state.selectedRowIds,\n            null,\n            2\n          )}\n        </code>\n      </pre>\n    </div>\n  );\n};\n")),(0,r.kt)("h2",{id:"expansion-rows"},"Expansion Rows"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"renderSubComponent")," prop to enable expansion rows for the data table. Add the ",(0,r.kt)("inlineCode",{parentName:"p"},"expandedByDefault")," prop set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to the data objects to have the expansion open by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const { columns } = utils.useDocDataTable(1000);\n\n  const data = [\n    {\n      col1: `Col 1/Row 1`,\n      col2: `Col 2/Row 1`,\n      expandedByDefault: true,\n    },\n    {\n      col1: `Col 1/Row 2`,\n      col2: `Col 2/Row 2`,\n    },\n    {\n      col1: `Col 1/Row 3`,\n      col2: `Col 2/Row 3`,\n      expandedByDefault: true,\n    },\n    {\n      col1: `Col 1/Row 4`,\n      col2: `Col 2/Row 4`,\n    },\n  ];\n\n  const renderRowSubComponent = React.useCallback((row) => {\n    return (\n      <pre>\n        <code>{JSON.stringify({ values: row.values }, null, 2)}</code>\n      </pre>\n    );\n  }, []);\n\n  const dataTablePropsPagination = useDataTable({\n    renderSubComponent: renderRowSubComponent,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return <DataTable title="Expansion" tableState={dataTablePropsPagination} />;\n};\n')),(0,r.kt)("h2",{id:"filtering"},"Filtering"),(0,r.kt)("p",null,"DataTable supports both global filters and column filters to refine data searches. When a filter is active, it will appear as a ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/chip"},"Chip"),", and closing the chip will remove the filter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const createData = (count) => {\n    const data = [];\n    for (let i = 0; i < count; i++) {\n      data.push({\n        col1: `Col 1/Row ${i + 1}`,\n        col2: i % 2 === 0 ? -(i * 3) : i * 3,\n        col3: `10/${9 + Math.ceil(Math.random() * 21)}/2020`,\n        col4: i % 3 === 0 ? 'Option 1' : 'Option 2',\n      });\n    }\n    return data;\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Table Data 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Value',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Date',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Option Select',\n        accessor: 'col4',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => [...createData(200)], []);\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showGlobalFilter: true,\n    showFilterDataset: true,\n    initialGlobalFilter: '2',\n    initialFilters: [\n      {\n        columnId: 'col1',\n        filters: [{ condition: 'ends-with', filterValue: '1' }],\n      },\n      {\n        columnId: 'col2',\n        filters: [{ condition: 'less', filterValue: '25' }],\n      },\n      {\n        columnId: 'col3',\n        filters: [{ condition: 'greater-equal', filterValue: '10/15/2020' }],\n      },\n      {\n        columnId: 'col4',\n        filters: [{ condition: 'equals', filterValue: 'Option 1' }],\n      },\n    ],\n    filterColumnTypes: {\n      col3: {\n        type: 'date',\n      },\n      col4: {\n        type: 'select',\n        options: [\n          { value: 'Option 1', label: 'Option 1' },\n          { value: 'Option 2', label: 'Option 2' },\n        ],\n      },\n    },\n  });\n\n  return <DataTable title=\"Filtering\" tableState={dataTablePropsPagination} />;\n};\n")),(0,r.kt)("h3",{id:"global-filtering"},"Global Filtering"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showGlobalFilter")," prop to leverage the ability to filter the table globally (across all rows / columns)."),(0,r.kt)("p",null,"You can also use the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialGlobalFilter")," prop to set the initial value for the global filter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(1000);\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showGlobalFilter: true,\n    initialGlobalFilter: '20',\n  });\n\n  return (\n    <DataTable title=\"Global Filtering\" tableState={dataTablePropsPagination} />\n  );\n};\n")),(0,r.kt)("h3",{id:"column-filtering"},"Column Filtering"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showFilterDataset")," prop to leverage the ability to filter the table by column. Clicking the ",(0,r.kt)("strong",{parentName:"p"},"Filter Dataset")," Button will open a modal where you can customize and apply the filters. When filters are active, the ",(0,r.kt)("strong",{parentName:"p"},"Filter Dataset"),' button text will be updated to, "Edit Filters" and indicate the number of currently active filters.'),(0,r.kt)("h4",{id:"initial-filters"},"Initial Filters"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"initialFilters")," prop to set the initial value for the column filters. ",(0,r.kt)("inlineCode",{parentName:"p"},"initialFilters")," must be an array of objects with the structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"  const dataTablePropsPagination = useDataTable({\n    ... // Other props for useDataTable go here\n    initialFilters: [\n      {\n        columnId: 'col1', // The ID of the column to apply the filter on\n        filters: [\n          {\n            condition: 'contains', // The condition to filter on\n            filterValue: '10' // The filter value\n          },\n          ... // More filters on the same column\n          ]\n      },\n      ... // More filters on other columns\n    ],\n  });\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"condition")," property within ",(0,r.kt)("inlineCode",{parentName:"p"},"filters")," must be one of the following strings:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"equals")," - Equal to"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"not-equal")," - Not equal to"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"contains")," - Contains"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"greater")," - Greater than"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"greater-equal")," - Greater than or equal to"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"less")," - Less than"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"less-equal")," - Less than or equal to"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"starts-with")," - Starts with"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ends-with")," - Ends with")),(0,r.kt)("h4",{id:"column-filter-types"},"Column Filter Types"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"columnFilterTypes")," prop to set the kind of filter that will show up for each column. By default, columns' filters are ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/text-input"},"TextInputs"),", but they can be changed to ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/date-input"},"DateInputs")," or ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/select-input"},"SelectInputs"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"columnFilterTypes")," must be an object with the structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const dataTablePropsPagination = useDataTable({\n    ... // Other props for useDataTable go here\n    columnFilterTypes: {\n      col1: { // Column ID for the column whose filter type you want to change\n        type: 'date' // Will change the filter to a DateInput\n      },\n      col3: {\n        type: 'select', // Will change the filter to a SelectInput\n        options: [ // The option list for the SelectInput\n          { value: 'Option 1', label: 'Option 1' },\n          { value: 'Option 2', label: 'Option 2' },\n        ]\n      }\n    },\n  });\n\n")),(0,r.kt)("p",null,"Note that when a column's ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"date"),", nothing else is required, but when the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"select"),", an ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," property must be passed along with it to provide the options for the SelectInput (see the SelectInput documentation ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/select-input"},"here")," for more details on how to structure options)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const createData = (count) => {\n    const data = [];\n    for (let i = 0; i < count; i++) {\n      data.push({\n        col1: `Col 1/Row ${i + 1}`,\n        col2: i % 2 === 0 ? -(i * 3) : i * 3,\n        col3: `10/${9 + Math.ceil(Math.random() * 21)}/2020`,\n        col4: i % 7 === 0 ? 'Option 1' : 'Option 2',\n      });\n    }\n    return data;\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Table Data 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Value',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Date',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Option Select',\n        accessor: 'col4',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => [...createData(400)], []);\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showFilterDataset: true,\n    initialFilters: [\n      {\n        columnId: 'col1',\n        filters: [{ condition: 'contains', filterValue: '0' }],\n      },\n      {\n        columnId: 'col2',\n        filters: [{ condition: 'ends-with', filterValue: '8' }],\n      },\n      {\n        columnId: 'col3',\n        filters: [{ condition: 'greater-equal', filterValue: '10/12/2020' }],\n      },\n      {\n        columnId: 'col4',\n        filters: [{ condition: 'equals', filterValue: 'Option 2' }],\n      },\n    ],\n    filterColumnTypes: {\n      col3: {\n        type: 'date',\n      },\n      col4: {\n        type: 'select',\n        options: [\n          { value: 'Option 1', label: 'Option 1' },\n          { value: 'Option 2', label: 'Option 2' },\n        ],\n      },\n    },\n  });\n\n  return (\n    <DataTable title=\"Column Filtering\" tableState={dataTablePropsPagination} />\n  );\n};\n")),(0,r.kt)("h4",{id:"remove-filter-columns"},"Remove Filter Columns"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"removeFilterColumns"),' prop to remove columns from the "Column Name" drop-down for filter selection inside the Filter Dataset modal. The ',(0,r.kt)("inlineCode",{parentName:"p"},"removeFilterColumns")," prop takes an array containing the ",(0,r.kt)("inlineCode",{parentName:"p"},"accessor")," values from the columns you would like removed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const createData = (count) => {\n    const data = [];\n    for (let i = 0; i < count; i++) {\n      data.push({\n        col1: `Col 1/Row ${i + 1}`,\n        col2: i % 2 === 0 ? -(i * 3) : i * 3,\n        col3: `10/${9 + Math.ceil(Math.random() * 21)}/2020`,\n        col4: i % 7 === 0 ? 'Option 1' : 'Option 2',\n      });\n    }\n    return data;\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Table Data 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Value',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Date',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n      {\n        Header: 'Option Select',\n        accessor: 'col4',\n        canToggleVisibilty: false,\n        isHiddenByDefault: false,\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => [...createData(100)], []);\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    showFilterDataset: true,\n    removeFilterColumns: ['col2'],\n    filterColumnTypes: {\n      col3: {\n        type: 'date',\n      },\n      col4: {\n        type: 'select',\n        options: [\n          { value: 'Option 1', label: 'Option 1' },\n          { value: 'Option 2', label: 'Option 2' },\n        ],\n      },\n    },\n  });\n\n  return (\n    <DataTable\n      title=\"Remove Filter Columns\"\n      tableState={dataTablePropsPagination}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"custom-headers"},"Custom Headers"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Header")," prop to pass in a standard string or custom React Node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(5);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Custom Header',\n        accessor: 'col1',\n      },\n      {\n        Header: 'HSA',\n        accessor: 'col2',\n      },\n    ],\n    []\n  );\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return (\n    <DataTable title=\"Custom Headers\" tableState={dataTablePropsPagination} />\n  );\n};\n")),(0,r.kt)("h2",{id:"custom-cells"},"Custom Cells"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Cell")," prop to update each of the cells in the column."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1',\n        Cell: ({ value }) => {\n          if (!value) {\n            return '--';\n          }\n          return value;\n        },\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n        Cell: ({ value }) => {\n          return <div>Updated Cell: {value}</div>;\n        },\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(\n    () => [\n      {\n        col1: '',\n        col2: 'Col 2/Row 1',\n      },\n      {\n        col1: 'Col 1/Row 2',\n        col2: 'Col 2/Row 2',\n      },\n      {\n        col1: '',\n        col2: 'Col 2/Row 3',\n      },\n      {\n        col1: 'Col 1/Row 4',\n        col2: 'Col 2/Row 4',\n      },\n      {\n        col1: '',\n        col2: 'Col 2/Row 5',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return <DataTable title=\"Custom Cells\" tableState={dataTableProps} />;\n};\n")),(0,r.kt)("h2",{id:"custom-csv"},"Custom CSV"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"customSetCsv")," prop is a callback function that returns the cell value (within a ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," property) when downloading the table data csv file. Use this whenever you're performing any custom rendering within ",(0,r.kt)("inlineCode",{parentName:"p"},"Cell")," to ensure the data is also properly rendered within the csv. Download the csv file for the example below to see the application of this prop and how the column without ",(0,r.kt)("inlineCode",{parentName:"p"},"customSetCsv")," attempts to render the full object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const createData = (count) => {\n    const data = [];\n    for (let i = 0; i < count; i++) {\n      data.push({\n        col1: { colName: 'Col 1', rowName: `Row ${i + 1}` },\n        col2: { colName: 'Col 2', rowName: `Row ${i + 1}` },\n      });\n    }\n    return data;\n  };\n\n  const renderColData = ({ value }) => {\n    const { colName, rowName } = value;\n    return `${colName} / ${rowName}`;\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column With Custom CSV',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n        customSetCsv: renderColData,\n        Cell: renderColData,\n      },\n      {\n        Header: 'Column Without Custom CSV',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n        Cell: renderColData,\n      },\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => [...createData(10)], []);\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: false,\n    initialData: data,\n    initialColumns: columns,\n    showDownloadButton: true,\n  });\n\n  return <DataTable title=\"Custom Csv\" tableState={dataTablePropsPagination} />;\n};\n")),(0,r.kt)("h2",{id:"data-test-id"},"Data Test ID"),(0,r.kt)("p",null,"To include a ",(0,r.kt)("strong",{parentName:"p"},"data-testid")," attribute within the included DataTable features like selection, expansion rows, etc. you must pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"data-testid")," prop into the ",(0,r.kt)("inlineCode",{parentName:"p"},"useDataTable")," hook as well as the ",(0,r.kt)("inlineCode",{parentName:"p"},"DataTable")," component itself. For reference please view the code in the example below. For more information on usage of the ",(0,r.kt)("strong",{parentName:"p"},"data-testid")," attribute visit the ",(0,r.kt)("a",{parentName:"p",href:"/developers/component-testing/#data-testid"},"Component Testing Section"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { columns } = utils.useDocDataTable(1000);\n\n  const data = [\n    {\n      col1: `Col 1/Row 1`,\n      col2: `Col 2/Row 1`,\n      expandedByDefault: true,\n    },\n    {\n      col1: `Col 1/Row 2`,\n      col2: `Col 2/Row 2`,\n    },\n    {\n      col1: `Col 1/Row 3`,\n      col2: `Col 2/Row 3`,\n    },\n    {\n      col1: `Col 1/Row 4`,\n      col2: `Col 2/Row 4`,\n    },\n  ];\n\n  const renderRowSubComponent = React.useCallback((row) => {\n    return (\n      <pre>\n        <code>{JSON.stringify({ values: row.values }, null, 2)}</code>\n      </pre>\n    );\n  }, []);\n\n  const dataTablePropsPagination = useDataTable({\n    renderSubComponent: renderRowSubComponent,\n    initialData: data,\n    initialColumns: columns,\n    'data-testid': 'expansion-test-id',\n  });\n\n  return (\n    <DataTable\n      title=\"Data Table Expansion Example\"\n      tableState={dataTablePropsPagination}\n      data-testid=\"table-test-id\"\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"pagination"},"Pagination"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showPagination")," prop to enable default pagination for the data table. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"additionalPaginationText")," prop to display custom text under the pagination results container. The default value for ",(0,r.kt)("inlineCode",{parentName:"p"},"showPagination")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(1000);\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    additionalPaginationText: 'Custom Text For Pagination',\n  });\n\n  return <DataTable title=\"Pagination\" tableState={dataTablePropsPagination} />;\n};\n")),(0,r.kt)("h3",{id:"page-size-options"},"Page Size Options"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSizeOptions")," prop to pass in various page size options the use can select from. The first option will be the initial page size by default. To change the default page size, pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSizeDefault")," prop to the ",(0,r.kt)("inlineCode",{parentName:"p"},"useDataTable")," hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const { data, columns } = utils.useDocDataTable(1000);\n\n  const dataTablePropsTop = useDataTable({\n    showPagination: true,\n    pageSizeOptions: [6, 8, 10],\n    pageSizeDefault: 8,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return <DataTable title="Page Size Options" tableState={dataTablePropsTop} />;\n};\n')),(0,r.kt)("h3",{id:"hide-top-pagination"},"Hide Top Pagination"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showTopPagination")," prop to enable or disable the top pagination components (when ",(0,r.kt)("inlineCode",{parentName:"p"},"showPagination")," is true). The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const { data, columns } = utils.useDocDataTable(1000);\n\n  const dataTablePropsTop = useDataTable({\n    showPagination: true,\n    showTopPagination: false,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return (\n    <DataTable title="Without Top Pagination" tableState={dataTablePropsTop} />\n  );\n};\n')),(0,r.kt)("h3",{id:"hide-bottom-pagination"},"Hide Bottom Pagination"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showBottomPagination")," prop to enable or disable the bottom pagination components (when ",(0,r.kt)("inlineCode",{parentName:"p"},"showPagination")," is true). The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const { data, columns } = utils.useDocDataTable(1000);\n\n  const dataTablePropsBottom = useDataTable({\n    showPagination: true,\n    showBottomPagination: false,\n    initialData: data,\n    initialColumns: columns,\n  });\n\n  return (\n    <DataTable\n      title="Without Bottom Pagination"\n      tableState={dataTablePropsBottom}\n    />\n  );\n};\n')),(0,r.kt)("h3",{id:"pagination-result-count-override"},"Pagination Result Count Override"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"paginationResultsTotalCount")," prop to display a different total count value than the number of items in the table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data, columns } = utils.useDocDataTable(1000);\n\n  const dataTablePropsPagination = useDataTable({\n    showPagination: true,\n    initialData: data,\n    initialColumns: columns,\n    additionalPaginationText: 'Custom Text For Pagination',\n    paginationResultsTotalCount: 3000,\n  });\n\n  return <DataTable title=\"Pagination\" tableState={dataTablePropsPagination} />;\n};\n")),(0,r.kt)("h2",{id:"server-side-pagination"},"Server-Side Pagination"),(0,r.kt)("p",null,"Instead of supplying the table's entire dataset at once, you can hook up the table to an API and load the data page-by-page as needed. To use server-side pagination:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Set ",(0,r.kt)("inlineCode",{parentName:"li"},"usePagination")," to true"),(0,r.kt)("li",{parentName:"ul"},"Pass in an ",(0,r.kt)("inlineCode",{parentName:"li"},"apiPaginationCall")," function that will call the API and return the relevant page data")),(0,r.kt)("p",null,"There are additional props to modify the server-side pagination: ",(0,r.kt)("inlineCode",{parentName:"p"},"apiQueryOptions"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"manualSortBy"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"customGetRowId")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"disableApiCallOnLoad")," - however, these props are not required."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const bulkActions = [\n    {\n      onClick: ({ deleteRows, getSelectedRowIds, clearCache }) => {\n        deleteRows();\n        const selectedRowIds = getSelectedRowIds();\n        // Add something to hit the API here with selectedRowIds to update the database\n        if (selectedRowIds.length > 0) {\n          clearCache();\n        }\n      },\n      icon: <IconMaterial icon=\"delete\" />,\n      label: 'Delete Rows',\n      isSeparated: true,\n    },\n    {\n      onClick: ({ modifyRows, getSelectedRowIds, clearCache }) => {\n        modifyRows({ name: 'Modified Cell' });\n        const selectedRowIds = getSelectedRowIds();\n        // Add something to hit the API here with selectedRowIds to update the database\n        if (selectedRowIds.length > 0) {\n          clearCache();\n        }\n      },\n      label: 'Modify Cells',\n    },\n    {\n      onClick: ({ modifyRows, getSelectedRowIds, clearCache }) => {\n        modifyRows({\n          name: `Modified Name`,\n          sortOrder: `Modified Sort Order`,\n        });\n        const selectedRowIds = getSelectedRowIds();\n        // Add something to hit the API here with selectedRowIds to update the database\n        if (selectedRowIds.length > 0) {\n          clearCache();\n        }\n      },\n      label: 'Modify Rows',\n      icon: <IconMaterial icon=\"mark_as_unread\" />,\n      isSingle: true,\n    },\n  ];\n\n  const individualActions = [\n    {\n      onClick: ({ deleteRow, row, clearCache }) => {\n        deleteRow(row);\n        clearCache();\n      },\n      checkDisabled: (row) => {\n        return row.values.sortOrder % 2 === 0;\n      },\n      icon: <IconMaterial icon=\"delete\" />,\n      label: 'Delete Row',\n      isSeparated: true,\n    },\n    {\n      onClick: ({ modifyRow, row, clearCache }) => {\n        modifyRow(row, { name: 'Modified Cell' });\n        clearCache();\n      },\n      label: 'Modify Cell',\n    },\n    {\n      onClick: ({ modifyRow, row, clearCache }) => {\n        modifyRow(row, {\n          name: `Modified Name`,\n          sortOrder: `Modified Sort Order`,\n        });\n        clearCache();\n      },\n      label: 'Modify Row',\n      icon: <IconMaterial icon=\"mark_as_unread\" />,\n    },\n  ];\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    initialColumns: columns,\n    showSelection: true,\n    bulkActions,\n    individualActions,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeDefault: 5,\n    pageSizeOptions: [5, 10],\n    defaultSelectedRows: {\n      1: true,\n    },\n    uniqueStorageId: 'server-side',\n    apiPaginationCall: getMockData,\n    manualSortBy: true,\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return (\n    <DataTable title=\"Server-Side Pagination\" tableState={dataTableProps} />\n  );\n};\n")),(0,r.kt)("h3",{id:"api-pagination-call"},"API Pagination Call"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"apiPaginationCall")," prop to use an API to handle fetching data for the table. ",(0,r.kt)("inlineCode",{parentName:"p"},"apiPaginationCall")," must be a function that takes five parameters, ",(0,r.kt)("inlineCode",{parentName:"p"},"page"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSize"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sortBy"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"globalFilter"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"columnFilters"),", and it must return an object with ",(0,r.kt)("inlineCode",{parentName:"p"},"results")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"count")," fields, for the returned data and total number of results respectively. See the example function below."),(0,r.kt)("p",null,"By default this function will be called on page load. To override this default behavior add the ",(0,r.kt)("inlineCode",{parentName:"p"},"disableApiOnLoad")," prop and set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". From there you'll need to use ",(0,r.kt)("a",{parentName:"p",href:"#triggering-data-refresh"},"reloadTableData")," to make the initial call and initiate server-side pagination functionality."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const apiPaginationCall = (page, pageSize, sortBy, globalFilter, columnFilters) => {\n  // You only need to handle global filtering at the API level like this if you also pass the manualGlobalFilter prop as `true` into useDataTable\n  const globalFilterStr = `&globalFilter=${globalFilter}`;\n\n  // You only need to handle column filtering at the API level like this if you also pass the manualColumnFilter prop as `true` into useDataTable\n  const columnFiltersStr = `&columnFilters=${JSON.stringify(columnFilters)}`;\n\n  // You only need to handle sorting at the API level like this if you also pass the manualSortBy prop as `true` into useDataTable\n  const orderByStr =\n    sortBy && sortBy.length > 0 ? `&order_by=${sortBy[0].id}` : '';\n  const sortDirection =\n    sortBy && sortBy.length > 0\n      ? `&sort=${sortBy[0].desc ? 'desc' : 'asc'}`\n      : '';\n\n  return fetch(\n    `${Your API Endpoint link}?page=${page}&limit=${pageSize}${orderByStr}${sortDirection}${globalFilterStr}${columnFiltersStr}`\n  )\n    .then((res) => res.json())\n    .then((res) => {\n      return {\n        results: res.data, // The data returned from the API\n        count: res.total // The total number of results (for the entire dataset, not the current page)\n      };\n    });\n}\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"Other than these requirements, you are free to do whatever API calls, etc. are necessary within the function to return the data. ",(0,r.kt)("inlineCode",{parentName:"p"},"apiPaginationCall")," will be called every time the data for a page will be fetched. When the data for a page has already been cached, ",(0,r.kt)("inlineCode",{parentName:"p"},"apiPaginationCall")," will not be called, as the cached data will be used to minimize unnecessary API calls. For more information about caching and prefetching, see the ",(0,r.kt)("a",{parentName:"p",href:"#api-query-options"},"API Query Options")," section."),(0,r.kt)("h3",{id:"api-query-options"},"API Query Options"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"apiQueryOptions")," prop to specify additional options for the API queries. This prop is an object with three possible properties that can be contained in it:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onCalled"),": a function that is triggered every time a query is called. This function receives no parameters."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onCompleted"),": a function that is triggered every time a query is completed. This function receives one parameter, the response from the query."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"requestPolicy"),": pass this prop with the value 'no-cache' to disable the caching and prefetching of data. Otherwise, by default, every time a page is queried, the pages directly before and after it will also be queried to fetch the data before it is needed. Additionally by default, each page will be cached when it is fetched so that going back to a previously visited page will use the cached data rather than calling the API again.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    additionalPaginationText:\n      'No caching here; see Console for onCalled and onCompleted logs',\n    pageSizeOptions: [5, 10],\n    uniqueStorageId: 'apiQueryOptions',\n    apiPaginationCall: getMockData,\n    apiQueryOptions: {\n      onCalled: () => {\n        console.log('onCalled');\n      },\n      onCompleted: (response) => {\n        console.log('onCompleted', response);\n      },\n      requestPolicy: 'no-cache',\n    },\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return <DataTable title=\"API Query Options\" tableState={dataTableProps} />;\n};\n")),(0,r.kt)("h3",{id:"manual-global-filter"},"Manual Global Filter"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"manualGlobalFilter")," prop to specify whether the table will handle global filtering (when ",(0,r.kt)("inlineCode",{parentName:"p"},"showGlobalFilter")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"), or if the API will handle it."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When ",(0,r.kt)("inlineCode",{parentName:"li"},"manualGlobalFilter")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", setting a global filter will filter on only the current page. (This will not cause any additional API calls.)"),(0,r.kt)("li",{parentName:"ul"},"When ",(0,r.kt)("inlineCode",{parentName:"li"},"manualGlobalFilter")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", setting a global filter will call the API again, which is responsible for returning the filtered data. A ",(0,r.kt)("inlineCode",{parentName:"li"},"globalFilter")," string will be passed to ",(0,r.kt)("inlineCode",{parentName:"li"},"apiPaginationCall"),", which will contain the value of the global filter.")),(0,r.kt)("br",null),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"manualGlobalFilter")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeOptions: [5, 10],\n    uniqueStorageId: 'manualGlobalFilter-true',\n    apiPaginationCall: getMockData,\n    showGlobalFilter: true,\n    initialGlobalFilter: '1',\n    manualGlobalFilter: true,\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return <DataTable title=\"Manual Global Filter\" tableState={dataTableProps} />;\n};\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"manualGlobalFilter")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeOptions: [5, 10],\n    uniqueStorageId: 'manualGlobalFilter-false',\n    apiPaginationCall: getMockData,\n    showGlobalFilter: true,\n    initialGlobalFilter: '1',\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return (\n    <DataTable title=\"Default Global Filter\" tableState={dataTableProps} />\n  );\n};\n")),(0,r.kt)("h3",{id:"manual-column-filters"},"Manual Column Filters"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"manualColumnFilters")," prop to specify whether the table will handle column filtering (when ",(0,r.kt)("inlineCode",{parentName:"p"},"showFilterDataset")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"), or if the API will handle it."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When ",(0,r.kt)("inlineCode",{parentName:"li"},"manualColumnFilters")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", setting a column filter will filter on only the current page. (This will not cause any additional API calls.)"),(0,r.kt)("li",{parentName:"ul"},"When ",(0,r.kt)("inlineCode",{parentName:"li"},"manualColumnFilters")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", setting a column filter will call the API again, which is responsible for returning the filtered data. A ",(0,r.kt)("inlineCode",{parentName:"li"},"columnFilters")," array will be passed to ",(0,r.kt)("inlineCode",{parentName:"li"},"apiPaginationCall"),", which will contain the active filters. The ",(0,r.kt)("inlineCode",{parentName:"li"},"columnFilters")," array will have the format:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const columnFilters = [\n  {\n    id: ${columnId1}, // Column ID\n    value: [\n      {\n        condition: 'contains', // The condition of the filter\n        filterValue: '2' // The value of the filter\n      },\n      {\n        condition: 'less-equal', // The condition of the filter\n        filterValue: '100' // The value of the filter\n      },\n      ... // More filters on the same column\n    ]\n  },\n  {\n    id: ${columnId2}, // Column ID\n    value: [\n      {\n        condition: 'equals', // The condition of the filter\n        filterValue: 'test' // The value of the filter\n      },\n      ... // More filters on the same column\n    ]\n  },\n... // More filters on different columns\n]\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"manualColumnFilters")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeOptions: [5, 10],\n    uniqueStorageId: 'manualColumnFilters-true',\n    apiPaginationCall: getMockData,\n    showFilterDataset: true,\n    initialFilters: [\n      {\n        columnId: 'sortOrder',\n        filters: [{ condition: 'greater-equal', filterValue: '10' }],\n      },\n    ],\n    manualColumnFilters: true,\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return (\n    <DataTable title=\"Manual Column Filters\" tableState={dataTableProps} />\n  );\n};\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"manualColumnFilters")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeOptions: [5, 10],\n    uniqueStorageId: 'manualColumnFilters-false',\n    apiPaginationCall: getMockData,\n    showFilterDataset: true,\n    initialFilters: [\n      {\n        columnId: 'sortOrder',\n        filters: [{ condition: 'greater-equal', filterValue: '10' }],\n      },\n    ],\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return (\n    <DataTable title=\"Default Column Filters\" tableState={dataTableProps} />\n  );\n};\n")),(0,r.kt)("h3",{id:"manual-sort-by"},"Manual Sort By"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"manualSortBy")," prop to specify whether the table will handle column sorting, or if the API will handle it."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When ",(0,r.kt)("inlineCode",{parentName:"li"},"manualSortBy")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", sorting a column will sort on only the current page. (This will not cause any additional API calls.)"),(0,r.kt)("li",{parentName:"ul"},"When ",(0,r.kt)("inlineCode",{parentName:"li"},"manualSortBy")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", sorting a column will call the API again, which is responsible for returning the sorted data. A ",(0,r.kt)("inlineCode",{parentName:"li"},"sortBy")," array will be passed to ",(0,r.kt)("inlineCode",{parentName:"li"},"apiPaginationCall"),", which will contain the IDs of the columns being sorted on, as well as well as whether the sort order is ascending or descending. The ",(0,r.kt)("inlineCode",{parentName:"li"},"sortBy")," array will have the format:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const sortBy = [{\n  id: ${columnId1},\n  desc: false // ascending order\n},\n{\n  id: ${columnId2},\n  desc: true, // descending order\n},\n...]\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"manualSortBy")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeOptions: [5, 10],\n    uniqueStorageId: 'manualSortBy-true',\n    apiPaginationCall: getMockData,\n    manualSortBy: true,\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return <DataTable title=\"Manual Sorting\" tableState={dataTableProps} />;\n};\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"With ",(0,r.kt)("inlineCode",{parentName:"p"},"manualSortBy")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeOptions: [5, 10],\n    uniqueStorageId: 'manualSortBy-false',\n    apiPaginationCall: getMockData,\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return <DataTable title=\"Default Sorting\" tableState={dataTableProps} />;\n};\n")),(0,r.kt)("h3",{id:"custom-row-ids"},"Custom Row IDs"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"customGetRowId")," prop to pass a function that will override how row IDs are set. By default, a row's ID will be equal to its index in the dataset (ex. the third row on the second page of a dataset with 10 rows per page will have an ID of 12). Overriding this function would be useful if are using row selection and want to make a call to your API when users update data in the table. (See the ",(0,r.kt)("a",{parentName:"p",href:"#bulk-actions"},"Bulk Actions")," section for more details on performing actions on selected data.)"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"customGetRowId")," function will be called on each row, and will receive three parameters: ",(0,r.kt)("inlineCode",{parentName:"p"},"row"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"relativeIndex"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"parent"),". Its return value must be the ID for each row. (Make sure each row's ID is unique.)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"row")," is the current row, so you can use its fields to form the ID (ex. if each row has an ",(0,r.kt)("inlineCode",{parentName:"li"},"id")," field, you can return ",(0,r.kt)("inlineCode",{parentName:"li"},"row.id")," for the custom row ID)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"relativeIndex")," is the row's index relative to the current page, not its absolute index in the overall dataset. (So if the current row is the first row on the tenth page, its ",(0,r.kt)("inlineCode",{parentName:"li"},"relativeIndex")," will be ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),".)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"parent")," is the row's parent, if it has one.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    initialColumns: columns,\n    showSelection: true,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeOptions: [5, 10],\n    defaultSelectedRows: {\n      'Test Datapoint A': true,\n      'Test Datapoint C': true,\n    },\n    uniqueStorageId: 'customRowId',\n    apiPaginationCall: getMockData,\n    customGetRowId: (row, relativeIndex, parent) => {\n      return row.name;\n    },\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return (\n    <div>\n      <DataTable title=\"Custom Row IDs\" tableState={dataTableProps} />\n      <pre style={{ maxHeight: '200px', overflow: 'auto' }}>\n        <code>\n          Selected Row IDs (Custom):\n          {JSON.stringify(dataTableProps.state.selectedRowIds, null, 2)}\n        </code>\n      </pre>\n    </div>\n  );\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showSelection: true,\n    showPagination: true,\n    showColumnVisibilityConfig: true,\n    pageSizeOptions: [5, 10],\n    defaultSelectedRows: {\n      0: true,\n      2: true,\n    },\n    uniqueStorageId: 'defaultRowId',\n    apiPaginationCall: getMockData,\n    onColumnVisibilityClose: (columns) =>\n      console.log('columns', columns, dataTableProps.columnMgmt.allColumns),\n  });\n\n  return (\n    <div>\n      <DataTable title=\"Default Row IDs\" tableState={dataTableProps} />\n      <pre style={{ maxHeight: '200px', overflow: 'auto' }}>\n        <code>\n          Selected Row IDs (Default):\n          {JSON.stringify(dataTableProps.state.selectedRowIds, null, 2)}\n        </code>\n      </pre>\n    </div>\n  );\n};\n")),(0,r.kt)("h3",{id:"triggering-data-refresh"},"Triggering Data Refresh"),(0,r.kt)("p",null,"When using server-side pagination you can re-trigger the apiPaginationCall function by calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"reloadTableData")," method returned from the ",(0,r.kt)("inlineCode",{parentName:"p"},"useDataTable")," hook. This should be also be use to trigger the initial call to apiPaginationCall whenever ",(0,r.kt)("inlineCode",{parentName:"p"},"disableApiCallOnLoad")," is applied, as seen in the ",(0,r.kt)("a",{parentName:"p",href:"#disable-on-load"},"Disable On Load")," example below. When ",(0,r.kt)("inlineCode",{parentName:"p"},"reloadTableData")," is called it will utilize the current page, sort and filter state settings."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const tableState = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    apiPaginationCall: getMockData,\n    apiQueryOptions: {\n      onCalled: () => {\n        console.log('onCalled');\n      },\n      onCompleted: (response) => {\n        console.log('onCompleted', response);\n      },\n      requestPolicy: 'no-cache',\n    },\n  });\n\n  const handleRefreshClick = () => {\n    tableState.reloadTableData();\n  };\n\n  return (\n    <Fragment>\n      <Button onClick={handleRefreshClick}>Refresh Data</Button>\n      <Divider />\n      <DataTable title=\"Reload Data Table\" tableState={tableState} />\n    </Fragment>\n  );\n};\n")),(0,r.kt)("h4",{id:"disable-on-load"},"Disable On Load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock();\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const [disabledState, setDisabledState] = useState(true);\n\n  const tableState = useDataTable({\n    showSelection: false,\n    initialColumns: columns,\n    showPagination: true,\n    apiPaginationCall: getMockData,\n    apiQueryOptions: {\n      onCalled: () => {\n        console.log('onCalled');\n      },\n      onCompleted: (response) => {\n        console.log('onCompleted', response);\n      },\n      requestPolicy: 'no-cache',\n    },\n    disableApiCallOnLoad: true,\n  });\n\n  const handleLoadOnClick = () => {\n    tableState.reloadTableData();\n  };\n\n  return (\n    <Fragment>\n      <Button onClick={handleLoadOnClick}>Load Table Data</Button>\n      <Divider />\n      <DataTable title=\"Disabled On Load\" tableState={tableState} />\n    </Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"custom-messaging"},"Custom Messaging"),(0,r.kt)("h3",{id:"no-data-message"},"No Data Message"),(0,r.kt)("p",null,"To override the default no data message use the ",(0,r.kt)("inlineCode",{parentName:"p"},"noDataMessage")," prop to pass a custom message into the ",(0,r.kt)("inlineCode",{parentName:"p"},"useDataTable")," hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { data } = utils.useDocDataTable(5);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Column 1',\n        accessor: 'col1',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Column 2',\n        accessor: 'col2',\n        canToggleVisibilty: false,\n      },\n      {\n        Header: 'Column 3',\n        accessor: 'col3',\n        canToggleVisibilty: false,\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    initialData: [],\n    initialColumns: columns,\n    noDataMessage: 'Custom No Data Message',\n  });\n\n  return <DataTable title=\"No Data Message\" tableState={dataTableProps} />;\n};\n")),(0,r.kt)("h3",{id:"error-message"},"Error Message"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to pass a custom error message into the ",(0,r.kt)("inlineCode",{parentName:"p"},"useDataTable")," hook. If ",(0,r.kt)("inlineCode",{parentName:"p"},"errorMessage")," contains a value it will display and override any present data. If no ",(0,r.kt)("inlineCode",{parentName:"p"},"errorMessage")," is added a default message will display whenever ",(0,r.kt)("inlineCode",{parentName:"p"},"apiPaginationCall")," is used and an error occurs during the api call."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const getMockData = utils.useDataTableApiMock(true);\n\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header: 'Sort Order',\n        accessor: 'sortOrder',\n      },\n    ],\n    []\n  );\n\n  const dataTableProps = useDataTable({\n    initialColumns: columns,\n    showPagination: true,\n    errorMessage,\n    apiPaginationCall: getMockData,\n    apiQueryOptions: {\n      onCalled: () => {\n        console.log('onCalled');\n      },\n      onCompleted: (response) => {\n        console.log('onCompleted', response);\n      },\n      onError: (err) => {\n        console.log('onError', err);\n        setErrorMessage(err);\n      },\n    },\n  });\n\n  return <DataTable title=\"Error Message\" tableState={dataTableProps} />;\n};\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={DataTable}\n  rows={[\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of data table',\n    },\n    {\n      name: 'hideTitleHeader',\n      type: 'boolean',\n      description: 'Hide the data table title header',\n    },\n    {\n      name: 'tableState',\n      type: 'shape',\n      description: 'Table state comes from useDataTable hook',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={DataTable}\n  rows={[\n    {\n      name: 'data-table-root',\n      description: 'Data table root element',\n    },\n    {\n      name: 'data-table-header',\n      description: 'Data table header container',\n    },\n    {\n      name: 'data-table-scroll',\n      description: 'Scroll',\n    },\n    {\n      name: 'data-table-global-search',\n      description: 'Global search',\n    },\n    {\n      name: 'data-table-download-dropdown',\n      description: 'Dropdown to download table data',\n    },\n    {\n      name: 'data-table-subheader-top-container',\n      description: 'Subheader top container',\n    },\n    {\n      name: 'data-table-subheader-lower-container',\n      description: 'Subheader lower container',\n    },\n    {\n      name: 'data-table-subheader-buttons',\n      description: 'Subheader button container',\n    },\n    {\n      name: 'data-table-filter-dataset-modal',\n      description: 'Filter dataset modal',\n    },\n    {\n      name: 'data-table-filter-dataset-button',\n      description: 'Filter dataset button',\n    },\n    {\n      name: 'data-table-filter-dataset-delete-button',\n      description: 'Filter dataset delete button',\n    },\n    {\n      name: 'data-table-filter-table-container',\n      description: 'Container for filter table',\n    },\n    {\n      name: 'data-table-filter-table-table',\n      description: 'Filter table',\n    },\n    {\n      name: 'data-table-filter-table-add-filter',\n      description: '\"Add new filter\" container',\n    },\n    {\n      name: 'data-table-table-settings-button',\n      description: 'Table settings button',\n    },\n    {\n      name: 'data-table-fullscreen-button',\n      description: 'Fullscreen button',\n    },\n    {\n      name: 'data-table-custom-header-section',\n      description: 'Custom header section container',\n    },\n    {\n      name: 'data-table-bulk-actions-dropdown',\n      description: 'Bulk actions dropdown menu',\n    },\n    {\n      name: 'data-table-custom-header-button',\n      description: 'Custom header button',\n    },\n    {\n      name: 'data-table-custom-header-dropdown',\n      description: 'Custom header dropdown',\n    },\n    {\n      name: 'data-table-toggle-columns-root',\n      description: 'Toggle columns root',\n    },\n    {\n      name: 'data-table-toggle-columns-text',\n      description: 'Toggle columns info text',\n    },\n    {\n      name: 'data-table-toggle-columns-switches',\n      description: 'Toggle columns switches container',\n    },\n    {\n      name: 'data-table-toggle-columns-dragdrop-container',\n      description: 'Toggle columns drag and drop container',\n    },\n    {\n      name: 'data-table-selection',\n      description: 'Row selection checkbox (pass into useDataTable)',\n    },\n    {\n      name: 'data-table-single-selection',\n      description: 'Row selection radio (pass into useDataTable)',\n    },\n    {\n      name: 'data-table-pagination-top-root',\n      description: 'Pagination top root',\n    },\n    {\n      name: 'data-table-pagination-top-sub-container',\n      description: 'Pagination top container for main pagination',\n    },\n    {\n      name: 'data-table-pagination-bottom-root',\n      description: 'Pagination bottom root',\n    },\n    {\n      name: 'data-table-individual-dropdown',\n      description:\n        'Individual actions dropdown container (pass into useDataTable)',\n    },\n    {\n      name: 'data-table-individual-single-action-container',\n      description:\n        'Individual actions single action container (pass into useDataTable)',\n    },\n    {\n      name: 'data-table-individual-single-action-item',\n      description:\n        'Individual actions single action item (pass into useDataTable)',\n    },\n    {\n      name: 'data-table-expander-root',\n      description: 'Row expand root (pass into useDataTable)',\n    },\n    {\n      name: 'data-table-expander-icon',\n      description: 'Row expand icon (pass into useDataTable)',\n    },\n    {\n      name: 'data-table-result-text',\n      description: 'Result text',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("p",null,"The data table headers accurately describe the data contained in the rows and columns.\nIf the data table has a labels it should be clear and concise.\nResources\nW3C WAI-ARIA Authoring Practices Table Design Pattern covers the usage of ARIA names, state and roles, as well as the expected keyboard interactions.\nW3C Tutorial - Table Concepts covers the usage of various tables, headers, and captions."),(0,r.kt)("p",null,"IBM Accessibility Requirements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"1.3.1 Info and Relationships (WCAG Success Criteria 1.3.1)"),(0,r.kt)("li",{parentName:"ul"},"1.3.2 Meaningful Sequence (WCAG Success Criteria 1.3.2)"),(0,r.kt)("li",{parentName:"ul"},"2.1.1 Keyboard (WCAG Success Criteria 2.1.1)"),(0,r.kt)("li",{parentName:"ul"},"2.4.3 Focus Order (WCAG Success Criteria 2.4.3)"),(0,r.kt)("li",{parentName:"ul"},"2.4.6 Headings and Labels (WCAG Success Criteria 2.4.6)"),(0,r.kt)("li",{parentName:"ul"},"2.4.7 Focus Visible (WCAG Success Criteria 2.4.7)"),(0,r.kt)("li",{parentName:"ul"},"4.1.2 Name, Role, Value (WCAG Success Criteria 4.1.2)"))))}g.isMDXComponent=!0},99905:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"date-input",category:"Forms",title:"DateInput",description:"Capture date input from user.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=23818%3A98579&t=2OvT77S1GipkwVQf-1",pagination_prev:"web/ui/checkbox-group",pagination_next:"web/ui/date-input-range"},s=void 0,d={unversionedId:"web/ui/date-input",id:"web/ui/date-input",isDocsHomePage:!1,title:"DateInput",description:"Capture date input from user.",source:"@site/docs/web/ui/DateInput.md",sourceDirName:"web/ui",slug:"/web/ui/date-input",permalink:"/web/ui/date-input",tags:[],version:"current",frontMatter:{id:"date-input",category:"Forms",title:"DateInput",description:"Capture date input from user.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=23818%3A98579&t=2OvT77S1GipkwVQf-1",pagination_prev:"web/ui/checkbox-group",pagination_next:"web/ui/date-input-range"},sidebar:"docs",previous:{title:"CheckboxGroup",permalink:"/web/ui/checkbox-group"},next:{title:"DateInputRange",permalink:"/web/ui/date-input-range"}},p=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Min/Max Date",id:"minmax-date",children:[],level:2},{value:"Excluded Dates",id:"excluded-dates",children:[],level:2},{value:"Starting/Ending Year",id:"startingending-year",children:[],level:2},{value:"Add Elements Inside Input",id:"add-elements-inside-input",children:[],level:2},{value:"Placeholder",id:"placeholder",children:[],level:2},{value:"Subtext",id:"subtext",children:[],level:2},{value:"Error Message",id:"error-message",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Validation",id:"validation",children:[],level:2},{value:"Highlighted",id:"highlighted",children:[],level:2},{value:"Width",id:"width",children:[],level:2},{value:"Enable Outside Scroll",id:"enable-outside-scroll",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { DateInput } from '@abyss/web/ui/DateInput';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'DateInput',\n  inputs: [\n    {\n      prop: 'placeholder',\n      type: 'string',\n    },\n    {\n      prop: 'subText',\n      type: 'string',\n    },\n    {\n      prop: 'errorMessage',\n      type: 'string',\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'highlighted',\n      type: 'boolean',\n      defaultValue: false,\n    },\n  ]\n}\n\n() => {\n  const [value, setValue] = useState('01/01/2022');\n\n  return (\n    <DateInput\n      label=\"DateInput Sandbox\"\n      value={value}\n      onChange={setValue}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm")," hook for handling TextInput lets the DOM handle form data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      'test-date': '01/01/2022',\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <DateInput model=\"test-date\" validators={{ required: true }} />\n      <Button type=\"submit\" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"usestate"},"useState"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('01/10/2022');\n\n  console.log('useState Value', value);\n\n  return <DateInput value={value} onChange={setValue} />;\n};\n")),(0,i.kt)("h2",{id:"minmax-date"},"Min/Max Date"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"minimumDate")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"maximumDate")," props to set the min and max dates in the Calendar dropdown."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <DateInput\n        model="test-date"\n        minimumDate={new Date(2021, 1, 5)}\n        maximumDate={new Date(2021, 2, 5)}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"excluded-dates"},"Excluded Dates"),(0,i.kt)("p",null,"To exclude dates use the ",(0,i.kt)("inlineCode",{parentName:"p"},"excludeDates")," prop. Set a function that receives date as an argument and returns true if date should be disabled. For example, to disable weekends, check if date day is 0 or 6:."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <DateInput\n        model="test-date"\n        excludeDate={(date) => {\n          return date.getDay() === 0 || date.getDay() === 6;\n        }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"startingending-year"},"Starting/Ending Year"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"startingYear")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"endingYear")," props to set the min and max years in the Calendar dropdown."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <DateInput model="test-date" startingYear={1999} endingYear={2021} />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"add-elements-inside-input"},"Add Elements Inside Input"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"inputLeftElement")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"inputRightElement")," props to add elements to the inside of the date input field. The recommended usage is for inserting icons."),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"#validation"},"Validation")," section below for an example on how to incorporate with validation and display error/success states with icons."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <DateInput\n        model="date-input-elements"\n        validators={{ required: true }}\n        inputLeftElement={\n          <IconMaterial icon="assignment" size="18px" color="$gray6" />\n        }\n        inputRightElement={\n          <IconMaterial icon="check" size="18px" color="$success1" />\n        }\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"placeholder"},"Placeholder"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"placeholder")," prop to give users a short description in the input field before they enter a value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <DateInput model="test-date" placeholder="Birthday" />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"subtext"},"Subtext"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the date input field. By default it displays ",(0,i.kt)("inlineCode",{parentName:"p"},"Date Format: mm/dd/yyyy"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <DateInput model="subtext" subText="Custom Sub Text" />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"error-message"},"Error Message"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to display a custom error message below the date input field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(null);\n\n  return (\n    <DateInput\n      value={value}\n      onChange={setValue}\n      errorMessage="Custom Error Message"\n    />\n  );\n};\n')),(0,i.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(null);\n\n  return (\n    <DateInput\n      value={value}\n      onChange={setValue}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    />\n  );\n};\n')),(0,i.kt)("h2",{id:"label"},"Label"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," prop to display a label above the input. To hide the input label set ",(0,i.kt)("inlineCode",{parentName:"p"},"hideLabel")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <DateInput\n        model="test-date"\n        label="Custom Label"\n        placeholder="Custom Label"\n      />\n      <DateInput\n        model="test-date-2"\n        label="Hidden Label"\n        placeholder="Hidden Label"\n        hideLabel\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"disabled"},"Disabled"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to disable the input field so users cannot enter a value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <DateInput model="test-date" isDisabled={true} />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"validation"},"Validation"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"validators")," prop to set rules for the field to be valid."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const { errors, isSubmitted, isSubmitSuccessful } = form.formState;\n\n  const getIconProps = useCallback(\n    (model) => {\n      if (!isSubmitted) return null;\n\n      let iconProps = {};\n\n      if (!!errors[model]) {\n        iconProps = { icon: 'error', color: '$error1', size: '18px' };\n      }\n      if (isSubmitSuccessful) {\n        iconProps = { icon: 'check', color: '$success1', size: '18px' };\n      }\n\n      return { inputRightElement: <IconMaterial {...iconProps} /> };\n    },\n    [isSubmitted, isSubmitSuccessful]\n  );\n\n  return (\n    <FormProvider state={form}>\n      <DateInput\n        label=\"Required Default Message\"\n        model=\"required\"\n        {...getIconProps('required')}\n        validators={{ required: true }}\n      />\n      <DateInput\n        label=\"Required Custom Message\"\n        model=\"custom-required\"\n        validators={{ required: 'Custom Error Message' }}\n      />\n      <DateInput\n        label=\"Custom Validators\"\n        model=\"validate\"\n        validators={{\n          required: true,\n          validate: {\n            isBefore: (v) => {\n              return (\n                dayjs(v, 'MM/DD/YYYY').isBefore(dayjs('01/01/2023')) ||\n                'Should be before 01/01/2023'\n              );\n            },\n            isAfter: (v) => {\n              return (\n                dayjs(v, 'MM/DD/YYYY').isAfter(dayjs('01/01/2021')) ||\n                'Should be after 01/01/2021'\n              );\n            },\n          },\n        }}\n      />\n      <Button type=\"submit\" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"highlighted"},"Highlighted"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"highlighted")," prop to enable the background color for the input. You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"highlighted")," to enable the color to appear if validation is required."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState();\n\n  return (\n    <DateInput\n      label="Highlighted"\n      value={value}\n      onChange={setValue}\n      highlighted\n    />\n  );\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit} highlighted>\n      <DateInput\n        label="FormProvider Highlighted"\n        model="highlighted"\n        validators={{ required: true }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"width"},"Width"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"width")," prop to set the width of the input field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <DateInput\n        label="Width Default"\n        model="width1"\n        placeholder="Default Width"\n      />\n      <DateInput\n        width="75%"\n        label="Width 75%"\n        model="width2"\n        placeholder="Width Set To 75%"\n      />\n      <DateInput\n        width="335px"\n        model="width3"\n        label="Width 335px"\n        placeholder="Width Set To 335px"\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"enable-outside-scroll"},"Enable Outside Scroll"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"enableOutsideScroll"),"prop to",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to enable scroll outside of the date input component while the calendar is open. Default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('01/01/2022');\n\n  return (\n    <DateInput\n      label=\"DateInput Sandbox\"\n      value={value}\n      onChange={setValue}\n      enableOutsideScroll\n    />\n  );\n};\n"))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={DateInput}\n  rows={[\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Label for date input field',\n    },\n    {\n      name: 'startingYear',\n      type: 'number',\n      description:\n        'The minimum selectable year when user opens the date dialog',\n    },\n    {\n      name: 'endingYear',\n      type: 'number',\n      description: 'Callback function to determine if a day should be disabled',\n    },\n    {\n      name: 'excludeDate',\n      type: 'number',\n      description:\n        'The maximum selectable year when user opens the date dialog',\n    },\n    {\n      name: 'minimumDate',\n      type: 'string | date',\n      description: 'Specifies the minimum selectable day by a user',\n    },\n    {\n      name: 'maximumDate',\n      type: 'string | date',\n      description: 'Specifies the maximum selectable day by a user',\n    },\n    {\n      name: 'placeholder',\n      type: 'string',\n      description:\n        'Short description displayed in the input before the user enters a value',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the input. If true, the input will be disabled',\n    },\n    {\n      name: 'value',\n      type: 'number | string',\n      description: 'Value of the date input',\n    },\n    {\n      name: 'css',\n      type: 'shape',\n      description: 'Stitches styling',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired every time the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired every time the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired every time the component is unfocused',\n    },\n    {\n      name: 'onKeyDown',\n      type: 'function',\n      description:\n        'Callback fired every time a key is pressed while focused in the component',\n    },\n    {\n      name: 'onPaste',\n      type: 'function',\n      description:\n        'Callback fired every time something is pasted into the component',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'width',\n      type: 'string',\n      description: 'Width of the input field',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Set the text displayed below the date input field',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description:\n        'Set the error message to be displayed below the date input field',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the date input field',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to show or hide label',\n    },\n    {\n      name: 'validators',\n      type: 'object',\n      description: 'Set rules for the date input field to be valid',\n    },\n    {\n      name: 'enableOutsideScroll',\n      type: 'boolean',\n      description: 'Flag to enable scrolling when the calendar is open',\n    },\n    {\n      name: 'inputLeftElement',\n      type: 'ReactNode',\n      description: 'Add element to left of inside date input',\n    },\n    {\n      name: 'inputRightElement',\n      type: 'ReactNode',\n      description: 'Add element to right of inside date input',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={DateInput}\n  rows={[\n    {\n      name: 'date-picker-root',\n      description: 'DateInput root element',\n    },\n    {\n      name: 'date-picker-calendar-wrapper',\n      description: 'Calender dialog wrapper',\n    },\n    {\n      name: 'date-picker-input-root',\n      description: 'Text input root',\n    },\n    {\n      name: 'date-picker-input-label',\n      description: 'Text input label',\n    },\n    {\n      name: 'date-picker-input-wrapper',\n      description: 'Text input and icon wrapper',\n    },\n    {\n      name: 'date-picker-input-left-element-wrapper',\n      description: 'Text input wrapper for left element',\n    },\n    {\n      name: 'date-picker-input-left-element',\n      description: 'Text input content for left element',\n    },\n    {\n      name: 'date-picker-input-right-element-wrapper',\n      description: 'Text input wrapper for right element',\n    },\n    {\n      name: 'date-picker-input-right-element',\n      description: 'Text input content for right element',\n    },\n    { name: 'date-picker-input-button', description: 'Calendar open button' },\n    {\n      name: 'date-picker-input-icon',\n      description: 'Calendar open button icon',\n    },\n    {\n      name: 'date-picker-input-descriptors',\n      description: 'Text input descriptors',\n    },\n    {\n      name: 'date-picker-input',\n      description: 'Text input',\n    },\n    {\n      name: 'calendar-container',\n      description: 'Calendar container',\n    },\n    {\n      name: 'calendar-header-root',\n      description: 'Calendar header root',\n    },\n    {\n      name: 'calendar-header-month-year-container',\n      description: 'Calendar header month/year container',\n    },\n    {\n      name: 'calendar-header-previous-year-button',\n      description: 'Calendar header previous year button',\n    },\n    {\n      name: 'calendar-header-previous-month-button',\n      description: 'Calendar header previous month button',\n    },\n    {\n      name: 'calendar-header-next-month-button',\n      description: 'Calendar header next month button',\n    },\n    {\n      name: 'calendar-header-next-year-button',\n      description: 'Calendar header next year button',\n    },\n    {\n      name: 'calendar-arrow-button',\n      description: 'Calendar arrow button',\n    },\n    {\n      name: 'calendar-arrow-button-icon',\n      description: 'Calendar arrow button icon',\n    },\n    {\n      name: 'calendar-day-grid-root',\n      description: 'Calendar day grid',\n    },\n    {\n      name: 'calendar-day-grid-header',\n      description: 'Calendar day grid table header',\n    },\n    {\n      name: 'calendar-day-grid-header-row',\n      description: 'Calendar day grid table header row',\n    },\n    {\n      name: 'calendar-day-grid-header-cell',\n      description: 'Calendar day grid table header cell',\n    },\n    {\n      name: 'calendar-day-grid-body',\n      description: 'Calendar day grid table body',\n    },\n    {\n      name: 'calendar-day-grid-body-row',\n      description: 'Calendar day grid table body row',\n    },\n    {\n      name: 'calendar-day-grid-body-cell',\n      description: 'Calendar day grid table body cell',\n    },\n    {\n      name: 'calendar-day-grid-day-button',\n      description: 'Calendar day grid day button',\n    },\n    {\n      name: 'calendar-day-grid-day-button-dot',\n      description: 'Calendar day grid day button dot',\n    },\n    {\n      name: 'calendar-action-buttons-root',\n      description: 'Calendar action button root',\n    },\n    {\n      name: 'calendar-action-button-confirm',\n      description: 'Calendar confirm action button',\n    },\n    {\n      name: 'calendar-action-button-cancel',\n      description: 'Calendar cancel action button',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"The example below includes a date input field and a button that opens a date picker that implements the dialog design pattern. The dialog contains a calendar that uses the grid pattern to present buttons that enable the user to choose a day from the calendar. Choosing a date from the calendar closes the dialog and populates the date input field. When the dialog is opened, if the input field is empty, or does not contain a valid date, then the current date is focused in the calendar. Otherwise, the focus is placed on the day in the calendar that matches the value of the date input field."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/datepicker-dialog.html",mdxType:"ExitLink"},"Date Picker Dialog WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      \'test-date\': \'01/01/2022\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <DateInput\n        model="test-date"\n        label="Accessibility Practice"\n        subText="Utilize the Keyboard Interaction table below to test the components accessibility."\n        validators={{ required: true }}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<div style={{ marginTop: '25px' }}>\n  <Docs.AccessibilityTable\n    title=\"Choose Date Button\"\n    rows={[\n      {\n        name: 'Space',\n        description:\n          'Open the date picker dialog. Move focus to selected date.',\n      },\n      {\n        name: 'Enter',\n        description:\n          'Open the date picker dialog. Move focus to selected date.',\n      },\n    ]}\n  />\n</div>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Date Picker Dialog\"\n  rows={[\n    {\n      name: 'Esc',\n      description:\n        'Closes the dialog and returns focus to the Choose Date button',\n    },\n    {\n      name: 'Tab',\n      description: 'Moves focus to next element in the dialog Tab sequence',\n    },\n    {\n      name: 'Shift + Tab',\n      description: 'Moves focus to previous element in the dialog Tab sequence',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Date Picker Dialog: Month/Year Buttons\"\n  rows={[\n    {\n      name: 'Space',\n      description:\n        'Change the month and/or year displayed in the calendar grid',\n    },\n    {\n      name: 'Enter',\n      description:\n        'Change the month and/or year displayed in the calendar grid',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Date Picker Dialog: Date Grid\"\n  rows={[\n    {\n      name: 'Space',\n      description:\n        'Select the date, close the dialog, and move focus to the Choose Date button',\n    },\n    {\n      name: 'Enter',\n      description:\n        'Select the date, close the dialog, and move focus to the Choose Date button',\n    },\n    {\n      name: 'Up Arrow',\n      description: 'Moves focus to the same day of the previous week',\n    },\n    {\n      name: 'Down Arrow',\n      description: 'Moves focus to the same day of the next week',\n    },\n    {\n      name: 'Right Arrow',\n      description: 'Moves focus to the next day',\n    },\n    {\n      name: 'Left Arrow',\n      description: 'Moves focus to the previous day',\n    },\n    {\n      name: 'Page Up',\n      description: 'Changes the grid of dates to the previous month',\n    },\n    {\n      name: 'Page Down',\n      description: 'Changes the grid of dates to the next month',\n    },\n    {\n      name: 'Shift + Page Down',\n      description: 'Changes the grid of dates to the next Year',\n    },\n    {\n      name: 'Shift + Page Up',\n      description: 'Changes the grid of dates to the previous Year',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},76363:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"date-input-range",category:"Forms",title:"DateInputRange",description:"Capture date input from user.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=23818%3A98579&t=2OvT77S1GipkwVQf-1",pagination_prev:"web/ui/date-input",pagination_next:"web/ui/radio-group"},s=void 0,d={unversionedId:"web/ui/date-input-range",id:"web/ui/date-input-range",isDocsHomePage:!1,title:"DateInputRange",description:"Capture date input from user.",source:"@site/docs/web/ui/DateInputRange.md",sourceDirName:"web/ui",slug:"/web/ui/date-input-range",permalink:"/web/ui/date-input-range",tags:[],version:"current",frontMatter:{id:"date-input-range",category:"Forms",title:"DateInputRange",description:"Capture date input from user.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=23818%3A98579&t=2OvT77S1GipkwVQf-1",pagination_prev:"web/ui/date-input",pagination_next:"web/ui/radio-group"},sidebar:"docs",previous:{title:"DateInput",permalink:"/web/ui/date-input"},next:{title:"RadioGroup",permalink:"/web/ui/radio-group"}},p=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Min/Max Date",id:"minmax-date",children:[],level:2},{value:"Excluded Dates",id:"excluded-dates",children:[],level:2},{value:"Starting/Ending Year",id:"startingending-year",children:[],level:2},{value:"Add Elements Inside Input",id:"add-elements-inside-input",children:[],level:2},{value:"Placeholder",id:"placeholder",children:[],level:2},{value:"Subtext",id:"subtext",children:[],level:2},{value:"Error Message",id:"error-message",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Label",id:"label",children:[{value:"Hide Label",id:"hide-label",children:[],level:3}],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Validation",id:"validation",children:[],level:2},{value:"Highlighted",id:"highlighted",children:[],level:2},{value:"Width",id:"width",children:[],level:2},{value:"Enable Outside Scroll",id:"enable-outside-scroll",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { DateInputRange } from '@abyss/web/ui/DateInputRange';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'DateInputRange',\n  inputs: [\n    {\n      prop: 'startDateLabel',\n      type: 'string',\n    },\n    {\n      prop: 'endDateLabel',\n      type: 'string',\n    },\n    {\n      prop: 'width',\n      type: 'string',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'highlighted',\n      type: 'boolean',\n      defaultValue: false,\n    },\n  ]\n}\n\n() => {\n  const [values, setValues] = useState({ from: '07/11/2022', to: '07/15/2022' });\n\n  return (\n    <DateInputRange\n      label=\"DateInputRange Sandbox\"\n      values={values}\n      onChange={setValues}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm")," hook for handling TextInput lets the DOM handle form data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      'test-form-date': { from: '06/04/2022', to: '06/30/2022' },\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <DateInputRange model=\"test-form-date\" validators={{ required: true }} />\n      <Button type=\"submit\" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"usestate"},"useState"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [values, setValues] = useState({\n    from: '01/01/2022',\n    to: '06/20/2022',\n  });\n\n  console.log('useState values', values);\n\n  return <DateInputRange values={values} onChange={setValues} />;\n};\n")),(0,i.kt)("h2",{id:"minmax-date"},"Min/Max Date"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"minimumDate")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"maximumDate")," props to set the min and max dates in the Calendar dropdown."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <DateInputRange\n        model="test-date"\n        minimumDate={new Date(2021, 1, 5)}\n        maximumDate={new Date(2021, 2, 5)}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"excluded-dates"},"Excluded Dates"),(0,i.kt)("p",null,"To exclude dates use the ",(0,i.kt)("inlineCode",{parentName:"p"},"excludeDates")," prop. Set a function that receives date as an argument and returns true if date should be disabled. For example, to disable weekends, check if date day is 0 or 6:."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <DateInputRange\n        model="test-date"\n        excludeDate={(date) => {\n          return date.getDay() === 0 || date.getDay() === 6;\n        }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"startingending-year"},"Starting/Ending Year"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"startingYear")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"endingYear")," props to set the min and max years in the Calendar dropdown."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <DateInputRange model="test-date" startingYear={2011} endingYear={2021} />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"add-elements-inside-input"},"Add Elements Inside Input"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"inputLeftElement")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"inputRightElement")," props to add elements to the inside of the start and end date input fields. Within each prop pass in a ",(0,i.kt)("inlineCode",{parentName:"p"},"start")," and/or ",(0,i.kt)("inlineCode",{parentName:"p"},"end")," property with the desired element node. The recommended usage is for inserting icons."),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"#validation"},"Validation")," section below for an example on how to incorporate with validation and display error/success states with icons."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <DateInputRange\n        model="date-input-range-elements"\n        width="50%"\n        validators={{ required: true }}\n        inputLeftElement={{\n          start: <IconMaterial icon="assignment" size="18px" color="$gray6" />,\n          end: <IconMaterial icon="assignment" size="18px" color="$gray6" />,\n        }}\n        inputRightElement={{\n          start: <IconMaterial icon="check" size="18px" color="$success1" />,\n          end: <IconMaterial icon="check" size="18px" color="$success1" />,\n        }}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"placeholder"},"Placeholder"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"startDatePlaceholder")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"endDatePlaceholder")," prop to give users a short description in the input field before they enter a value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <DateInputRange\n        model="test-date"\n        startDatePlaceholder="Start Date"\n        endDatePlaceholder="End Date"\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"subtext"},"Subtext"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"subtext")," prop to display helpful text below the date range input fields. By default it displays ",(0,i.kt)("inlineCode",{parentName:"p"},"Date Format: mm/dd/yyyy"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <DateInputRange model="subtext" subtext="Custom Subtext" />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"error-message"},"Error Message"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to display a custom error message below the date range input fields."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [values, setValues] = useState(null);\n\n  return (\n    <DateInputRange\n      values={values}\n      onChange={setValues}\n      errorMessage="Custom Error Message"\n    />\n  );\n};\n')),(0,i.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [values, setValues] = useState(null);\n\n  return (\n    <DateInputRange\n      values={values}\n      onChange={setValues}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    />\n  );\n};\n')),(0,i.kt)("h2",{id:"label"},"Label"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"startDateLabel")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"endDateLabel")," props to display a label above the input. To hide the input label set ",(0,i.kt)("inlineCode",{parentName:"p"},"hideLabel")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <DateInputRange\n        model="test-date"\n        startDateLabel="Custom Start Date Label"\n        endDateLabel="Custom End Date Label"\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h3",{id:"hide-label"},"Hide Label"),(0,i.kt)("p",null,"To hide the input label set ",(0,i.kt)("inlineCode",{parentName:"p"},"hideLabel")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <DateInputRange\n        model="test-date-2"\n        hideLabel\n        startDatePlaceholder="Hidden Label"\n        endDatePlaceholder="Hidden Label"\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"disabled"},"Disabled"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to disable the input fields so users cannot enter a value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <DateInputRange model="test-date" isDisabled={true} />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"validation"},"Validation"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"validators")," prop to set rules for the field to be valid."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      validate: { from: '07/07/2022', to: '07/01/2022' },\n    },\n  });\n\n  const { errors, isSubmitted, isSubmitSuccessful } = form.formState;\n\n  const getIconProps = useCallback(\n    (model) => {\n      if (!isSubmitted) return null;\n\n      let iconProps = {};\n\n      if (!!errors[model]) {\n        iconProps = { icon: 'error', color: '$error1', size: '18px' };\n      }\n      if (isSubmitSuccessful) {\n        iconProps = { icon: 'check', color: '$success1', size: '18px' };\n      }\n\n      const node = <IconMaterial {...iconProps} />;\n\n      return { inputRightElement: { start: node, end: node } };\n    },\n    [isSubmitted, isSubmitSuccessful]\n  );\n\n  return (\n    <FormProvider state={form}>\n      <DateInputRange\n        label=\"Required Default Message\"\n        model=\"required\"\n        width=\"50%\"\n        {...getIconProps('required')}\n        validators={{ required: true }}\n      />\n      <DateInputRange\n        label=\"Required Custom Message\"\n        model=\"custom-required\"\n        width=\"50%\"\n        validators={{ required: 'Custom Error Message' }}\n      />\n      <DateInputRange\n        label=\"Custom Validators\"\n        model=\"validate\"\n        width=\"50%\"\n        validators={{\n          required: true,\n          validate: {\n            isAfter: (v) => {\n              return (\n                dayjs(v.to, 'DD/MM/YYYY').isAfter(\n                  dayjs(v.from, 'DD/MM/YYYY')\n                ) || 'End date should be after start date'\n              );\n            },\n          },\n        }}\n      />\n      <Button type=\"submit\" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"highlighted"},"Highlighted"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"highlighted")," prop to enable the background color for the input. You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"highlighted")," to enable the color to appear if validation is required."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [values, setValues] = useState(null);\n\n  return (\n    <DateInputRange\n      label="Highlighted"\n      values={values}\n      onChange={setValues}\n      highlighted\n    />\n  );\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit} highlighted>\n      <DateInputRange\n        label="FormProvider Highlighted"\n        model="highlighted"\n        validators={{ required: true }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"width"},"Width"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"width")," prop to set the width of both input fields."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <DateInputRange\n        model="width1"\n        startDateLabel="Width Default"\n        startDatePlaceholder="Default Width"\n        endDateLabel="Width Default"\n        endDatePlaceholder="Default Width"\n      />\n      <DateInputRange\n        width="75%"\n        model="width2"\n        startDateLabel="Width 75%"\n        startDatePlaceholder="Width Set To 75%"\n        endDateLabel="Width 75%"\n        endDatePlaceholder="Width Set To 75%"\n      />\n      <DateInputRange\n        width="100%"\n        model="width3"\n        startDateLabel="Width 100%"\n        startDatePlaceholder="Width Set To 100%"\n        endDateLabel="Width 100%"\n        endDatePlaceholder="Width Set To 100%"\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"enable-outside-scroll"},"Enable Outside Scroll"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"enableOutsideScroll")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to enable scroll outside of the date input range component while the calendar is open. Default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [values, setValues] = useState({\n    from: '07/11/2022',\n    to: '07/15/2022',\n  });\n\n  return (\n    <DateInputRange\n      label=\"DateInputRange\"\n      values={values}\n      onChange={setValues}\n      enableOutsideScroll\n    />\n  );\n};\n"))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={DateInputRange}\n  rows={[\n    {\n      name: 'startDateLabel',\n      type: 'string',\n      description: 'Label for starting date input range field',\n    },\n    {\n      name: 'endDateLabel',\n      type: 'string',\n      description: 'Label for the ending date input range field',\n    },\n    {\n      name: 'startingYear',\n      type: 'number',\n      description:\n        'The minimum selectable year when user opens the date dialog',\n    },\n    {\n      name: 'endingYear',\n      type: 'number',\n      description: 'Callback function to determine if a day should be disabled',\n    },\n    {\n      name: 'excludeDate',\n      type: 'number',\n      description:\n        'The maximum selectable year when user opens the date dialog',\n    },\n    {\n      name: 'minimumDate',\n      type: 'string | date',\n      description: 'Specifies the minimum selectable day by a user',\n    },\n    {\n      name: 'maximumDate',\n      type: 'string | date',\n      description: 'Specifies the maximum selectable day by a user',\n    },\n    {\n      name: 'startDatePlaceholder',\n      type: 'string',\n      description:\n        'Short description displayed on the starting input before the user enters a value',\n    },\n    {\n      name: 'endDatePlaceholder',\n      type: 'string',\n      description:\n        'Short description displayed on the ending input before the user enters a value',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the input. If true, the input will be disabled',\n    },\n    {\n      name: 'values',\n      type: 'object',\n      description:\n        'Values of the date input range { to: string, from: string }',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired every time the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired every time the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired every time the component is unfocused',\n    },\n    {\n      name: 'onKeyDown',\n      type: 'function',\n      description:\n        'Callback fired every time a key is pressed while focused in the component',\n    },\n    {\n      name: 'onPaste',\n      type: 'function',\n      description:\n        'Callback fired every time something is pasted into the component',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'width',\n      type: 'string',\n      description: 'Width of the input fields',\n    },\n    {\n      name: 'subtext',\n      type: 'string',\n      description: 'Set the text displayed below the date input range fields',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the date input range fields',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to show or hide labels',\n    },\n    {\n      name: 'validators',\n      type: 'object',\n      description: 'Set rules for the date input range fields to be valid',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description:\n        'Set the error message to be displayed below the date input range fields',\n    },\n    {\n      name: 'enableOutsideScroll',\n      type: 'boolean',\n      description: 'Flag to enable scrolling when the calendar is open',\n    },\n    {\n      name: 'inputLeftElement',\n      type: 'object',\n      description:\n        'Add element to left of inside start and end date inputs { start: ReactNode, end: ReactNode }',\n    },\n    {\n      name: 'inputRightElement',\n      type: 'object',\n      description:\n        'Add element to right of inside start and end date inputs { start: ReactNode, end: ReactNode }',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={DateInputRange}\n  rows={[\n    {\n      name: 'date-picker-range-root',\n      description: 'DateInputRange root element',\n    },\n    {\n      name: 'date-picker-input-container',\n      description: 'Date Picker Input Container',\n    },\n    {\n      name: 'start-date-input-container',\n      description: 'Start date input container',\n    },\n    {\n      name: 'end-date-input-container',\n      description: 'End date input container',\n    },\n    {\n      name: 'date-input-range-popper',\n      description: 'Date input range popper',\n    },\n    {\n      name: 'date-input-range-calendar-wrapper',\n      description: 'Date input range calendar wrapper',\n    },\n    {\n      name: 'date-input-range-inputs-wrapper',\n      description: 'Date input range inputs wrapper',\n    },\n    {\n      name: 'date-picker-input-root',\n      description: 'Text input root',\n    },\n    {\n      name: 'date-picker-input-label',\n      description: 'Text input label',\n    },\n    {\n      name: 'date-picker-input-wrapper',\n      description: 'Text input and icon wrapper',\n    },\n    {\n      name: 'date-picker-input-left-element-wrapper',\n      description: 'Text input wrapper for left element',\n    },\n    {\n      name: 'date-picker-input-left-element',\n      description: 'Text input content for left element',\n    },\n    {\n      name: 'date-picker-input-right-element-wrapper',\n      description: 'Text input wrapper for right element',\n    },\n    {\n      name: 'date-picker-input-right-element',\n      description: 'Text input content for right element',\n    },\n    { name: 'date-picker-input-button', description: 'Calendar open button' },\n    {\n      name: 'date-picker-input-icon',\n      description: 'Calendar open button icon',\n    },\n    {\n      name: 'date-picker-input-descriptors',\n      description: 'Text input descriptors',\n    },\n    {\n      name: 'date-picker-input',\n      description: 'Text input',\n    },\n    {\n      name: 'calendar-header-root',\n      description: 'Calendar header root',\n    },\n    {\n      name: 'calendar-header-month-year-container',\n      description: 'Calendar header month/year container',\n    },\n    {\n      name: 'calendar-header-previous-button',\n      description: 'Calendar header previous year button',\n    },\n    {\n      name: 'calendar-header-previous-month-button',\n      description: 'Calendar header previous month button',\n    },\n    {\n      name: 'calendar-header-next-month-button',\n      description: 'Calendar header next month button',\n    },\n    {\n      name: 'calendar-header-next-year-button',\n      description: 'Calendar header next year button',\n    },\n    {\n      name: 'calendar-day-grid-root',\n      description: 'Calendar day grid',\n    },\n    {\n      name: 'calendar-day-grid-header',\n      description: 'Calendar day grid table header',\n    },\n    {\n      name: 'calendar-day-grid-header-row',\n      description: 'Calendar day grid table header row',\n    },\n    {\n      name: 'calendar-day-grid-header-cell',\n      description: 'Calendar day grid table header cell',\n    },\n    {\n      name: 'calendar-day-grid-body',\n      description: 'Calendar day grid table body',\n    },\n    {\n      name: 'calendar-day-grid-body-row',\n      description: 'Calendar day grid table body row',\n    },\n    {\n      name: 'calendar-day-grid-body-cell',\n      description: 'Calendar day grid table body cell',\n    },\n    {\n      name: 'calendar-day-grid-day-button',\n      description: 'Calendar day grid day button',\n    },\n    {\n      name: 'calendar-day-grid-day-button-dot',\n      description: 'Calendar day grid day button dot',\n    },\n    {\n      name: 'calendar-action-buttons-root',\n      description: 'Calendar action button root',\n    },\n    {\n      name: 'calendar-action-button-confirm',\n      description: 'Calendar confirm action button',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"The example below includes date input range field that open a date picker that implements the dialog design pattern. The dialog contains a calendar that uses the grid pattern to present buttons that enable the user to choose a day from the calendar. Choosing a date from the calendar closes the dialog and populates the date input field. When the dialog is opened, if the input field is empty, or does not contain a valid date, then the current date is focused in the calendar. Otherwise, the focus is placed on the day in the calendar that matches the value of the date input field."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices/examples/dialog-modal/datepicker-dialog.html",mdxType:"ExitLink"},"Date Picker Dialog WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      \'test-date\': \'01/01/2022\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <DateInputRange\n        model="test-date"\n        startDateLabel="Accessibility Practice"\n        endDateLabel="Accessibility Practice"\n        startDateSubtext="Utilize the Keyboard Interaction table below to test the components accessibility."\n        endDateSubtext="Utilize the Keyboard Interaction table below to test the components accessibility."\n        validators={{ required: true }}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<div style={{ marginTop: '25px' }}>\n  <Docs.AccessibilityTable\n    title=\"Choose Date Button\"\n    rows={[\n      {\n        name: 'Space',\n        description:\n          'Open the date picker dialog. Move focus to selected date.',\n      },\n      {\n        name: 'Enter',\n        description:\n          'Open the date picker dialog. Move focus to selected date.',\n      },\n    ]}\n  />\n</div>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Date Picker Dialog\"\n  rows={[\n    {\n      name: 'Esc',\n      description:\n        'Closes the dialog and returns focus to the Choose Starting Date or Choose Ending Date button',\n    },\n    {\n      name: 'Tab',\n      description: 'Moves focus to next element in the dialog Tab sequence',\n    },\n    {\n      name: 'Shift + Tab',\n      description: 'Moves focus to previous element in the dialog Tab sequence',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Date Picker Dialog: Month/Year Buttons\"\n  rows={[\n    {\n      name: 'Space',\n      description:\n        'Change the month and/or year displayed in the calendar grid',\n    },\n    {\n      name: 'Enter',\n      description:\n        'Change the month and/or year displayed in the calendar grid',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Date Picker Dialog: Date Grid\"\n  rows={[\n    {\n      name: 'Space',\n      description:\n        'Select the date, close the dialog, and move focus to the Choose Starting Date or Choose Ending Date button',\n    },\n    {\n      name: 'Enter',\n      description:\n        'Select the date, close the dialog, and move focus to the Choose Starting Date or Choose Ending Date button',\n    },\n    {\n      name: 'Up Arrow',\n      description: 'Moves focus to the same day of the previous week',\n    },\n    {\n      name: 'Down Arrow',\n      description: 'Moves focus to the same day of the next week',\n    },\n    {\n      name: 'Right Arrow',\n      description: 'Moves focus to the next day',\n    },\n    {\n      name: 'Left Arrow',\n      description: 'Moves focus to the previous day',\n    },\n    {\n      name: 'Page Up',\n      description: 'Changes the grid of dates to the previous month',\n    },\n    {\n      name: 'Page Down',\n      description: 'Changes the grid of dates to the next month',\n    },\n    {\n      name: 'Shift + Page Down',\n      description: 'Changes the grid of dates to the next Year',\n    },\n    {\n      name: 'Shift + Page Up',\n      description: 'Changes the grid of dates to the previous Year',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},11762:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"divider",category:"Layout",title:"Divider",description:"Used to add visual or semantic separation between content.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/branch/Pj4hylkP9W3NOo4oxdJhhg/Abyss-Design-System?node-id=19923%3A77152",pagination_prev:"web/ui/box",pagination_next:"web/ui/flex"},d=void 0,p={unversionedId:"web/ui/divider",id:"web/ui/divider",isDocsHomePage:!1,title:"Divider",description:"Used to add visual or semantic separation between content.",source:"@site/docs/web/ui/Divider.md",sourceDirName:"web/ui",slug:"/web/ui/divider",permalink:"/web/ui/divider",tags:[],version:"current",frontMatter:{id:"divider",category:"Layout",title:"Divider",description:"Used to add visual or semantic separation between content.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/branch/Pj4hylkP9W3NOo4oxdJhhg/Abyss-Design-System?node-id=19923%3A77152",pagination_prev:"web/ui/box",pagination_next:"web/ui/flex"},sidebar:"docs",previous:{title:"Box",permalink:"/web/ui/box"},next:{title:"Flex",permalink:"/web/ui/flex"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Orientation",id:"orientation",children:[],level:2},{value:"Width and Height",id:"width-and-height",children:[],level:2},{value:"Color",id:"color",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Divider } from '@abyss/web/ui/Divider';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Divider',\n  inputs: [\n    {\n      prop: 'orientation',\n      type: 'select',\n      options: [\n        { label: 'horizontal', value: 'horizontal' },\n        { label: 'vertical', value: 'vertical' },\n      ],\n    },\n    {\n      prop: 'margin',\n      type: 'string',\n    },\n    {\n      prop: 'height',\n      type: 'string',\n    },\n    {\n      prop: 'width',\n      type: 'string',\n    },\n    {\n      prop: 'color',\n      type: 'string',\n    },\n  ]\n}\n\n<div style={{ height: '320px' }}>\n  <Divider/>\n</div>\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const VerticalDivider = () => (\n    <Divider orientation=\"vertical\" height={20} color=\"$gray5\" />\n  );\n\n  return (\n    <Card\n      css={{\n        'abyss-card-root': {\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: '$gray2',\n          height: '350px',\n          padding: '50px',\n        },\n      }}\n    >\n      <Layout.Stack\n        alignItems=\"left\"\n        grow\n        css={{ 'abyss-layout-stack': { maxWidth: '350px' } }}\n      >\n        <h3>Abyss Divider component</h3>\n        <Divider orientation=\"horizontal\" color=\"$gray5\" />\n        <Text>Add visual separation between content</Text>\n        <Layout.Group>\n          <Link href=\"#orientation\">Orientation</Link>\n          <VerticalDivider />\n          <Link href=\"#width-and-height\">Width</Link>\n          <VerticalDivider />\n          <Link href=\"#width-and-height\">Height</Link>\n          <VerticalDivider />\n          <Link href=\"#color\">Color</Link>\n        </Layout.Group>\n      </Layout.Stack>\n    </Card>\n  );\n};\n")),(0,r.kt)("h2",{id:"orientation"},"Orientation"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"orientation")," prop to adjust the orientation to either ",(0,r.kt)("inlineCode",{parentName:"p"},"horizontal")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"vertical"),". The default setting is ",(0,r.kt)("inlineCode",{parentName:"p"},"horizontal"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Divider orientation="horizontal" />\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<div style={{ height: '200px' }}>\n  <Divider orientation=\"vertical\" />\n</div>\n")),(0,r.kt)("h2",{id:"width-and-height"},"Width and Height"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"height")," props to set the desired sizing dimensions."),(0,r.kt)("p",null,"When ",(0,r.kt)("inlineCode",{parentName:"p"},"horizontal")," orientation is selected the settings are applied as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"width")," : determines the left-to-right length of the of the divider; default setting is ",(0,r.kt)("inlineCode",{parentName:"li"},"100%")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"height")," : determines the thickness of the divider; default setting is ",(0,r.kt)("inlineCode",{parentName:"li"},"2px"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Divider orientation="horizontal" width={50} height={3} />\n')),(0,r.kt)("p",null,"When ",(0,r.kt)("inlineCode",{parentName:"p"},"vertical")," orientation is selected the settings are applied as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"width")," : determines the thickness of the divider; default setting is ",(0,r.kt)("inlineCode",{parentName:"li"},"2px")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"height")," : determines the top-to-bottom length of the of the divider; default setting is ",(0,r.kt)("inlineCode",{parentName:"li"},"100%"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<div style={{ height: '50px' }}>\n  <Divider orientation=\"vertical\" height={50} width={3} />\n</div>\n")),(0,r.kt)("h2",{id:"color"},"Color"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"color")," property to set the color of the divider. The default setting is ",(0,r.kt)("inlineCode",{parentName:"p"},"$gray4"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Divider color="$primary1" />\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Divider}\n  rows={[\n    {\n      name: 'orientation',\n      type: \"'horizontal' | 'vertical'\",\n      description: 'The orientation of the divider',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'The color of the divider',\n    },\n    {\n      name: 'margin',\n      type: 'number | string',\n      description: 'Margin between the divider and surrounding elements',\n    },\n    {\n      name: 'width',\n      type: 'number | string',\n      description: 'The width of the divider',\n    },\n    {\n      name: 'height',\n      type: 'number | string',\n      description: 'The height of the divider',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Divider}\n  rows={[\n    {\n      name: 'divider-root',\n      description: 'Divider root element',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},19464:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"drag-and-drop",category:"Content",title:"DragAndDrop",description:"Used to create a dynamic set of data that can easily be moved by the user.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=6830%3A24990",pagination_prev:"web/ui/carousel",pagination_next:"web/ui/dropdown-menu"},s=void 0,d={unversionedId:"web/ui/drag-and-drop",id:"web/ui/drag-and-drop",isDocsHomePage:!1,title:"DragAndDrop",description:"Used to create a dynamic set of data that can easily be moved by the user.",source:"@site/docs/web/ui/DragAndDrop.md",sourceDirName:"web/ui",slug:"/web/ui/drag-and-drop",permalink:"/web/ui/drag-and-drop",tags:[],version:"current",frontMatter:{id:"drag-and-drop",category:"Content",title:"DragAndDrop",description:"Used to create a dynamic set of data that can easily be moved by the user.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=6830%3A24990",pagination_prev:"web/ui/carousel",pagination_next:"web/ui/dropdown-menu"},sidebar:"docs",previous:{title:"Carousel",permalink:"/web/ui/carousel"},next:{title:"DropdownMenu",permalink:"/web/ui/dropdown-menu"}},p=[{value:"Drag and Drop",id:"drag-and-drop",children:[],level:2},{value:"Actions",id:"actions",children:[],level:2},{value:"Hiding Actions",id:"hiding-actions",children:[],level:2},{value:"Disabling Drag",id:"disabling-drag",children:[],level:2},{value:"Disable Accordion",id:"disable-accordion",children:[],level:2},{value:"onSave / onCancel",id:"onsave--oncancel",children:[],level:2},{value:"onDragEnd",id:"ondragend",children:[],level:2},{value:"Responders",id:"responders",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { DragAndDrop } from '@abyss/web/ui/DragAndDrop';\n")),(0,i.kt)("h2",{id:"drag-and-drop"},"Drag and Drop"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," prop must be unique for each item.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"columnContent")," prop sets the content for a column")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"columnItems")," prop set the array of items for a column.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"isVisible")," prop set the default icon's visibility.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Note: Please cache content preferences at the API level."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  state = [\n    {\n      id: 'col1',\n      columnContent: 'Section 1',\n      isVisible: true,\n      columnItems: [\n        {\n          id: 'task1',\n          content: 'content 1',\n          isVisible: true,\n        },\n        { id: 'task2', content: 'content 2', isVisible: true },\n        { id: 'task3', content: 'content 3', isVisible: true },\n        { id: 'task4', content: 'content 4', isVisible: true },\n      ],\n    },\n\n    {\n      id: 'col2',\n      columnContent: 'Section 2',\n      isVisible: true,\n      columnItems: [\n        { id: 'task5', content: 'content 5', isVisible: true },\n        { id: 'task6', content: 'content 6', isVisible: true },\n        { id: 'task7', content: 'content 7', isVisible: true },\n        {\n          id: 'task8',\n          content: 'content 8',\n          isVisible: true,\n        },\n      ],\n    },\n    {\n      id: 'col3',\n      columnContent: 'Section 3',\n      isVisible: true,\n      columnItems: [\n        { id: 'task9', content: 'content 9', isVisible: true },\n        { id: 'task10', content: 'content 10', isVisible: true },\n      ],\n    },\n  ];\n\n  const [data, setData] = useState(state);\n\n  return <DragAndDrop data={data} setData={setData} />;\n};\n")),(0,i.kt)("h2",{id:"actions"},"Actions"),(0,i.kt)("p",null,"Actions can be passed in the column or row levels of drag and drop using the ",(0,i.kt)("inlineCode",{parentName:"p"},"action")," prop. Within the ",(0,i.kt)("inlineCode",{parentName:"p"},"action")," prop an icon can be set using the ",(0,i.kt)("inlineCode",{parentName:"p"},"icon")," prop and a method for the icon can be set using the ",(0,i.kt)("inlineCode",{parentName:"p"},"method")," prop."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  state = [\n    {\n      id: \'col1\',\n      columnContent: \'Section 1\',\n      isVisible: true,\n      action: {\n        icon: (\n          <IconMaterial\n            icon={\'info\'}\n            size="18px"\n            color="$gray6"\n            variant="outlined"\n          />\n        ),\n        method: (column) => {\n          console.log(\'column clicked: \', column);\n        },\n      },\n      columnItems: [\n        {\n          id: \'task1\',\n          content: \'content 1\',\n          isVisible: true,\n          action: {\n            icon: (\n              <IconMaterial\n                icon="info"\n                size="18px"\n                color="$gray6"\n                variant="outlined"\n              />\n            ),\n            method: (row, column) => {\n              console.log(\'row clicked: \', row, column);\n            },\n          },\n        },\n        {\n          id: \'task2\',\n          content: \'content 2\',\n          isVisible: true,\n          action: {\n            icon: (\n              <IconMaterial\n                icon="info"\n                size="18px"\n                color="$gray6"\n                variant="outlined"\n              />\n            ),\n            method: (row, column) => {\n              console.log(\'row clicked: \', row, column);\n            },\n          },\n        },\n        {\n          id: \'task3\',\n          content: \'content 3\',\n          isVisible: true,\n          action: {\n            icon: (\n              <IconMaterial\n                icon="info"\n                size="18px"\n                color="$gray6"\n                variant="outlined"\n              />\n            ),\n            method: () => {\n              console.log(\'Action clicked\');\n            },\n          },\n        },\n        {\n          id: \'task4\',\n          content: \'content 4\',\n          isVisible: true,\n          action: {\n            icon: (\n              <IconMaterial\n                icon="info"\n                size="18px"\n                color="$gray6"\n                variant="outlined"\n              />\n            ),\n            method: () => {\n              console.log(\'Action clicked\');\n            },\n          },\n        },\n      ],\n    },\n  ];\n  const [data, setData] = useState(state);\n\n  return <DragAndDrop data={data} setData={setData} />;\n};\n')),(0,i.kt)("h2",{id:"hiding-actions"},"Hiding Actions"),(0,i.kt)("p",null,"Actions can be disabled by setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"hideAction")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  state = [\n    {\n      id: 'col1',\n      columnContent: 'Section 1',\n      isVisible: true,\n      hideAction: true,\n      columnItems: [\n        {\n          id: 'task1',\n          content: 'content 1',\n          isVisible: true,\n          hideAction: true,\n        },\n        {\n          id: 'task2',\n          content: 'content 2',\n          isVisible: true,\n          hideAction: true,\n        },\n        {\n          id: 'task3',\n          content: 'content 3',\n          isVisible: true,\n          hideAction: true,\n        },\n        {\n          id: 'task4',\n          content: 'content 4',\n          isVisible: true,\n          hideAction: true,\n        },\n      ],\n    },\n  ];\n\n  const [data, setData] = useState(state);\n\n  return <DragAndDrop data={data} setData={setData} />;\n};\n")),(0,i.kt)("h2",{id:"disabling-drag"},"Disabling Drag"),(0,i.kt)("p",null,"Columns and rows can be locked and disabled causing them to not be draggable by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDragDisabled")," prop. Note: Please keep locked items at the top or bottom."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  state = [\n    {\n      id: 'col1',\n      columnContent: 'Section 1',\n      isVisible: true,\n      columnItems: [\n        {\n          id: 'task1',\n          content: 'content 1',\n          isVisible: true,\n        },\n        { id: 'task2', content: 'content 2', isVisible: true },\n        {\n          id: 'task3',\n          content: 'content 3',\n          isVisible: true,\n          props: { isDragDisabled: true },\n        },\n        {\n          id: 'task4',\n          content: 'content 4',\n          isVisible: true,\n          props: { isDragDisabled: true },\n        },\n      ],\n    },\n    {\n      id: 'col2',\n      columnContent: 'Section 2',\n      isVisible: true,\n      columnItems: [\n        {\n          id: 'task5',\n          content: 'content 5',\n          isVisible: true,\n        },\n        { id: 'task6', content: 'content 6', isVisible: true },\n        {\n          id: 'task7',\n          content: 'content 7',\n          isVisible: true,\n          props: { isDragDisabled: true },\n        },\n        {\n          id: 'task8',\n          content: 'content 8',\n          isVisible: true,\n          props: { isDragDisabled: true },\n        },\n      ],\n    },\n    {\n      id: 'col3',\n      isDragDisabled: true, // Disables the entire column from being dragged\n      columnContent: 'Section 3',\n      isVisible: true,\n      columnItems: [\n        {\n          id: 'task9',\n          content: 'content 9',\n          isVisible: true,\n        },\n        { id: 'task10', content: 'content 10', isVisible: true },\n        {\n          id: 'task11',\n          content: 'content 11',\n          isVisible: true,\n          props: { isDragDisabled: true },\n        },\n        {\n          id: 'task12',\n          content: 'content 12',\n          isVisible: true,\n          props: { isDragDisabled: true },\n        },\n      ],\n    },\n  ];\n\n  const [data, setData] = useState(state);\n\n  return <DragAndDrop data={data} setData={setData} />;\n};\n")),(0,i.kt)("h2",{id:"disable-accordion"},"Disable Accordion"),(0,i.kt)("p",null,"The accordion can be disabled using the ",(0,i.kt)("inlineCode",{parentName:"p"},"accordionDisabled")," prop."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  state = [\n    {\n      id: 'col1',\n      columnContent: 'Section 1',\n      isVisible: true,\n      columnItems: [\n        {\n          id: 'task1',\n          content: 'content 1',\n          isVisible: true,\n        },\n        { id: 'task2', content: 'content 2', isVisible: true },\n        { id: 'task3', content: 'content 3', isVisible: true },\n        { id: 'task4', content: 'content 4', isVisible: true },\n      ],\n    },\n\n    {\n      id: 'col2',\n      columnContent: 'Section 2',\n      isVisible: true,\n      columnItems: [\n        { id: 'task5', content: 'content 5', isVisible: true },\n        { id: 'task6', content: 'content 6', isVisible: true },\n        { id: 'task7', content: 'content 7', isVisible: true },\n        {\n          id: 'task8',\n          content: 'content 8',\n          isVisible: true,\n        },\n      ],\n    },\n    {\n      id: 'col3',\n      columnContent: 'Section 3',\n      isVisible: true,\n      columnItems: [\n        { id: 'task9', content: 'content 9', isVisible: true },\n        { id: 'task10', content: 'content 10', isVisible: true },\n      ],\n    },\n  ];\n\n  const [data, setData] = useState(state);\n\n  return <DragAndDrop data={data} setData={setData} accordionDisabled />;\n};\n")),(0,i.kt)("h2",{id:"onsave--oncancel"},"onSave / onCancel"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"onSave"),": callback fired once the drag and drop order is saved."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"onCancel"),": callback fired once the drag and drop order is canceled.")),(0,i.kt)("p",null,"The callback functions can take two positional arguments. The first argument is the state of the data when the customize order button is clicked. The second argument is the state of the data when the save or cancel button is clicked."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const state = [\n    {\n      id: 'col1',\n      columnContent: 'Section 1',\n      isVisible: true,\n      columnItems: [\n        {\n          id: 'task1',\n          content: 'content 1',\n          isVisible: true,\n        },\n        { id: 'task2', content: 'content 2', isVisible: true },\n        { id: 'task3', content: 'content 3', isVisible: true },\n        { id: 'task4', content: 'content 4', isVisible: true },\n      ],\n    },\n  ];\n\n  const [data, setData] = useState(state);\n\n  const onSave = (oldData, data) => {\n    console.log('onSave data:', data);\n    console.log('onSave oldData:', oldData);\n  };\n\n  const onCancel = (oldData, data) => {\n    console.log('onCancel data', data);\n    console.log('onCancel oldData:', oldData);\n  };\n\n  return (\n    <DragAndDrop\n      data={data}\n      setData={setData}\n      onSave={onSave}\n      onCancel={onCancel}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"ondragend"},"onDragEnd"),(0,i.kt)("p",null,"Callback fired once a drag has ended. It is the responsibility of this responder to synchronously apply changes that has resulted from the drag."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  state = [\n    {\n      id: 'col1',\n      columnContent: 'Section 1',\n      isVisible: true,\n      columnItems: [\n        {\n          id: 'task1',\n          content: 'content 1',\n          isVisible: true,\n        },\n        { id: 'task2', content: 'content 2', isVisible: true },\n        { id: 'task3', content: 'content 3', isVisible: true },\n        { id: 'task4', content: 'content 4', isVisible: true },\n      ],\n    },\n  ];\n\n  const [data, setData] = useState(state);\n\n  onDragEnd = (result) => {\n    const { destination, source, draggableId } = result;\n    const findColumnIndex = (element) => {\n      return element.id === result.source.droppableId;\n    };\n\n    if (!destination) {\n      return;\n    }\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (destination.droppableId !== source.droppableId) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columns = Array.from(data);\n      const [reorderedItem] = columns.splice(result.source.index, 1);\n      columns.splice(result.destination.index, 0, reorderedItem);\n      setData(columns);\n    } else if (result.type === 'row') {\n      if (destination.droppableId === 'column') {\n        return;\n      }\n      const columns = Array.from(data);\n      const columnIndex = columns.findIndex(findColumnIndex);\n      const { columnItems } = columns[columnIndex];\n\n      const [reorderedItem] = columnItems.splice(result.source.index, 1);\n      columnItems.splice(result.destination.index, 0, reorderedItem);\n      setData(columns);\n    }\n  };\n  return <DragAndDrop data={data} onDragEnd={onDragEnd} setData={setData} />;\n};\n")),(0,i.kt)("h2",{id:"responders"},"Responders"),(0,i.kt)("p",null,"Responders are top level application events that you can use to perform your own state updates, style updates, as well as to make screen reader announcements. More information about onBeforeCapture, onBeforeDragStart, onDragStart, onDragUpdate, and onDragEnd can be found on the ",(0,i.kt)(m,{href:"https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/responders.md",mdxType:"ExitLink"},"beautiful Dnd docs."))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={DragAndDrop}\n  rows={[\n    {\n      name: 'data',\n      type: 'array[shape]',\n      description: 'Set the data of the drag and drop',\n    },\n    {\n      name: 'setData',\n      type: 'function',\n      description: 'Callback to set the state data',\n    },\n    {\n      name: 'onBeforeCapture',\n      type: 'function',\n      description:\n        'Callback fired when a drag is about to start and dimensions have not been collected from the DOM',\n    },\n    {\n      name: 'onBeforeDragStart',\n      type: 'function',\n      description:\n        'Callback fired when a drag is about to start and dimensions have been captured from the DOM',\n    },\n    {\n      name: 'onSave',\n      type: 'function',\n      description: 'Callback fired when the save button is clicked',\n    },\n    {\n      name: 'onCancel',\n      type: 'function',\n      description: 'Callback fired when the cancel button is clicked',\n    },\n    {\n      name: 'onDragStart',\n      type: 'function',\n      description: 'Callback fired when a drag has started',\n    },\n    {\n      name: 'onDragUpdate',\n      type: 'function',\n      description: 'Callback fired when a something has changed during a drag',\n    },\n    {\n      name: 'onDragEnd',\n      type: 'function',\n      description: 'Callback fired when a drag has ended',\n    },\n    {\n      name: 'accordionDisabled',\n      type: 'boolean',\n      description: 'Turn the accordion on or off',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={DragAndDrop}\n  rows={[\n    {\n      name: 'drag-and-drop-root',\n      description: 'Drag and drop root element',\n    },\n    {\n      name: 'drag-and-drop-options',\n      description: 'Options menu root element',\n    },\n    {\n      name: 'drag-and-drop-context',\n      description: 'Drag and drop context element',\n    },\n    {\n      name: 'options-container',\n      description: 'Options menu container',\n    },\n    {\n      name: 'options-expand-button',\n      description: 'Options menu expand button',\n    },\n    {\n      name: 'options-expand-button-icon',\n      description: 'Options menu expand button icon',\n    },\n    {\n      name: 'options-customize-button-icon',\n      description: 'Options menu customize button icon',\n    },\n    {\n      name: 'options-save-button-icon',\n      description: 'Options menu customize button icon',\n    },\n    {\n      name: 'options-animation',\n      description: 'Options menu animation',\n    },\n    {\n      name: 'options-button-container',\n      description: 'Options menu button container',\n    },\n    {\n      name: 'options-customize-button',\n      description: 'Options menu customize button',\n    },\n    {\n      name: 'options-save-button',\n      description: 'Options menu save button',\n    },\n    {\n      name: 'options-cancel-button',\n      description: 'Options menu cancel button',\n    },\n    {\n      name: 'accordion-root',\n      description: 'Root element',\n    },\n    {\n      name: 'accordion-item',\n      description: 'accordion item at the column level',\n    },\n    {\n      name: 'accordion-trigger',\n      description: 'accordion trigger at the column level',\n    },\n    {\n      name: 'columns-droppable-container',\n      description: 'Droppable container of the columns',\n    },\n    {\n      name: 'columns-droppable-area',\n      description: 'Droppable area of the columns',\n    },\n    {\n      name: 'columns-container',\n      description: 'Columns container',\n    },\n    {\n      name: 'column-container',\n      description: 'Column root element',\n    },\n    {\n      name: 'draggable-column-item',\n      description: 'draggable column container',\n    },\n    {\n      name: 'draggable-column-item',\n      description: 'Column item container',\n    },\n    {\n      name: 'column-header',\n      description: 'Column header root',\n    },\n    {\n      name: 'column-indicator',\n      description: 'Column indicator container',\n    },\n    {\n      name: 'column-content',\n      description: 'Column title container',\n    },\n    {\n      name: 'column-action',\n      description: 'Column action container',\n    },\n    {\n      name: 'column-buttons',\n      description: 'Column buttons container',\n    },\n    {\n      name: 'column-up-button',\n      description: 'Column up button',\n    },\n    {\n      name: 'column-up-icon',\n      description: 'Column up arrow icon',\n    },\n    {\n      name: 'column-down-icon',\n      description: 'Column down arrow icon',\n    },\n    {\n      name: 'column-drag-icon',\n      description: 'Column drag icon',\n    },\n    {\n      name: 'column-visibility-icon',\n      description: 'Column visibility icon',\n    },\n    {\n      name: 'column-down-button',\n      description: 'Column down button',\n    },\n    {\n      name: 'rows-droppable-container',\n      description: 'Rows droppable container',\n    },\n    {\n      name: 'rows-droppable-area',\n      description: 'Rows droppable area root',\n    },\n    {\n      name: 'row-container',\n      description: 'Row container root',\n    },\n    {\n      name: 'row-accordion-content',\n      description: 'Row accordion content container',\n    },\n    {\n      name: 'row-header',\n      description: 'Row header root',\n    },\n    {\n      name: 'row-content-buttons-container',\n      description: 'Row wrapper for content and buttons',\n    },\n    {\n      name: 'row-content',\n      description: 'Row content root',\n    },\n    {\n      name: 'row-buttons',\n      description: 'Row buttons container',\n    },\n    {\n      name: 'row-drag-icon',\n      description: 'Row drag or lock icon',\n    },\n    {\n      name: 'row-visibility-icon',\n      description: 'Row visibility icon',\n    },\n    {\n      name: 'row-up-icon',\n      description: 'Row up icon',\n    },\n    {\n      name: 'row-down-icon',\n      description: 'Row down icon',\n    },\n    {\n      name: 'row-up-button',\n      description: 'Row up button',\n    },\n    {\n      name: 'row-down-button',\n      description: 'Row down button',\n    },\n    {\n      name: 'row-indicator',\n      description: 'Row indicator',\n    },\n    {\n      name: 'row-action',\n      description: 'Row action container',\n    },\n    {\n      name: 'row-draggable-container',\n      description: 'Row draggable container',\n    },\n    {\n      name: 'row-draggable-item',\n      description: 'Row draggable item',\n    },\n    {\n      name: 'row-placeholder',\n      description: 'Placeholder for a row that appears at the bottom',\n    },\n    {\n      name: 'column-placeholder',\n      description: 'Placeholder for a column that appears at the bottom',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"DragAndDrop Accordion\"\n  rows={[\n    {\n      name: 'Spacebar',\n      description:\n        'Open and close the accordion when focus is on the accordion trigger',\n    },\n    {\n      name: 'Enter',\n      description:\n        'Open and close the accordion when focus is on the accordion trigger',\n    },\n    {\n      name: 'Tab',\n      description: 'Move forward through the tabbable elements',\n    },\n    {\n      name: 'Shift + Tab',\n      description: 'Moves focus to previous element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"DragAndDrop Draggable\"\n  rows={[\n    {\n      name: 'Spacebar',\n      description:\n        'Pick up a draggable object and drop an object when focus is on the draggable indicator',\n    },\n    {\n      name: 'Esc',\n      description: 'Cancel the drag',\n    },\n    {\n      name: 'Tab',\n      description: 'Move forward through the tabbable elements',\n    },\n    {\n      name: 'Shift + Tab',\n      description: 'Moves focus to previous element',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},44705:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"drawer",category:"Overlay",title:"Drawer",description:"Displays an overlay area at any side of the screen.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11860",pagination_prev:"web/ui/sub-navigation-menu",pagination_next:"web/ui/loading-overlay"},d=void 0,p={unversionedId:"web/ui/drawer",id:"web/ui/drawer",isDocsHomePage:!1,title:"Drawer",description:"Displays an overlay area at any side of the screen.",source:"@site/docs/web/ui/Drawer.md",sourceDirName:"web/ui",slug:"/web/ui/drawer",permalink:"/web/ui/drawer",tags:[],version:"current",frontMatter:{id:"drawer",category:"Overlay",title:"Drawer",description:"Displays an overlay area at any side of the screen.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11860",pagination_prev:"web/ui/sub-navigation-menu",pagination_next:"web/ui/loading-overlay"},sidebar:"docs",previous:{title:"SubNavigationMenu",permalink:"/web/ui/sub-navigation-menu"},next:{title:"LoadingOverlay",permalink:"/web/ui/loading-overlay"}},c=[{value:"useOverlay",id:"useoverlay",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Title",id:"title",children:[],level:2},{value:"Passing Data",id:"passing-data",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Title Align",id:"title-align",children:[],level:2},{value:"Position",id:"position",children:[],level:2},{value:"Overflow",id:"overflow",children:[],level:2},{value:"closeOnClickOutside",id:"closeonclickoutside",children:[],level:2},{value:"closeOnEscPress",id:"closeonescpress",children:[],level:2},{value:"Drawer Footer",id:"drawer-footer",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Drawer } from '@abyss/web/ui/Drawer';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Drawer',\n  inputs: [\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'position',\n      type: 'select',\n      options: [\n        { label: 'left', value: 'left' },\n        { label: 'top', value: 'top' },\n        { label: 'bottom', value: 'bottom' },\n        { label: 'right', value: 'right' },\n      ],\n    },\n    {\n      prop: 'title',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'size',\n    },\n  ],\n}\n\n() => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Drawer\n        title=\"Enter title here\"\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n      >\n        Press escape to close the drawer\n      </Drawer>\n      <Button onClick={() => setIsOpen(true)} aria-haspopup=\"dialog\">\n        Toggle Drawer\n      </Button>\n    </React.Fragment>\n  );\n}\n")),(0,r.kt)("h2",{id:"useoverlay"},"useOverlay"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useOverlay")," hook lets the DOM handle form data and the overlays state. To utilize the ",(0,r.kt)("a",{parentName:"p",href:"/web/hooks/use-overlay"},"useOverlay")," hook the root/parent must be wrapped with the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/overlay-provider"},"OverlayProvider"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const drawer = useOverlay(\'drawer-form\');\n\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => drawer.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <Drawer title="Register" model="drawer-form">\n          <Drawer.Section>\n            <TextInput\n              label="First Name"\n              model="first-name"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Last Name"\n              model="last-name"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Email"\n              type="email"\n              model="email"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Password"\n              type="password"\n              model="password"\n              validators={{ required: true }}\n            />\n            <div style={{ marginTop: 20, marginBottom: 20 }}>\n              <Checkbox\n                label="I agree to terms and conditions"\n                model="terms-condition"\n                validators={{ required: true }}\n              />\n            </div>\n          </Drawer.Section>\n          <Drawer.Section>\n            <Layout.Group alignLayout="right">\n              <Button variant="outline" onClick={() => drawer.close()}>\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  form.handleSubmit(onSubmit)();\n                  if (form.formState.isValid) {\n                    drawer.close();\n                  }\n                }}\n              >\n                Submit\n              </Button>\n            </Layout.Group>\n          </Drawer.Section>\n        </Drawer>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook to set the open state of the drawer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setIsOpen(true)} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <Drawer\n          title="Register"\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n        >\n          <Drawer.Section>\n            <TextInput\n              label="First Name"\n              model="first-name"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Last Name"\n              model="last-name"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Email"\n              type="email"\n              model="email"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Password"\n              type="password"\n              model="password"\n              validators={{ required: true }}\n            />\n            <div style={{ marginTop: 20, marginBottom: 20 }}>\n              <Checkbox\n                label="I agree to terms and conditions"\n                model="terms-condition"\n                validators={{ required: true }}\n              />\n            </div>\n          </Drawer.Section>\n          <Drawer.Section>\n            <Layout.Group alignLayout="right">\n              <Button onClick={() => setIsOpen(false)} variant="outline">\n                Cancel\n              </Button>\n              <Button onClick={() => setIsOpen(false)}>Submit</Button>\n            </Layout.Group>\n          </Drawer.Section>\n        </Drawer>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"title"},"Title"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," prop to set the title of the drawer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const drawer = useOverlay(\'title-drawer\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => drawer.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <Drawer title="Custom Title" model="title-drawer">\n        <Drawer.Section>Custom Title</Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"passing-data"},"Passing Data"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"getState")," method retrieve the state of the drawer. Structure: ",(0,r.kt)("inlineCode",{parentName:"p"},"{ isOpen: Boolean, data: Object }"),". Pass data into the open/toggle methods to use in the drawer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const drawer = useOverlay('data-drawer');\n  const { data } = drawer.getState();\n\n  return (\n    <React.Fragment>\n      <Button\n        onClick={() => drawer.open({ firstName: 'John', lastName: 'Doe' })}\n        aria-haspopup=\"dialog\"\n      >\n        Toggle Drawer\n      </Button>\n      <Drawer title=\"Passing Data to Drawer\" model=\"data-drawer\">\n        <Drawer.Section>\n          <p>First Name: {data && data.firstName}</p>\n          <p>Last Name: {data && data.lastName}</p>\n        </Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"size"},"Size"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," prop to set the width of the drawer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [size, setSize] = useState('450px');\n\n  const openDrawer = (size) => {\n    setSize(size);\n    setIsOpen(true);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => openDrawer('sm')} aria-haspopup=\"dialog\">\n          Small (Default)\n        </Button>\n        <Button onClick={() => openDrawer('md')} aria-haspopup=\"dialog\">\n          Medium\n        </Button>\n        <Button onClick={() => openDrawer('lg')} aria-haspopup=\"dialog\">\n          Large\n        </Button>\n      </Layout.Group>\n\n      <Drawer\n        title={`Drawer Size: ${size}`}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        size={size}\n      >\n        <Drawer.Section>Press escape to close the drawer</Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"title-align"},"Title Align"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"titleAlign")," prop to align the position of the title."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n  const drawer = useOverlay('title-aligment');\n\n  const [align, setAlign] = useState('left');\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button\n          aria-haspopup=\"dialog\"\n          onClick={() => {\n            drawer.open();\n            setAlign('left');\n          }}\n        >\n          Left\n        </Button>\n        <Button\n          aria-haspopup=\"dialog\"\n          onClick={() => {\n            drawer.open();\n            setAlign('center');\n          }}\n        >\n          Center\n        </Button>\n        <Button\n          aria-haspopup=\"dialog\"\n          onClick={() => {\n            drawer.open();\n            setAlign('right');\n          }}\n        >\n          Right\n        </Button>\n      </Layout.Group>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <Drawer\n          title=\"Title Alignment\"\n          position=\"top\"\n          titleAlign={align}\n          model=\"title-aligment\"\n        >\n          <Drawer.Section>Title Alignment</Drawer.Section>\n        </Drawer>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"position"},"Position"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," prop to set the position of the drawer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [position, setPosition] = useState('left');\n\n  const openDrawer = (position) => {\n    setPosition(position);\n    setIsOpen(true);\n  };\n\n  return (\n    <React.Fragment>\n      <Drawer\n        title={`Drawer Postion: ${position}`}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        position={position}\n      >\n        <Drawer.Section>Press escape to close the drawer</Drawer.Section>\n      </Drawer>\n      <Layout.Group>\n        <Button onClick={() => openDrawer('left')} aria-haspopup=\"dialog\">\n          Left\n        </Button>\n        <Button onClick={() => openDrawer('right')} aria-haspopup=\"dialog\">\n          Right\n        </Button>\n        <Button onClick={() => openDrawer('top')} aria-haspopup=\"dialog\">\n          Top\n        </Button>\n        <Button onClick={() => openDrawer('bottom')} aria-haspopup=\"dialog\">\n          Bottom\n        </Button>\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"overflow"},"Overflow"),(0,r.kt)("p",null,"Overflow is handled within the content of the drawer. The title will remain static."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const drawer = useOverlay(\'overflow-drawer\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => drawer.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <Drawer title="Overflow" model="overflow-drawer">\n        <Drawer.Section>\n          {Array.from(Array(50).keys()).map((item) => {\n            return (\n              <p key={item} style={{ marginBottom: 65 }}>\n                Overflow Example - Scroll\n              </p>\n            );\n          })}\n        </Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"closeonclickoutside"},"closeOnClickOutside"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"closeOnClickOutside")," to prevent closing the drawer on outside clicks. Drawers using this prop can still be closed with the close button or through use of state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const drawer = useOverlay(\'drawer-closeOnClickOutside\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => drawer.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <Drawer\n        closeOnClickOutside={false}\n        title="Not closing on outside click"\n        model="drawer-closeOnClickOutside"\n      >\n        <Drawer.Section>Not closing on outside click</Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"closeonescpress"},"closeOnEscPress"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"closeOnEscPress")," to prevent closing the drawer on Esc key. Drawers using this prop can still be closed with the close button or through use of state."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Accessibility Notice: The ability to close or dismiss modals and dialogs with the escape key is an absolutely fundamental requirement for accessible keyboard navigation. As such, this prop should ONLY be used temporarily when programmatically necessary, such as waiting for search results to load or for an API call to return. If the process hangs or takes more than a few seconds, then this prop should be removed so users can choose to dismiss the modal.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const drawer = useOverlay(\'drawer-closeOnEscPress\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => drawer.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <Drawer\n        closeOnEscPress={false}\n        title="No Close on Escape Press"\n        model="drawer-closeOnEscPress"\n      >\n        <Drawer.Section>No Close on Escape Press</Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"drawer-footer"},"Drawer Footer"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"footer")," to add a footer container to a drawer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const drawer = useOverlay(\'drawer-footer\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => drawer.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <Drawer\n        title="Drawer With Footer "\n        model="drawer-footer"\n        footer={\n          <Drawer.Section>\n            <Layout.Group alignLayout="right">\n              <Button onClick={() => drawer.close()}>Cancel</Button>\n            </Layout.Group>\n          </Drawer.Section>\n        }\n      >\n        <Drawer.Section>\n          {Array.from(Array(30).keys()).map((item) => {\n            return (\n              <p key={item} style={{ marginBottom: 65 }}>\n                Drawer footer with cancel button\n              </p>\n            );\n          })}\n        </Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Drawer}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Drawer component',\n    },\n    {\n      name: 'footer',\n      type: 'node',\n      description: 'The contents of the Drawer footer',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the drawer',\n    },\n    {\n      name: 'position',\n      type: \"'left' | 'top' | 'bottom' | 'right'\",\n      description: 'Set the position where the drawer appears',\n    },\n    {\n      name: 'isOpen',\n      type: 'boolean',\n      description: 'Flag to check if drawer is opened',\n    },\n    {\n      name: 'onClose',\n      type: 'function',\n      description: 'Callback fired everytime drawer is closed',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of drawer',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'duration',\n      type: 'number',\n      description: 'Set the duration of the transition animation',\n    },\n    {\n      name: 'titleAlign',\n      type: 'string',\n      description: 'Set the alignment of the title',\n    },\n    {\n      name: 'hideClose',\n      type: 'boolean',\n      description: 'set to true to hide close button on drawer',\n    },\n    {\n      name: 'closeOnBackgroundClick',\n      type: 'boolean',\n      description:\n        'set to false to stop drawer from closing on background click',\n    },\n    {\n      name: 'closeOnEscPress',\n      type: 'boolean',\n      description:\n        'set to false to stop drawer from closing on escape key press',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Drawer.Section}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Drawer Section component',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Drawer}\n  rows={[\n    {\n      name: 'modal-root',\n      description: 'Drawer root element',\n    },\n    {\n      name: 'modal-overlay',\n      description: 'Drawer overlay element',\n    },\n    {\n      name: 'modal-content-container',\n      description: 'Drawer content container',\n    },\n    {\n      name: 'modal-header-container',\n      description: 'Drawer header container',\n    },\n    {\n      name: 'modal-header-title',\n      description: 'Drawer title element',\n    },\n    {\n      name: 'modal-body',\n      description: 'Drawer body element',\n    },\n    {\n      name: 'modal-footer',\n      description: 'Drawer footer element',\n    },\n    {\n      name: 'modal-close-button',\n      description: 'Drawer close button element',\n    },\n    {\n      name: 'modal-close-icon',\n      description: 'Drawer close icon element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Drawer.Section}\n  rows={[\n    {\n      name: 'modal-section-root',\n      description: 'Drawer Section root element',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Esc',\n      description: 'Closes the Drawer.',\n    },\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to the next interactive element within the Drawer.  Once the last interactive element in the Drawer is reached, pressing Tab again moves focus to the first interactive element within the Drawer.',\n    },\n    {\n      name: 'Shift + Tab',\n      description:\n        'Moves focus to the previous interactive element within the Drawer.  Once the first interactive element in the Drawer is reached, pressing Shift + Tab again moves focus to the last interactive element within the Drawer.',\n    },\n  ]}\n/>\n")),(0,r.kt)("h3",null,"Drawer Content"),(0,r.kt)("p",null,"The content included on the Drawer must be accessible."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const drawer = useOverlay(\'accessible-drawer\');\n\n  return (\n    <>\n      <Button onClick={() => drawer.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <Drawer title="Accessible Drawer" model="accessible-drawer">\n        <Drawer.Section>\n          <Button>Button is accessible in drawer</Button>\n        </Drawer.Section>\n      </Drawer>\n    </>\n  );\n};\n')),(0,r.kt)("h3",null,"Triggering Elements"),(0,r.kt)("p",null,'Use the aria-haspopup attribute on buttons or other triggering elements that open content like dialogs, listboxes, trees, menus, grids, etc.\xa0 Use a corresponding value that indicates what kind of popup will be displayed when the trigger element is activated. In turn, the element that pops up must be of the role indicated. For example use aria-haspop="dialog" on buttons that open modal dialogs. Be sure to include role="dialog" on the containing element of the dialog itself, too.'),(0,r.kt)("p",null,"See the docs on 'haspop' for more details:",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-haspopup"},"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-haspopup"),"\naria-haspopup - Accessibility | MDN\nThe aria-haspopup attribute indicates the availability and type of interactive popup element that can be triggered by the element on which the attribute is set."),(0,r.kt)("h3",null,"Esc Override"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"closeOnEscPress")," to prevent closing the modal on Esc key. Modals using this prop can still be closed with the close button or through use of state."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Accessibility Notice: The ability to close or dismiss modals and dialogs with the escape key is an absolutely fundamental requirement for accessible keyboard navigation. As such, this prop should ONLY be used temporarily when programmatically necessary, such as waiting for search results to load or for an API call to return. If the process hangs or takes more than a few seconds, then this prop should be removed so users can choose to dismiss the modal.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const modal = useOverlay(\'closeOnEscPress-modal\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => modal.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <Drawer\n        closeOnEscPress={false}\n        title="No Close on Escape Press"\n        model="closeOnEscPress-modal"\n      >\n        <Drawer.Section>No Close on Escape Press</Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n'))))}g.isMDXComponent=!0},90802:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"dropdown-menu",category:"Content",title:"DropdownMenu",description:"Displays a menu triggered by a button, such as a set of actions or functions.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=9141%3A35044",pagination_prev:"web/ui/drag-and-drop",pagination_next:"web/ui/page-body"},s=void 0,d={unversionedId:"web/ui/dropdown-menu",id:"web/ui/dropdown-menu",isDocsHomePage:!1,title:"DropdownMenu",description:"Displays a menu triggered by a button, such as a set of actions or functions.",source:"@site/docs/web/ui/DropdownMenu.md",sourceDirName:"web/ui",slug:"/web/ui/dropdown-menu",permalink:"/web/ui/dropdown-menu",tags:[],version:"current",frontMatter:{id:"dropdown-menu",category:"Content",title:"DropdownMenu",description:"Displays a menu triggered by a button, such as a set of actions or functions.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=9141%3A35044",pagination_prev:"web/ui/drag-and-drop",pagination_next:"web/ui/page-body"},sidebar:"docs",previous:{title:"DragAndDrop",permalink:"/web/ui/drag-and-drop"},next:{title:"PageBody",permalink:"/web/ui/page-body"}},p=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Inserting icons",id:"inserting-icons",children:[],level:2},{value:"Outline",id:"outline",children:[],level:2},{value:"Variant",id:"variant",children:[],level:2},{value:"isDisabled",id:"isdisabled",children:[],level:2},{value:"Menu Items",id:"menu-items",children:[],level:2},{value:"onClick",id:"onclick",children:[],level:2},{value:"onChange",id:"onchange",children:[],level:2},{value:"Disabled Menu Items",id:"disabled-menu-items",children:[],level:2},{value:"isSeparated",id:"isseparated",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { DropdownMenu } from '@abyss/web/ui/DropdownMenu';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [bookmarksChecked, setBookmarksChecked] = useState(true);\n  const [urlsChecked, setUrlsChecked] = useState(false);\n  const [person, setPerson] = useState('Pedro');\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n    },\n    {\n      title: 'Sub menu',\n      subMenu: [\n        {\n          title: 'Save As...',\n          icon: <IconMaterial icon=\"save\" />,\n          onClick: () => {\n            console.log('Clicked Save As');\n          },\n        },\n        {\n          checkboxes: [\n            {\n              label: 'Show Full Urls',\n              value: 'Show Full Urls',\n              checked: urlsChecked,\n              onChange: setUrlsChecked,\n            },\n          ],\n        },\n        {\n          label: 'Radio Group',\n          value: person,\n          onChange: setPerson,\n          radios: [\n            {\n              label: 'Pedro Duarte',\n              value: 'Pedro',\n            },\n            { label: 'Tom Hanks', value: 'Tom' },\n          ],\n        },\n      ],\n    },\n    {\n      checkboxes: [\n        {\n          label: 'Show Bookmarks',\n          value: 'Show Bookmarks',\n          checked: bookmarksChecked,\n          onChange: setBookmarksChecked,\n        },\n        {\n          label: 'Show Full Urls',\n          value: 'Show Full Urls',\n          checked: urlsChecked,\n          onChange: setUrlsChecked,\n        },\n      ],\n    },\n    {\n      label: 'Radio Group',\n      value: person,\n      onChange: setPerson,\n      radios: [\n        {\n          label: 'Pedro Duarte',\n          value: 'Pedro',\n        },\n        { label: 'Tom Hanks', value: 'Tom' },\n      ],\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <DropdownMenu\n        outline\n        label=\"Options\"\n        after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n        menuItems={menuItems}\n      />\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      'dropdown-menu-radios': 'Tom',\n      'dropdown-menu-sub-radios': 'Pedro',\n      'dropdown-menu-sub-checkbox': true,\n      'dropdown-menu-checkboxes-1': true,\n      'dropdown-menu-checkboxes-2': false,\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('submitted', data);\n  };\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n    },\n    {\n      title: 'Sub menu',\n      subMenu: [\n        {\n          title: 'Save As...',\n          icon: <IconMaterial icon=\"save\" />,\n          onClick: () => {\n            console.log('Clicked Save As');\n          },\n        },\n        {\n          checkboxes: [\n            {\n              model: 'dropdown-menu-sub-checkbox',\n              label: 'Show Full Urls',\n              value: 'Show Full Urls',\n            },\n          ],\n        },\n        {\n          model: 'dropdown-menu-sub-radios',\n          label: 'Radio Group',\n          radios: [\n            {\n              label: 'Pedro Duarte',\n              value: 'Pedro',\n            },\n            { label: 'Tom Hanks', value: 'Tom' },\n          ],\n        },\n      ],\n    },\n    {\n      checkboxes: [\n        {\n          model: 'dropdown-menu-checkboxes-1',\n          label: 'Show Bookmarks',\n          value: 'Show Bookmarks',\n        },\n        {\n          model: 'dropdown-menu-checkboxes-2',\n          label: 'Show Full Urls',\n          value: 'Show Full Urls',\n        },\n      ],\n    },\n    {\n      label: 'Radio Group',\n      model: 'dropdown-menu-radios',\n      radios: [\n        {\n          label: 'Pedro Duarte',\n          value: 'Pedro',\n        },\n        { label: 'Tom Hanks', value: 'Tom' },\n      ],\n    },\n  ];\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <Layout.Group>\n        <DropdownMenu\n          outline\n          label=\"Options\"\n          after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n          menuItems={menuItems}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </Layout.Group>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"usestate"},"useState"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [bookmarksChecked, setBookmarksChecked] = useState(true);\n  const [urlsChecked, setUrlsChecked] = useState(false);\n  const [person, setPerson] = useState('Pedro');\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n    },\n    {\n      title: 'Sub menu',\n      subMenu: [\n        {\n          title: 'Save As...',\n          icon: <IconMaterial icon=\"save\" />,\n          onClick: () => {\n            console.log('Clicked Save As');\n          },\n        },\n        {\n          checkboxes: [\n            {\n              label: 'Show Full Urls',\n              value: 'Show Full Urls',\n              checked: urlsChecked,\n              onChange: setUrlsChecked,\n            },\n          ],\n        },\n        {\n          label: 'Radio Group',\n          value: person,\n          onChange: setPerson,\n          radios: [\n            {\n              label: 'Pedro Duarte',\n              value: 'Pedro',\n            },\n            { label: 'Tom Hanks', value: 'Tom' },\n          ],\n        },\n      ],\n    },\n    {\n      checkboxes: [\n        {\n          label: 'Show Bookmarks',\n          value: 'Show Bookmarks',\n          checked: bookmarksChecked,\n          onChange: setBookmarksChecked,\n        },\n        {\n          label: 'Show Full Urls',\n          value: 'Show Full Urls',\n          checked: urlsChecked,\n          onChange: setUrlsChecked,\n        },\n      ],\n    },\n    {\n      label: 'Radio Group',\n      value: person,\n      onChange: setPerson,\n      radios: [\n        {\n          label: 'Pedro Duarte',\n          value: 'Pedro',\n        },\n        { label: 'Tom Hanks', value: 'Tom' },\n      ],\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <DropdownMenu\n        outline\n        label=\"Options\"\n        after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n        menuItems={menuItems}\n      />\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"label"},"Label"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," prop to insert text or icon elements into the Dropdown menu button. You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"hideLabel")," prop to hide the label if you are using icons only. ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," is required."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const menuItems = [\n    {\n      title: \'New Window\',\n      onClick: () => {\n        console.log(\'Clicked New Window!\');\n      },\n    },\n    {\n      title: \'Open New Tab\',\n      onClick: () => {\n        console.log(\'Open New Tab!\');\n      },\n    },\n    {\n      title: \'Save As...\',\n      onClick: () => {\n        console.log(\'Save As...\');\n      },\n      icon: <IconMaterial icon="save" />,\n    },\n  ];\n\n  const customIcon = (\n    <svg height="24" width="24" viewBox="0 0 16 16">\n      <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z" />\n    </svg>\n  );\n\n  return (\n    <Layout.Group>\n      <DropdownMenu outline label="Label" menuItems={menuItems} />\n      <DropdownMenu\n        outline\n        css={{\n          \'abyss-dropdown-menu-trigger\': {\n            color: \'red\',\n            border: \'1px solid red\',\n          },\n        }}\n        label="Custom Label"\n        menuItems={menuItems}\n      />\n      <DropdownMenu\n        outline\n        label="Table Actions"\n        hideLabel\n        after={<IconMaterial icon="more_vert" />}\n        menuItems={menuItems}\n      />\n      <DropdownMenu\n        outline\n        label="Github Action"\n        hideLabel\n        after={<Icon title="github">{customIcon}</Icon>}\n        menuItems={menuItems}\n      />\n    </Layout.Group>\n  );\n};\n')),(0,i.kt)("h2",{id:"inserting-icons"},"Inserting icons"),(0,i.kt)("p",null,"Insert icons into the Dropdown menu button using the ",(0,i.kt)("inlineCode",{parentName:"p"},"before")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"after")," props."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const menuItems = [\n    {\n      title: \'New Window\',\n      onClick: () => {\n        console.log(\'Clicked New Window!\');\n      },\n    },\n    {\n      title: \'Open New Tab\',\n      onClick: () => {\n        console.log(\'Open New Tab!\');\n      },\n    },\n    {\n      title: \'Save As...\',\n      onClick: () => {\n        console.log(\'Save As...\');\n      },\n      icon: <IconMaterial icon="save" />,\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <DropdownMenu\n          outline\n          label="Save As..."\n          before={<IconMaterial icon="save" />}\n          menuItems={menuItems}\n        />\n        <DropdownMenu\n          outline\n          label="Filter"\n          after={<IconMaterial icon="filter_alt" />}\n          menuItems={menuItems}\n        />\n        <DropdownMenu\n          outline\n          label="Download"\n          before={<IconMaterial icon="download" />}\n          after={<IconMaterial icon="keyboard_arrow_down" />}\n          menuItems={menuItems}\n        />\n        <DropdownMenu\n          label="Download"\n          variant="filled"\n          before={<IconMaterial icon="download" />}\n          after={<IconMaterial icon="keyboard_arrow_down" />}\n          menuItems={menuItems}\n        />\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"outline"},"Outline"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"outline")," prop to turn on the outline of the Dropdown menu. The default is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("strong",{parentName:"em"},"Note")),": An ",(0,i.kt)("inlineCode",{parentName:"p"},"outline")," should be added if the dropdown menu is used on a background that does not meet the 3:1 color contrast ratio."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [bookmarksChecked, setBookmarksChecked] = useState(true);\n  const [urlsChecked, setUrlsChecked] = useState(false);\n  const [person, setPerson] = useState('Pedro');\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n      disabled: false,\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n      isSeparated: true,\n    },\n    {\n      title: 'Sub menu',\n      subMenu: [\n        {\n          title: 'Save As...',\n          icon: <IconMaterial icon=\"save\" />,\n          onClick: () => {\n            console.log('Clicked Save As');\n          },\n        },\n        {\n          checkboxes: [\n            {\n              label: 'Show Full Urls',\n              value: 'Show Full Urls',\n              checked: urlsChecked,\n              onChange: setUrlsChecked,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      checkboxes: [\n        {\n          label: 'Show Bookmarks',\n          value: 'Show Bookmarks',\n          checked: bookmarksChecked,\n          onChange: setBookmarksChecked,\n        },\n        {\n          label: 'Show Full Urls',\n          value: 'Show Full Urls',\n          checked: urlsChecked,\n          onChange: setUrlsChecked,\n        },\n      ],\n    },\n    {\n      label: 'Radio Group',\n      value: person,\n      onChange: setPerson,\n      radios: [\n        { label: 'Pedro Duarte', value: 'Pedro' },\n        { label: 'Tom Hanks', value: 'Tom' },\n      ],\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <DropdownMenu\n          outline\n          label=\"Options\"\n          after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n          menuItems={menuItems}\n        />\n        <DropdownMenu\n          label=\"Options\"\n          after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n          menuItems={menuItems}\n        />\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"variant"},"Variant"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," prop to change the visual style of the Dropdown menu. You can set the value to ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"filled"),". The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"default"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [bookmarksChecked, setBookmarksChecked] = useState(true);\n  const [urlsChecked, setUrlsChecked] = useState(false);\n  const [person, setPerson] = useState('Pedro');\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n      disabled: false,\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n      isSeparated: true,\n    },\n    {\n      title: 'Sub menu',\n      subMenu: [\n        {\n          title: 'Save As...',\n          icon: <IconMaterial icon=\"save\" />,\n          onClick: () => {\n            console.log('Clicked Save As');\n          },\n        },\n        {\n          checkboxes: [\n            {\n              label: 'Show Full Urls',\n              value: 'Show Full Urls',\n              checked: urlsChecked,\n              onChange: setUrlsChecked,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      checkboxes: [\n        {\n          label: 'Show Bookmarks',\n          value: 'Show Bookmarks',\n          checked: bookmarksChecked,\n          onChange: setBookmarksChecked,\n        },\n        {\n          label: 'Show Full Urls',\n          value: 'Show Full Urls',\n          checked: urlsChecked,\n          onChange: setUrlsChecked,\n        },\n      ],\n    },\n    {\n      label: 'Radio Group',\n      value: person,\n      onChange: setPerson,\n      radios: [\n        { label: 'Pedro Duarte', value: 'Pedro' },\n        { label: 'Tom Hanks', value: 'Tom' },\n      ],\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <DropdownMenu\n          outline\n          label=\"Options\"\n          after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n          menuItems={menuItems}\n        />\n        <DropdownMenu\n          outline\n          variant=\"filled\"\n          label=\"Options\"\n          after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n          menuItems={menuItems}\n        />\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"isdisabled"},"isDisabled"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to disable the dropdown menu"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n      disabled: false,\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <DropdownMenu\n        outline\n        label=\"Options\"\n        after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n        menuItems={menuItems}\n        isDisabled\n      />\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"menu-items"},"Menu Items"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"menuItems")," prop to specify what will be displayed in the Dropdown. The prop requires an array of objects that have the following form for each item types:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Action Item:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n  title: string,\n  icon: node,  //optional\n  onClick: func,\n}\n")),(0,i.kt)("br",null),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Checkboxes:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n  checkboxes: Array,\n}\n\n// Checkbox item\n  checkboxes: [\n    {\n      label: string,\n      value: string,\n      checked: bool, // useState\n      onChange: func, // useState\n      model: string, // useForm\n    },\n  ];\n")),(0,i.kt)("br",null),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Radio-Group:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n  label: string,\n  value: string, // useState\n  onChange: func, // useState\n  model: string, // useForm\n  radios: Array,\n}\n\n// Radio item\n  radios: [\n    {\n      label: string,\n      value: string,\n    }\n  ]\n")),(0,i.kt)("br",null),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("strong",{parentName:"li"},"Sub-Menu:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n  title: string,\n  subMenu: Array,\n}\n  // Sub-menu\n  subMenu: [\n    {\n      //Radio-Group\n      //Checkboxes\n      //Action Item\n      //Sub-Menu\n    }\n  ]\n\n")),(0,i.kt)("h2",{id:"onclick"},"onClick"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"onClick")," function to trigger a custom function when the menu item is clicked."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('New Window!');\n      },\n    },\n    {\n      title: 'Open New Tab',\n      onClick: () => {\n        console.log('Open New Tab!');\n      },\n    },\n    {\n      title: 'Save As...',\n      onClick: () => {\n        console.log('Save As...');\n      },\n      icon: <IconMaterial icon=\"save\" />,\n      disabled: true,\n    },\n  ];\n\n  return (\n    <DropdownMenu\n      outline\n      label=\"Options\"\n      menuItems={menuItems}\n      after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"onchange"},"onChange"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"onChange")," fuction to trigger a custom function when a checkbox or a radio item is clicked. You can use this to update your checked state, or to do something else entirely."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [bookmarksChecked, setBookmarksChecked] = useState(true);\n  const [urlsChecked, setUrlsChecked] = useState(false);\n  const [person, setPerson] = useState('Pedro');\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n      isSeparated: true,\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n      isSeparated: true,\n    },\n    {\n      title: 'Sub menu',\n      subMenu: [\n        {\n          title: 'Save As...',\n          icon: <IconMaterial icon=\"save\" />,\n          onClick: () => {\n            console.log('Clicked Save As');\n          },\n        },\n        {\n          checkboxes: [\n            {\n              label: 'Show Full Urls',\n              value: 'Show Full Urls',\n              checked: urlsChecked,\n              onChange: setUrlsChecked,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      checkboxes: [\n        {\n          label: 'Show Bookmarks',\n          value: 'Show Bookmarks',\n          checked: bookmarksChecked,\n          onChange: setBookmarksChecked,\n        },\n        {\n          label: 'Show Full Urls',\n          value: 'Show Full Urls',\n          checked: urlsChecked,\n          onChange: setUrlsChecked,\n        },\n      ],\n    },\n    {\n      label: 'Radio Group',\n      value: person,\n      onChange: setPerson,\n      radios: [\n        { label: 'Pedro Duarte', value: 'Pedro' },\n        { label: 'Tom Hanks', value: 'Tom' },\n      ],\n    },\n  ];\n\n  return (\n    <DropdownMenu\n      outline\n      label=\"Options\"\n      menuItems={menuItems}\n      after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"disabled-menu-items"},"Disabled Menu Items"),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"disabled")," flag is ",(0,i.kt)("strong",{parentName:"p"},"true"),", it prevents the user from interacting with the menu item."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('New Window!');\n      },\n    },\n    {\n      title: 'Open New Tab',\n      onClick: () => {\n        console.log('Open New Tab!');\n      },\n    },\n    {\n      title: 'Save As...',\n      onClick: () => {\n        console.log('Save As...');\n      },\n      icon: <IconMaterial icon=\"save\" />,\n      disabled: true,\n    },\n  ];\n\n  return (\n    <DropdownMenu\n      outline\n      label=\"Options\"\n      menuItems={menuItems}\n      after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"isseparated"},"isSeparated"),(0,i.kt)("p",null,"When ",(0,i.kt)("inlineCode",{parentName:"p"},"isSeparated")," flag is ",(0,i.kt)("strong",{parentName:"p"},"true"),", it renders a horizontal divider that separates the menu item. The ",(0,i.kt)("em",{parentName:"p"},"checkbox")," and ",(0,i.kt)("em",{parentName:"p"},"radio")," group automatically renders a divider before and after the item so no ",(0,i.kt)("inlineCode",{parentName:"p"},"isSeparated")," flag is required for checkboxes and radio items. Divider is not render before and after the first and the last item respectively."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [bookmarksChecked, setBookmarksChecked] = useState(true);\n  const [urlsChecked, setUrlsChecked] = useState(false);\n  const [person, setPerson] = useState('Pedro');\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n      isSeparated: true,\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n      isSeparated: true,\n    },\n    {\n      title: 'Sub menu',\n      subMenu: [\n        {\n          title: 'Save As...',\n          icon: <IconMaterial icon=\"save\" />,\n          onClick: () => {\n            console.log('Clicked Save As');\n          },\n        },\n        {\n          checkboxes: [\n            {\n              label: 'Show Full Urls',\n              value: 'Show Full Urls',\n              checked: urlsChecked,\n              onChange: setUrlsChecked,\n            },\n          ],\n        },\n      ],\n    },\n    {\n      checkboxes: [\n        {\n          label: 'Show Bookmarks',\n          value: 'Show Bookmarks',\n          checked: bookmarksChecked,\n          onChange: setBookmarksChecked,\n        },\n        {\n          label: 'Show Full Urls',\n          value: 'Show Full Urls',\n          checked: urlsChecked,\n          onChange: setUrlsChecked,\n        },\n      ],\n    },\n    {\n      label: 'Radio Group',\n      value: person,\n      onChange: setPerson,\n      radios: [\n        { label: 'Pedro Duarte', value: 'Pedro' },\n        { label: 'Tom Hanks', value: 'Tom' },\n      ],\n    },\n  ];\n\n  return (\n    <DropdownMenu\n      outline\n      label=\"Options\"\n      menuItems={menuItems}\n      after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n    />\n  );\n};\n"))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={DropdownMenu}\n  rows={[\n    {\n      name: 'menuItems',\n      type: 'array[shape]',\n      description: 'The items that will be displayed in the Dropdown menu',\n    },\n    {\n      name: 'width',\n      type: 'number',\n      description: 'The minimum width of the Dropdown menu content',\n    },\n    {\n      name: 'outline',\n      type: 'boolean',\n      description: 'Add an outline to the Dropdown menu.',\n    },\n    {\n      name: 'variant',\n      type: \"'default' | 'filled'\",\n      description: 'The variant for the Dropdown menu appearance',\n    },\n    {\n      name: 'label',\n      type: 'ReactNode',\n      description:\n        'The label/icon that will be rendered in the Dropdown menu button',\n    },\n    {\n      name: 'before',\n      type: 'ReactNode',\n      description: 'Insert icon into Dropdown menu button before label',\n    },\n    {\n      name: 'after',\n      type: 'ReactNode',\n      description: 'Insert icon into Dropdown menu button after label',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Hide the label if using icons only',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Use to disable dropdown menu',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={DropdownMenu}\n  rows={[\n    {\n      name: 'dropdown-menu-root',\n      description: 'Dropdown menu root element',\n    },\n    {\n      name: 'dropdown-menu-content',\n      description: 'Dropdown menu content',\n    },\n    {\n      name: 'dropdown-menu-item',\n      description: 'Dropdown menu item',\n    },\n    {\n      name: 'dropdown-menu-item-icon-container',\n      description: 'Dropdown menu item icon container',\n    },\n    {\n      name: 'dropdown-menu-checkbox',\n      description: 'Dropdown menu checkbox',\n    },\n    {\n      name: 'dropdown-menu-checkbox-checkmark-container',\n      description: 'Dropdown menu checkbox checkmark container',\n    },\n    {\n      name: 'dropdown-menu-checkbox-checkmark',\n      description: 'Dropdown menu checkbox checkmark',\n    },\n    {\n      name: 'dropdown-menu-radio-group-label',\n      description: 'Dropdown menu radio group label',\n    },\n    {\n      name: 'dropdown-menu-radio-group',\n      description: 'Dropdown menu radio group',\n    },\n    {\n      name: 'dropdown-menu-radio',\n      description: 'Dropdown menu radio',\n    },\n    {\n      name: 'dropdown-menu-radio-dot-container',\n      description: 'Dropdown menu radio dot container',\n    },\n    {\n      name: 'dropdown-menu-radio-dot',\n      description: 'Dropdown menu radio dot',\n    },\n    {\n      name: 'dropdown-menu-item-separator',\n      description: 'Dropdown menu item separator',\n    },\n    {\n      name: 'dropdown-menu-sub-trigger-item',\n      description: 'Dropdown menu submenu trigger',\n    },\n    {\n      name: 'dropdown-menu-sub-trigger-icon-container',\n      description: 'Dropdown menu submenu trigger icon container',\n    },\n    {\n      name: 'dropdown-menu-sub-trigger-icon',\n      description: 'Dropdown menu submenu trigger icon',\n    },\n    {\n      name: 'dropdown-menu-trigger',\n      description: 'Dropdown menu trigger',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"Adheres to the []",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton",mdxType:"ExitLink"},"Menu Button WAI-ARIA design pattern")," and uses ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#kbd_roving_tabindex",mdxType:"ExitLink"},"roving tabindex")," to manage focus movement among menu items."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [bookmarksChecked, setBookmarksChecked] = useState(true);\n  const [urlsChecked, setUrlsChecked] = useState(false);\n  const [person, setPerson] = useState('Pedro');\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n    },\n    {\n      title: 'New Private Window',\n      onClick: () => {\n        console.log('Clicked New Private Window!');\n      },\n      disabled: true,\n    },\n    {\n      title: 'Home',\n      icon: <IconMaterial icon=\"home\" />,\n      onClick: () => {\n        console.log('Clicked Home');\n      },\n    },\n    {\n      title: 'Sub menu',\n      subMenu: [\n        {\n          title: 'Save As...',\n          icon: <IconMaterial icon=\"save\" />,\n          onClick: () => {\n            console.log('Clicked Save As');\n          },\n        },\n        {\n          checkboxes: [\n            {\n              label: 'Show Full Urls',\n              value: 'Show Full Urls',\n              checked: urlsChecked,\n              onChange: setUrlsChecked,\n            },\n          ],\n        },\n        {\n          label: 'Radio Group',\n          value: person,\n          onChange: setPerson,\n          radios: [\n            {\n              label: 'Pedro Duarte',\n              value: 'Pedro',\n            },\n            { label: 'Tom Hanks', value: 'Tom' },\n          ],\n        },\n      ],\n    },\n    {\n      checkboxes: [\n        {\n          label: 'Show Bookmarks',\n          value: 'Show Bookmarks',\n          checked: bookmarksChecked,\n          onChange: setBookmarksChecked,\n        },\n        {\n          label: 'Show Full Urls',\n          value: 'Show Full Urls',\n          checked: urlsChecked,\n          onChange: setUrlsChecked,\n        },\n      ],\n    },\n    {\n      label: 'Radio Group',\n      value: person,\n      onChange: setPerson,\n      radios: [\n        {\n          label: 'Pedro Duarte',\n          value: 'Pedro',\n        },\n        { label: 'Tom Hanks', value: 'Tom' },\n      ],\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <DropdownMenu\n        outline\n        label=\"Options\"\n        after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n        menuItems={menuItems}\n      />\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description: 'Moves focus to the next focusable element.',\n    },\n    {\n      name: 'Enter',\n      description:\n        'If focus is on a Dropdown menu button, opens the relevant Dropdown menu. If focus is on a menu item with a trigger, opens the relevant sub-menu.',\n    },\n    {\n      name: 'Space',\n      description:\n        'If focus is on a Dropdown menu button, opens the relevant Dropdown menu. If focus is on a menu item with a trigger, opens the relevant sub-menu.',\n    },\n    {\n      name: 'Escape',\n      description:\n        'Closes open Dropdown menu and moves focus to its Dropdown menu button.',\n    },\n    {\n      name: 'Up Arrow',\n      description: 'Focuses the previous menu item.',\n    },\n    {\n      name: 'Down Arrow',\n      description: 'Focuses the next menu item.',\n    },\n    {\n      name: 'Right Arrow',\n      description:\n        'Opens a sub-menu if focus is on a menu item with a trigger.',\n    },\n    {\n      name: 'Left Arrow',\n      description: 'Closes a sub-menu if open.',\n    },\n    {\n      name: 'Home',\n      description: 'Moves focus to the first item in the Dropdown menu.',\n    },\n    {\n      name: 'End',\n      description: 'Moves focus to the last item in the Dropdown menu.',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},76164:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"file-upload",category:"Forms",title:"FileUpload",description:"An HTML5 file upload component with a drag-drop zone and file browser for selection.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=8207%3A26355",pagination_prev:"web/ui/date-input-range",pagination_next:"web/ui/radio-group"},d=void 0,p={unversionedId:"web/ui/file-upload",id:"web/ui/file-upload",isDocsHomePage:!1,title:"FileUpload",description:"An HTML5 file upload component with a drag-drop zone and file browser for selection.",source:"@site/docs/web/ui/FileUpload.md",sourceDirName:"web/ui",slug:"/web/ui/file-upload",permalink:"/web/ui/file-upload",tags:[],version:"current",frontMatter:{id:"file-upload",category:"Forms",title:"FileUpload",description:"An HTML5 file upload component with a drag-drop zone and file browser for selection.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=8207%3A26355",pagination_prev:"web/ui/date-input-range",pagination_next:"web/ui/radio-group"},sidebar:"docs",previous:{title:"DateInputRange",permalink:"/web/ui/date-input-range"},next:{title:"RadioGroup",permalink:"/web/ui/radio-group"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"Upload Message",id:"upload-message",children:[],level:2},{value:"Header",id:"header",children:[],level:2},{value:"Uploading Spinner",id:"uploading-spinner",children:[],level:2},{value:"Max Files",id:"max-files",children:[],level:2},{value:"Max File Size",id:"max-file-size",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"File History",id:"file-history",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { FileUpload } from '@abyss/web/ui/FileUpload';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'FileUpload',\n  inputs: [\n    {\n      prop: 'maxFiles',\n      type: 'number',\n    },\n    {\n      prop: 'maxFileSize',\n      type: 'number',\n    },\n    {\n      prop: 'uploadMessage',\n      type: 'string',\n    },\n    {\n      prop: 'noIcon',\n      type: 'boolean',\n    },\n    {\n      prop: 'isUploading',\n      type: 'boolean',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n        {\n      prop: 'label',\n      type: 'string',\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n  ],\n}\n\n() => {\n  return (\n    <FileUpload\n      maxFileSize={5}\n      onChange={(fileList) => console.log('onChange', fileList)}\n      label=\"FileUpload Sandbox\"\n      hideLabel\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,'To add one or more files to the file tray upload-queue either click the "Open File Browser" button or drag and drop onto the drop zone. Each time a file or group of files is added to the queue the ',(0,r.kt)("inlineCode",{parentName:"p"},"onChange")," callback returns the current array of file objects that are ready to be uploaded."),(0,r.kt)("p",null,"Prior to submission any file that has been added to the file tray upload-queue can be removed by clicking the 'X' button located on the right side of each file item."),(0,r.kt)("p",null,"Each file is returned as a File type object that contains the following properties:\n",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"path"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"lastModified"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"lastModifiedDate"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"size"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"webkitRelativePath"),". For more info on these properties please visit ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#getting_information_on_selected_files"},"here"),". To access the contents of the file and complete the upload process you must use the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/FileReader"},"FileReader API"),"."),(0,r.kt)("p",null,"For accessibility compliance and benefit of the user experience, upon completion of file upload it is recommended that some form of feedback is utilized to inform the user of the upload status such as through the usage of the Abyss ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/alert"},"Alert")," component."),(0,r.kt)("p",null,"Use the example below to add files and submit to see a complete usage cycle."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [fileList, setFileList] = useState([]);\n  const [fileHistoryList, setFileHistoryList] = useState([]);\n  const [isUploading, setIsUploading] = useState(false);\n  const [alertIsVisible, setAlertIsVisible] = useState(false);\n\n  const onSubmit = () => {\n    console.log(\'fileList\', fileList);\n    if (!fileList.length) return;\n    setAlertIsVisible(false);\n    setIsUploading(true);\n    const fileHistory = fileList.map((file) => {\n      return {\n        name: file.name,\n        complete: true,\n      };\n    });\n    setTimeout(() => {\n      setFileHistoryList((previous) => [...previous, ...fileHistory]);\n      setIsUploading(false);\n      setAlertIsVisible(true);\n    }, 2000);\n  };\n\n  return (\n    <React.Fragment>\n      <Alert\n        title="File upload was successful"\n        variant="success"\n        isVisible={alertIsVisible}\n        css={{ marginBottom: \'$sm\' }}\n      ></Alert>\n      <FileUpload\n        maxFileSize={5}\n        isUploading={isUploading}\n        onChange={setFileList}\n        fileHistory={fileHistoryList}\n        label="FileUpload Usage"\n        hideLabel\n      />\n      <Button onClick={onSubmit} style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [fileList, setFileList] = useState([]);\n\n  const onSubmit = () => {\n    console.log('fileList', fileList);\n  };\n\n  return (\n    <React.Fragment>\n      <FileUpload\n        maxFileSize={5}\n        onChange={setFileList}\n        label=\"FileUpload useState\"\n        hideLabel\n      />\n      <Button onClick={onSubmit} style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <FileUpload\n        model="fileUpload"\n        maxFileSize={5}\n        label="Form FileUpload"\n        validators={{ required: true }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"upload-message"},"Upload Message"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"uploadMessage")," prop to configure the messaging that displays beneath the file upload icon. The recommended usage of this is for displaying more detailed information on the file types allowed as seen in this example. Please note that this component currently does not support file type validation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  return (\n    <FileUpload\n      maxFileSize={5}\n      onChange={(fileList) => console.log(\'onChange\', fileList)}\n      label="FileUpload Upload Message"\n      hideLabel\n      uploadMessage="Drag your .jpg file here"\n    />\n  );\n};\n')),(0,r.kt)("h2",{id:"header"},"Header"),(0,r.kt)("p",null,"Add an optional header to provide the user with more detailed information and guidance on the prescribed usage of the component.\nUsing the ",(0,r.kt)("inlineCode",{parentName:"p"},"headerContent")," prop pass in the heading title text using ",(0,r.kt)("inlineCode",{parentName:"p"},"FileUpload.Heading")," and the description text using ",(0,r.kt)("inlineCode",{parentName:"p"},"FileUpload.Description"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const headerContent = (\n    <React.Fragment>\n      <FileUpload.Heading>Accepted Files</FileUpload.Heading>\n      <FileUpload.Description>\n        JPEG (Joint Photographic Experts Group), PNG (Portable Network\n        Graphics), GIF (Graphics Interchange Format), PDF (Portable Document\n        Format), SVG (Scalable Vector Graphics), MP4 (Moving Picture Experts\n        Group)\n      </FileUpload.Description>\n    </React.Fragment>\n  );\n\n  return (\n    <FileUpload\n      maxFileSize={5}\n      onChange={(fileList) => console.log('onChange', fileList)}\n      label=\"FileUpload Header\"\n      hideLabel\n      headerContent={headerContent}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"uploading-spinner"},"Uploading Spinner"),(0,r.kt)("p",null,"To show an upload-in-progress state set the ",(0,r.kt)("inlineCode",{parentName:"p"},"isUploading")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),' and the "Open File Browser" button will be replaced with a loading spinner.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <FileUpload\n      maxFileSize={5}\n      onChange={(fileList) => console.log('onChange', fileList)}\n      label=\"FileUpload Uploading Spinner\"\n      hideLabel\n      isUploading\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"max-files"},"Max Files"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"maxFiles")," prop to set the maximum number of files that can added to the file tray upload-queue. When set to ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," the component is operating in single file mode. The default setting is ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," which allows for the addition of unlimited files."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <FileUpload\n      maxFileSize={5}\n      onChange={(fileList) => console.log('onChange', fileList)}\n      label=\"FileUpload Max Files\"\n      hideLabel\n      maxFiles={2}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"max-file-size"},"Max File Size"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"maxFileSize")," prop to limit the maximum file size allowed in MB (megabytes). If a file is selected that exceeds the file size limit it will be not be added to the file tray upload-queue and an error message will be displayed. The default setting has no file size limitation."),(0,r.kt)("p",null,'File size details are displayed beneath the "Open File Browser" button.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <FileUpload\n      onChange={(fileList) => console.log('onChange', fileList)}\n      label=\"FileUpload Max File Size\"\n      hideLabel\n      maxFileSize={5}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"disabled"},"Disabled"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to disable the file upload field so no files can be dragged onto the drop zone or selected through the file browser."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <FileUpload\n      maxFileSize={5}\n      onChange={(fileList) => console.log('onChange', fileList)}\n      label=\"FileUpload Disabled\"\n      hideLabel\n      isDisabled\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"file-history"},"File History"),(0,r.kt)("p",null,"To include previously uploaded files within the file tray pass in an array of objects to the ",(0,r.kt)("inlineCode",{parentName:"p"},"fileHistory")," prop.\nEach file history object must include the following two properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"complete")," : boolean that determines the file's current status displayed as a badge"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name")," : file name that will be displayed for the item")),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"fileHistorySort")," prop to determine the sort direction of file history items. If set to ",(0,r.kt)("inlineCode",{parentName:"p"},"desc")," file history items will remain below all newly added files. If set to ",(0,r.kt)("inlineCode",{parentName:"p"},"asc")," all file history items will remain on top. The default setting is ",(0,r.kt)("inlineCode",{parentName:"p"},"asc"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const fileHistoryList = [\n    {\n      complete: true,\n      name: 'file-status-is-complete.jpg',\n    },\n    {\n      complete: false,\n      name: 'file-status-is-incomplete.jpg',\n    },\n  ];\n\n  return (\n    <FileUpload\n      maxFileSize={5}\n      onChange={(fileList) => console.log('onChange', fileList)}\n      label=\"FileUpload File History\"\n      hideLabel\n      fileHistory={fileHistoryList}\n      fileHistorySort=\"desc\"\n    />\n  );\n};\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={FileUpload}\n  rows={[\n    {\n      name: 'maxFileSize',\n      type: 'number',\n      description: 'Maximum file size allowed in MB(megabytes)',\n    },\n    {\n      name: 'maxFiles',\n      type: 'number',\n      description: 'Maximum number of files allowed to be added',\n    },\n    {\n      name: 'uploadMessage',\n      type: 'string',\n      description: 'Messaging text displayed below the file upload icon',\n    },\n    {\n      name: 'headerContent',\n      type: 'ReactNode',\n      description:\n        \"Header content that's comprised of the FileUpload.Heading and FileUpload.Description components\",\n    },\n    {\n      name: 'noIcon',\n      type: 'boolean',\n      description: 'Flag to hide the file upload icon',\n    },\n    {\n      name: 'isUploading',\n      type: 'boolean',\n      description:\n        'Flag to enable the upload-in-progress state and display a loading spinner',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to disable the file upload field',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Label for file upload field',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description:\n        'Callback fired when a new file is added; returns the current list of files to be uploaded',\n    },\n    {\n      name: 'fileHistory',\n      type: 'array[object]',\n      default: '[]',\n      description:\n        'File history data to be included within the file tray { complete: boolean, name: string }',\n    },\n    {\n      name: 'fileHistorySort',\n      type: '\"asc\" | \"desc\"',\n      description: 'Sort direction of file history items',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={FileUpload.Heading}\n  rows={[\n    {\n      name: 'children',\n      type: 'string',\n      description: 'The text content of the file upload heading component',\n    },\n    {\n      name: 'headingLevel',\n      type: \"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\",\n      description: 'Set the heading level',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the heading text',\n    },\n    {\n      name: 'size',\n      type: 'string',\n      description: 'Set the font size of the heading text',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={FileUpload.Description}\n  rows={[\n    {\n      name: 'children',\n      type: 'string',\n      description: 'The text content of the file upload description component',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={FileUpload}\n  rows={[\n    {\n      name: 'file-upload-root',\n      description: 'File upload root element',\n    },\n    {\n      name: 'file-upload-label',\n      description: 'File upload label element',\n    },\n    {\n      name: 'file-upload-header-container',\n      description: 'File upload header container element',\n    },\n    {\n      name: 'file-upload-body-container',\n      description: 'File upload body container element',\n    },\n    {\n      name: 'file-upload-icon',\n      description: 'File upload icon element',\n    },\n    {\n      name: 'file-upload-message-text',\n      description: 'File upload message text element',\n    },\n    {\n      name: 'file-upload-spinner',\n      description: 'File upload spinner element',\n    },\n    {\n      name: 'file-upload-browse-button',\n      description: 'File upload browse button element',\n    },\n    {\n      name: 'file-upload-max-size-text',\n      description: 'File upload max size text element',\n    },\n    {\n      name: 'file-upload-error-list-container',\n      description: 'File upload error list container element',\n    },\n    {\n      name: 'file-upload-error-list-item',\n      description: 'File upload error list item element',\n    },\n    {\n      name: 'file-upload-descriptors',\n      description: 'File upload descriptors element',\n    },\n    {\n      name: 'file-upload-tray-container',\n      description: 'File upload tray container element',\n    },\n    {\n      name: 'file-upload-tray-item',\n      description: 'File upload tray item element',\n    },\n    {\n      name: 'file-upload-tray-item-remove-button',\n      description: 'File upload tray item remove button element',\n    },\n    {\n      name: 'file-upload-tray-item-remove-icon',\n      description: 'File upload tray item remove icon element',\n    },\n    {\n      name: 'file-upload-tray-item-status-badge',\n      description: 'File upload tray item status badge element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={FileUpload.Heading}\n  rows={[\n    {\n      name: 'file-upload-header-heading-text',\n      description: 'File upload header heading text element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={FileUpload.Description}\n  rows={[\n    {\n      name: 'file-upload-header-description-text',\n      description: 'File upload header description text element',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},10138:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"flex",category:"Layout",title:"Flex",description:"Used to incorporate CSS Flexbox into UI layouts.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1",pagination_prev:"web/ui/divider",pagination_next:"web/ui/grid"},d=void 0,p={unversionedId:"web/ui/flex",id:"web/ui/flex",isDocsHomePage:!1,title:"Flex",description:"Used to incorporate CSS Flexbox into UI layouts.",source:"@site/docs/web/ui/Flex.md",sourceDirName:"web/ui",slug:"/web/ui/flex",permalink:"/web/ui/flex",tags:[],version:"current",frontMatter:{id:"flex",category:"Layout",title:"Flex",description:"Used to incorporate CSS Flexbox into UI layouts.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1",pagination_prev:"web/ui/divider",pagination_next:"web/ui/grid"},sidebar:"docs",previous:{title:"Divider",permalink:"/web/ui/divider"},next:{title:"Grid",permalink:"/web/ui/grid"}},c=[{value:"Justify",id:"justify",children:[],level:2},{value:"alignItems",id:"alignitems",children:[],level:2},{value:"alignContent",id:"aligncontent",children:[],level:2},{value:"Direction",id:"direction",children:[],level:2},{value:"Gutter",id:"gutter",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Flex } from '@abyss/web/ui/Flex';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Flex',\n  inputs: [\n    {\n      prop: 'justify',\n      type: 'select',\n      options: [\n        { label: 'Default', value: '' },\n        { label: 'flex-start', value: 'flex-start' },\n        { label: 'flex-end', value: 'flex-end' },\n        { label: 'center', value: 'center' },\n        { label: 'space-between', value: 'space-between' },\n        { label: 'space-around', value: 'space-around' },\n        { label: 'space-evenly', value: 'space-evenly' },\n        { label: 'start', value: 'start' },\n        { label: 'end', value: 'end' },\n        { label: 'left', value: 'left' },\n        { label: 'right', value: 'right' },\n      ],\n    },\n    {\n      prop: 'alignItems',\n      type: 'select',\n      options: [\n        { label: 'Default', value: '' },\n        { label: 'stretch', value: 'stretch' },\n        { label: 'flex-start', value: 'flex-start' },\n        { label: 'flex-end', value: 'flex-end' },\n        { label: 'center', value: 'center' },\n        { label: 'baseline', value: 'baseline' },\n        { label: 'first baseline', value: 'first baseline' },\n        { label: 'last baseline', value: 'last baseline' },\n        { label: 'start', value: 'start' },\n        { label: 'end', value: 'end' },\n        { label: 'self-start', value: 'self-start' },\n        { label: 'self-end', value: 'self-end' },\n      ],\n    },\n    {\n      prop: 'alignContent',\n      type: 'select',\n      options: [\n        { label: 'Default', value: '' },\n        { label: 'flex-start', value: 'flex-start' },\n        { label: 'flex-end', value: 'flex-end' },\n        { label: 'center', value: 'center' },\n      ],\n    },\n    {\n      prop: 'direction',\n      type: 'select',\n      options: [\n        { label: 'Default', value: '' },\n        { label: 'row', value: 'row' },\n        { label: 'row-reverse', value: 'row-reverse' },\n        { label: 'column', value: 'column' },\n        { label: 'column-reverse', value: 'column-reverse' },\n      ]\n    },\n  ],\n}\n\n  <Flex>\n    <div style={{ border: '1px solid black', padding: '30px', margin: '4px' }}>\n      Flex Start\n    </div>\n    <div style={{ border: '1px solid black', padding: '20px', margin: '4px' }}>\n      Flex Start\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex Start\n    </div>\n  </Flex>\n")),(0,r.kt)("h2",{id:"justify"},"Justify"),(0,r.kt)("p",null,"Flexbox justify-content css property. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"justify")," prop to define the alignment along the main axis. Types include: ",(0,r.kt)("inlineCode",{parentName:"p"},"'flex-start'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'flex-end'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'center'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'space-between'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'space-around'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'space-evenly'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'start'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'end'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'left'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'right'"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <Flex justify=\"start\">\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex Start\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex Start\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex Start\n    </div>\n  </Flex>\n  <Flex justify=\"center\">\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Center\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Center\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Center\n    </div>\n  </Flex>\n  <Flex justify=\"end\">\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex End{' '}\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex End{' '}\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex End{' '}\n    </div>\n  </Flex>\n  <Flex justify=\"space-between\">\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Space Between\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Space Between\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Space Between\n    </div>\n  </Flex>\n  <Flex justify=\"space-around\">\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Space Around\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Space Around\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Space Around\n    </div>\n  </Flex>\n  <Flex justify=\"space-evenly\">\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Space Evenly\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Space Evenly\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Space Evenly\n    </div>\n  </Flex>\n</React.Fragment>\n")),(0,r.kt)("h2",{id:"alignitems"},"alignItems"),(0,r.kt)("p",null,"Flexbox align-items css property. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"alignItems")," prop to define the default behavior for how flex items are laid out along the cross axis on the current line. Types include: ",(0,r.kt)("inlineCode",{parentName:"p"},"'stretch'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'flex-start'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'flex-end'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'center'"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"'baseline'"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <Flex alignItems=\"flex-start\" style={{ marginBottom: '10px' }}>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex Start\n    </div>\n    <div style={{ border: '1px solid black', padding: '20px', margin: '4px' }}>\n      Flex Start\n    </div>\n    <div style={{ border: '1px solid black', padding: '30px', margin: '4px' }}>\n      Flex Start\n    </div>\n  </Flex>\n  <Flex alignItems=\"center\" style={{ marginBottom: '10px' }}>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Center\n    </div>\n    <div style={{ border: '1px solid black', padding: '20px', margin: '4px' }}>\n      Center\n    </div>\n    <div style={{ border: '1px solid black', padding: '30px', margin: '4px' }}>\n      Center\n    </div>\n  </Flex>\n  <Flex alignItems=\"flex-end\" style={{ marginBottom: '10px' }}>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex End\n    </div>\n    <div style={{ border: '1px solid black', padding: '20px', margin: '4px' }}>\n      Flex End\n    </div>\n    <div style={{ border: '1px solid black', padding: '30px', margin: '4px' }}>\n      Flex End\n    </div>\n  </Flex>\n  <Flex alignItems=\"stretch\" style={{ marginBottom: '10px' }}>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stretch\n    </div>\n    <div style={{ border: '1px solid black', padding: '20px', margin: '4px' }}>\n      Stretch\n    </div>\n    <div style={{ border: '1px solid black', padding: '30px', margin: '4px' }}>\n      Stretch\n    </div>\n  </Flex>\n  <Flex alignItems=\"baseline\" style={{ marginBottom: '10px' }}>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Baseline\n    </div>\n    <div style={{ border: '1px solid black', padding: '20px', margin: '4px' }}>\n      Baseline\n    </div>\n    <div style={{ border: '1px solid black', padding: '30px', margin: '4px' }}>\n      Baseline\n    </div>\n  </Flex>\n</React.Fragment>\n")),(0,r.kt)("h2",{id:"aligncontent"},"alignContent"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"alignContent")," prop to orient horizontal location of columns. Types include: ",(0,r.kt)("inlineCode",{parentName:"p"},"'stretch'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'flex-start'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'flex-end'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'center'"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"'space-between'"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"'space-around'"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <Flex alignContent=\"flex-start\" direction=\"column\">\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex Start\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex Start\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex Start\n    </div>\n  </Flex>\n  <Flex alignContent=\"flex-end\" direction=\"column\">\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex End\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex End\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex End\n    </div>\n  </Flex>\n  <Flex alignContent=\"center\" direction=\"column\">\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Center\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Center\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Center\n    </div>\n  </Flex>\n  <Flex alignContent=\"stretch\" direction=\"column\">\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stretch\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stretch\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stretch\n    </div>\n  </Flex>\n</React.Fragment>\n")),(0,r.kt)("h2",{id:"direction"},"Direction"),(0,r.kt)("p",null,"Flexbox flex-direction css property. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"direction")," prop to establishe the main-axis, thus defining the direction flex items are placed in the flex container. Types include: ",(0,r.kt)("inlineCode",{parentName:"p"},"'row'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'row-reverse'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'column'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'column-reverse'"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <Flex direction=\"row\" style={{ marginBottom: '10px' }}>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex Row 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex Row 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex Row 3\n    </div>\n  </Flex>\n\n  <Flex direction=\"column\">\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex Column 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex Column 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Flex Column 3\n    </div>\n  </Flex>\n</React.Fragment>\n")),(0,r.kt)("h2",{id:"gutter"},"Gutter"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"gutter")," prop to add padding for the flex content container. The first number in the array sets padding on the x-axis and the second number sets padding on the y-axis. If gutters is set to true, padding will be set as ","[8, 8]","."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <Flex gutters={[0, 15]}>\n    <Flex.Content style={{ border: '1px solid black' }}>\n      Flex Content\n    </Flex.Content>\n    <Flex.Content style={{ border: '1px solid black' }}>\n      Flex Content\n    </Flex.Content>\n    <Flex.Content style={{ border: '1px solid black' }}>\n      Flex Content\n    </Flex.Content>\n  </Flex>\n</React.Fragment>\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Flex}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the flex component',\n    },\n    {\n      name: 'className',\n      type: 'string',\n      description: 'Style class of the flex content',\n    },\n    {\n      name: 'gutters',\n      type: 'array[number]',\n      description: 'Set the gap between rows and columns',\n    },\n    {\n      name: 'justify',\n      type: 'string',\n      description: 'Set the alignment of items on the main axis',\n    },\n    {\n      name: 'alignItems',\n      type: 'string',\n      description: 'Set the default alignment of items on the cross axis',\n    },\n    {\n      name: 'alignContent',\n      type: 'string',\n      description:\n        'Set the distribution of space between and around content items',\n    },\n    {\n      name: 'direction',\n      type: 'string',\n      description: 'Establish the direction of the main axis',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Flex.Content}\n  rows={[\n    {\n      name: 'className',\n      type: 'string',\n      description: 'Style class of the flex content',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the flex content component',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Flex}\n  rows={[\n    {\n      name: 'flex-root',\n      description: 'Flex root element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Flex.Content}\n  rows={[\n    {\n      name: 'flex-content-root',\n      description: 'Flex Content root element',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},26987:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"floating-section",category:"Layout",title:"FloatingSection",description:"Used to create a floating sticky container.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=20298%3A77414",pagination_prev:"web/ui/media-query",pagination_next:"web/ui/icon"},d=void 0,p={unversionedId:"web/ui/floating-section",id:"web/ui/floating-section",isDocsHomePage:!1,title:"FloatingSection",description:"Used to create a floating sticky container.",source:"@site/docs/web/ui/FloatingSection.md",sourceDirName:"web/ui",slug:"/web/ui/floating-section",permalink:"/web/ui/floating-section",tags:[],version:"current",frontMatter:{id:"floating-section",category:"Layout",title:"FloatingSection",description:"Used to create a floating sticky container.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=20298%3A77414",pagination_prev:"web/ui/media-query",pagination_next:"web/ui/icon"},sidebar:"docs",previous:{title:"MediaQuery",permalink:"/web/ui/media-query"},next:{title:"Icon",permalink:"/web/ui/icon"}},c=[{value:"Overview",id:"overview",children:[{value:"Accessibility",id:"accessibility",children:[],level:3}],level:2},{value:"Position",id:"position",children:[{value:"Bottom",id:"bottom",children:[],level:3},{value:"Top",id:"top",children:[],level:3}],level:2},{value:"Always Float",id:"always-float",children:[],level:2},{value:"Space",id:"space",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { FloatingSection } from '@abyss/web/ui/FloatingSection';\n")),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"FloatingSection")," component creates a floating sticky container on the screen that maintains continuous visible access to its content while navigating through its parent container.\xa0 The primary usage is for housing form controls to maintain visible access to these operations while navigating through long forms. Please see the examples below for usage demos and for details on how to implement as either a sticky ",(0,r.kt)("a",{parentName:"p",href:"#bottom"},"footer")," or ",(0,r.kt)("a",{parentName:"p",href:"#top"},"header"),"."),(0,r.kt)("h3",{id:"accessibility"},"Accessibility"),(0,r.kt)("p",null,"For accessibility compliance a ref to the parent container is required to be passed in to the ",(0,r.kt)("inlineCode",{parentName:"p"},"containerRef")," prop. This allows for focus to be observed within the parent container so if an element is focused and obscured by the ",(0,r.kt)("inlineCode",{parentName:"p"},"FloatingSection")," component it can be shifted into view."),(0,r.kt)("h2",{id:"position"},"Position"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," prop to set the sticky position. By default the position is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"bottom"),"."),(0,r.kt)("h3",{id:"bottom"},"Bottom"),(0,r.kt)("p",null,"To use ",(0,r.kt)("inlineCode",{parentName:"p"},"FloatingSection"),' as a sticky footer wrap the elements to be included within the component and place it at the bottom of the parent container that holds the desired associated content. While vertically scrolling the component will be visible while the parent container is in view. Once the component has reached the bottom of the screen it will no longer float and with subtle animation will "drop" into its parent container. To maintain a floating state at all times use the ',(0,r.kt)("a",{parentName:"p",href:"#always-float"},"alwaysFloat")," prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      selectList: \'\',\n      dateInput: \'\',\n      dateInputRange: { from: \'\', to: \'\' },\n      radioGroup: null,\n      checkboxGroup: [],\n      textInput1: \'\',\n      textInput2: \'\',\n      textInput3: \'\',\n      textInputArea: \'\',\n    },\n  });\n\n  const options = [\n    { value: \'react\', label: \'React\' },\n    { value: \'ng\', label: \'Angular\' },\n    { value: \'svelte\', label: \'Svelte\' },\n    { value: \'vue\', label: \'Vue\' },\n    { value: \'alpine\', label: \'Alpine\' },\n    { value: \'ember\', label: \'Ember\' },\n    { value: \'stimulus\', label: \'Stimulus\' },\n    { value: \'preact\', label: \'Preact\' },\n  ];\n\n  const [isChecked, setChecked] = useState(false);\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  const reset = () => {\n    form.reset();\n    setChecked(false);\n  };\n\n  const containerRef = useRef();\n\n  return (\n    <div ref={containerRef}>\n      <PageBody>\n        <FormProvider\n          state={form}\n          onSubmit={onSubmit}\n          style={{ backgroundColor: \'white\' }}\n        >\n          <Layout.Stack grow space={30} style={{ padding: \'40px 20px\' }}>\n            <SelectInput\n              label="Select List Option"\n              model="selectList"\n              placeholder="Select from list"\n              options={options}\n              validators={{ required: true }}\n            />\n            <DateInput model="dateInput" validators={{ required: true }} />\n            <DateInputRange\n              model="dateInputRange"\n              validators={{ required: true }}\n            />\n            <RadioGroup\n              label="Select Radio Button Option"\n              model="radioGroup"\n              validators={{ required: true }}\n              display="row"\n            >\n              <RadioGroup.Radio label="One" value="one" />\n              <RadioGroup.Radio label="Two" value="two" />\n              <RadioGroup.Radio label="Three" value="three" />\n              <RadioGroup.Radio label="Four" value="four" />\n            </RadioGroup>\n            <CheckboxGroup\n              label="Select Checkbox Option(s)"\n              model="checkboxGroup"\n              validators={{ required: true }}\n            >\n              <Checkbox label="Option 1" value="one" />\n              <Checkbox label="Option 2" value="two" />\n              <Checkbox label="Option 3" value="three" />\n            </CheckboxGroup>\n            <TextInput\n              label="Text Input 1"\n              model="textInput1"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Text Input 2"\n              model="textInput2"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Text Input 3"\n              model="textInput3"\n              validators={{ required: true }}\n            />\n            <TextInputArea\n              label="Text Input Area"\n              model="textInputArea"\n              rows={8}\n              validators={{ required: true }}\n            />\n          </Layout.Stack>\n          <FloatingSection\n            containerRef={containerRef}\n            css={{\n              \'abyss-floating-section-root\': {\n                minHeight: \'72px\',\n                display: \'flex\',\n                alignItems: \'center\',\n                padding: \'$md\',\n              },\n            }}\n          >\n            <Layout.Stack\n              alignItems="left"\n              space={30}\n              style={{ paddingTop: \'16px\' }}\n            >\n              <Checkbox\n                label="By clicking here, I state that I have read and understood the terms and conditions."\n                isChecked={isChecked}\n                onChange={(e) => setChecked(e.target.checked)}\n              />\n              <Layout.Group space={20}>\n                <Button variant="outline" type="button" onClick={reset}>\n                  Cancel\n                </Button>\n                <Button type="submit" isDisabled={!isChecked}>\n                  Save\n                </Button>\n              </Layout.Group>\n            </Layout.Stack>\n          </FloatingSection>\n        </FormProvider>\n      </PageBody>\n    </div>\n  );\n};\n')),(0,r.kt)("h3",{id:"top"},"Top"),(0,r.kt)("p",null,"To use ",(0,r.kt)("inlineCode",{parentName:"p"},"FloatingSection")," as a sticky header set the ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"top"),", wrap the elements to be included within the component and place it at the top of the parent container that holds the desired associated content. While vertically scrolling the component will float once it reaches the top of the screen and remain visible until the parent container is out of view. To maintain a floating state at all times use the ",(0,r.kt)("a",{parentName:"p",href:"#always-float"},"alwaysFloat")," prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      selectList: \'\',\n      dateInput: \'\',\n      dateInputRange: { from: \'\', to: \'\' },\n      radioGroup: null,\n      checkboxGroup: [],\n      textInput1: \'\',\n      textInput2: \'\',\n      textInput3: \'\',\n      textInputArea: \'\',\n    },\n  });\n\n  const options = [\n    { value: \'react\', label: \'React\' },\n    { value: \'ng\', label: \'Angular\' },\n    { value: \'svelte\', label: \'Svelte\' },\n    { value: \'vue\', label: \'Vue\' },\n    { value: \'alpine\', label: \'Alpine\' },\n    { value: \'ember\', label: \'Ember\' },\n    { value: \'stimulus\', label: \'Stimulus\' },\n    { value: \'preact\', label: \'Preact\' },\n  ];\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  const paginationProps = usePagination({ pages: 6 });\n\n  const containerRef = useRef();\n\n  return (\n    <div ref={containerRef}>\n      <PageBody>\n        <FormProvider\n          state={form}\n          onSubmit={onSubmit}\n          style={{ backgroundColor: \'white\' }}\n        >\n          <FloatingSection\n            containerRef={containerRef}\n            position="top"\n            space={64}\n            css={{\n              \'abyss-floating-section-root\': {\n                minHeight: \'72px\',\n                padding: \'$md\',\n              },\n            }}\n          >\n            <StepIndicator currentStep={paginationProps.state.currentPage}>\n              <StepIndicator.Step label="Step 1" />\n              <StepIndicator.Step label="Step 2" />\n              <StepIndicator.Step label="Step 3" />\n              <StepIndicator.Step label="Step 4" />\n              <StepIndicator.Step label="Step 5" />\n            </StepIndicator>\n          </FloatingSection>\n          <Layout.Stack grow space={30} style={{ padding: \'40px 20px\' }}>\n            <SelectInput\n              label="Select List Option"\n              model="selectList"\n              placeholder="Select from list"\n              options={options}\n              validators={{ required: true }}\n            />\n            <DateInput model="dateInput" validators={{ required: true }} />\n            <DateInputRange\n              model="dateInputRange"\n              validators={{ required: true }}\n            />\n            <RadioGroup\n              label="Select Radio Button Option"\n              model="radioGroup"\n              validators={{ required: true }}\n              display="row"\n            >\n              <RadioGroup.Radio label="One" value="one" />\n              <RadioGroup.Radio label="Two" value="two" />\n              <RadioGroup.Radio label="Three" value="three" />\n              <RadioGroup.Radio label="Four" value="four" />\n            </RadioGroup>\n            <CheckboxGroup\n              label="Select Checkbox Option(s)"\n              model="checkboxGroup"\n              validators={{ required: true }}\n            >\n              <Checkbox label="Option 1" value="one" />\n              <Checkbox label="Option 2" value="two" />\n              <Checkbox label="Option 3" value="three" />\n            </CheckboxGroup>\n            <TextInput\n              label="Text Input 1"\n              model="textInput1"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Text Input 2"\n              model="textInput2"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Text Input 3"\n              model="textInput3"\n              validators={{ required: true }}\n            />\n            <TextInputArea\n              label="Text Input Area"\n              model="textInputArea"\n              rows={8}\n              validators={{ required: true }}\n            />\n          </Layout.Stack>\n          <Layout.Group grow style={{ padding: \'40px 20px\' }}>\n            <Layout.Group space={20}>\n              <Link onClick={paginationProps.previousPage}>\n                <IconMaterial icon="chevron_left" />\n                Previous\n              </Link>\n              <Button\n                variant="outline"\n                type="button"\n                onClick={() => form.reset()}\n              >\n                Cancel\n              </Button>\n              <Button type="submit">Save</Button>\n            </Layout.Group>\n            <Link\n              onClick={paginationProps.nextPage}\n              css={{ marginLeft: \'auto\' }}\n            >\n              Next\n              <IconMaterial icon="chevron_right" />\n            </Link>\n          </Layout.Group>\n        </FormProvider>\n      </PageBody>\n    </div>\n  );\n};\n')),(0,r.kt)("h2",{id:"always-float"},"Always Float"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"alwaysFloat")," prop to disable the animation and retain a floating state at all times."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      selectList: \'\',\n      dateInput: \'\',\n      dateInputRange: { from: \'\', to: \'\' },\n      radioGroup: null,\n      checkboxGroup: [],\n      textInput1: \'\',\n      textInput2: \'\',\n      textInput3: \'\',\n      textInputArea: \'\',\n    },\n  });\n  const options = [\n    { value: \'react\', label: \'React\' },\n    { value: \'ng\', label: \'Angular\' },\n    { value: \'svelte\', label: \'Svelte\' },\n    { value: \'vue\', label: \'Vue\' },\n    { value: \'alpine\', label: \'Alpine\' },\n    { value: \'ember\', label: \'Ember\' },\n    { value: \'stimulus\', label: \'Stimulus\' },\n    { value: \'preact\', label: \'Preact\' },\n  ];\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  const containerRef = useRef();\n\n  return (\n    <div ref={containerRef}>\n      <PageBody>\n        <FormProvider\n          state={form}\n          onSubmit={onSubmit}\n          style={{ backgroundColor: \'white\' }}\n        >\n          <Layout.Stack grow space={30} style={{ padding: \'40px 20px\' }}>\n            <SelectInput\n              label="Select List Option"\n              model="selectList"\n              placeholder="Select from list"\n              options={options}\n              validators={{ required: true }}\n            />\n            <DateInput model="dateInput" validators={{ required: true }} />\n            <DateInputRange\n              model="dateInputRange"\n              validators={{ required: true }}\n            />\n            <RadioGroup\n              label="Select Radio Button Option"\n              model="radioGroup"\n              validators={{ required: true }}\n              display="row"\n            >\n              <RadioGroup.Radio label="One" value="one" />\n              <RadioGroup.Radio label="Two" value="two" />\n              <RadioGroup.Radio label="Three" value="three" />\n              <RadioGroup.Radio label="Four" value="four" />\n            </RadioGroup>\n            <CheckboxGroup\n              label="Select Checkbox Option(s)"\n              model="checkboxGroup"\n              validators={{ required: true }}\n            >\n              <Checkbox label="Option 1" value="one" />\n              <Checkbox label="Option 2" value="two" />\n              <Checkbox label="Option 3" value="three" />\n            </CheckboxGroup>\n            <TextInput\n              label="Text Input 1"\n              model="textInput1"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Text Input 2"\n              model="textInput2"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Text Input 3"\n              model="textInput3"\n              validators={{ required: true }}\n            />\n            <TextInputArea\n              label="Text Input Area"\n              model="textInputArea"\n              rows={8}\n              validators={{ required: true }}\n            />\n          </Layout.Stack>\n          <FloatingSection\n            containerRef={containerRef}\n            alwaysFloat\n            css={{\n              \'abyss-floating-section-root\': {\n                minHeight: \'72px\',\n                display: \'flex\',\n                alignItems: \'center\',\n                padding: \'$md\',\n              },\n            }}\n          >\n            <Layout.Group space={20}>\n              <Link onClick={() => console.log(\'clicked previous\')}>\n                <IconMaterial icon="chevron_left" />\n                Previous\n              </Link>\n              <Button\n                variant="outline"\n                type="button"\n                onClick={() => form.reset()}\n              >\n                Cancel\n              </Button>\n              <Button type="submit">Save</Button>\n            </Layout.Group>\n            <Link\n              onClick={() => console.log(\'clicked next\')}\n              css={{ marginLeft: \'auto\' }}\n            >\n              Next\n              <IconMaterial icon="chevron_right" />\n            </Link>\n          </FloatingSection>\n        </FormProvider>\n      </PageBody>\n    </div>\n  );\n};\n')),(0,r.kt)("h2",{id:"space"},"Space"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"space")," prop to adjust the spacing between the ",(0,r.kt)("inlineCode",{parentName:"p"},"FloatingSection")," component and either the top or the bottom of the screen depending on the position setting. The default is ",(0,r.kt)("inlineCode",{parentName:"p"},"24"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      selectList: \'\',\n      dateInput: \'\',\n      dateInputRange: { from: \'\', to: \'\' },\n      radioGroup: null,\n      checkboxGroup: [],\n      textInput1: \'\',\n      textInput2: \'\',\n      textInput3: \'\',\n      textInputArea: \'\',\n    },\n  });\n\n  const options = [\n    { value: \'react\', label: \'React\' },\n    { value: \'ng\', label: \'Angular\' },\n    { value: \'svelte\', label: \'Svelte\' },\n    { value: \'vue\', label: \'Vue\' },\n    { value: \'alpine\', label: \'Alpine\' },\n    { value: \'ember\', label: \'Ember\' },\n    { value: \'stimulus\', label: \'Stimulus\' },\n    { value: \'preact\', label: \'Preact\' },\n  ];\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  const containerRef = useRef();\n\n  return (\n    <div ref={containerRef}>\n      <PageBody>\n        <FormProvider\n          state={form}\n          onSubmit={onSubmit}\n          style={{ backgroundColor: \'white\' }}\n        >\n          <Layout.Stack grow space={30} style={{ padding: \'40px 20px\' }}>\n            <SelectInput\n              label="Select List Option"\n              model="selectList"\n              placeholder="Select from list"\n              options={options}\n              validators={{ required: true }}\n            />\n            <DateInput model="dateInput" validators={{ required: true }} />\n            <DateInputRange\n              model="dateInputRange"\n              validators={{ required: true }}\n            />\n            <RadioGroup\n              label="Select Radio Button Option"\n              model="radioGroup"\n              validators={{ required: true }}\n              display="row"\n            >\n              <RadioGroup.Radio label="One" value="one" />\n              <RadioGroup.Radio label="Two" value="two" />\n              <RadioGroup.Radio label="Three" value="three" />\n              <RadioGroup.Radio label="Four" value="four" />\n            </RadioGroup>\n            <CheckboxGroup\n              label="Select Checkbox Option(s)"\n              model="checkboxGroup"\n              validators={{ required: true }}\n            >\n              <Checkbox label="Option 1" value="one" />\n              <Checkbox label="Option 2" value="two" />\n              <Checkbox label="Option 3" value="three" />\n            </CheckboxGroup>\n            <TextInput\n              label="Text Input 1"\n              model="textInput1"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Text Input 2"\n              model="textInput2"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Text Input 3"\n              model="textInput3"\n              validators={{ required: true }}\n            />\n            <TextInputArea\n              label="Text Input Area"\n              model="textInputArea"\n              rows={8}\n              validators={{ required: true }}\n            />\n          </Layout.Stack>\n          <FloatingSection\n            containerRef={containerRef}\n            space={50}\n            css={{\n              \'abyss-floating-section-root\': {\n                minHeight: \'72px\',\n                display: \'flex\',\n                alignItems: \'center\',\n                padding: \'$md\',\n              },\n            }}\n          >\n            <Layout.Stack alignItems="left" space={30} grow>\n              <Text>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed\n                rhoncus id orci sit amet pulvinar. Vivamus at urna pellentesque,\n                commodo enim nec, dictum lorem. Phasellus at facilisis ligula.\n                Pellentesque pharetra ipsum in faucibus convallis. Proin sit\n                amet erat ut libero tempus tristique. Nulla non bibendum orci,\n                et imperdiet elit.\n              </Text>\n              <Layout.Group space={20} alignLayout="center">\n                <Button\n                  variant="outline"\n                  type="button"\n                  onClick={() => form.reset()}\n                >\n                  Clear\n                </Button>\n                <Button type="submit">Save</Button>\n              </Layout.Group>\n            </Layout.Stack>\n          </FloatingSection>\n        </FormProvider>\n      </PageBody>\n    </div>\n  );\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={FloatingSection}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The elements that will be rendered within the component',\n    },\n\n    {\n      name: 'alwaysFloat',\n      type: 'boolean',\n      description:\n        'Disables animation and retains a floating state at all times',\n    },\n    {\n      name: 'space',\n      type: 'number',\n      description:\n        'The space between the component and either the bottom or top of the screen depending on the position setting',\n    },\n    {\n      name: 'containerRef',\n      type: 'ReactNode',\n      description:\n        'Ref of the parent container; required for accessibility compliance',\n    },\n    {\n      name: 'position',\n      type: '\"bottom\" | \"top\"',\n      description:\n        'Sets the position of the component to either the top or bottom of the screen',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={FloatingSection}\n  rows={[\n    {\n      name: 'floating-section-root',\n      description: 'Floating section root element',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},68597:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"form-provider",category:"Providers",title:"FormProvider",description:"Adds form functionality to Abyss inputs.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1216",pagination_prev:"web/ui/collapse-provider",pagination_next:"web/ui/overlay-provider"},d=void 0,p={unversionedId:"web/ui/form-provider",id:"web/ui/form-provider",isDocsHomePage:!1,title:"FormProvider",description:"Adds form functionality to Abyss inputs.",source:"@site/docs/web/ui/FormProvider.md",sourceDirName:"web/ui",slug:"/web/ui/form-provider",permalink:"/web/ui/form-provider",tags:[],version:"current",frontMatter:{id:"form-provider",category:"Providers",title:"FormProvider",description:"Adds form functionality to Abyss inputs.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1216",pagination_prev:"web/ui/collapse-provider",pagination_next:"web/ui/overlay-provider"},sidebar:"docs",previous:{title:"CollapseProvider",permalink:"/web/ui/collapse-provider"},next:{title:"OverlayProvider",permalink:"/web/ui/overlay-provider"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Highlighted",id:"highlighted",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { FormProvider } from '@abyss/web/ui/FormProvider';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"FormProvider")," along with the ",(0,r.kt)("a",{parentName:"p",href:"/web/hooks/use-form"},"useForm")," hook in order to better manage your forms and fully utilize the capabilities of form management within Abyss. To achieve this you will need to wrap all form fields and the submission button with the ",(0,r.kt)("inlineCode",{parentName:"p"},"FormProvider")," component and provide state through usage of ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm"),"."),(0,r.kt)("p",null,"Please see examples below for additional props to pass into the ",(0,r.kt)("inlineCode",{parentName:"p"},"FormProvider")," and go to ",(0,r.kt)("a",{parentName:"p",href:"/web/hooks/use-form"},"useForm")," for detailed documentation on how to configure your forms and take advantage of all the available features."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n    // Do something on submit\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <Checkbox\n        label=\"I agree to the Terms and Conditions\"\n        model=\"accept-terms\"\n        validators={{ required: true }}\n      />\n      <SelectInput\n        label=\"Select List Usage\"\n        model=\"selectlist\"\n        placeholder=\"Select List Form Provider\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n        validators={{ required: true }}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h2",{id:"highlighted"},"Highlighted"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"highlighted")," prop to enable a distinct background color when fields are required."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      // selectlist: 'ember',\n      // frameworks: ['ember', 'svelte'],\n      // 'test-date': '05/14/1993',\n      // textForm: 'test',\n      // 'test-form-date': { from: '06/04/2022', to: '06/30/2022' },\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n    // Do something on submit\n  };\n\n  const options = [\n    { value: 'react', label: 'React' },\n    { value: 'ng', label: 'Angular' },\n    { value: 'svelte', label: 'Svelte' },\n    { value: 'vue', label: 'Vue' },\n    { value: 'alpine', label: 'Alpine' },\n    { value: 'ember', label: 'Ember' },\n    { value: 'stimulus', label: 'Stimulus' },\n    { value: 'preact', label: 'Preact' },\n  ];\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit} highlighted>\n      <SelectInput\n        label=\"Select List Usage\"\n        model=\"selectlist\"\n        placeholder=\"Select List Form Provider\"\n        options={options}\n        validators={{ required: true }}\n      />\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        model=\"frameworks\"\n        isSearchable\n        options={options}\n        validators={{ required: true }}\n      />\n      <DateInput model=\"test-date\" validators={{ required: true }} />\n      <DateInputRange model=\"test-form-date\" validators={{ required: true }} />\n      <TextInput\n        label=\"TextInput Form\"\n        placeholder=\"Form\"\n        model=\"textForm-required\"\n        isClearable\n        validators={{ required: true }}\n      />\n      <TextInput\n        label=\"TextInput Form Not Required\"\n        placeholder=\"Form\"\n        model=\"textForm\"\n        isClearable\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content across the entire form. Available variants include 'column' and 'row'. If no value is included the orientation will default to row. If ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," is used within the FormProvider it will override any setting within an individual form field."),(0,r.kt)("p",null,"Please note that for accessibility compliance the error message must always display before the subtext."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n    // Do something on submit\n  };\n\n  const options = [\n    { value: \'react\', label: \'React\' },\n    { value: \'ng\', label: \'Angular\' },\n    { value: \'svelte\', label: \'Svelte\' },\n    { value: \'vue\', label: \'Vue\' },\n    { value: \'alpine\', label: \'Alpine\' },\n    { value: \'ember\', label: \'Ember\' },\n    { value: \'stimulus\', label: \'Stimulus\' },\n    { value: \'preact\', label: \'Preact\' },\n  ];\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit} descriptorsDisplay="column">\n      <SelectInput\n        label="SelectInput"\n        model="select-input"\n        placeholder="Select List Form Provider"\n        options={options}\n        validators={{ required: true }}\n        subText="SelectInput Subtext"\n      />\n      <DateInput\n        label="DateInput"\n        model="test-date"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="TextInput"\n        placeholder="Form"\n        model="text-input"\n        isClearable\n        validators={{ required: true }}\n        subText="TextInput Subtext"\n      />\n      <CheckboxGroup\n        label="CheckboxGroup"\n        model="checkbox-group"\n        display="row"\n        validators={{ required: true }}\n        subText="CheckboxGroup Subtext"\n      >\n        <Checkbox label="Option 1" value="one" />\n        <Checkbox label="Option 2" value="two" />\n        <Checkbox label="Option 3" value="three" />\n      </CheckboxGroup>\n      <RadioGroup\n        label="RadioGroup"\n        model="radio-group"\n        display="row"\n        validators={{ required: true }}\n        subText="RadioGroup Subtext"\n      >\n        <RadioGroup.Radio label="One" value="one" />\n        <RadioGroup.Radio label="Two" value="two" />\n        <RadioGroup.Radio label="Three" value="three" />\n        <RadioGroup.Radio label="Four" value="four" />\n      </RadioGroup>\n      <TextInputArea\n        label="TextInputArea"\n        model="text-input-area"\n        validators={{ required: true }}\n        subText="TextInputArea Subtext"\n      />\n      <Button type="submit" style={{ marginTop: \'15px\' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={FormProvider}\n  rows={[\n    {\n      name: 'state',\n      type: 'object',\n      description: 'State passed in from useForm.',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'Form inputs passed to FormProvider',\n    },\n    {\n      name: 'onSubmit',\n      type: 'function',\n      description:\n        'Callback fired when type=\"submit\" button within the FormProvider wrapper is triggered',\n    },\n    {\n      name: 'onError',\n      type: 'function',\n      description:\n        'Callback fired when type=\"error\" button within the FormProvider wrapper is triggered',\n    },\n    {\n      name: 'autoComplete',\n      type: 'string',\n      description:\n        'The autocomplete status that is passed to the form element in the FormProvider',\n    },\n    {\n      name: 'highlighted',\n      type: 'boolean',\n      description:\n        'Enables a distinct background color when fields are invalid',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content across the entire form',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},27216:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"fullscreen",category:"Overlay",title:"Fullscreen",description:"Displays an overlay that takes up the entire screen.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11860",pagination_prev:"web/ui/drawer",pagination_next:"web/ui/loading-overlay"},d=void 0,p={unversionedId:"web/ui/fullscreen",id:"web/ui/fullscreen",isDocsHomePage:!1,title:"Fullscreen",description:"Displays an overlay that takes up the entire screen.",source:"@site/docs/web/ui/Fullscreen.md",sourceDirName:"web/ui",slug:"/web/ui/fullscreen",permalink:"/web/ui/fullscreen",tags:[],version:"current",frontMatter:{id:"fullscreen",category:"Overlay",title:"Fullscreen",description:"Displays an overlay that takes up the entire screen.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11860",pagination_prev:"web/ui/drawer",pagination_next:"web/ui/loading-overlay"},sidebar:"docs",previous:{title:"Drawer",permalink:"/web/ui/drawer"},next:{title:"LoadingOverlay",permalink:"/web/ui/loading-overlay"}},c=[{value:"useOverlay",id:"useoverlay",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Title",id:"title",children:[],level:2},{value:"Passing Data",id:"passing-data",children:[],level:2},{value:"Title Align",id:"title-align",children:[],level:2},{value:"Overflow",id:"overflow",children:[],level:2},{value:"Footer",id:"footer",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Fullscreen } from '@abyss/web/ui/Fullscreen';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Fullscreen',\n  inputs: [\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'title',\n      type: 'string',\n    },\n  ],\n}\n\n() => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Fullscreen\n        title=\"Enter title here\"\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n      >\n        Press escape to close the fullscreen\n      </Fullscreen>\n      <Button onClick={() => setIsOpen(true)}>\n        Toggle Fullscreen\n      </Button>\n    </React.Fragment>\n  );\n}\n")),(0,r.kt)("h2",{id:"useoverlay"},"useOverlay"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useOverlay")," hook lets the DOM handle form data and the overlays state. To utilize the ",(0,r.kt)("a",{parentName:"p",href:"/web/hooks/use-overlay"},"useOverlay")," hook the root/parent must be wrapped with the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/overlay-provider"},"OverlayProvider"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const fullscreen = useOverlay(\'fullscreen-form\');\n\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => fullscreen.open()}>Toggle Fullscreen</Button>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <Fullscreen title="Register" model="fullscreen-form">\n          <Fullscreen.Section>\n            <TextInput\n              label="First Name"\n              model="first-name"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Last Name"\n              model="last-name"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Email"\n              type="email"\n              model="email"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Password"\n              type="password"\n              model="password"\n              validators={{ required: true }}\n            />\n            <div style={{ marginTop: 20, marginBottom: 20 }}>\n              <Checkbox\n                label="I agree to terms and conditions"\n                model="terms-condition"\n                validators={{ required: true }}\n              />\n            </div>\n          </Fullscreen.Section>\n          <Fullscreen.Section>\n            <Layout.Group alignLayout="right">\n              <Button variant="outline" onClick={() => fullscreen.close()}>\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  form.handleSubmit(onSubmit)();\n                  if (form.formState.isValid) {\n                    fullscreen.close();\n                  }\n                }}\n              >\n                Submit\n              </Button>\n            </Layout.Group>\n          </Fullscreen.Section>\n        </Fullscreen>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook to set the open state of the fullscreen."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setIsOpen(true)}>Toggle Fullscreen</Button>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <Fullscreen\n          title="Register"\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n        >\n          <Fullscreen.Section>\n            <TextInput\n              label="First Name"\n              model="first-name"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Last Name"\n              model="last-name"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Email"\n              type="email"\n              model="email"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Password"\n              type="password"\n              model="password"\n              validators={{ required: true }}\n            />\n            <div style={{ marginTop: 20, marginBottom: 20 }}>\n              <Checkbox\n                label="I agree to terms and conditions"\n                model="terms-condition"\n                validators={{ required: true }}\n              />\n            </div>\n          </Fullscreen.Section>\n          <Fullscreen.Section>\n            <Layout.Group alignLayout="right">\n              <Button onClick={() => setIsOpen(false)} variant="outline">\n                Cancel\n              </Button>\n              <Button onClick={() => setIsOpen(false)}>Submit</Button>\n            </Layout.Group>\n          </Fullscreen.Section>\n        </Fullscreen>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"title"},"Title"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," prop to set the title of the fullscreen."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const fullscreen = useOverlay(\'title-fullscreen\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => fullscreen.open()}>Toggle Fullscreen</Button>\n      <Fullscreen title="Custom Title" model="title-fullscreen">\n        <Fullscreen.Section>Custom Title</Fullscreen.Section>\n      </Fullscreen>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"passing-data"},"Passing Data"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"getState")," method retrieve the state of the fullscreen. Structure: ",(0,r.kt)("inlineCode",{parentName:"p"},"{ isOpen: Boolean, data: Object }"),". Pass data into the open/toggle methods to use in the fullscreen."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const fullscreen = useOverlay('data-fullscreen');\n  const { data } = fullscreen.getState();\n\n  return (\n    <React.Fragment>\n      <Button\n        onClick={() => fullscreen.open({ firstName: 'John', lastName: 'Doe' })}\n      >\n        Toggle Fullscreen\n      </Button>\n      <Fullscreen title=\"Passing Data to Fullscreen\" model=\"data-fullscreen\">\n        <Fullscreen.Section>\n          <p>First Name: {data && data.firstName}</p>\n          <p>Last Name: {data && data.lastName}</p>\n        </Fullscreen.Section>\n      </Fullscreen>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"title-align"},"Title Align"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"titleAlign")," prop to align the position of the title."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n  const fullscreen = useOverlay('title-aligment');\n\n  const [align, setAlign] = useState('left');\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button\n          onClick={() => {\n            fullscreen.open();\n            setAlign('left');\n          }}\n        >\n          Left\n        </Button>\n        <Button\n          onClick={() => {\n            fullscreen.open();\n            setAlign('center');\n          }}\n        >\n          Center\n        </Button>\n        <Button\n          onClick={() => {\n            fullscreen.open();\n            setAlign('right');\n          }}\n        >\n          Right\n        </Button>\n      </Layout.Group>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <Fullscreen\n          title=\"Title Alignment\"\n          position=\"top\"\n          titleAlign={align}\n          model=\"title-aligment\"\n        >\n          <Fullscreen.Section>Title Alignment</Fullscreen.Section>\n        </Fullscreen>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"overflow"},"Overflow"),(0,r.kt)("p",null,"Overflow is handled within the content of the fullscreen. The title will remain static."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const fullscreen = useOverlay(\'overflow-fullscreen\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => fullscreen.open()}>Toggle Fullscreen</Button>\n      <Fullscreen title="Overflow" model="overflow-fullscreen">\n        <Fullscreen.Section>\n          {Array.from(Array(50).keys()).map((item) => {\n            return (\n              <p key={item} style={{ marginBottom: 65 }}>\n                Overflow Example - Scroll\n              </p>\n            );\n          })}\n        </Fullscreen.Section>\n      </Fullscreen>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"footer"},"Footer"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"footer")," to add a footer container to a fullscreen."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const fullscreen = useOverlay(\'fullscreen-footer\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => fullscreen.open()}>Toggle Fullscreen</Button>\n      <Fullscreen\n        title="Fullscreen With Footer "\n        model="fullscreen-footer"\n        footer={\n          <Fullscreen.Section>\n            <Layout.Group alignLayout="right">\n              <Button onClick={() => fullscreen.close()}>Cancel</Button>\n            </Layout.Group>\n          </Fullscreen.Section>\n        }\n      >\n        <Fullscreen.Section>\n          {Array.from(Array(30).keys()).map((item) => {\n            return (\n              <p key={item} style={{ marginBottom: 65 }}>\n                Fullscreen footer with cancel button\n              </p>\n            );\n          })}\n        </Fullscreen.Section>\n      </Fullscreen>\n    </React.Fragment>\n  );\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Fullscreen}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Fullscreen component',\n    },\n    {\n      name: 'footer',\n      type: 'node',\n      description: 'The contents of the Fullscreen footer',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the fullscreen',\n    },\n    {\n      name: 'isOpen',\n      type: 'boolean',\n      description: 'Flag to check if fullscreen is opened',\n    },\n    {\n      name: 'onClose',\n      type: 'function',\n      description: 'Callback fired everytime fullscreen is closed',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'titleAlign',\n      type: 'string',\n      description: 'Set the alignment of the title',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Fullscreen.Section}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Fullscreen Section component',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Fullscreen}\n  rows={[\n    {\n      name: 'modal-root',\n      description: 'Fullscreen root element',\n    },\n    {\n      name: 'modal-overlay',\n      description: 'Fullscreen overlay element',\n    },\n    {\n      name: 'modal-content-container',\n      description: 'Fullscreen content container',\n    },\n    {\n      name: 'modal-header-container',\n      description: 'Fullscreen header container',\n    },\n    {\n      name: 'modal-header-title',\n      description: 'Fullscreen title element',\n    },\n    {\n      name: 'modal-body',\n      description: 'Fullscreen body element',\n    },\n    {\n      name: 'modal-footer',\n      description: 'Fullscreen footer element',\n    },\n    {\n      name: 'modal-close-button',\n      description: 'Fullscreen close button element',\n    },\n    {\n      name: 'modal-close-icon',\n      description: 'Fullscreen close icon element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Fullscreen.Section}\n  rows={[\n    {\n      name: 'modal-section-root',\n      description: 'Fullscreen Section root element',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Esc',\n      description: 'Closes the Fullscreen.',\n    },\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to the next interactive element within the Fullscreen.  Once the last interactive element in the Fullscreen is reached, pressing Tab again moves focus to the first interactive element within the Fullscreen.',\n    },\n    {\n      name: 'Shift + Tab',\n      description:\n        'Moves focus to the previous interactive element within the Fullscreen.  Once the first interactive element in the Fullscreen is reached, pressing Shift + Tab again moves focus to the last interactive element within the Fullscreen.',\n    },\n  ]}\n/>\n")),(0,r.kt)("h3",null,"Fullscreen Content"),(0,r.kt)("p",null,"The content included on the Fullscreen must be accessible."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const fullscreen = useOverlay(\'accessible-fullscreen\');\n\n  return (\n    <>\n      <Button onClick={() => fullscreen.open()}>Toggle Fullscreen</Button>\n      <Fullscreen title="Accessible Fullscreen" model="accessible-fullscreen">\n        <Fullscreen.Section>\n          <Button>Button is accessible in fullscreen</Button>\n        </Fullscreen.Section>\n      </Fullscreen>\n    </>\n  );\n};\n'))))}g.isMDXComponent=!0},30727:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"grid",category:"Layout",title:"Grid",description:"Provides a brief message about the app processes.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A327",pagination_prev:"web/ui/flex",pagination_next:"web/ui/layout"},d=void 0,p={unversionedId:"web/ui/grid",id:"web/ui/grid",isDocsHomePage:!1,title:"Grid",description:"Provides a brief message about the app processes.",source:"@site/docs/web/ui/Grid.md",sourceDirName:"web/ui",slug:"/web/ui/grid",permalink:"/web/ui/grid",tags:[],version:"current",frontMatter:{id:"grid",category:"Layout",title:"Grid",description:"Provides a brief message about the app processes.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A327",pagination_prev:"web/ui/flex",pagination_next:"web/ui/layout"},sidebar:"docs",previous:{title:"Flex",permalink:"/web/ui/flex"},next:{title:"Layout",permalink:"/web/ui/layout"}},c=[{value:"Live Example",id:"live-example",children:[],level:2},{value:"Unresponsive (colspan)",id:"unresponsive-colspan",children:[],level:2},{value:"Unresponsive (percent)",id:"unresponsive-percent",children:[],level:2},{value:"Responsive (colspan)",id:"responsive-colspan",children:[],level:2},{value:"Responsive (percent)",id:"responsive-percent",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Grid } from '@abyss/web/ui/Grid';\n")),(0,r.kt)("h2",{id:"live-example"},"Live Example"),(0,r.kt)("p",null,"Resizing the width of the screen changes the column width, making Grid responsive."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Grid>\n  <Grid.Col span={{ xs: 9, md: 9, lg: 6, xl: 6 }}>\n    <Heading>Better Data With Seamless Integrations</Heading>\n    <Text>\n      Find, Integrate and Manage your United Healthcare APIs all in one place.\n      Save time and money by getting more useful information on your United\n      Healthcare members integrated with your current workflows.\n    </Text>\n  </Grid.Col>\n  <Grid.Col span={{ xs: 3, md: 3, lg: 6, xl: 6 }}></Grid.Col>\n  <Grid.Col span={{ xs: 12, md: 6, lg: 6, xl: 6 }}>\n    <Card>\n      <Card.Section>\n        <IconBrand color="$primary1" icon="desktop" size={48} />\n        <Heading offset={2} size="lg" fontWeight="bold">\n          Admin\n        </Heading>\n        <Text size="$sm">\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\n          eiusmod tempor incididunt\u2026\n        </Text>\n      </Card.Section>\n      <Card.Section>\n        <Link variant href="/developers/getting-started">\n          Link Button\n          <IconMaterial icon="arrow_forward" size={24} />\n        </Link>\n      </Card.Section>\n    </Card>\n  </Grid.Col>\n  <Grid.Col span={{ xs: 12, md: 6, lg: 6, xl: 6 }}>\n    <Card>\n      <Card.Section>\n        <IconBrand color="$primary1" icon="bar_chart" size={48} />\n        <Heading offset={2} size="lg" fontWeight="bold">\n          Analytics\n        </Heading>\n        <Text size="$sm">\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\n          eiusmod tempor incididunt\u2026\n        </Text>\n      </Card.Section>\n      <Card.Section>\n        <Link variant href="/developers/getting-started">\n          Link Button\n          <IconMaterial icon="arrow_forward" size={24} />\n        </Link>\n      </Card.Section>\n    </Card>\n  </Grid.Col>\n  <Grid.Col span={{ xs: 12, md: 6, lg: 6, xl: 6 }}>\n    <Card>\n      <Card.Section>\n        <IconBrand color="$primary1" icon="heart" size={48} />\n        <Heading offset={2} size="lg" fontWeight="bold">\n          Clinical\n        </Heading>\n        <Text size="$sm">\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\n          eiusmod tempor incididunt\u2026\n        </Text>\n      </Card.Section>\n      <Card.Section>\n        <Link variant href="/developers/getting-started">\n          Link Button\n          <IconMaterial icon="arrow_forward" size={24} />\n        </Link>\n      </Card.Section>\n    </Card>\n  </Grid.Col>\n  <Grid.Col span={{ xs: 12, md: 6, lg: 6, xl: 6 }}>\n    <Card>\n      <Card.Section>\n        <IconBrand color="$primary1" icon="piggy_bank" size={48} />\n        <Heading offset={2} size="lg" fontWeight="bold">\n          Financial\n        </Heading>\n        <Text size="$sm">\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\n          eiusmod tempor incididunt\u2026\n        </Text>\n      </Card.Section>\n      <Card.Section>\n        <Link variant href="/developers/getting-started">\n          Link Button\n          <IconMaterial icon="arrow_forward" size={24} />\n        </Link>\n      </Card.Section>\n    </Card>\n  </Grid.Col>\n  <Grid.Col span={{ xs: 12, md: 12, lg: 12, xl: 12 }}>\n    <Heading>Newest API\'s</Heading>\n  </Grid.Col>\n  <Grid.Col span={{ xs: 12, md: 6, lg: 6, xl: 6 }}>\n    <Card style={{ textAlign: \'center\' }}>\n      <Card.Section>\n        <Heading offset={2} size="lg" fontWeight="bold">\n          Claims\n        </Heading>\n        <Text>\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\n          eiusmod tempor incididunt\u2026\n        </Text>\n      </Card.Section>\n      <Card.Section>\n        <Link variant href="/developers/getting-started">\n          Link Button\n          <IconMaterial icon="arrow_forward" size={24} />\n        </Link>\n      </Card.Section>\n    </Card>\n  </Grid.Col>\n  <Grid.Col span={{ xs: 12, md: 6, lg: 6, xl: 6 }}>\n    <Card style={{ textAlign: \'center\' }}>\n      <Card.Section>\n        <Heading offset={2} size="lg" fontWeight="bold">\n          Services\n        </Heading>\n        <Text>\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\n          eiusmod tempor incididunt\u2026\n        </Text>\n      </Card.Section>\n      <Card.Section>\n        <Link variant href="/developers/getting-started">\n          Link Button\n          <IconMaterial icon="arrow_forward" size={24} />\n        </Link>\n      </Card.Section>\n    </Card>\n  </Grid.Col>\n</Grid>\n')),(0,r.kt)("h2",{id:"unresponsive-colspan"},"Unresponsive (colspan)"),(0,r.kt)("p",null,"Regardless of viewport width, the span will remain the same for these columns. Change the span by using ","[column spans]"," of the parent container."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Grid>\n  <Grid.Col span={12}>\n    <Box color="$tint3">\n      <Heading offset={5}>12</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span={3}>\n    <Box color="$tint3">\n      <Heading offset={5}>3</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span={3}>\n    <Box color="$tint3">\n      <Heading offset={5}>3</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span={3}>\n    <Box color="$tint3">\n      <Heading offset={5}>3</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span={3}>\n    <Box color="$tint3">\n      <Heading offset={5}>3</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span={6}>\n    <Box color="$tint3">\n      <Heading offset={5}>6</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span={6}>\n    <Box color="$tint3">\n      <Heading offset={5}>6</Heading>\n    </Box>\n  </Grid.Col>\n</Grid>\n')),(0,r.kt)("h2",{id:"unresponsive-percent"},"Unresponsive (percent)"),(0,r.kt)("p",null,"Regardless of viewport width, the span will remain the same for these columns. Change the span by using percentages of the parent container."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Grid>\n  <Grid.Col span="100%">\n    <Box color="$tint3">\n      <Heading offset={5}>100%</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span="33%">\n    <Box color="$tint3">\n      <Heading offset={5}>33%</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span="33%">\n    <Box color="$tint3">\n      <Heading offset={5}>33%</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span="33%">\n    <Box color="$tint3">\n      <Heading offset={5}>33%</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span="20%">\n    <Box color="$tint3">\n      <Heading offset={5}>20%</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span="20%">\n    <Box color="$tint3">\n      <Heading offset={5}>20%</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span="20%">\n    <Box color="$tint3">\n      <Heading offset={5}>20%</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span="20%">\n    <Box color="$tint3">\n      <Heading offset={5}>20%</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span="20%">\n    <Box color="$tint3">\n      <Heading offset={5}>20%</Heading>\n    </Box>\n  </Grid.Col>\n</Grid>\n')),(0,r.kt)("h2",{id:"responsive-colspan"},"Responsive (colspan)"),(0,r.kt)("p",null,"At each breakpoint, these columns will resize the span based on colspan. Breakpoints are ",(0,r.kt)("inlineCode",{parentName:"p"},"xs, sm, md, lg, and xl"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Grid>\n  <Grid.Col span={{ xs: 12, md: 6 }}>\n    <Box color="$tint3">\n      <Heading offset={5}>Responsive</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span={{ xs: 12, md: 6 }}>\n    <Box color="$tint3">\n      <Heading offset={5}>Responsive</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span={{ xs: 12, md: 6, lg: 3, xl: 3 }}>\n    <Box color="$tint3">\n      <Text>Responsive</Text>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span={{ xs: 12, md: 6, lg: 3, xl: 3 }}>\n    <Box color="$tint3">\n      <Text>Responsive</Text>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span={{ xs: 12, md: 6, lg: 3, xl: 3 }}>\n    <Box color="$tint3">\n      <Text>Responsive</Text>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span={{ xs: 12, md: 6, lg: 3, xl: 3 }}>\n    <Box color="$tint3">\n      <Text>Responsive</Text>\n    </Box>\n  </Grid.Col>\n</Grid>\n')),(0,r.kt)("h2",{id:"responsive-percent"},"Responsive (percent)"),(0,r.kt)("p",null,"At each breakpoint, these columns will resize the span based on percentage of the parent container. Breakpoints are ",(0,r.kt)("inlineCode",{parentName:"p"},"xs, sm, md, lg, and xl"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Grid>\n  <Grid.Col span={{ xs: '100%', md: '50%' }}>\n    <Box color=\"$tint3\">\n      <Heading offset={5}>Responsive</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span={{ xs: '100%', md: '50%' }}>\n    <Box color=\"$tint3\">\n      <Heading offset={5}>Responsive</Heading>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span={{ xs: '100%', md: '50%', lg: '25%', xl: '33%' }}>\n    <Box color=\"$tint3\">\n      <Text>Responsive</Text>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span={{ xs: '100%', md: '50%', lg: '25%', xl: '33%' }}>\n    <Box color=\"$tint3\">\n      <Text>Responsive</Text>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span={{ xs: '100%', md: '50%', lg: '25%', xl: '33%' }}>\n    <Box color=\"$tint3\">\n      <Text>Responsive</Text>\n    </Box>\n  </Grid.Col>\n  <Grid.Col span={{ xs: '100%', md: '50%', lg: '25%', xl: '33%' }}>\n    <Box color=\"$tint3\">\n      <Text>Responsive</Text>\n    </Box>\n  </Grid.Col>\n</Grid>\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Grid}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the grid component',\n    },\n    {\n      name: 'columns',\n      type: 'number',\n      description:\n        'XL and L are 12-column, MD is 9-column, SM is 6-column and XS is 4-column.',\n    },\n    {\n      name: 'space',\n      type: 'number | shape',\n      description: 'Automatically updates based on screen size.',\n    },\n    {\n      name: 'align',\n      type: 'string',\n      description: '',\n    },\n    {\n      name: 'justify',\n      type: 'string',\n      description: '',\n    },\n    {\n      name: 'span',\n      type: 'number | string | shape',\n      description: 'Handles the span size of the grid',\n    },\n    {\n      name: 'noWrap',\n      type: 'boolean',\n      default: 'false',\n      description: 'turns wrap on and off',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Grid.Col}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the grid col component',\n    },\n    {\n      name: 'span',\n      type: 'number | string | shape',\n      description: 'Handles the span size of the column',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Grid}\n  rows={[\n    {\n      name: 'grid',\n      description: 'Grid root element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Grid.Col}\n  rows={[\n    {\n      name: 'grid-col',\n      description: 'Grid column element',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},57713:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"heading",category:"Typography",title:"Heading",description:"Creates appropriately sized and nested heading elements.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1536",pagination_prev:"web/ui/theme-provider",pagination_next:"web/ui/label"},d=void 0,p={unversionedId:"web/ui/heading",id:"web/ui/heading",isDocsHomePage:!1,title:"Heading",description:"Creates appropriately sized and nested heading elements.",source:"@site/docs/web/ui/Heading.md",sourceDirName:"web/ui",slug:"/web/ui/heading",permalink:"/web/ui/heading",tags:[],version:"current",frontMatter:{id:"heading",category:"Typography",title:"Heading",description:"Creates appropriately sized and nested heading elements.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1536",pagination_prev:"web/ui/theme-provider",pagination_next:"web/ui/label"},sidebar:"docs",previous:{title:"ThemeProvider",permalink:"/web/ui/theme-provider"},next:{title:"Label",permalink:"/web/ui/label"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Offset",id:"offset",children:[],level:2},{value:"Display",id:"display",children:[],level:2},{value:"Nesting",id:"nesting",children:[],level:2},{value:"Nesting Example",id:"nesting-example",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Heading } from '@abyss/web/ui/Heading';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Heading',\n  inputs: [\n    {\n      prop: 'children',\n      type: 'string',\n      defaultValue: 'Heading',\n    },\n{\n      prop: 'offset',\n      type: 'select',\n      options: [\n        { label: '0', value: '0' },\n        { label: '1', value: '1' },\n        { label: '2', value: '2' },\n        { label: '3', value: '3' },\n        { label: '4', value: '4' },\n        { label: '5', value: '5' },\n      ],\n    },\n    {\n      prop: 'color',\n      type: 'select',\n      options: [\n        { label: '$primary1', value: '$primary1' },\n        { label: '$interactive1', value: '$interactive1' },\n        { label: '$gray8', value: '$gray8' },\n        { label: 'lightseagreen', value: 'lightseagreen' },\n        { label: '#ff0000', value: '#ff0000' },\n      ],\n    },\n    {\n      prop: 'textAlign',\n      type: 'select',\n      options: [\n        { label: 'left', value: 'left' },\n        { label: 'center', value: 'center' },\n        { label: 'right', value: 'right' },\n      ],\n    },\n  ]\n}\n\n<Heading>Heading</Heading>\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"If we want to add a new h2 to the page and lower every other heading it's now easy to add another ",(0,r.kt)("inlineCode",{parentName:"p"},"<Heading.Level>")," wrapper to indent everything and you're done. Much easier than updating lots of ",(0,r.kt)("inlineCode",{parentName:"p"},"<h*>")," numbers around the code to realign them all."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"<Heading.Level>")," concept means you only need to think about whether it's a deeper level, without having to know the specific heading level number."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <Heading>This is h1 title</Heading>\n  <Heading.Level>\n    <Heading>This is h2 title</Heading>\n  </Heading.Level>\n</React.Fragment>\n")),(0,r.kt)("h2",{id:"offset"},"Offset"),(0,r.kt)("p",null,"If you want to have heading levels relative to the current level you can provide an offset prop,\nwhich is a more concise way of writing ",(0,r.kt)("inlineCode",{parentName:"p"},"<Heading.Level>")," at each heading breakpoint. This will override the heading level, and allow you to manually set the level corresponding to the design."),(0,r.kt)("p",null,"However ",(0,r.kt)("inlineCode",{parentName:"p"},"<Level>")," will establish a new deeper heading level context whereas offset will not, again, requiring you to manually set the offet level with each new heading."),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"offset={0|1|2|3|4|5}"),". The below headings are ",(0,r.kt)("inlineCode",{parentName:"p"},"h1")," followed by an ",(0,r.kt)("inlineCode",{parentName:"p"},"h5"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <Heading>Providers</Heading>\n  <Heading offset={4}>Choose your primary provider</Heading>\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n    cillum dolore eu fugiat nulla pariatur.\n  </p>\n</React.Fragment>\n")),(0,r.kt)("h2",{id:"display"},"Display"),(0,r.kt)("p",null,"Display sizes are ",(0,r.kt)("inlineCode",{parentName:"p"},"<h1>")," tags, with options that are the largest sizes in the DPL."),(0,r.kt)("p",null,"Using the tag ",(0,r.kt)("inlineCode",{parentName:"p"},"display="),"you can target one of three display sizes: ",(0,r.kt)("inlineCode",{parentName:"p"},"1 | 2 | 3"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <Heading display={1}>Welcome to UnitedHealth</Heading>\n  <Heading display={2}>Welcome to UnitedHealth</Heading>\n  <Heading display={3}>Welcome to UnitedHealth</Heading>\n</React.Fragment>\n")),(0,r.kt)("h2",{id:"nesting"},"Nesting"),(0,r.kt)("p",null,"Nesting headers, allows us to have multiple levels of headers, without having to directly tag each level of ",(0,r.kt)("inlineCode",{parentName:"p"},"<h*>")," tags."),(0,r.kt)("p",null,"Each level of heading is specifically designed to take up the same height of space, given a specific ",(0,r.kt)("inlineCode",{parentName:"p"},"font-size")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"margin"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <Heading>This is h1 title</Heading>\n  <Heading.Level>\n    <Heading>This is h2 title</Heading>\n    <Heading.Level>\n      <Heading>This is h3 title</Heading>\n      <Heading.Level>\n        <Heading>This is h4 title</Heading>\n        <Heading.Level>\n          <Heading>This is h5 title</Heading>\n          <Heading.Level>\n            <Heading>This is h6 title</Heading>\n          </Heading.Level>\n        </Heading.Level>\n      </Heading.Level>\n    </Heading.Level>\n  </Heading.Level>\n</React.Fragment>\n")),(0,r.kt)("h2",{id:"nesting-example"},"Nesting Example"),(0,r.kt)("p",null,"Nested headers can be combined together with text to organize sections and create a seamless document experience."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<React.Fragment>\n  <Heading>Medical Visit</Heading>\n  <Heading.Level>\n    <Heading>Planned Visits</Heading>\n    <Heading.Level>\n      <Heading color="$interactive1">Clinical Care</Heading>\n      <p>\n        Vitae nunc sed velit dignissim. Nunc congue nisi vitae suscipit tellus\n        mauris a diam. Risus in hendrerit gravida rutrum quisque non tellus.\n        Orci nulla pellentesque dignissim enim sit.\n      </p>\n      <Heading color="$interactive1">Professional Care</Heading>\n      <p>\n        Porttitor leo a diam sollicitudin tempor id eu nisl. Donec ultrices\n        tincidunt arcu non sodales neque sodales. Et malesuada fames ac turpis\n        egestas integer eget. Pretium vulputate sapien nec sagittis. Lobortis\n        scelerisque fermentum dui faucibus.\n      </p>\n    </Heading.Level>\n    <Heading>Emergency Visits</Heading>\n    <Heading.Level>\n      <Heading color="$interactive1">Emergency Room Care</Heading>\n      <p>\n        Nunc faucibus a pellentesque sit. In ante metus dictum at tempor commodo\n        ullamcorper a. Ut sem nulla pharetra diam sit amet nisl suscipit\n        adipiscing. Urna et pharetra pharetra massa massa. Velit sed ullamcorper\n        morbi tincidunt ornare massa eget. Orci nulla pellentesque dignissim\n        enim. Scelerisque fermentum dui faucibus in. Duis at tellus at urna\n        condimentum mattis pellentesque id.\n      </p>\n    </Heading.Level>\n  </Heading.Level>\n</React.Fragment>\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Heading}\n  rows={[\n    {\n      name: 'offset',\n      type: 'number',\n      description:\n        '0 | 1 | 2 | 3 | 4 | 5. Each number will offset the hierarchy of heading you choose. 0 is <h1>, and so on.',\n    },\n    {\n      name: 'children',\n      type: 'string',\n      description: 'The text to be input into the heading component.',\n    },\n    {\n      name: 'textAlign',\n      type: 'start | center',\n      description: '',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the heading text',\n    },\n    {\n      name: 'display',\n      type: 'number',\n      description: 'Target one of three display sizes',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Heading}\n  rows={[\n    {\n      name: 'heading-root',\n      description: 'Heading root element',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},53711:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"icon",category:"Media",title:"Icon",description:"Used to implement icons and adapt their properties.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A10709",pagination_prev:"web/ui/floating-section",pagination_next:"web/ui/icon-material"},d=void 0,p={unversionedId:"web/ui/icon",id:"web/ui/icon",isDocsHomePage:!1,title:"Icon",description:"Used to implement icons and adapt their properties.",source:"@site/docs/web/ui/Icon.md",sourceDirName:"web/ui",slug:"/web/ui/icon",permalink:"/web/ui/icon",tags:[],version:"current",frontMatter:{id:"icon",category:"Media",title:"Icon",description:"Used to implement icons and adapt their properties.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A10709",pagination_prev:"web/ui/floating-section",pagination_next:"web/ui/icon-material"},sidebar:"docs",previous:{title:"FloatingSection",permalink:"/web/ui/floating-section"},next:{title:"IconMaterial",permalink:"/web/ui/icon-material"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Colors",id:"colors",children:[],level:2},{value:"Size",id:"size",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Icon } from '@abyss/web/ui/Icon';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Icon',\n  inputs: [\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'title',\n      type: 'string',\n    },\n    {\n      prop: 'color',\n      type: 'string',\n    },\n    {\n      prop: 'isScreenReadable',\n      type: 'boolean',\n    },\n  ]\n}\n\n() => {\n  const customIcon = (\n    <svg height=\"24\" width=\"24\" viewBox=\"0 0 16 16\">\n      <path d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\" />\n    </svg>\n  );\n\n  return (\n    <Icon size=\"24px\" title=\"github\">{customIcon}</Icon>\n  );\n};\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Icon")," to implement custom SVG icons"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Icon title="github" size="$md">\n    <svg height="24" width="24" viewBox="0 0 16 16">\n      <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z" />\n    </svg>\n  </Icon>\n  <Icon title="figma" size="$md">\n    <svg viewBox="-60 0 500 500">\n      <path d="M14 95.7924C14 42.8877 56.8878 0 109.793 0H274.161C327.066 0 369.954 42.8877 369.954 95.7924C369.954 129.292 352.758 158.776 326.711 175.897C352.758 193.019 369.954 222.502 369.954 256.002C369.954 308.907 327.066 351.795 274.161 351.795H272.081C247.279 351.795 224.678 342.369 207.666 326.904V415.167C207.666 468.777 163.657 512 110.309 512C57.5361 512 14 469.243 14 416.207C14 382.709 31.1945 353.227 57.2392 336.105C31.1945 318.983 14 289.5 14 256.002C14 222.502 31.196 193.019 57.2425 175.897C31.196 158.776 14 129.292 14 95.7924ZM176.288 191.587H109.793C74.2172 191.587 45.3778 220.427 45.3778 256.002C45.3778 291.44 73.9948 320.194 109.381 320.416C109.518 320.415 109.655 320.415 109.793 320.415H176.288V191.587ZM207.666 256.002C207.666 291.577 236.505 320.417 272.081 320.417H274.161C309.737 320.417 338.576 291.577 338.576 256.002C338.576 220.427 309.737 191.587 274.161 191.587H272.081C236.505 191.587 207.666 220.427 207.666 256.002ZM109.793 351.795C109.655 351.795 109.518 351.794 109.381 351.794C73.9948 352.015 45.3778 380.769 45.3778 416.207C45.3778 451.652 74.6025 480.622 110.309 480.622C146.591 480.622 176.288 451.186 176.288 415.167V351.795H109.793ZM109.793 31.3778C74.2172 31.3778 45.3778 60.2173 45.3778 95.7924C45.3778 131.368 74.2172 160.207 109.793 160.207H176.288V31.3778H109.793ZM207.666 160.207H274.161C309.737 160.207 338.576 131.368 338.576 95.7924C338.576 60.2173 309.737 31.3778 274.161 31.3778H207.666V160.207Z" />\n    </svg>\n  </Icon>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"colors"},"Colors"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"color")," property to adjust the color of a Google material icon. Theme colors can be found in the ",(0,r.kt)("a",{parentName:"p",href:"/foundations/colors"},"Colors")," documentation section or a hex code can be used. The default color is set to the theme ",(0,r.kt)("inlineCode",{parentName:"p"},"'interactive1'"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Icon title="github" size="$md" color="$primary1">\n    <svg height="24" width="24" viewBox="0 0 16 16">\n      <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z" />\n    </svg>\n  </Icon>\n  <Icon title="github" size="$md" color="#00ff00">\n    <svg height="24" width="24" viewBox="0 0 16 16">\n      <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z" />\n    </svg>\n  </Icon>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"size"},"Size"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," property to adjust the size of an icon by setting it to a specific preset size or number. The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"24px")," || ",(0,r.kt)("inlineCode",{parentName:"p"},"$md"),". The size prop can take in px, and the Abyss standardized $sm, $md, and $lg."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const customIcon = (\n    <svg height="24" width="24" viewBox="0 0 16 16">\n      <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z" />\n    </svg>\n  );\n\n  return (\n    <Layout.Group>\n      <Icon title="github">{customIcon}</Icon>\n      <Icon title="github" size="$md">\n        {customIcon}\n      </Icon>\n      <Icon title="github" size={24}>\n        {customIcon}\n      </Icon>\n    </Layout.Group>\n  );\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Icon}\n  rows={[\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the icon',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The svg content of the icon',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the icon',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the icon',\n    },\n    {\n      name: 'isScreenReadable',\n      type: 'boolean',\n      description:\n        'Indicate whether the icon is screen readable or not. If the icon is Screen Readable, then provide a title',\n    },\n    {\n      name: 'onProcessSVG',\n      type: 'function',\n      description: 'The svg content of the icon',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description:\n        '(not currently functioning) Pre programmed sizes for the icons',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Icon}\n  rows={[\n    {\n      name: 'icon-root',\n      description: 'Icon root element',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("h2",null,"Meaningful or Control Icons"),(0,r.kt)("p",null,"If the icon is being used in a setting where it is the only element providing meaning, then that same meaning should be conveyed to screen reader users. The below implementation provides examples of situations in which the property ",(0,r.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," should be set to true and the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," property is required and should describe the purpose of the image."),(0,r.kt)("p",null,"Example 1: An alert icon is used to convey a sense of urgency; there is adjacent text (\u201cThere is a data outage\u201d) but the text doesn't include any words that convey urgency. So, in this case, the icon should have a text alternative such as \u201cAlert\u201d or \u201cWarning\u201d."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand title="alert" icon="alert" isScreenReadable={true} size={24} />\n  <div>There is a data outage</div>\n</Layout.Group>\n')),(0,r.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog. There is no adjacent text, so the icon should have a text alternative of \u201cclose\u201d or \u201cclose window\u201d.",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial title="close" icon="close" isScreenReadable={true} size={24} />\n</Layout.Group>\n')),(0,r.kt)("h2",null,"Decorative Icons"),(0,r.kt)("p",null,"If the icon is being used in a setting in which it just a decorative element (which is the default case for icons), then the icon should be ignored by screen readers. The below implementation provides example of which situations would be classified as decorative. Since the default of ",(0,r.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," is set to false no specific changes need to be made for decorative icons."),(0,r.kt)("p",null,"Example 1: An alert icon is used next to an urgent message and the word \u201cAlert\u201d is included in the adjacent text. In this case, the icon becomes decorative in nature and should be ignored by screen readers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="alert" size={24} />\n  <div>Alert: There is a data outage</div>\n</Layout.Group>\n')),(0,r.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog; the word \u201cClose\u201d appears to the right of the button. In this case, the icon should be considered decorative and ignored by screen readers.",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial icon="close" size={24} />\n  <div>Close</div>\n</Layout.Group>\n'))))}g.isMDXComponent=!0},67815:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>b,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"icon-material",category:"Media",title:"IconMaterial",description:"Used to implement material icons and adapt their properties.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A82",pagination_prev:"web/ui/icon",pagination_next:"web/ui/action-nav"},s=void 0,d={unversionedId:"web/ui/icon-material",id:"web/ui/icon-material",isDocsHomePage:!1,title:"IconMaterial",description:"Used to implement material icons and adapt their properties.",source:"@site/docs/web/ui/IconMaterial.md",sourceDirName:"web/ui",slug:"/web/ui/icon-material",permalink:"/web/ui/icon-material",tags:[],version:"current",frontMatter:{id:"icon-material",category:"Media",title:"IconMaterial",description:"Used to implement material icons and adapt their properties.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A82",pagination_prev:"web/ui/icon",pagination_next:"web/ui/action-nav"},sidebar:"docs",previous:{title:"Icon",permalink:"/web/ui/icon"},next:{title:"ActionNav",permalink:"/web/ui/action-nav"}},p=[{value:"Icons",id:"icons",children:[],level:2},{value:"Colors",id:"colors",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Material Icon Variants",id:"material-icon-variants",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g=c("IconLibrary"),h={toc:p};function b(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { IconMaterial } from '@abyss/web/ui/IconMaterial';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'IconMaterial',\n  inputs: [\n    {\n      prop: 'icon',\n      type: 'string',\n    },\n    {\n      prop: 'color',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'filled', value: 'filled' },\n        { label: 'outlined', value: 'outlined' },\n      ],\n    },\n  ]\n}\n\n<IconMaterial icon=\"home\" size=\"24px\" variant=\"filled\" color=\"$interactive1\" />\n\n")),(0,i.kt)("h2",{id:"icons"},"Icons"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"icon")," property to adjust which icon is being selected."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial icon="bookmarks" size={24} />\n  <IconMaterial icon="face" size={24} />\n  <IconMaterial icon="home" size={24} />\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"colors"},"Colors"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"color")," property to adjust the color of a Google material icon. Theme colors can be found in the ",(0,i.kt)("a",{parentName:"p",href:"/foundations/colors"},"Colors")," documentation section or a hex code can be used. The default color is set to the theme ",(0,i.kt)("inlineCode",{parentName:"p"},"'interactive1'"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial icon="home" size={24} />\n  <IconMaterial icon="home" size={24} color="$success1" />\n  <IconMaterial icon="home" size={24} color="$error1" />\n  <IconMaterial icon="home" size={24} color="$primary1" />\n  <IconMaterial icon="home" size={24} color="#00ff00" />\n  <IconMaterial icon="home" size={24} color="violet" />\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," property to adjust the size of an icon by setting it to a specific number. The default size is set to 24."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial icon="home" size={16} />\n  <IconMaterial icon="home" size={20} />\n  <IconMaterial icon="home" />\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"material-icon-variants"},"Material Icon Variants"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," property to change the style of Material icons. The default variant is ",(0,i.kt)("inlineCode",{parentName:"p"},"filled"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Grid columns={5} span={{ md: \'50%\', lg: \'20%\' }}>\n  <Grid.Col>\n    <Box padding="$sm" color="$white">\n      <Layout.Stack grow space={0}>\n        <div style={{ lineHeight: 2 }}>filled</div>\n        <div style={{ lineHeight: 2 }}>outlined</div>\n      </Layout.Stack>\n    </Box>\n  </Grid.Col>\n  <Grid.Col>\n    <Box padding="$sm" color="$white">\n      <Layout.Stack grow space={2}>\n        <IconMaterial icon="health_and_safety" size={24} variant="filled" />\n        <IconMaterial icon="health_and_safety" size={24} variant="outlined" />\n      </Layout.Stack>\n    </Box>\n  </Grid.Col>\n  <Grid.Col>\n    <Box padding="$sm" color="$tint3">\n      <Layout.Stack grow space={2}>\n        <IconMaterial icon="health_and_safety" size={24} variant="filled" />\n        <IconMaterial icon="health_and_safety" size={24} variant="outlined" />\n      </Layout.Stack>\n    </Box>\n  </Grid.Col>\n  <Grid.Col>\n    <Box padding="$sm" color="$tint4">\n      <Layout.Stack grow space={2}>\n        <IconMaterial icon="health_and_safety" size={24} variant="filled" />\n        <IconMaterial icon="health_and_safety" size={24} variant="outlined" />\n      </Layout.Stack>\n    </Box>\n  </Grid.Col>\n  <Grid.Col>\n    <Box padding="$sm" color="$primary1">\n      <Layout.Stack grow space={2}>\n        <IconMaterial\n          icon="health_and_safety"\n          size={24}\n          variant="filled"\n          color="white"\n        />\n        <IconMaterial\n          icon="health_and_safety"\n          size={24}\n          variant="outlined"\n          color="white"\n        />\n      </Layout.Stack>\n    </Box>\n  </Grid.Col>\n</Grid>\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Icon}\n  rows={[\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the icon',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The svg content of the icon',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the icon',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the icon',\n    },\n    {\n      name: 'isScreenReadable',\n      type: 'boolean',\n      description:\n        'Indicate whether the icon is screen readable or not. If the icon is Screen Readable, then provide a title',\n    },\n    {\n      name: 'onProcessSVG',\n      type: 'function',\n      description: 'The svg content of the icon',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description:\n        '(not currently functioning) Pre programmed sizes for the icons',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={IconMaterial}\n  rows={[\n    {\n      name: 'icon',\n      type: 'string',\n      description: 'Name of the material icon',\n    },\n    {\n      name: 'variant',\n      type: 'filled | outlined',\n      description: 'The style variation of the material icon.',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the material icon',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the material icon',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the material icon',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Icon}\n  rows={[\n    {\n      name: 'icon-root',\n      description: 'Icon root element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={IconMaterial}\n  rows={[\n    {\n      name: 'icon-material-root',\n      description: 'Icon Material root element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("h2",null,"Meaningful or Control Icons"),(0,i.kt)("p",null,"If the icon is being used in a setting where it is the only element providing meaning, then that same meaning should be conveyed to screen reader users. The below implementation provides examples of situations in which the property ",(0,i.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," should be set to true and the ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," property is required and should describe the purpose of the image."),(0,i.kt)("p",null,"Example 1: An alert icon is used to convey a sense of urgency; there is adjacent text (\u201cThere is a data outage\u201d) but the text doesn't include any words that convey urgency. So, in this case, the icon should have a text alternative such as \u201cAlert\u201d or \u201cWarning\u201d."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand title="alert" icon="alert" isScreenReadable={true} size={24} />\n  <div>There is a data outage</div>\n</Layout.Group>\n')),(0,i.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog. There is no adjacent text, so the icon should have a text alternative of \u201cclose\u201d or \u201cclose window\u201d.",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial title="close" icon="close" isScreenReadable={true} size={24} />\n</Layout.Group>\n')),(0,i.kt)("h2",null,"Decorative Icons"),(0,i.kt)("p",null,"If the icon is being used in a setting in which it just a decorative element (which is the default case for icons), then the icon should be ignored by screen readers. The below implementation provides example of which situations would be classified as decorative. Since the default of ",(0,i.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," is set to false no specific changes need to be made for decorative icons."),(0,i.kt)("p",null,"Example 1: An alert icon is used next to an urgent message and the word \u201cAlert\u201d is included in the adjacent text. In this case, the icon becomes decorative in nature and should be ignored by screen readers."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="alert" size={24} />\n  <div>Alert: There is a data outage</div>\n</Layout.Group>\n')),(0,i.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog; the word \u201cClose\u201d appears to the right of the button. In this case, the icon should be considered decorative and ignored by screen readers.",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial icon="close" size={24} />\n  <div>Close</div>\n</Layout.Group>\n'))),(0,i.kt)(u,{label:"Material Icons",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<h2>Material Icons</h2>\n")),(0,i.kt)("br",null),"Abyss uses Google's Material Design System iconography that are simple, modern, friendly, and sometimes quirky. Each icon is created using Google's design guidelines to depict in simple and minimal forms the universal concepts used commonly throughout user interfaces. Ensuring readability and clarity at both large and small sizes, these icons have been optimized for common platforms and display resolutions.",(0,i.kt)("p",null,"The source for these design icons can be found in the ",(0,i.kt)(m,{href:"https://fonts.google.com/icons)",mdxType:"ExitLink"},"Material Icons Library"),"."),(0,i.kt)(g,{brand:"material",mdxType:"IconLibrary"})))}b.isMDXComponent=!0},73610:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"indicator",category:"Data Display",title:"Indicator",description:"Adds an indicator to wrapped elements.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/branch/sabyctxmnS57eNFcPZQAbi/Abyss-Design-System",pagination_prev:"web/ui/data-table",pagination_next:"web/ui/search-results"},d=void 0,p={unversionedId:"web/ui/indicator",id:"web/ui/indicator",isDocsHomePage:!1,title:"Indicator",description:"Adds an indicator to wrapped elements.",source:"@site/docs/web/ui/Indicator.md",sourceDirName:"web/ui",slug:"/web/ui/indicator",permalink:"/web/ui/indicator",tags:[],version:"current",frontMatter:{id:"indicator",category:"Data Display",title:"Indicator",description:"Adds an indicator to wrapped elements.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/branch/sabyctxmnS57eNFcPZQAbi/Abyss-Design-System",pagination_prev:"web/ui/data-table",pagination_next:"web/ui/search-results"},sidebar:"docs",previous:{title:"DataTable",permalink:"/web/ui/data-table"},next:{title:"SearchResults",permalink:"/web/ui/search-results"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Offset",id:"offset",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Overflow Count",id:"overflow-count",children:[],level:2},{value:"With Border",id:"with-border",children:[],level:2},{value:"Show Zero",id:"show-zero",children:[],level:2},{value:"Color",id:"color",children:[],level:2},{value:"Indicator Type",id:"indicator-type",children:[],level:2},{value:"Focusable Element",id:"focusable-element",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Indicator } from '@abyss/web/ui/Indicator';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"To apply, wrap the ",(0,r.kt)("inlineCode",{parentName:"p"},"Indicator")," component around an existing element. By default the Indicator will be positioned to the top-right corner of the child element. Please note that there are accessibility concerns when utilizing this component and further information can be found on the ",(0,r.kt)("strong",{parentName:"p"},"Accessibility")," tab of this page as well as below in the ",(0,r.kt)("a",{parentName:"p",href:"#indicator-type"},"Indicator Type")," / ",(0,r.kt)("a",{parentName:"p",href:"#focusable-element"},"Focusable Element")," sections. For further details on implementation please see the various sections below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Indicator',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'string',\n    },\n    {\n      prop: 'offset',\n      type: 'number',\n    },\n    {\n      prop: 'overflowCount',\n      type: 'number',\n    },\n    {\n      prop: 'position',\n      type: 'select',\n      options: [\n        { label: 'top-start', value: 'top-start' },\n        { label: 'top-end', value: 'top-end' },\n        { label: 'bottom-start', value: 'bottom-start' },\n        { label: 'bottom-end', value: 'bottom-end' },\n      ]\n    },\n     {\n      prop: 'size',\n      type: 'select',\n      options: [\n        { label: 'small', value: 'small' },\n        { label: 'large', value: 'large' },\n      ]\n    },\n    {\n      prop: 'color',\n      type: 'string',\n    },\n    {\n      prop: 'showZero',\n      type: 'boolean',\n    },\n    {\n      prop: 'withBorder',\n      type: 'boolean',\n    },\n  ]\n}\n\n() => {\nreturn (\n<Indicator label={5}>\n  <Badge>\n  Indicator Sandbox\n </Badge>\n</Indicator>\n  );\n};\n")),(0,r.kt)("h2",{id:"size"},"Size"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," prop to change the size of the Indicator to ",(0,r.kt)("inlineCode",{parentName:"p"},"small")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"large"),". The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"small"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group space={30}>\n  <Indicator size="small" label={5}>\n    <IconMaterial icon="mail" size={48} />\n  </Indicator>\n  <Indicator size="large" label={5}>\n    <IconMaterial icon="mail" size={48} />\n  </Indicator>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"offset"},"Offset"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"offset")," prop to change the position of the Indicator. It is useful when the Indicator component is used with children that have border radius."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group space={30}>\n  <Indicator size="small" label={10}>\n    <IconMaterial icon="face" size="xl" />\n  </Indicator>\n  <Indicator size="small" label={10} offset={10}>\n    <IconMaterial icon="face" size="xl" />\n  </Indicator>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"label"},"Label"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," prop to pass in the content that will be displayed within the Indicator. The value can be either a ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group space={30}>\n  <Indicator size="large" label={\'New\'} offset={10}>\n    <IconMaterial icon="face" size="xl" />\n  </Indicator>\n  <Indicator size="large" label={20} offset={10}>\n    <IconMaterial icon="face" size="xl" />\n  </Indicator>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"overflow-count"},"Overflow Count"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"overflowCount")," prop to show the Indicator label content with a ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," symbol when the Indicator label value has surpassed the overflowCount value. Default is ",(0,r.kt)("inlineCode",{parentName:"p"},"99"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [count, setCount] = useState(100);\n\n  return (\n    <Layout.Stack>\n      <Layout.Group space={30}>\n        <Indicator size="small" label={count} overflowCount={10} offset={10}>\n          <IconMaterial icon="face" size="xl" />\n        </Indicator>\n        <Indicator size="small" label={count} offset={10}>\n          <IconMaterial icon="face" size="xl" />\n        </Indicator>\n        <Indicator size="small" label={count} overflowCount={100} offset={10}>\n          <IconMaterial icon="face" size="xl" />\n        </Indicator>\n      </Layout.Group>\n\n      <Layout.Group space={30}>\n        <Button onClick={() => setCount((old) => old + 1)}>Increment</Button>\n        <Button\n          variant="outline"\n          onClick={() => setCount((old) => (old > 0 ? old - 1 : old))}\n        >\n          Decrement\n        </Button>\n      </Layout.Group>\n    </Layout.Stack>\n  );\n};\n')),(0,r.kt)("h2",{id:"with-border"},"With Border"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"withBorder")," prop to apply border around Indicator. The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group space={30}>\n  <Indicator size="large" label={20} offset={10} withBorder>\n    <IconMaterial icon="face" size="xl" />\n  </Indicator>\n  <Indicator size="large" label={10} offset={10}>\n    <IconMaterial icon="face" size="xl" />\n  </Indicator>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"show-zero"},"Show Zero"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showZero={false}")," prop to hide the Indicator when the label value is ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),". The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group space={30}>\n  <Indicator label={0}>\n    <IconMaterial icon="mail" size={48} />\n  </Indicator>\n  <Indicator label={0} showZero={false}>\n    <IconMaterial icon="mail" size={48} />\n  </Indicator>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"color"},"Color"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"color")," prop to change the color of the Indicator. Default value is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"'$error1'"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group space={30}>\n  <Indicator label={8} color="green">\n    <IconMaterial icon="mail" size={48} />\n  </Indicator>\n  <Indicator label={100} color="$gray9">\n    <IconMaterial icon="mail" size={48} />\n  </Indicator>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"indicator-type"},"Indicator Type"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"indicatorType")," prop to pass additional description text that will be appended to the label text and read by a screen reader to provide the user context of the indicators role. This text will always remain hidden from display and is exclusively used for accessibility purposes. The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"Notifications"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group space={30}>\n  <Indicator offset={5} label={20} indicatorType="emails">\n    <IconMaterial icon="mail" size={48} />\n  </Indicator>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"focusable-element"},"Focusable Element"),(0,r.kt)("p",null,"Indicator is not focusable. If a focusable element is wrapped with the Indicator you will need to pass an ",(0,r.kt)("inlineCode",{parentName:"p"},"aria-label")," to the focusable element. The aria-label text should include the Indicator label content and information about the Indicator's role. For example ",(0,r.kt)("inlineCode",{parentName:"p"},'aria-label="Indicator with [label] notifications"'),". Please see the example below for further details on implementation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [count, setCount] = useState(7);\n  const overflowCount = 10;\n\n  const buttonCssProps = {\n    'abyss-button-root': {\n      fontSize: '$lg',\n      fontWeight: '$bold',\n    },\n  };\n\n  return (\n    <Layout.Stack space={10}>\n      <Indicator label={count} overflowCount={overflowCount} offset={2}>\n        <Button\n          aria-label={\n            count > overflowCount\n              ? `Indicator with ${overflowCount}+ notifications`\n              : `Indicator with ${count} notifications`\n          }\n        >\n          Indicator\n        </Button>\n      </Indicator>\n      <Layout.Group>\n        <Button\n          css={buttonCssProps}\n          size={25}\n          onClick={() => setCount((old) => old + 1)}\n        >\n          +\n        </Button>\n        <Button\n          css={buttonCssProps}\n          size={25}\n          variant=\"outline\"\n          onClick={() => setCount((old) => (old > 0 ? old - 1 : old))}\n        >\n          -\n        </Button>\n      </Layout.Group>\n    </Layout.Stack>\n  );\n};\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Indicator}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the indicator component',\n    },\n    {\n      name: 'position',\n      type: \"'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' \",\n      description: 'Changes the indicator position',\n    },\n    {\n      name: 'size',\n      type: \" 'small' | 'large' \",\n      description: 'Size of Indicator',\n    },\n    {\n      name: 'label',\n      type: 'number | string',\n      description: 'Label of indicator component',\n    },\n    {\n      name: 'overflowCount',\n      type: 'number',\n      description: 'Over Flow count display for indicator',\n    },\n    {\n      name: 'showZero',\n      type: 'boolean',\n      description: 'Flag to hide label when value is 0',\n    },\n    {\n      name: 'offset',\n      type: 'number',\n      description:\n        'Change the indicator default position based on the position variant',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Color for indicator',\n    },\n    {\n      name: 'withBorder',\n      type: 'boolean',\n      description: 'Flag to show border around indicator',\n    },\n    {\n      name: 'indicatorType',\n      type: 'string',\n      description: 'Description of indicators role for accessibility purposes',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Indicator}\n  rows={[\n    {\n      name: 'indicator-root',\n      description: 'Indicator root element',\n    },\n    {\n      name: 'indicator-container',\n      description: 'Indicator container element',\n    },\n    {\n      name: 'indicator-label',\n      description: 'Indicator label element',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("h2",null,"Focusable Element"),(0,r.kt)("p",null,"Indicator is not focusable. If a focusable element is wrapped with the Indicator you will need to pass an ",(0,r.kt)("inlineCode",{parentName:"p"},"aria-label")," to the focusable element. The aria-label text should include the Indicator label content and information about the Indicator's role. For example ",(0,r.kt)("inlineCode",{parentName:"p"},'aria-label="Indicator with [label] notifications"'),". Please see the example below for further details on implementation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [count, setCount] = useState(7);\n  const overflowCount = 10;\n\n  const buttonCssProps = {\n    'abyss-button-root': {\n      fontSize: '$lg',\n      fontWeight: '$bold',\n    },\n  };\n\n  return (\n    <Layout.Stack space={10}>\n      <Indicator label={count} overflowCount={overflowCount} offset={2}>\n        <Button\n          aria-label={\n            count > overflowCount\n              ? `Indicator with ${overflowCount}+ notifications`\n              : `Indicator with ${count} notifications`\n          }\n        >\n          Indicator\n        </Button>\n      </Indicator>\n      <Layout.Group>\n        <Button\n          css={buttonCssProps}\n          size={25}\n          onClick={() => setCount((old) => old + 1)}\n        >\n          +\n        </Button>\n        <Button\n          css={buttonCssProps}\n          size={25}\n          variant=\"outline\"\n          onClick={() => setCount((old) => (old > 0 ? old - 1 : old))}\n        >\n          -\n        </Button>\n      </Layout.Group>\n    </Layout.Stack>\n  );\n};\n")),(0,r.kt)("h2",null,"Dynamic Label Content"),(0,r.kt)("p",null,"After initial load, anytime the Indicator label content is updated a ",(0,r.kt)("inlineCode",{parentName:"p"},'role="alert"')," attribute will be applied to ensure that screen readers will announce the updated content. Please see the example above for a demonstration of this in action."),(0,r.kt)("h2",null,"Character Limit"),(0,r.kt)("p",null,"While there is no explicit limit on the number of text characters that can be used in the indicator, be mindful that the wider the indicator, the greater the risk of blocking surrounding information from view."),(0,r.kt)("h2",null,"Offset"),(0,r.kt)("p",null,"Like the character limit, be cognizant of the indicator positioning in relation to the element it is paired with, particularly with icons that are sized dynamically. Avoid fixed values or large offsets that could potentially overlap or cover the paired icon or surrounding content."),(0,r.kt)("h2",null,"Color Contrast"),(0,r.kt)("p",null,"As with all components, the color contrast of the text within the indicator to the background color must be at least 4.5:1. Additionally, the background circle shape must have a minimum of 3:1 color contrast with the icon/element it's attached to as well as the surrounding background. Please find link for\ncolor contrast guide ",(0,r.kt)("a",{parentName:"p",href:"/accessibility/#color-contrast"},"Color Contrast"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Indicator label={100}>\n  <IconMaterial icon="mail" size={48} />\n</Indicator>\n'))))}g.isMDXComponent=!0},42785:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"label",category:"Typography",title:"Label",description:"Renders an accessible label to provide explanatory and/or informative text for user interface components.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=641%3A11869",pagination_prev:"web/ui/heading",pagination_next:"web/ui/text"},d=void 0,p={unversionedId:"web/ui/label",id:"web/ui/label",isDocsHomePage:!1,title:"Label",description:"Renders an accessible label to provide explanatory and/or informative text for user interface components.",source:"@site/docs/web/ui/Label.md",sourceDirName:"web/ui",slug:"/web/ui/label",permalink:"/web/ui/label",tags:[],version:"current",frontMatter:{id:"label",category:"Typography",title:"Label",description:"Renders an accessible label to provide explanatory and/or informative text for user interface components.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=641%3A11869",pagination_prev:"web/ui/heading",pagination_next:"web/ui/text"},sidebar:"docs",previous:{title:"Heading",permalink:"/web/ui/heading"},next:{title:"Text",permalink:"/web/ui/text"}},c=[{value:"Customization",id:"customization",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Label } from '@abyss/web/ui/Label';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Label',\n  inputs: [\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'id',\n      type: 'string',\n    },\n    {\n      prop: 'color',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'fontWeight',\n      type: 'select',\n      options: [\n        { label: '$lighter', value: '$lighter' },\n        { label: '$light', value: '$light' },\n        { label: '$normal', value: '$normal' },\n        { label: '$bold', value: '$bold' },\n      ],\n    },\n  ],\n}\n\n<Label size=\"$xl\">First Name</Label>\n")),(0,r.kt)("h2",{id:"customization"},"Customization"),(0,r.kt)("p",null,"Use Label component to display an accessible label with theme styles. Control Label styles with props."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("b",null,"Size:")," The `size` prop takes in the standard sizes ($xs - $xl), px, rem and em's."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("b",null,"Weight:")," The `fontWeight` prop takes in bold, soft, 600, 700, 800, etc."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("b",null,"Color:")," The `color` prop takes HTML, style and hexidecimal colors.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<>\n  <Label size="sm" id="first name">\n    Small label\n  </Label>\n  <Label size="md">Medium label</Label>\n  <Label size="lg">Large label</Label>\n  <Label fontWeight="soft">Semibold</Label>\n  <Label>Bold</Label>\n  <Label color="black">HTML color</Label>\n  <Label color="$primary1">Primary color</Label>\n  <Label color="#196ECF">Hexidecimal color</Label>\n</>\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Label}\n  rows={[\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the label',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'Set the text of the label',\n    },\n    {\n      name: 'fontWeight',\n      type: 'string',\n      description: 'Set the text weight of the label',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the label',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description: 'Default sizes of the label',\n    },\n    {\n      name: 'id',\n      type: 'string',\n      description: 'Creates an ID for the label',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Label}\n  rows={[\n    {\n      name: 'label-root',\n      description: 'Label root element',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("p",null,"Using this component will automatically get the correct labelling using ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"aria-labelledby"),". Text selection is prevented when double clicking label, because ",(0,r.kt)("inlineCode",{parentName:"p"},"user-selection")," is set to none on default.")))}g.isMDXComponent=!0},93299:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"lagoon-provider",category:"Providers",title:"LagoonProvider",description:"Used to provide Lagoon project table data to the application.",pagination_prev:"web/ui/form-provider",pagination_next:"web/ui/overlay-provider"},d=void 0,p={unversionedId:"web/ui/lagoon-provider",id:"web/ui/lagoon-provider",isDocsHomePage:!1,title:"LagoonProvider",description:"Used to provide Lagoon project table data to the application.",source:"@site/docs/web/ui/LagoonProvider.md",sourceDirName:"web/ui",slug:"/web/ui/lagoon-provider",permalink:"/web/ui/lagoon-provider",tags:[],version:"current",frontMatter:{id:"lagoon-provider",category:"Providers",title:"LagoonProvider",description:"Used to provide Lagoon project table data to the application.",pagination_prev:"web/ui/form-provider",pagination_next:"web/ui/overlay-provider"},sidebar:"docs",previous:{title:"FormProvider",permalink:"/web/ui/form-provider"},next:{title:"OverlayProvider",permalink:"/web/ui/overlay-provider"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Return all project table data",id:"return-all-project-table-data",children:[],level:2},{value:"Return data for specified table path",id:"return-data-for-specified-table-path",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { LagoonProvider } from '@abyss/web/ui/LagoonProvider';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Applications must be wrapped in the ",(0,r.kt)("inlineCode",{parentName:"p"},"LagoonProvider")," in order to access the Lagoon project data. Through usage of the ",(0,r.kt)("inlineCode",{parentName:"p"},"useLagoon")," hook you can retrieve all table data or pass an optional agrument with the desired table path."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<LagoonProvider app="abyss" env="dev">\n  <AppRoot />\n</LagoonProvider>\n')),(0,r.kt)("h2",{id:"return-all-project-table-data"},"Return all project table data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const tableFunctions = useLagoon();\n  const allData = Object.keys(tableFunctions).map((key) => {\n    return { [key]: tableFunctions[key]() };\n  });\n\n  const obj = Object.assign({}, ...allData);\n\n  return (\n    <CodeHighlighter code={JSON.stringify(obj, null, 2)} language="json" />\n  );\n};\n')),(0,r.kt)("h2",{id:"return-data-for-specified-table-path"},"Return data for specified table path"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const tablePath = 'lagoonprovider-docs-two';\n  const tableFunction = useLagoon(tablePath);\n  const data = { [tablePath]: tableFunction() };\n\n  return (\n    <CodeHighlighter code={JSON.stringify(data, null, 2)} language=\"json\" />\n  );\n};\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={LagoonProvider}\n  rows={[\n    {\n      name: 'app',\n      type: 'string',\n      description: 'Name of the Lagoon project',\n    },\n    {\n      name: 'env',\n      type: \"'dev' | 'test' | 'stage' | 'prod'\",\n      description:\n        'The environment variable for the desired Lagoon project environment',\n    },\n    {\n      name: 'hostEnv',\n      type: \"'nonprod' | 'prod'\",\n      default: 'prod',\n      description: 'The environment variable for the desired host environment',\n    },\n    {\n      name: 'user',\n      type: 'object',\n      description: 'Optional data used for user targeting',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},5091:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"layout",category:"Layout",title:"Layout",description:"Used to layout UI elements horizontally or vertically",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A26376",pagination_prev:"web/ui/grid",pagination_next:"web/ui/media-query"},d=void 0,p={unversionedId:"web/ui/layout",id:"web/ui/layout",isDocsHomePage:!1,title:"Layout",description:"Used to layout UI elements horizontally or vertically",source:"@site/docs/web/ui/Layout.md",sourceDirName:"web/ui",slug:"/web/ui/layout",permalink:"/web/ui/layout",tags:[],version:"current",frontMatter:{id:"layout",category:"Layout",title:"Layout",description:"Used to layout UI elements horizontally or vertically",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A26376",pagination_prev:"web/ui/grid",pagination_next:"web/ui/media-query"},sidebar:"docs",previous:{title:"Grid",permalink:"/web/ui/grid"},next:{title:"MediaQuery",permalink:"/web/ui/media-query"}},c=[{value:"Layout.Group",id:"layoutgroup",children:[],level:2},{value:"Layout.Stack",id:"layoutstack",children:[],level:2},{value:"Combine Layout.Group and Layout.Stack",id:"combine-layoutgroup-and-layoutstack",children:[],level:2},{value:"Layout.Group and Layout.Stack Props",id:"layoutgroup-and-layoutstack-props",children:[{value:"Space",id:"space",children:[],level:3},{value:"AlignLayout",id:"alignlayout",children:[],level:3},{value:"AlignItems",id:"alignitems",children:[],level:3},{value:"Grow",id:"grow",children:[],level:3}],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Layout } from '@abyss/web/ui/Layout';\n")),(0,r.kt)("h2",{id:"layoutgroup"},"Layout.Group"),(0,r.kt)("p",null,"Used to align elements in a row."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Layout.Group',\n  inputs: [\n    {\n      prop: 'space',\n      type: 'number',\n    },\n    {\n      prop: 'alignLayout',\n      type: 'select',\n      options: [\n        { label: 'left', value: 'left' },\n        { label: 'center', value: 'center' },\n        { label: 'right', value: 'right' },\n      ],\n    },\n    {\n      prop: 'alignItems',\n      type: 'select',\n      options: [\n        { label: 'top', value: 'top' },\n        { label: 'center', value: 'center' },\n        { label: 'bottom', value: 'bottom' },\n      ],\n    },\n    {\n      prop: 'grow',\n      type: 'boolean',\n    },\n  ],\n}\n\n<Layout.Group>\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Group 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Group 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Group 3\n    </div>\n</Layout.Group>\n")),(0,r.kt)("h2",{id:"layoutstack"},"Layout.Stack"),(0,r.kt)("p",null,"Used to align elements in a column."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Layout.Stack',\n  inputs: [\n    {\n      prop: 'space',\n      type: 'number',\n    },\n    {\n      prop: 'alignLayout',\n      type: 'select',\n      options: [\n        { label: 'left', value: 'left' },\n        { label: 'center', value: 'center' },\n        { label: 'right', value: 'right' },\n      ],\n    },\n    {\n      prop: 'alignItems',\n      type: 'select',\n      options: [\n        { label: 'left', value: 'left' },\n        { label: 'center', value: 'center' },\n        { label: 'right', value: 'right' },\n      ],\n    },\n    {\n      prop: 'grow',\n      type: 'boolean',\n    },\n  ],\n}\n\n<Layout.Stack>\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Stack Sandbox 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stack Sandbox 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Stack Sandbox 3\n    </div>\n</Layout.Stack>\n")),(0,r.kt)("h2",{id:"combine-layoutgroup-and-layoutstack"},"Combine Layout.Group and Layout.Stack"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Stack")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Group")," together to make simple sets of rows and columns"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <h3>Stack</h3>\n  <Layout.Stack>\n    <Layout.Group>\n      <Button>Group 1</Button>\n      <Button>Group 1</Button>\n      <Button>Group 1</Button>\n    </Layout.Group>\n    <Layout.Group>\n      <Button>Group 2</Button>\n      <Button>Group 2</Button>\n      <Button>Group 2</Button>\n    </Layout.Group>\n  </Layout.Stack>\n</React.Fragment>\n")),(0,r.kt)("h2",{id:"layoutgroup-and-layoutstack-props"},"Layout.Group and Layout.Stack Props"),(0,r.kt)("h3",{id:"space"},"Space"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"space")," property to set the spacing for a ",(0,r.kt)("inlineCode",{parentName:"p"},"Group")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Stack"),". The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"8"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Grid>\n  <Grid.Col span="100%">\n    <h3>Group</h3>\n    <Layout.Group>\n      <Button>Group 1</Button>\n      <Button>Group 2</Button>\n      <Button>Group 3</Button>\n    </Layout.Group>\n  </Grid.Col>\n  <Grid.Col span="100%">\n    <h3>Group - 20px space</h3>\n    <Layout.Group space={20}>\n      <Button>Group 1</Button>\n      <Button>Group 2</Button>\n      <Button>Group 3</Button>\n    </Layout.Group>\n  </Grid.Col>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Grid>\n  <Grid.Col>\n    <h3>Stack</h3>\n    <Layout.Stack>\n      <Button>Stack 1</Button>\n      <Button>Stack 2</Button>\n      <Button>Stack 3</Button>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <h3>Stack - 20px space</h3>\n    <Layout.Stack space={20}>\n      <Button>Stack 1</Button>\n      <Button>Stack 2</Button>\n      <Button>Stack 3</Button>\n    </Layout.Stack>\n  </Grid.Col>\n</Grid>\n")),(0,r.kt)("h3",{id:"alignlayout"},"AlignLayout"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"alignLayout")," property to indicate the horizontal alignment of the items in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Group")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Stack"),". For a Group, the possible options are ",(0,r.kt)("inlineCode",{parentName:"p"},"top"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"center"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"bottom"),". For a Stack, the possible options are ",(0,r.kt)("inlineCode",{parentName:"p"},"left"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"center"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"right"),". The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"center")," in both cases."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <h3>Group - top align - Default</h3>\n  <Layout.Group>\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Group Top 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Group Top 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Group Top 3\n    </div>\n  </Layout.Group>\n  <h3>Group - center align</h3>\n  <Layout.Group alignLayout=\"center\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Group Default\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Group Default\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Group Default\n    </div>\n  </Layout.Group>\n  <h3>Group - bottom align</h3>\n  <Layout.Group alignLayout=\"right\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Group Bottom 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Group Bottom 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Group Bottom 3\n    </div>\n  </Layout.Group>\n</React.Fragment>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <h3>Stack - left align</h3>\n  <Layout.Stack alignLayout=\"left\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Stack Left 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stack Left 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Stack Left 3\n    </div>\n  </Layout.Stack>\n  <h3>Stack - center align - Default</h3>\n  <Layout.Stack alignLayout=\"center\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Stack Default\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stack Default\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Stack Default\n    </div>\n  </Layout.Stack>\n  <h3>Stack - right align</h3>\n  <Layout.Stack alignLayout=\"right\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Stack Right 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stack Right 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Stack Right 3\n    </div>\n  </Layout.Stack>\n</React.Fragment>\n")),(0,r.kt)("h3",{id:"alignitems"},"AlignItems"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"alignItems")," property to indicate the alignment of the items in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Group")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Stack"),". For a ",(0,r.kt)("inlineCode",{parentName:"p"},"Group")," the vertical alignment is adjusted, whereas for a ",(0,r.kt)("inlineCode",{parentName:"p"},"Stack")," the horizontal alignment is adjusted. For a Group, the possible options are ",(0,r.kt)("inlineCode",{parentName:"p"},"top"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"center"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"bottom"),". For a Stack, the possible options are ",(0,r.kt)("inlineCode",{parentName:"p"},"left"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"center"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"right"),". The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"center")," in both cases."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <h3>Group - top align</h3>\n  <Layout.Group alignItems=\"top\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Group Top 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Group Top 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Group Top 3\n    </div>\n  </Layout.Group>\n  <h3>Group - center align - Default</h3>\n  <Layout.Group>\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Group Default\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Group Default\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Group Default\n    </div>\n  </Layout.Group>\n  <h3>Group - bottom align</h3>\n  <Layout.Group alignItems=\"bottom\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Group Bottom 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Group Bottom 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Group Bottom 3\n    </div>\n  </Layout.Group>\n</React.Fragment>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <h3>Stack - left align</h3>\n  <Layout.Stack alignItems=\"left\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Stack Left 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stack Left 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Stack Left 3\n    </div>\n  </Layout.Stack>\n  <h3>Stack - center align - Default</h3>\n  <Layout.Stack alignItems=\"center\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Stack Default\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stack Default\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Stack Default\n    </div>\n  </Layout.Stack>\n  <h3>Stack - right align</h3>\n  <Layout.Stack alignItems=\"right\">\n    <div style={{ border: '1px solid black', padding: '15px', margin: '4px' }}>\n      Stack Right 1\n    </div>\n    <div style={{ border: '1px solid black', padding: '10px', margin: '4px' }}>\n      Stack Right 2\n    </div>\n    <div style={{ border: '1px solid black', padding: '5px', margin: '4px' }}>\n      Stack Right 3\n    </div>\n  </Layout.Stack>\n</React.Fragment>\n")),(0,r.kt)("h3",{id:"grow"},"Grow"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"grow")," property indicate whether the grouped components should be stretched to fill the space horizontally. The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <h3>Group - default</h3>\n  <Layout.Group>\n    <Button>Item 1</Button>\n    <Button>Item 2</Button>\n    <Button>Item 3</Button>\n  </Layout.Group>\n  <h3>Group - grow</h3>\n  <Layout.Group grow>\n    <Button css={{ width: '100%' }}>Item 1</Button>\n    <Button css={{ width: '100%' }}>Item 2</Button>\n    <Button css={{ width: '100%' }}>Item 3</Button>\n  </Layout.Group>\n</React.Fragment>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <h3>Stack - default</h3>\n  <Layout.Stack>\n    <Button>Item 1</Button>\n    <Button>Item 2</Button>\n    <Button>Item 3</Button>\n  </Layout.Stack>\n  <h3>Stack - grow</h3>\n  <Layout.Stack grow>\n    <Button css={{ width: '100%' }}>Item 1</Button>\n    <Button css={{ width: '100%' }}>Item 2</Button>\n    <Button css={{ width: '100%' }}>Item 3</Button>\n  </Layout.Stack>\n</React.Fragment>\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Layout.Group}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element the group wraps',\n    },\n    {\n      name: 'width',\n      type: 'number | string',\n      description: 'Set the width of the group',\n    },\n    {\n      name: 'alignItems',\n      type: 'top | center | bottom',\n      description: 'Adjust the vertical alignment of items in the group',\n    },\n    {\n      name: 'alignLayout',\n      type: 'left | center | right',\n      description: 'Set the position of the group',\n    },\n    {\n      name: 'grow',\n      type: 'boolean',\n      description: 'Flag to stretch grouped components to fit evenly or not',\n    },\n    {\n      name: 'space',\n      type: 'number',\n      description: 'Distance between elements in the Group component',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Layout.Stack}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element the stack wraps',\n    },\n    {\n      name: 'width',\n      type: 'number | string',\n      description: 'Set the width of the stack',\n    },\n    {\n      name: 'alignItems',\n      type: 'left | center | right',\n      description: 'Adjust the horizontal alignment of items in the stack',\n    },\n    {\n      name: 'alignLayout',\n      type: 'left | center | right',\n      description: 'Set the position of the stack',\n    },\n    {\n      name: 'grow',\n      type: 'boolean',\n      description: 'Flag to stretch grouped components to fit evenly or not',\n    },\n    {\n      name: 'space',\n      type: 'number',\n      description: 'Distance between elements in the Group component',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Layout.MediaQuery}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element the group wraps',\n    },\n    {\n      name: 'smallerThan',\n      type: 'number | string',\n      description:\n        'Pixel amount the window width must be smaller than in order for the children to render',\n    },\n    {\n      name: 'largerThan',\n      type: 'number | string',\n      description:\n        'Pixel amount the window width must be greater than or equal to in order for the children to render',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Layout.Group}\n  rows={[\n    {\n      name: 'layout-group',\n      description: 'Group root element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Layout.Stack}\n  rows={[\n    {\n      name: 'layout-stack',\n      description: 'Stack root element',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},18452:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"link",category:"Navigation",title:"Link",description:"Used to hyperlink text and other components.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3578%3A23321",pagination_prev:"web/ui/button",pagination_next:"web/ui/nav-menu"},s=void 0,d={unversionedId:"web/ui/link",id:"web/ui/link",isDocsHomePage:!1,title:"Link",description:"Used to hyperlink text and other components.",source:"@site/docs/web/ui/Link.md",sourceDirName:"web/ui",slug:"/web/ui/link",permalink:"/web/ui/link",tags:[],version:"current",frontMatter:{id:"link",category:"Navigation",title:"Link",description:"Used to hyperlink text and other components.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3578%3A23321",pagination_prev:"web/ui/button",pagination_next:"web/ui/nav-menu"},sidebar:"docs",previous:{title:"Button",permalink:"/web/ui/button"},next:{title:"NavMenu",permalink:"/web/ui/nav-menu"}},p=[{value:"Text",id:"text",children:[],level:2},{value:"Href",id:"href",children:[],level:2},{value:"isDisabled",id:"isdisabled",children:[],level:2},{value:"Variant",id:"variant",children:[],level:2},{value:"Color",id:"color",children:[],level:2},{value:"Font Weight",id:"font-weight",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Inserting Elements",id:"inserting-elements",children:[],level:2},{value:"Open Link in a New Tab or Window",id:"open-link-in-a-new-tab-or-window",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Link } from '@abyss/web/ui/Link';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Link',\n  inputs: [\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'color',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'fontWeight',\n      type: 'select',\n      options: [\n        { label: '$lighter', value: '$lighter' },\n        { label: '$light', value: '$light' },\n        { label: '$normal', value: '$normal' },\n        { label: '$bold', value: '$bold' },\n      ],\n    },\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'underline', value: 'underline' },\n        { label: 'native', value: 'native' },\n      ],\n    },\n    {\n      prop: 'href',\n      type: 'string',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n  ]\n}\n\n<Link>Link Sandbox</Link>\n")),(0,i.kt)("h2",{id:"text"},"Text"),(0,i.kt)("p",null,"Change the children of the link to set the text."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Link href="/web/ui/link">Insert link text here</Link>\n')),(0,i.kt)("h2",{id:"href"},"Href"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"href")," prop to set the link to a separate page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Link href="https://www.google.com">Regular Link</Link>\n  <Link href="/web/ui/link">Based On Root Path</Link>\n</Layout.Stack>\n')),(0,i.kt)("h2",{id:"isdisabled"},"isDisabled"),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," or no ",(0,i.kt)("inlineCode",{parentName:"p"},"href")," prop is passed, the link becomes a native ",(0,i.kt)("inlineCode",{parentName:"p"},"<button>")," element."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Layout.Stack alignItems=\"left\">\n  <Link onClick={() => console.log('onClick triggered!')}>Enabled Link</Link>\n  <Link isDisabled>Disabled Link</Link>\n</Layout.Stack>\n")),(0,i.kt)("h2",{id:"variant"},"Variant"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," prop to change the styling of the Link. The ",(0,i.kt)("inlineCode",{parentName:"p"},"variant")," property defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"'underline'"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"'native'")," variant is better suited for links with long text or having multiple lines."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Link href="https://www.google.com" variant="underline">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum quis\n    eros vel nibh suscipit rhoncus porta in nulla. Mauris nisl sem, semper sit\n    amet faucibus id, lacinia cursus odio.\n  </Link>\n  <Link href="https://www.google.com" variant="native">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum quis\n    eros vel nibh suscipit rhoncus porta in nulla. Mauris nisl sem, semper sit\n    amet faucibus id, lacinia cursus odio.\n  </Link>\n</Layout.Stack>\n')),(0,i.kt)("h2",{id:"color"},"Color"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"color")," prop to set the color of the link. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"interactive1"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Link color="green" colorHover="darkGreen" href="/web/ui/link">\n    Regular color\n  </Link>\n  <Link color="$primary1" colorHover="$interactive1" href="/web/ui/link">\n    Primary color\n  </Link>\n  <Link color="#FF0000" colorHover="#AA0000" href="/web/ui/link">\n    Hexadecimal color\n  </Link>\n</Layout.Stack>\n')),(0,i.kt)("h2",{id:"font-weight"},"Font Weight"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"fontWeight")," prop to set the text weight of the link. Possible options are ",(0,i.kt)("inlineCode",{parentName:"p"},"soft")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"bold"),". The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"soft"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Link href="/web/ui/link">soft weight - default</Link>\n  <Link fontWeight="bold" href="/web/ui/link">\n    bold weight\n  </Link>\n</Layout.Stack>\n')),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," prop to set the size of the link. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"md"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Link size="sm" href="/web/ui/link">\n    Small / 16px\n  </Link>\n  <Link href="/web/ui/link">Medium / 20px</Link>\n  <Link size="lg" href="/web/ui/link">\n    Large / 24px\n  </Link>\n  <Link size="30px" href="/web/ui/link">\n    Custom / 30px\n  </Link>\n</Layout.Stack>\n')),(0,i.kt)("h2",{id:"inserting-elements"},"Inserting Elements"),(0,i.kt)("p",null,"Insert elements into the Link component using the ",(0,i.kt)("inlineCode",{parentName:"p"},"before")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"after")," props."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Link before={<IconMaterial icon="chevron_left" />} href="/web/ui/link">\n    Before Link\n  </Link>\n  <Link after={<IconMaterial icon="chevron_right" />} href="/web/ui/link">\n    After Link\n  </Link>\n</Layout.Stack>\n')),(0,i.kt)("h2",{id:"open-link-in-a-new-tab-or-window"},"Open Link in a New Tab or Window"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"openNewWindow")," prop to specify whether links open in a new tab or window. By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"openNewWindow")," is false for relative links, and true for absolute links."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Label>Relative Link</Label>\n  <Link href="/web/ui/link">Relative - Same Window/Tab</Link>\n  <Link href="/web/ui/link" openNewWindow>\n    Relative - New Window/Tab\n  </Link>\n  <Label>Absolute Link</Label>\n  <Link href="https://www.google.com" openNewWindow={false}>\n    Absolute - Same Window/Tab\n  </Link>\n  <Link href="https://www.google.com">Absolute - New Window/Tab</Link>\n</Layout.Stack>\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Link}\n  rows={[\n    {\n      name: 'before',\n      type: 'ReactNode',\n      description: 'Insert element into link component before children',\n    },\n    {\n      name: 'after',\n      type: 'ReactNode',\n      description: 'Insert element into link component after children',\n    },\n    {\n      name: 'href',\n      type: 'string',\n      description: 'Set the URL of the link',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the link',\n    },\n    {\n      name: 'colorHover',\n      type: 'string',\n      description: 'Set the color of the link when it is hovered',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'Set the text of the link',\n    },\n    {\n      name: 'fontWeight',\n      type: 'string',\n      description: 'Flag to set font weight of link',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the link',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description: 'Default sizes of the link',\n    },\n    {\n      name: 'variant',\n      type: \"'underline' | 'native' | 'custom'\",\n      description:\n        'Indicate whether the items contained in link should be underlined',\n    },\n    {\n      name: 'hideIcon',\n      type: 'boolean',\n      description: 'Flag to hide icon',\n    },\n    {\n      name: 'openNewWindow',\n      type: 'boolean',\n      description: 'Flag to set link to open in a new window',\n    },\n    {\n      name: 'onClick',\n      type: 'function',\n      description: 'Used to trigger a custom function when the link is clicked',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to enable/disable the link',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Link}\n  rows={[\n    {\n      name: 'link-root',\n      description: 'Link root element',\n    },\n    {\n      name: 'link-icon',\n      description: 'Link icon element',\n    },\n    {\n      name: 'link-icon-wrapper',\n      description: 'Link icon wrapper element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"A link widget provides an interactive reference to a resource. The target resource can be either external or local, i.e., either outside or within the current page or application."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#link",mdxType:"ExitLink"},"Link WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Link href="https://www.google.com">Regular Link</Link>\n  <Link href="/web/ui/link">Based On Root Path</Link>\n</Layout.Stack>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Enter',\n      description: 'Executes the link and moves focus to the link target.',\n    },\n  ]}\n/>\n")),(0,i.kt)("p",null,'The accessible name for the link must include the visible link text in its entirety. For example, if the visible link text is "Health Plans\u201d the accessible name must include "Health Plans\u201d. Preferably, the visible link text should precede any supplementary text in the accessible name.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Link href="/web/ui/link">Health Plans</Link>\n')),(0,i.kt)("br",null),"Keyboard operation: a keyboard only user must be able to tab to the link, and activate it with the enter key."))}h.isMDXComponent=!0},93822:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"loading-overlay",category:"Overlay",title:"LoadingOverlay",description:"Focuses the user's attention on one task or piece of information",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=641%3A11885",pagination_prev:"web/ui/fullscreen",pagination_next:"web/ui/loading-spinner"},d=void 0,p={unversionedId:"web/ui/loading-overlay",id:"web/ui/loading-overlay",isDocsHomePage:!1,title:"LoadingOverlay",description:"Focuses the user's attention on one task or piece of information",source:"@site/docs/web/ui/LoadingOverlay.md",sourceDirName:"web/ui",slug:"/web/ui/loading-overlay",permalink:"/web/ui/loading-overlay",tags:[],version:"current",frontMatter:{id:"loading-overlay",category:"Overlay",title:"LoadingOverlay",description:"Focuses the user's attention on one task or piece of information",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=641%3A11885",pagination_prev:"web/ui/fullscreen",pagination_next:"web/ui/loading-spinner"},sidebar:"docs",previous:{title:"Fullscreen",permalink:"/web/ui/fullscreen"},next:{title:"LoadingSpinner",permalink:"/web/ui/loading-spinner"}},c=[{value:"Usage",id:"usage",children:[{value:"useOverlay",id:"useoverlay",children:[],level:3},{value:"useState",id:"usestate",children:[],level:3}],level:2},{value:"Loading Title",id:"loading-title",children:[],level:2},{value:"Loading Message",id:"loading-message",children:[],level:2},{value:"Loading Icon",id:"loading-icon",children:[],level:2},{value:"Status Title",id:"status-title",children:[],level:2},{value:"Status Message",id:"status-message",children:[],level:2},{value:"Status Icon",id:"status-icon",children:[],level:2},{value:"isDismissable",id:"isdismissable",children:[],level:2},{value:"isOpen",id:"isopen",children:[],level:2},{value:"isLoading",id:"isloading",children:[],level:2},{value:"onClose",id:"onclose",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { LoadingOverlay } from '@abyss/web/ui/LoadingOverlay';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'LoadingOverlay',\n  inputs: [\n    {\n      prop: 'loadingTitle',\n      type: 'string',\n    },\n    {\n      prop: 'loadingMessage',\n      type: 'string',\n    },\n    {\n      prop: 'statusTitle',\n      type: 'string',\n    },\n    {\n      prop: 'statusMessage',\n      type: 'string',\n    },\n    {\n      prop: 'statusIcon',\n      type: 'select',\n      options: [\n        { label: 'success', value: 'success' },\n        { label: 'error', value: 'error' },\n        { label: 'warning', value: 'warning' },\n        { label: 'info', value: 'info' },\n      ],\n    },\n    {\n      prop: 'width',\n      type: 'size',\n    },\n    { prop: 'hideIcon', type: 'boolean' },\n    {\n      prop: 'isDismissable',\n      type: 'boolean',\n    },\n  ],\n}\n\n() => {\n  const [isLoading, setLoading] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { setCountdownTime } = useCountdown({\n    onCompleted: () => {\n      setLoading(false);\n      setIsOpen(true);\n    }\n  });\n\n  const triggerLoading = () => {\n    setLoading(true);\n    setCountdownTime(3 * 1000);\n  };\n\n  const handleClose = () => {\n    setIsOpen(false)\n  };\n\n  return (\n    <LoadingOverlay\n      loadingTitle=\"Please Wait\"\n      loadingMessage=\"Retrieving Information.\"\n      ariaLoadingLabel=\"Example loading aria label\"\n      statusTitle=\"Status update\"\n      statusMessage=\"Sample message...\"\n      isLoading={isLoading}\n      isOpen={isOpen}\n      isDismissable\n      onClose={handleClose}\n    >\n      <Card css={{\n        'abyss-card-root': {\n          height: 300,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: '$gray4',\n        },\n      }}>\n        <Button onClick={triggerLoading}>\n          Open LoadingOverlay\n        </Button>\n      </Card>\n    </LoadingOverlay>\n  );\n}\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"There are two main states to LoadingOverlay, the loading state and the loaded state:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In the loading state (when ",(0,r.kt)("inlineCode",{parentName:"li"},"isLoading")," is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),"), a loading spinner will appear on the left, and the ",(0,r.kt)("inlineCode",{parentName:"li"},"loadingTitle")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"loadingMessage")," props will be used as the text next to it."),(0,r.kt)("li",{parentName:"ul"},"Once loading has completed (when ",(0,r.kt)("inlineCode",{parentName:"li"},"isLoading")," is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),"), the display changes: the ",(0,r.kt)("inlineCode",{parentName:"li"},"statusIcon")," prop is used to create an icon on the left to reflect the application state after the load (ex. an error icon if something went wrong, or a success icon if data was submitted), and the ",(0,r.kt)("inlineCode",{parentName:"li"},"statusTitle")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"statusMessage")," props will be used as the text next to it. In this state, the overlay can be closed when the ",(0,r.kt)("inlineCode",{parentName:"li"},"isDismissable")," prop is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,r.kt)("h3",{id:"useoverlay"},"useOverlay"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("a",{parentName:"p",href:"/web/hooks/use-overlay"},"useOverlay")," hook allows you to open the overlay and pass data into it. See the ",(0,r.kt)("a",{parentName:"p",href:"/web/hooks/use-overlay"},"hook documentation")," for more information on its usage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const loadingOverlay = useOverlay('useOverlay-loading');\n  const state = loadingOverlay.getState();\n\n  return (\n    <React.Fragment>\n      <Layout.Group alignItems=\"center\" grow>\n        <Button\n          onClick={() =>\n            loadingOverlay.open({\n              isLoading: true,\n              loadingTitle: 'Example Loading Title',\n              ariaLoadingLabel: 'Example loading aria label',\n              loadingMessage: 'Example loading message',\n            })\n          }\n        >\n          Open Overlay - Loading\n        </Button>\n\n        <Button\n          onClick={() =>\n            loadingOverlay.open({\n              isLoading: false,\n              statusTitle: 'Example Status Title',\n              statusMessage: 'Example status message',\n              statusIcon: 'info',\n            })\n          }\n        >\n          Open Overlay - Not Loading\n        </Button>\n\n        <Button onClick={() => loadingOverlay.close()}>Close Overlay</Button>\n      </Layout.Group>\n\n      <pre style={{ marginTop: 20 }}>\n        Overlay State: {JSON.stringify(state, null, 2)}\n      </pre>\n\n      <br />\n\n      <LoadingOverlay width={400} model=\"useOverlay-loading\">\n        <Card\n          css={{\n            'abyss-card-root': {\n              height: 100,\n              display: 'flex',\n              backgroundColor: '$gray4',\n            },\n          }}\n        >\n          <p>Loading Title: {state.data && state.data.loadingTitle}</p>\n        </Card>\n        <Card\n          css={{\n            'abyss-card-root': {\n              height: 100,\n              display: 'flex',\n              backgroundColor: '$gray4',\n            },\n          }}\n        >\n          <p>Status Title: {state.data && state.data.statusTitle}</p>\n        </Card>\n      </LoadingOverlay>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h3",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook to set the open and loading states of the loading overlay."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [isLoading, setLoading] = useState(false);\n\n  const { setCountdownTime, formattedTime } = useCountdown({\n    onCompleted: () => {\n      setLoading(false);\n    },\n  });\n\n  const triggerLoading = () => {\n    setLoading(true);\n    setCountdownTime(3 * 1000);\n  };\n\n  return (\n    <LoadingOverlay\n      loadingTitle=\"This is the loadingTitle prop.\"\n      loadingMessage={`This overlay will close itself in ${formattedTime}`}\n      statusTitle=\"This is the statusTitle prop.\"\n      statusMessage=\"This is the statusMessage prop.\"\n      ariaLoadingLabel=\"This is the ariaLoadingLabel prop.\"\n      isLoading={isLoading}\n      isDismissable\n    >\n      <Card\n        css={{\n          'abyss-card-root': {\n            height: 250,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: '$gray4',\n          },\n        }}\n      >\n        <Button onClick={triggerLoading}>Open LoadingOverlay</Button>\n      </Card>\n    </LoadingOverlay>\n  );\n};\n")),(0,r.kt)("h2",{id:"loading-title"},"Loading Title"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"loadingTitle")," prop to set the title of the loading overlay when it is in the loading state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<LoadingOverlay loadingTitle=\"Custom Title Here\" isLoading>\n  <Card\n    css={{\n      'abyss-card-root': {\n        height: 250,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '$gray4',\n      },\n    }}\n  />\n</LoadingOverlay>\n")),(0,r.kt)("h2",{id:"loading-message"},"Loading Message"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"loadingMessage")," prop to set the description of the loading overlay when it is in the loading state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <LoadingOverlay\n      loadingTitle=\"Loading...\"\n      loadingMessage=\"Custom Description Here\"\n      ariaLoadingLabel=\"Custom loading label\"\n      isLoading\n    >\n      <Card\n        css={{\n          'abyss-card-root': {\n            height: 250,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: '$gray4',\n          },\n        }}\n      />\n    </LoadingOverlay>\n  );\n};\n")),(0,r.kt)("h2",{id:"loading-icon"},"Loading Icon"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"loadingIcon")," prop to set an icon to be displayed inside of the loading spinner."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  return (\n    <LoadingOverlay\n      loadingTitle="Loading Icon Example"\n      loadingMessage="The icon appears inside of the loading spinner"\n      ariaLoadingLabel="Loading aria label"\n      isLoading\n      loadingIcon={\n        <IconMaterial color="$primary1" icon="upload_file" size="35px" />\n      }\n    >\n      <Card\n        css={{\n          \'abyss-card-root\': {\n            height: 250,\n            display: \'flex\',\n            justifyContent: \'center\',\n            alignItems: \'center\',\n            backgroundColor: \'$gray4\',\n          },\n        }}\n      />\n    </LoadingOverlay>\n  );\n};\n')),(0,r.kt)("h2",{id:"status-title"},"Status Title"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"statusTitle")," prop to set the title of the loading overlay when loading has completed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<LoadingOverlay isOpen statusTitle=\"This is the statusTitle prop.\">\n  <Card\n    css={{\n      'abyss-card-root': {\n        height: 250,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '$gray4',\n      },\n    }}\n  />\n</LoadingOverlay>\n")),(0,r.kt)("h2",{id:"status-message"},"Status Message"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"statusMessage")," prop to set the description of the loading overlay when loading has completed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<LoadingOverlay\n  isOpen\n  statusTitle=\"Loading Complete...\"\n  statusMessage=\"This is the statusMessage prop.\"\n>\n  <Card\n    css={{\n      'abyss-card-root': {\n        height: 250,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: '$gray4',\n      },\n    }}\n  />\n</LoadingOverlay>\n")),(0,r.kt)("h2",{id:"status-icon"},"Status Icon"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"statusIcon")," prop to set the icon that will be displayed when loading has completed. Possible options are ",(0,r.kt)("inlineCode",{parentName:"p"},"success"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"error"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"warning"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"info"),". The default is ",(0,r.kt)("inlineCode",{parentName:"p"},"info"),". You can hide the icon with the ",(0,r.kt)("inlineCode",{parentName:"p"},"hideIcon")," prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [isOpen, setIsOpen] = useState();\n  const [statusIcon, setStatusIcon] = useState();\n\n  const handleClick = (statusIcon) => {\n    setStatusIcon(statusIcon);\n    setIsOpen(true);\n  };\n\n  return (\n    <LoadingOverlay\n      isOpen={isOpen}\n      statusIcon={statusIcon}\n      statusTitle=\"Status Icon Example\"\n      statusMessage=\"Your message goes here\"\n      isDismissable\n      onClose={() => setIsOpen(false)}\n    >\n      <Card\n        css={{\n          'abyss-card-root': {\n            height: 250,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: '$gray4',\n          },\n        }}\n      >\n        <Layout.Group>\n          <Button onClick={() => handleClick('info')}>Info</Button>\n          <Button onClick={() => handleClick('success')}>Success</Button>\n          <Button onClick={() => handleClick('warning')}>Warning</Button>\n          <Button onClick={() => handleClick('error')}>Error</Button>\n        </Layout.Group>\n      </Card>\n    </LoadingOverlay>\n  );\n};\n")),(0,r.kt)("h2",{id:"isdismissable"},"isDismissable"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"isDismissable")," prop to whether the overlay can be closed after loading is complete. Use this prop with the ",(0,r.kt)("a",{parentName:"p",href:"#usestate"},"useState")," hook if there are situations where the user can take another action after dismissing the overlay. The default is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),". You may want to set it to ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," in cases such as when a widget fails to load and cannot be used. The default is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  return (\n    <React.Fragment>\n      <LoadingOverlay\n        statusIcon=\"error\"\n        statusTitle=\"Non-Dismissable Overlay\"\n        statusMessage=\"This error message cannot be dismissed.\"\n        isOpen\n      >\n        <Card\n          css={{\n            'abyss-card-root': {\n              height: 200,\n              backgroundColor: '$gray4',\n            },\n          }}\n        />\n      </LoadingOverlay>\n      <LoadingOverlay\n        statusIcon=\"error\"\n        statusTitle=\"Dismissable Overlay\"\n        statusMessage=\"This error message can be dismissed.\"\n        onClose={() => setIsOpen(false)}\n        isOpen={isOpen}\n        isDismissable\n      >\n        <Card\n          css={{\n            'abyss-card-root': {\n              height: 200,\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              backgroundColor: '$gray4',\n            },\n          }}\n        >\n          <Button onClick={() => setIsOpen(true)}>Reopen Overlay</Button>\n        </Card>\n      </LoadingOverlay>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"isopen"},"isOpen"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"isOpen")," prop to set whether the overlay is open or not. Use this prop with the ",(0,r.kt)("a",{parentName:"p",href:"#usestate"},"useState")," hook to change the overlay between open and closed. The default is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <React.Fragment>\n      <LoadingOverlay statusTitle=\"isOpen set to true\" isOpen>\n        <Card\n          css={{\n            'abyss-card-root': {\n              height: 250,\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              backgroundColor: '$gray4',\n            },\n          }}\n        >\n          <Text>\n            This text will be covered by the overlay when isOpen is set to true.\n          </Text>\n        </Card>\n      </LoadingOverlay>\n      <LoadingOverlay loadingTitle=\"isOpen set to true\">\n        <Card\n          css={{\n            'abyss-card-root': {\n              height: 150,\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              backgroundColor: '$gray4',\n            },\n          }}\n        >\n          <Text>\n            isOpen is set to false, so the overlay will not be displayed\n          </Text>\n        </Card>\n      </LoadingOverlay>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"isloading"},"isLoading"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"isLoading")," prop to set whether the overlay is loading or not. Use this prop with the ",(0,r.kt)("a",{parentName:"p",href:"#usestate"},"useState")," hook to set the loading state based on the status of the rest of your application. The default is ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <React.Fragment>\n      <LoadingOverlay loadingTitle=\"isLoading is set to true\" isLoading>\n        <Card\n          css={{\n            'abyss-card-root': {\n              height: 250,\n              backgroundColor: '$gray4',\n            },\n          }}\n        ></Card>\n      </LoadingOverlay>\n      <LoadingOverlay loadingTitle=\"isOpen set to true\">\n        <Card\n          css={{\n            'abyss-card-root': {\n              height: 150,\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              backgroundColor: '$gray4',\n            },\n          }}\n        >\n          <Text>\n            isLoading is set to false, so the overlay will not be displayed\n          </Text>\n        </Card>\n      </LoadingOverlay>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"onclose"},"onClose"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onClose")," prop to set a function that will be executed when the loading overlay is closed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  const handleClose = () => {\n    setIsOpen(false);\n    console.log('Loading overlay closed!');\n  };\n\n  return (\n    <LoadingOverlay\n      statusTitle=\"onClose Example\"\n      statusMessage=\"A message will be logged to the console when this overlay is closed.\"\n      isLoading={false}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isDismissable\n    >\n      <Card\n        css={{\n          'abyss-card-root': {\n            height: 200,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: '$gray4',\n          },\n        }}\n      >\n        <Button onClick={() => setIsOpen(true)}>Reopen Overlay</Button>\n      </Card>\n    </LoadingOverlay>\n  );\n};\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={LoadingOverlay}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode | function',\n      description:\n        'The contents that the LoadingOverlay will appear over when it is open',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used with useOverlay hook',\n    },\n    {\n      name: 'loadingTitle',\n      type: 'string',\n      description:\n        'Set the title that will display when the overlay is in the loading state ($isLoading is set to true)',\n    },\n    {\n      name: 'loadingMessage',\n      type: 'string',\n      description:\n        'Set the message that will display under the title when the overlay is in the loading state ($isLoading is set to true)',\n    },\n    {\n      name: 'statusTitle',\n      type: 'string',\n      description:\n        'Set the title that will display when loading is complete ($isLoading is set to false)',\n    },\n    {\n      name: 'statusMessage',\n      type: 'string',\n      description:\n        'Set the message that will display under the title when loading is complete ($isLoading is set to false)',\n    },\n    {\n      name: 'ariaLoadingLabel',\n      type: 'string',\n      description:\n        'Accessibility prop to label the loading spinner according to what it is loading',\n    },\n    {\n      name: 'statusIcon',\n      type: \"'info' | 'success' | 'error' | 'warning'\",\n      description:\n        'Set the icon that will be displayed when loading is complete ($isLoading is set to false)',\n    },\n    {\n      name: 'isOpen',\n      type: 'boolean',\n      description: 'Flag to check if the overlay is opened',\n    },\n    {\n      name: 'isLoading',\n      type: 'boolean',\n      description: 'Flag to check if the overlay is loading',\n    },\n    {\n      name: 'onClose',\n      type: 'function',\n      description: 'Callback fired every time the overlay is closed',\n    },\n    {\n      name: 'loadingIcon',\n      type: 'ReactNode',\n      description: 'Icon that will be displayed inside of the loading spinner',\n    },\n    {\n      name: 'width',\n      type: 'string | number',\n      description: 'The width of the loading dialog',\n    },\n    {\n      name: 'isDismissable',\n      type: 'boolean',\n      description: 'Flag to set whether or not the overlay is dismisable',\n    },\n    {\n      name: 'hideIcon',\n      type: 'boolean',\n      description: 'Flag to set whether or not to show the status icon',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={LoadingOverlay}\n  rows={[\n    {\n      name: 'loading-overlay-root',\n      description: 'Root element',\n    },\n    {\n      name: 'loading-overlay-overlay',\n      description: 'Overlay',\n    },\n    {\n      name: 'loading-overlay-dialog',\n      description: 'Dialog',\n    },\n    {\n      name: 'loading-overlay-close-button',\n      description: 'Close button',\n    },\n    {\n      name: 'loading-overlay-close-icon',\n      description: 'Close icon',\n    },\n    {\n      name: 'loading-overlay-loading-body',\n      description: 'Body container when loading',\n    },\n    {\n      name: 'loading-overlay-status-icon-wrapper',\n      description: 'Wrapper for status icon',\n    },\n    {\n      name: 'loading-overlay-loading-content',\n      description: 'Title and message displayed when loading',\n    },\n    {\n      name: 'loading-overlay-loading-title',\n      description: 'Title when loading',\n    },\n    {\n      name: 'loading-overlay-loading-message',\n      description: 'Message when loading',\n    },\n    {\n      name: 'loading-overlay-status-body',\n      description: 'Body container when loaded',\n    },\n    {\n      name: 'loading-overlay-status-content',\n      description: 'Title and message displayed when loaded',\n    },\n    {\n      name: 'loading-overlay-status-title',\n      description: 'Title when loaded',\n    },\n    {\n      name: 'loading-overlay-status-message',\n      description: 'Message when loaded',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isLoading, setLoading] = useState(true);\n\n  const { setCountdownTime, formattedTime } = useCountdown({\n    onCompleted: () => {\n      setLoading(false);\n      setIsOpen(true);\n    },\n  });\n\n  const triggerLoading = () => {\n    setLoading(true);\n    setCountdownTime(3 * 1000);\n  };\n\n  return (\n    <LoadingOverlay\n      loadingTitle=\"This is the loadingTitle prop.\"\n      loadingMessage=\"This is the loadingMessage prop.\"\n      statusTitle=\"This is the statusTitle prop.\"\n      statusMessage=\"This is the statusMessage prop.\"\n      ariaLoadingLabel=\"This is the ariaLoadingLabel prop.\"\n      onClose={() => setIsOpen(false)}\n      isOpen={isOpen}\n      isLoading={isLoading}\n      isDismissable\n    >\n      <Card\n        css={{\n          'abyss-card-root': {\n            height: 250,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: '$gray4',\n          },\n        }}\n      >\n        <Button onClick={triggerLoading}>Open LoadingOverlay</Button>\n      </Card>\n    </LoadingOverlay>\n  );\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to the next interactive element within the dialog.  Once the last interactive element in the dialog is reached, pressing Tab again moves focus to the first interactive element within the dialog.',\n    },\n    {\n      name: 'Shift + Tab',\n      description:\n        'Moves focus to the previous interactive element within the dialog.  Once the first interactive element in the dialog is reached, pressing Shift + Tab again moves focus to the last interactive element within the dialog.',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},41082:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"loading-spinner",category:"Overlay",title:"LoadingSpinner",description:"Infinite loading spinner",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=2398%3A21821",pagination_prev:"web/ui/loading-overlay",pagination_next:"web/ui/modal"},s=void 0,d={unversionedId:"web/ui/loading-spinner",id:"web/ui/loading-spinner",isDocsHomePage:!1,title:"LoadingSpinner",description:"Infinite loading spinner",source:"@site/docs/web/ui/LoadingSpinner.md",sourceDirName:"web/ui",slug:"/web/ui/loading-spinner",permalink:"/web/ui/loading-spinner",tags:[],version:"current",frontMatter:{id:"loading-spinner",category:"Overlay",title:"LoadingSpinner",description:"Infinite loading spinner",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=2398%3A21821",pagination_prev:"web/ui/loading-overlay",pagination_next:"web/ui/modal"},sidebar:"docs",previous:{title:"LoadingOverlay",permalink:"/web/ui/loading-overlay"},next:{title:"Modal",permalink:"/web/ui/modal"}},p=[{value:"Overview",id:"overview",children:[],level:2},{value:"Children",id:"children",children:[],level:2},{value:"Variants",id:"variants",children:[],level:2},{value:"Button",id:"button",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { LoadingSpinner } from '@abyss/web/ui/LoadingSpinner';\n")),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Loading Spinner requires the ",(0,i.kt)("inlineCode",{parentName:"p"},"ariaLoadingLabel")," prop, to describe what is happening while the loading spinner is active. Common labels are 'Submitting Form', 'Downloading Files', 'Content is loading', etc. Be descriptive as possible."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<LoadingSpinner ariaLoadingLabel="Downloading" isLoading={isLoading} />\n')),(0,i.kt)("h2",{id:"children"},"Children"),(0,i.kt)("p",null,"On size ",(0,i.kt)("inlineCode",{parentName:"p"},"$lg"),", the Loading Spinner takes in and displays a child. For branding or icons, you can go to the Brandmark, Icon Material, or Icon Brand page for options."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isLoading, setIsLoading] = useState(true);\n  const toggleLoading = () => {\n    setIsLoading(!isLoading);\n  };\n\n  return (\n    <Layout.Group>\n      <LoadingSpinner\n        size="$lg"\n        isLoading={isLoading}\n        ariaLoadingLabel="Loading page"\n      >\n        <IconMaterial color="$primary1" icon="upload_file" size="35px" />\n      </LoadingSpinner>\n      <Box color="$primary1">\n        <LoadingSpinner\n          size="$lg"\n          variant="light"\n          isLoading={isLoading}\n          ariaLoadingLabel="Downloading files"\n        >\n          <IconMaterial color="$white" icon="upload_file" size="35px" />\n        </LoadingSpinner>\n      </Box>\n    </Layout.Group>\n  );\n};\n')),(0,i.kt)("h2",{id:"variants"},"Variants"),(0,i.kt)("p",null,"Loading spinner comes in three sizes, ",(0,i.kt)("inlineCode",{parentName:"p"},"$lg, $md, $sm"),". With the ",(0,i.kt)("inlineCode",{parentName:"p"},"$sm")," variant being used solely for use on buttons. There are two variants to choose from, ",(0,i.kt)("inlineCode",{parentName:"p"},"default | light"),". The default settings are set to ",(0,i.kt)("inlineCode",{parentName:"p"},"variant = default, size = $md"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isLoading, setIsLoading] = useState(true);\n  const toggleLoading = () => {\n    setIsLoading(!isLoading);\n  };\n\n  return (\n    <Layout.Stack space={20}>\n      <Layout.Group space={20}>\n        <LoadingSpinner\n          size="$sm"\n          isLoading={isLoading}\n          ariaLoadingLabel="Downloading files"\n        />\n        <LoadingSpinner\n          isLoading={isLoading}\n          ariaLoadingLabel="Importing data"\n        />\n        <LoadingSpinner\n          size="$lg"\n          isLoading={isLoading}\n          ariaLoadingLabel="Submitting form"\n        />\n      </Layout.Group>\n      <Box color="$primary1">\n        <Layout.Group space={20}>\n          <LoadingSpinner\n            size="$sm"\n            variant="light"\n            isLoading={isLoading}\n            ariaLoadingLabel="Downloading files"\n          />\n          <LoadingSpinner\n            variant="light"\n            isLoading={isLoading}\n            ariaLoadingLabel="Importing data"\n          />\n          <LoadingSpinner\n            size="$lg"\n            variant="light"\n            isLoading={isLoading}\n            ariaLoadingLabel="Submitting form"\n          />\n        </Layout.Group>\n      </Box>\n    </Layout.Stack>\n  );\n};\n')),(0,i.kt)("h2",{id:"button"},"Button"),(0,i.kt)("p",null,"The Button component has Loading Spinner integration. Head over to the ",(0,i.kt)("a",{parentName:"p",href:"button/"},"Button")," component documentation to learn more."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  return (\n    <Layout.Group space={20}>\n      <Layout.Stack space={20}>\n        <Button\n          isLoading={isLoading}\n          ariaLoadingLabel="Importing data"\n          onClick={() => setIsLoading(!isLoading)}\n        >\n          Submit\n        </Button>\n      </Layout.Stack>\n    </Layout.Group>\n  );\n};\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={LoadingSpinner}\n  rows={[\n    {\n      name: 'children',\n      type: 'node',\n      description: 'The contents of the spinner component',\n    },\n    {\n      name: 'isLoading',\n      type: 'boolean',\n      description:\n        'Flag to show or hide the loading spinner. If true, spinner is visible',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the spinner',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description: 'Default sizes of the spinner',\n    },\n    {\n      name: 'variant',\n      type: 'string',\n      description: 'Set what color the spinner will be. `light` or `default`',\n    },\n    {\n      name: 'ariaLoadingLabel',\n      type: 'string',\n      description:\n        'Text to describe what is happening while the loading spinner is active',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={LoadingSpinner}\n  rows={[\n    {\n      name: 'loading-spinner-root',\n      description: 'Spinner root element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"Following the requirements of WAI-ARIA, Loading Spinner follows the requirements 4.1.3: Status Messages. Status messages are defined by WCAG as messages that provide information on the success or results of a user action, but do not change the users context (i.e. take focus)."),(0,i.kt)("p",null,"Loading Spinner is programmed through the ",(0,i.kt)("inlineCode",{parentName:"p"},"ariaLoadingLabel")," property, and has been tested using a screen reader to present a status message to assistive technology without receiving focus."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/WAI/WCAG21/Understanding/status-messages.html",mdxType:"ExitLink"},"Status messages WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isLoading, setIsLoading] = useState(true);\n  const toggleLoading = () => {\n    setIsLoading(!isLoading);\n  };\n\n  return (\n    <LoadingSpinner\n      size="$lg"\n      isLoading={isLoading}\n      ariaLoadingLabel="Downloading files"\n    >\n      <IconMaterial color="$primary1" icon="upload_file" size="35px" />\n    </LoadingSpinner>\n  );\n};\n'))))}h.isMDXComponent=!0},51976:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"media-query",category:"Layout",title:"MediaQuery",description:"Used to layout UI elements conditionally",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A26376",pagination_prev:"web/ui/layout",pagination_next:"web/ui/floating-section"},d=void 0,p={unversionedId:"web/ui/media-query",id:"web/ui/media-query",isDocsHomePage:!1,title:"MediaQuery",description:"Used to layout UI elements conditionally",source:"@site/docs/web/ui/MediaQuery.md",sourceDirName:"web/ui",slug:"/web/ui/media-query",permalink:"/web/ui/media-query",tags:[],version:"current",frontMatter:{id:"media-query",category:"Layout",title:"MediaQuery",description:"Used to layout UI elements conditionally",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A26376",pagination_prev:"web/ui/layout",pagination_next:"web/ui/floating-section"},sidebar:"docs",previous:{title:"Layout",permalink:"/web/ui/layout"},next:{title:"FloatingSection",permalink:"/web/ui/floating-section"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Smaller Than",id:"smaller-than",children:[],level:2},{value:"Larger Than",id:"larger-than",children:[],level:2},{value:"Preset Breakpoints",id:"preset-breakpoints",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { MediaQuery } from '@abyss/web/ui/MediaQuery';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Used to conditionally display elements based on the window size. The condition is based on the ",(0,r.kt)("inlineCode",{parentName:"p"},"smallerThan")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"largerThan")," props (or both of them at the same time)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<React.Fragment>\n  <div>\n    An icon will appear to the right when the window size is at least extra\n    large:\n    <MediaQuery largerThan="$xl">\n      <IconMaterial icon="home" />\n    </MediaQuery>\n  </div>\n  <div>\n    An icon will appear to the right when the window size is less than extra\n    large:\n    <MediaQuery smallerThan="$xl">\n      <IconMaterial icon="home" />\n    </MediaQuery>\n  </div>\n  <div>\n    An icon will appear to the right when the window size is between large and\n    extra large:\n    <MediaQuery smallerThan="$xl" largerThan="$lg">\n      <IconMaterial icon="home" />\n    </MediaQuery>\n  </div>\n</React.Fragment>\n')),(0,r.kt)("h2",{id:"smaller-than"},"Smaller Than"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"smallerThan")," prop to specify a width that the window must be smaller than for the contents inside the MediaQuery to display."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<div>\n  An icon will appear to the right when the window size is less than 1400\n  pixels:\n  <MediaQuery smallerThan={1400}>\n    <IconMaterial icon="home" />\n  </MediaQuery>\n</div>\n')),(0,r.kt)("h2",{id:"larger-than"},"Larger Than"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"largerThan")," prop to specify a width that the window must be greater than or equal to for the contents inside the MediaQuery to display."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<div>\n  An icon will appear to the right when the window size is at least 700 pixels:\n  <MediaQuery largerThan={700}>\n    <IconMaterial icon="home" />\n  </MediaQuery>\n</div>\n')),(0,r.kt)("h2",{id:"preset-breakpoints"},"Preset Breakpoints"),(0,r.kt)("p",null,"As an alternative to using hardcoded number / pixel values for ",(0,r.kt)("inlineCode",{parentName:"p"},"smallerThan")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"largerThan"),", you can use preset breakpoints to ensure consistency across your app. (Breakpoint values are taken from the app's theme configuration.) Possible values are ",(0,r.kt)("inlineCode",{parentName:"p"},"$xs"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$sm"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$md"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$lg"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"$xl"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<div>\n  An icon will appear to the right when the window size is at least the size of\n  the $md breakpoint:\n  <MediaQuery largerThan="$md">\n    <IconMaterial icon="home" />\n  </MediaQuery>\n</div>\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={MediaQuery}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element the group wraps',\n    },\n    {\n      name: 'smallerThan',\n      type: 'number | string',\n      description:\n        'Pixel amount the window width must be smaller than in order for the children to render',\n    },\n    {\n      name: 'largerThan',\n      type: 'number | string',\n      description:\n        'Pixel amount the window width must be greater than or equal to in order for the children to render',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},71850:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"modal",category:"Overlay",title:"Modal",description:"Displays an overlay area at the center of the screen.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1550",pagination_prev:"web/ui/loading-spinner",pagination_next:"web/ui/popover"},d=void 0,p={unversionedId:"web/ui/modal",id:"web/ui/modal",isDocsHomePage:!1,title:"Modal",description:"Displays an overlay area at the center of the screen.",source:"@site/docs/web/ui/Modal.md",sourceDirName:"web/ui",slug:"/web/ui/modal",permalink:"/web/ui/modal",tags:[],version:"current",frontMatter:{id:"modal",category:"Overlay",title:"Modal",description:"Displays an overlay area at the center of the screen.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1550",pagination_prev:"web/ui/loading-spinner",pagination_next:"web/ui/popover"},sidebar:"docs",previous:{title:"LoadingSpinner",permalink:"/web/ui/loading-spinner"},next:{title:"Popover",permalink:"/web/ui/popover"}},c=[{value:"useOverlay",id:"useoverlay",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Title",id:"title",children:[],level:2},{value:"Hide Title",id:"hide-title",children:[],level:2},{value:"Passing Data",id:"passing-data",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Title Align",id:"title-align",children:[],level:2},{value:"Overflow",id:"overflow",children:[],level:2},{value:"Modal Footer",id:"modal-footer",children:[],level:2},{value:"closeOnClickOutside",id:"closeonclickoutside",children:[],level:2},{value:"closeOnEscPress",id:"closeonescpress",children:[],level:2},{value:"Customization",id:"customization",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Modal } from '@abyss/web/ui/Modal';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Modal',\n  inputs: [\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'title',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'string',\n    },\n  ],\n}\n\n() => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Modal\n        title=\"Enter title here\"\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n      >\n        <Modal.Section>Press escape to close the modal</Modal.Section>\n      </Modal>\n      <Button onClick={() => setIsOpen(true)} aria-haspopup=\"dialog\">\n        Toggle Modal\n      </Button>\n    </React.Fragment>\n  );\n}\n")),(0,r.kt)("h2",{id:"useoverlay"},"useOverlay"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useOverlay")," hook lets the DOM handle form data and the overlays state. To utilize the ",(0,r.kt)("a",{parentName:"p",href:"/web/hooks/use-overlay"},"useOverlay")," hook the root/parent must be wrapped with the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/overlay-provider"},"OverlayProvider"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const modal = useOverlay(\'modal-form\');\n\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => modal.open()} aria-haspopup="dialog">\n        Toggle Modal\n      </Button>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <Modal title="Register" model="modal-form">\n          <Modal.Section>\n            <Grid>\n              <Grid.Col span={6}>\n                <TextInput\n                  label="First Name"\n                  model="first-name"\n                  validators={{ required: true }}\n                />\n              </Grid.Col>\n              <Grid.Col span={6}>\n                <TextInput\n                  label="Last Name"\n                  model="last-name"\n                  validators={{ required: true }}\n                />\n              </Grid.Col>\n              <Grid.Col span={12}>\n                <TextInput\n                  label="Email"\n                  type="email"\n                  model="email"\n                  validators={{ required: true }}\n                />\n              </Grid.Col>\n              <Grid.Col span={12}>\n                <TextInput\n                  label="Password"\n                  type="password"\n                  model="password"\n                  validators={{ required: true }}\n                />\n              </Grid.Col>\n              <Grid.Col span={12}>\n                <Checkbox\n                  label="I agree to terms and conditions"\n                  model="terms-condition"\n                  validators={{ required: true }}\n                />\n              </Grid.Col>\n            </Grid>\n          </Modal.Section>\n          <Modal.Section>\n            <Layout.Group alignLayout="right">\n              <Button variant="outline" onClick={() => modal.close()}>\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  form.handleSubmit(onSubmit)();\n                  if (form.formState.isValid) {\n                    modal.close();\n                  }\n                }}\n              >\n                Submit\n              </Button>\n            </Layout.Group>\n          </Modal.Section>\n        </Modal>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook to set the open state of the modal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setIsOpen(true)} aria-haspopup="dialog">\n        Toggle Modal\n      </Button>\n      <Modal title="Register" isOpen={isOpen} onClose={() => setIsOpen(false)}>\n        <Modal.Section>\n          <Grid>\n            <Grid.Col span={6}>\n              <TextInput label="First Name" />\n            </Grid.Col>\n            <Grid.Col span={6}>\n              <TextInput label="Last Name" />\n            </Grid.Col>\n            <Grid.Col span={12}>\n              <TextInput label="Email" type="email" />\n            </Grid.Col>\n            <Grid.Col span={12}>\n              <TextInput label="Password" type="password" />\n            </Grid.Col>\n            <Grid.Col span={12}>\n              <Checkbox label="I agree to terms and conditions" />\n            </Grid.Col>\n          </Grid>\n        </Modal.Section>\n        <Modal.Section>\n          <Layout.Group alignLayout="right">\n            <Button variant="outline" onClick={() => setIsOpen(false)}>\n              Cancel\n            </Button>\n            <Button>Submit</Button>\n          </Layout.Group>\n        </Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"title"},"Title"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," prop to set the title of the modal. For accessibility purposes a title is required. Please provide a title that accurately describes the content of the modal so on open a screen reader can provide this description to the user."),(0,r.kt)("p",null,"If you'd like to hide the title from being displayed you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"hideTitle")," prop found ",(0,r.kt)("a",{parentName:"p",href:"#hide-title"},"below"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const modal = useOverlay(\'title-modal\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => modal.open()} aria-haspopup="dialog">\n        Toggle Modal\n      </Button>\n      <Modal title="Custom Title" model="title-modal">\n        <Modal.Section>Custom Title</Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"hide-title"},"Hide Title"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"hideTitle")," prop to hide the title from displaying with the modal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const modal = useOverlay(\'hide-title-modal\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => modal.open()} aria-haspopup="dialog">\n        Toggle Modal\n      </Button>\n      <Modal title="Custom Title" model="hide-title-modal" hideTitle>\n        <Modal.Section>Custom Title</Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"passing-data"},"Passing Data"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"getState")," method retrieve the state of the modal. Structure: ",(0,r.kt)("inlineCode",{parentName:"p"},"{ isOpen: Boolean, data: Object }"),". Pass data into the open/toggle methods to use in the modal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const modal = useOverlay('data-modal');\n  const { data } = modal.getState();\n\n  return (\n    <React.Fragment>\n      <Button\n        onClick={() => modal.open({ firstName: 'John', lastName: 'Doe' })}\n        aria-haspopup=\"dialog\"\n      >\n        Toggle Modal\n      </Button>\n      <Modal title=\"Passing Data to Modal\" model=\"data-modal\">\n        <Modal.Section>\n          <p>First Name: {data && data.firstName}</p>\n          <p>Last Name: {data && data.lastName}</p>\n        </Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"size"},"Size"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," prop to set the width of the modal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [size, setSize] = useState('lg');\n\n  const handleClick = (size) => {\n    setIsOpen(true);\n    setSize(size);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => handleClick('lg')} aria-haspopup=\"dialog\">\n          Large (Default)\n        </Button>\n        <Button onClick={() => handleClick('md')} aria-haspopup=\"dialog\">\n          Medium\n        </Button>\n        <Button onClick={() => handleClick('sm')} aria-haspopup=\"dialog\">\n          Small\n        </Button>\n        <Button onClick={() => handleClick('full')} aria-haspopup=\"dialog\">\n          Full\n        </Button>\n      </Layout.Group>\n\n      <Modal\n        title={`Modal Size: ${size}`}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        size={size}\n      >\n        <Modal.Section>Press escape to close the modal</Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"title-align"},"Title Align"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"titleAlign")," prop to align the position of the title."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n  const modal = useOverlay(\'title-aligment\');\n\n  const [align, setAlign] = useState(\'left\');\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button\n          onClick={() => {\n            modal.open();\n            setAlign(\'left\');\n          }}\n          aria-haspopup="dialog"\n        >\n          Left\n        </Button>\n        <Button\n          onClick={() => {\n            modal.open();\n            setAlign(\'center\');\n          }}\n          aria-haspopup="dialog"\n        >\n          Center\n        </Button>\n        <Button\n          onClick={() => {\n            modal.open();\n            setAlign(\'right\');\n          }}\n          aria-haspopup="dialog"\n        >\n          Right\n        </Button>\n      </Layout.Group>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <Modal\n          title="Title Alignment"\n          titleAlign={align}\n          model="title-aligment"\n        >\n          <Modal.Section>\n            <Grid>\n              <Grid.Col span={6}>\n                <TextInput label="First Name" />\n              </Grid.Col>\n              <Grid.Col span={6}>\n                <TextInput label="Last Name" />\n              </Grid.Col>\n              <Grid.Col span={12}>\n                <TextInput label="Email" type="email" />\n              </Grid.Col>\n              <Grid.Col span={12}>\n                <TextInput label="Password" type="password" />\n              </Grid.Col>\n              <Grid.Col span={12}>\n                <Checkbox label="I agree to terms and conditions" />\n              </Grid.Col>\n            </Grid>\n          </Modal.Section>\n          <Modal.Section>\n            <Layout.Group alignLayout="right">\n              <Button variant="outline" onClick={() => modal.close()}>\n                Cancel\n              </Button>\n              <Button type="submit">Submit</Button>\n            </Layout.Group>\n          </Modal.Section>\n        </Modal>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"overflow"},"Overflow"),(0,r.kt)("p",null,"Overflow is handled within the content of the modal. The title will remain static."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const modal = useOverlay(\'overflow-modal\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => modal.open()} aria-haspopup="dialog">\n        Toggle Modal\n      </Button>\n      <Modal title="Overflow" model="overflow-modal">\n        <Modal.Section>\n          {Array.from(Array(50).keys()).map((item) => {\n            return (\n              <p key={item} style={{ marginBottom: 65 }}>\n                Overflow Example - Scroll\n              </p>\n            );\n          })}\n        </Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"modal-footer"},"Modal Footer"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Modal.Footer")," to add a footer container to a modal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const modal = useOverlay(\'modal-footer\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => modal.open()} aria-haspopup="dialog">\n        Toggle Modal\n      </Button>\n      <Modal\n        title="Modal With Footer "\n        model="modal-footer"\n        footer={\n          <Modal.Section>\n            <Layout.Group alignLayout="right">\n              <Button onClick={() => modal.close()}>Cancel</Button>\n            </Layout.Group>\n          </Modal.Section>\n        }\n      >\n        <Modal.Section>\n          {Array.from(Array(30).keys()).map((item) => {\n            return (\n              <p key={item} style={{ marginBottom: 65 }}>\n                modal footer with cancel button\n              </p>\n            );\n          })}\n        </Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"closeonclickoutside"},"closeOnClickOutside"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"closeOnClickOutside")," to prevent closing the modal on background clicks. Modals using this prop can still be closed with the close button or through use of state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const modal = useOverlay(\'closeOnClickOutside-modal\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => modal.open()} aria-haspopup="dialog">\n        Toggle Modal\n      </Button>\n      <Modal\n        closeOnClickOutside={false}\n        title="No Close on Outside Click"\n        model="closeOnClickOutside-modal"\n      >\n        <Modal.Section>No Close on Outside Click</Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"closeonescpress"},"closeOnEscPress"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"closeOnEscPress")," to prevent closing the modal on Esc key. Modals using this prop can still be closed with the close button or through use of state."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Accessibility Notice: The ability to close or dismiss modals and dialogs with the escape key is an absolutely fundamental requirement for accessible keyboard navigation. As such, this prop should ONLY be used temporarily when programmatically necessary, such as waiting for search results to load or for an API call to return. If the process hangs or takes more than a few seconds, then this prop should be removed so users can choose to dismiss the modal.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const modal = useOverlay(\'closeOnEscPress-modal\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => modal.open()} aria-haspopup="dialog">\n        Toggle Modal\n      </Button>\n      <Modal\n        closeOnEscPress={false}\n        title="No Close on Escape Press"\n        model="closeOnEscPress-modal"\n      >\n        <Modal.Section>No Close on Escape Press</Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"customization"},"Customization"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const modal = useOverlay('customization');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => modal.open()} aria-haspopup=\"dialog\">\n        Toggle Modal\n      </Button>\n      <Modal\n        title=\"Customize Modal To Fit Your Design Needs\"\n        titleAlign=\"center\"\n        model=\"customization\"\n        css={{\n          'abyss-modal-header-container': { marginTop: '$md' },\n        }}\n      >\n        <div\n          style={{\n            border: '7px solid white',\n            background: 'white',\n            borderRadius: '50%',\n            position: 'absolute',\n            top: '-2%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n          }}\n        >\n          <IconBrand icon=\"desktop\" size=\"xl\" />\n        </div>\n        <Modal.Section>\n          <p>\n            Nulla a hendrerit leo. Morbi ac suscipit nunc. Suspendisse cursus\n            hendrerit magna quis euismod. Integer rhoncus, nulla in maximus\n            efficitur, felis felis laoreet quam, ut tincidunt ex est eu nulla.\n            Curabitur pharetra vel elit eu egestas. Donec consectetur rhoncus\n            felis, efficitur tristique erat ultrices et. Proin at ipsum elit.\n            Donec mauris sem, cursus a velit eu, hendrerit rhoncus mi. Ut quis\n            sem lacinia, sodales nulla vel, feugiat odio.\n          </p>\n        </Modal.Section>\n        <Modal.Section>\n          <Layout.Stack alignLayout=\"center\" alignItems=\"center\">\n            <Button onClick={() => modal.close()}>Tell Me More</Button>\n            <Link onClick={() => modal.close()}>Skip The Tour</Link>\n          </Layout.Stack>\n        </Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Modal}\n  rows={[\n    {\n      name: 'children',\n      type: 'node',\n      description: 'The contents of the Modal component',\n    },\n    {\n      name: 'footer',\n      type: 'node',\n      description: 'The contents of the Modal footer',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the modal',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'isOpen',\n      type: 'boolean',\n      description: 'Flag to check if modal is opened',\n    },\n    {\n      name: 'onClose',\n      type: 'function',\n      description: 'Callback fired every time modal is closed',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Size of modal',\n    },\n    {\n      name: 'titleAlign',\n      type: 'string',\n      description: 'Set the alignment of the title',\n    },\n    {\n      name: 'hideClose',\n      type: 'boolean',\n      description: 'set to true to hide close button on modal',\n    },\n    {\n      name: 'closeOnClickOutside',\n      type: 'boolean',\n      description:\n        'set to false to stop modal from closing on background click',\n    },\n    {\n      name: 'closeOnEscPress',\n      type: 'boolean',\n      description:\n        'set to false to stop modal from closing on escape key press',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Modal.Section}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Modal Section component',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Modal}\n  rows={[\n    {\n      name: 'modal-root',\n      description: 'Modal root element',\n    },\n    {\n      name: 'modal-overlay',\n      description: 'Modal overlay element',\n    },\n    {\n      name: 'modal-content-container',\n      description: 'Modal content container',\n    },\n    {\n      name: 'modal-header-container',\n      description: 'Modal header container',\n    },\n    {\n      name: 'modal-header-title',\n      description: 'Modal title element',\n    },\n    {\n      name: 'modal-body',\n      description: 'Modal body element',\n    },\n    {\n      name: 'modal-footer',\n      description: 'Modal footer element',\n    },\n    {\n      name: 'modal-close-button',\n      description: 'Modal close button element',\n    },\n    {\n      name: 'modal-close-icon',\n      description: 'Modal close icon element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Modal.Section}\n  rows={[\n    {\n      name: 'modal-section-root',\n      description: 'Modal Section root element',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Esc',\n      description: 'Closes the dialog.',\n    },\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to the next interactive element within the dialog.  Once the last interactive element in the dialog is reached, pressing Tab again moves focus to the first interactive element within the dialog.',\n    },\n    {\n      name: 'Shift + Tab',\n      description:\n        'Moves focus to the previous interactive element within the dialog.  Once the first interactive element in the dialog is reached, pressing Shift + Tab again moves focus to the last interactive element within the dialog.',\n    },\n  ]}\n/>\n")),(0,r.kt)("h3",null,"Dialog Content"),(0,r.kt)("p",null,"The content included on the dialog must be accessible."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const modal = useOverlay(\'accessible-modal\');\n\n  return (\n    <>\n      <Button onClick={() => modal.open()} aria-haspopup="dialog">\n        Toggle Modal\n      </Button>\n      <Modal title="Accessible Modal" model="accessible-modal">\n        <Modal.Section>\n          <Button>Button is accessible in modal</Button>\n        </Modal.Section>\n      </Modal>\n    </>\n  );\n};\n')),(0,r.kt)("h3",null,"Triggering Elements"),(0,r.kt)("p",null,'Use the aria-haspopup attribute on buttons or other triggering elements that open content like dialogs, listboxes, trees, menus, grids, etc.\xa0 Use a corresponding value that indicates what kind of popup will be displayed when the trigger element is activated. In turn, the element that pops up must be of the role indicated. For example use aria-haspop="dialog" on buttons that open modal dialogs. Be sure to include role="dialog" on the containing element of the dialog itself, too.'),(0,r.kt)("p",null,"See the docs on 'haspop' for more details:",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-haspopup"},"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-haspopup"),"\naria-haspopup - Accessibility | MDN\nThe aria-haspopup attribute indicates the availability and type of interactive popup element that can be triggered by the element on which the attribute is set."),(0,r.kt)("h3",null,"Esc Override"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"closeOnEscPress")," to prevent closing the modal on Esc key. Modals using this prop can still be closed with the close button or through use of state."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Accessibility Notice: The ability to close or dismiss modals and dialogs with the escape key is an absolutely fundamental requirement for accessible keyboard navigation. As such, this prop should ONLY be used temporarily when programmatically necessary, such as waiting for search results to load or for an API call to return. If the process hangs or takes more than a few seconds, then this prop should be removed so users can choose to dismiss the modal.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const modal = useOverlay(\'closeOnEscPress-modal\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => modal.open()} aria-haspopup="dialog">\n        Toggle Modal\n      </Button>\n      <Modal\n        closeOnEscPress={false}\n        title="No Close on Escape Press"\n        model="closeOnEscPress-modal"\n      >\n        <Modal.Section>No Close on Escape Press</Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n'))))}g.isMDXComponent=!0},89829:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"nav-menu",category:"Navigation",title:"NavMenu",description:"Used to display a navigation menu with links and dropdowns.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1557",pagination_prev:"web/ui/link",pagination_next:"web/ui/pagination"},d=void 0,p={unversionedId:"web/ui/nav-menu",id:"web/ui/nav-menu",isDocsHomePage:!1,title:"NavMenu",description:"Used to display a navigation menu with links and dropdowns.",source:"@site/docs/web/ui/NavMenu.md",sourceDirName:"web/ui",slug:"/web/ui/nav-menu",permalink:"/web/ui/nav-menu",tags:[],version:"current",frontMatter:{id:"nav-menu",category:"Navigation",title:"NavMenu",description:"Used to display a navigation menu with links and dropdowns.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1557",pagination_prev:"web/ui/link",pagination_next:"web/ui/pagination"},sidebar:"docs",previous:{title:"Link",permalink:"/web/ui/link"},next:{title:"Pagination",permalink:"/web/ui/pagination"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Items",id:"items",children:[{value:"NavMenu.Columns",id:"navmenucolumns",children:[],level:3},{value:"NavMenu.Column",id:"navmenucolumn",children:[],level:3},{value:"NavMenu.Item",id:"navmenuitem",children:[],level:3},{value:"Example with Helper Components",id:"example-with-helper-components",children:[],level:3},{value:"Custom Rendering",id:"custom-rendering",children:[],level:3}],level:2},{value:"Variant",id:"variant",children:[],level:2},{value:"Position",id:"position",children:[],level:2},{value:"Max NavMenu Width",id:"max-navmenu-width",children:[],level:2},{value:"PageHeader Component",id:"pageheader-component",children:[],level:2},{value:"Disabled NavMenu.Item",id:"disabled-navmenuitem",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { NavMenu } from '@abyss/web/ui/NavMenu';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const navMenuItems = [\n    { title: \'Sample Link\', href: \'#\' },\n    {\n      title: \'Sample onClick\',\n      onClick: () => console.log(\'Sample onClick clicked\'),\n    },\n    {\n      title: \'Dropdown Menu\',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column\n            title="Section Title"\n            href="/developers/getting-started"\n          >\n            <NavMenu.Item\n              title="HELLO"\n              href="#"\n              description="CSS-in-JS with best-in-class developer experience."\n            />\n            <NavMenu.Item\n              title="GOODBYE"\n              href="#"\n              description="Description goes here"\n            />\n          </NavMenu.Column>\n          <NavMenu.Column>\n            <NavMenu.Item\n              title="Sample onClick"\n              onClick={() => console.log(\'onClick pressed\')}\n              description="A message will be logged to the console when this is clicked."\n            />\n          </NavMenu.Column>\n          <NavMenu.Column title="Other Section Title">\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n  ];\n  return <NavMenu items={navMenuItems} />;\n};\n')),(0,r.kt)("h2",{id:"items"},"Items"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"items")," prop to specify what will be displayed in the NavMenu. The prop requires an array of objects that have the form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  title: node,\n  href: string,\n  onClick: function,\n  content: node,\n}\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"Each object should have ",(0,r.kt)("strong",{parentName:"p"},"one")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"href"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," - if the object has a value for ",(0,r.kt)("inlineCode",{parentName:"p"},"href")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick"),", then in the menu it will be a link to that page, or a button, respectively; if, instead, it has ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," present, in the menu it will be a dropdown menu that, when opened, will display the objects inside ",(0,r.kt)("inlineCode",{parentName:"p"},"content"),"."),(0,r.kt)("p",null,"For ",(0,r.kt)("inlineCode",{parentName:"p"},"content"),", you can pass in your own ",(0,r.kt)("a",{parentName:"p",href:"#custom-rendering"},"custom elements to render"),", but we strongly recommend that you use our ",(0,r.kt)("a",{parentName:"p",href:"#navmenucolumns"},"NavMenu.Columns"),", ",(0,r.kt)("a",{parentName:"p",href:"#navmenucolumn"},"NavMenu.Column"),", and ",(0,r.kt)("a",{parentName:"p",href:"#navmenuitem"},"NavMenu.Item")," components for two reasons:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The styling and formatting are taken care of already by the components."),(0,r.kt)("li",{parentName:"ul"},"When the screen size is small enough (ex. on phones), the columns in the dropdown menu will stack and become one vertical column that is fully scrollable.")),(0,r.kt)("p",null,"If you use custom rendering, you will have to handle both of the above aspects yourself. Details for both methods can be found below:"),(0,r.kt)("h3",{id:"navmenucolumns"},"NavMenu.Columns"),(0,r.kt)("p",null,"This component should be the outermost component of what is passed into ",(0,r.kt)("inlineCode",{parentName:"p"},"content"),". It is used to provide styling for the dropdown container and the columns that go inside it. It does not require any additional props."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const items = [\n  {\n    title: 'Dropdown menu',\n    content: (\n      <NavMenu.Columns>Your NavMenu.Column components go here</NavMenu.Columns>\n    ),\n  },\n];\n\nreturn <NavMenu items={items} />;\n")),(0,r.kt)("h3",{id:"navmenucolumn"},"NavMenu.Column"),(0,r.kt)("p",null,"This component should be a child of ",(0,r.kt)("inlineCode",{parentName:"p"},"NavMenu.Columns"),". Each column that is a child of ",(0,r.kt)("inlineCode",{parentName:"p"},"NavMenu.Columns")," will be a distinct column in the dropdown menu. Pass in a value for the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," prop if you would like a bolded title to appear at the top of the column. ",(0,r.kt)("inlineCode",{parentName:"p"},"NavMenu.Column")," can also accept an ",(0,r.kt)("inlineCode",{parentName:"p"},"href")," prop for where the link will redirect to when clicked, or an ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick")," prop for a function that will be called when clicked. The children of this component will be displayed vertically; you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"NavMenu.Item")," as children to auto-format and style your input, or pass in your own custom renders to be displayed within the column."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const items = [\n  {\n    title: \'Dropdown menu\',\n    content: (\n      <NavMenu.Columns>\n        <NavMenu.Column title="Column Header">\n          Put NavMenu.Item components or custom rendering here\n        </NavMenu.Column>\n        <NavMenu.Column\n          title="Column Header Link"\n          href="/developers/getting-started"\n        >\n          Put NavMenu.Item components or custom rendering here\n        </NavMenu.Column>\n        <NavMenu.Column\n          title="Column Header Button"\n          onClick={() => {\n            console.log(\'clicked\');\n          }}\n        >\n          Put NavMenu.Item components or custom rendering here\n        </NavMenu.Column>\n      </NavMenu.Columns>\n    ),\n  },\n];\n\nreturn <NavMenu items={items} />;\n')),(0,r.kt)("h3",{id:"navmenuitem"},"NavMenu.Item"),(0,r.kt)("p",null,"This component should be a child of ",(0,r.kt)("inlineCode",{parentName:"p"},"NavMenu.Column"),". Use this component to automatically style links in your dropdown that only have a title, description, and redirect link. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," prop for the title of the item, the ",(0,r.kt)("inlineCode",{parentName:"p"},"description")," prop for the description, the ",(0,r.kt)("inlineCode",{parentName:"p"},"href")," prop for where the link will redirect to when clicked, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick")," prop for a function that will be called when clicked."),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"href")," points to an external link, an icon will appear next to the title to signify that it will open in a new window."),(0,r.kt)("p",null,"NOTE: each ",(0,r.kt)("inlineCode",{parentName:"p"},"NavMenu.Item")," should have ",(0,r.kt)("strong",{parentName:"p"},"one")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"href")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick"),", but not both."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const items = [\n  {\n    title: \'Dropdown menu\',\n    content: (\n      <NavMenu.Columns>\n        <NavMenu.Column>\n          <NavMenu.Item\n            title="Sample NavMenu.Item"\n            description="Your description goes here"\n            href="Your redirect link goes here"\n            onClick={() => {\n              \'Your onClick function goes here\';\n            }}\n          />\n          Put more NavMenu.Item components or custom rendering here\n        </NavMenu.Column>\n        Put more columns here\n      </NavMenu.Columns>\n    ),\n  },\n];\n\nreturn <NavMenu items={items} />;\n')),(0,r.kt)("h3",{id:"example-with-helper-components"},"Example with Helper Components"),(0,r.kt)("p",null,"This is an example of how combining the helper components leads to a well-formatted dropdown menu:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const items = [\n    {\n      title: \'Example using Helper Components\',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column title="NavMenu.Column Title Prop">\n            <NavMenu.Item\n              title="NavMenu.Item title prop"\n              description="This is the NavMenu.Item description prop"\n              href="#"\n            />\n            <NavMenu.Item\n              title="Sample onClick"\n              onClick={() => console.log(\'onClick pressed\')}\n              description="A message will be logged to the console when this is clicked."\n            />\n          </NavMenu.Column>\n          <NavMenu.Column>\n            <NavMenu.Item\n              title="Column w/o title passed"\n              description="This column\'s NavMenu.Column has no value for the title prop."\n              href="#"\n            />\n            <NavMenu.Item\n              title="Open in new window"\n              description="Since this will redirect to an external location, clicking this link will open it in a new window."\n              href="https://abyss.uhc.com/"\n            />\n            <NavMenu.Item\n              title="Try shinking the screen until the header\'s search bar disappears"\n              description="When the screen size is too small, the columns will combine into one."\n              href="#"\n            />\n          </NavMenu.Column>\n          <NavMenu.Column title="Column 3 Title">\n            <NavMenu.Item\n              title="See the divider to the left"\n              description="When a column has a title (and it is not the first column), a vertical divider will appear between the previous column and this one."\n              href="#"\n            />\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n  ];\n  return (\n    <NavMenu\n      items={items}\n      css={{ \'abyss-nav-menu-container\': { zIndex: 205 } }}\n    />\n  );\n};\n')),(0,r.kt)("h3",{id:"custom-rendering"},"Custom Rendering"),(0,r.kt)("p",null,"To render custom components at the base level, simply pass whatever you want to render in the ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," field within ",(0,r.kt)("inlineCode",{parentName:"p"},"items"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const items = [\n    {\n      title: 'Full Custom Rendering Example',\n      content: (\n        <Layout.Stack space={25}>\n          <IconMaterial icon=\"info\" size=\"150\" />\n          <Text>Custom rendering example</Text>\n        </Layout.Stack>\n      ),\n    },\n  ];\n  return (\n    <NavMenu\n      items={items}\n      css={{ 'abyss-nav-menu-container': { zIndex: 204 } }}\n    />\n  );\n};\n")),(0,r.kt)("br",null),(0,r.kt)("p",null,"You can also render custom components within ",(0,r.kt)("inlineCode",{parentName:"p"},"NavMenu.Column"),", if you need to display something that doesn't fit the ",(0,r.kt)("inlineCode",{parentName:"p"},"NavMenu.Item")," props:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const items = [\n    {\n      title: \'Example using Helper Components\',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column title="Sample Title">\n            <NavMenu.Item\n              title="NavMenu.Item title prop"\n              description="This is a NavMenu.Item"\n              href="#"\n            />\n            <Card>\n              <IconMaterial icon="privacy_tip" size="$lg" />\n              <br />\n              This Card is a custom render (it\'s not a NavMenu.Item)\n            </Card>\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n  ];\n  return (\n    <NavMenu\n      items={items}\n      css={{ \'abyss-nav-menu-container\': { zIndex: 203 } }}\n    />\n  );\n};\n')),(0,r.kt)("h2",{id:"variant"},"Variant"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"variant")," prop to change the appearance of the NavMenu. Possible values are ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"inverted"),", and the default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"default"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const items = [\n    { title: 'Default Variant', href: '#' },\n    { title: 'Sample link 1', href: '#' },\n  ];\n\n  return <NavMenu items={items} />;\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const items = [\n    { title: 'Inverted Variant', href: '#' },\n    { title: 'Sample link 1', href: '#' },\n  ];\n\n  return <NavMenu items={items} variant=\"inverted\" />;\n};\n")),(0,r.kt)("h2",{id:"position"},"Position"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," prop to set where the menu tabs will appear horizontally. The three options are ",(0,r.kt)("inlineCode",{parentName:"p"},"start"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"center"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"end"),", and the default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"start"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const items = [\n    { title: \"'Start' position (Default)\", href: '#' },\n    { title: 'Sample link', href: '#' },\n  ];\n\n  return <NavMenu items={items} />;\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const items = [\n    { title: \"'Center' position\", href: '#' },\n    { title: 'Sample link', href: '#' },\n  ];\n\n  return <NavMenu items={items} position=\"center\" />;\n};\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const items = [\n    { title: \"'End' position\", href: '#' },\n    { title: 'Sample link', href: '#' },\n  ];\n\n  return <NavMenu items={items} position=\"end\" />;\n};\n")),(0,r.kt)("h2",{id:"max-navmenu-width"},"Max NavMenu Width"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"maxNavWidth")," prop to set the maximum width of the NavMenu component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const navMenuItems = [\n    { title: \'Sample Link\', href: \'#\' },\n    {\n      title: \'Dropdown Menu\',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column title="Section Title">\n            <NavMenu.Item\n              title="HELLO"\n              href="#"\n              description="CSS-in-JS with best-in-class developer experience."\n            />\n            <NavMenu.Item\n              title="GOODBYE"\n              href="#"\n              description="Description goes here"\n            />\n          </NavMenu.Column>\n          <NavMenu.Column>\n            <NavMenu.Item\n              title="Sample Item"\n              href="#"\n              description="This is a description"\n            />\n          </NavMenu.Column>\n          <NavMenu.Column title="Other Section Title">\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n  ];\n  return (\n    <NavMenu\n      position="center"\n      css={{ zIndex: \'300\' }}\n      items={navMenuItems}\n      maxNavWidth="744px"\n    />\n  );\n};\n')),(0,r.kt)("h2",{id:"pageheader-component"},"PageHeader Component"),(0,r.kt)("p",null,"If you would like to use this component as part of a page header, check out the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/page-header"},"PageHeader")," component, as it has integrated NavMenus inside of it already. Example of NavMenus inside PageHeader:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const topMenuItems = [\n    {\n      title: \'Utility link\',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column>\n            <NavMenu.Item\n              title="Test Link"\n              description={\n                \'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vitae lorem posuere augue volutpat tincidunt ut in odio. Sed non vehicula tellus.\'\n              }\n              href="https://abyss.uhc.com/"\n            />\n            <NavMenu.Item\n              title="Test Link 2"\n              description={\n                \'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vitae lorem posuere augue volutpat tincidunt ut in odio. Sed non vehicula tellus.\'\n              }\n              href="https://abyss.uhc.com/"\n            />\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n    {\n      title: \'Utility link 2\',\n      href: \'https://abyss.uhc.com/\',\n    },\n    {\n      title: (\n        <Layout.Group space={0}>\n          TrackIt\n          <div\n            style={{\n              display: \'flex\',\n              justifyContent: \'center\',\n              alignItems: \'center\',\n              height: \'14px\',\n              width: \'14px\',\n              borderRadius: \'50%\',\n              border: \'solid 1px #FFAF1F\',\n              backgroundColor: \'#FEF7E5\',\n              marginLeft: \'4px\',\n              fontSize: \'10px\',\n              fontWeight: \'700\',\n              color: \'#002677\',\n            }}\n          >\n            8\n          </div>\n        </Layout.Group>\n      ),\n      href: \'#\',\n    },\n    {\n      title: (\n        <Layout.Group space={0}>\n          John\n          <div\n            style={{\n              display: \'flex\',\n              justifyContent: \'center\',\n              alignItems: \'center\',\n              height: \'14px\',\n              width: \'14px\',\n              borderRadius: \'50%\',\n              border: \'solid 1px #002677\',\n              marginLeft: \'4px\',\n              fontSize: \'10px\',\n              fontWeight: \'$bold\',\n            }}\n          >\n            <IconMaterial icon="person" size="$sm" />\n          </div>\n        </Layout.Group>\n      ),\n      href: \'#\',\n    },\n  ];\n  const bottomMenuItems = [\n    { title: \'Sample Link\', href: \'#\' },\n    {\n      title: \'Dropdown Menu\',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column title="Section Title">\n            <NavMenu.Item\n              title="HELLO"\n              href="#"\n              description="CSS-in-JS with best-in-class developer experience."\n            />\n            <NavMenu.Item\n              title="GOODBYE"\n              href="#"\n              description="Description goes here"\n            />\n          </NavMenu.Column>\n          <NavMenu.Column>\n            <NavMenu.Item\n              title="Sample Item"\n              href="#"\n              description="This is a description"\n            />\n          </NavMenu.Column>\n          <NavMenu.Column title="Other Section Title">\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n  ];\n  return (\n    <React.Fragment>\n      <PageHeader\n        headingText="Header Component"\n        topMenuItems={topMenuItems}\n        bottomMenuItems={bottomMenuItems}\n        css={{ \'abyss-header-root\': { zIndex: 210 } }}\n      >\n        <PageHeader.Toolbar space={10}>\n          <SelectInput\n            label="Profile Option 1"\n            value="Test 1"\n            options={[{ value: \'Test 1\', label: \'Test 1\' }]}\n          />\n          <SelectInput\n            label="Profile Option 2"\n            value="Test 2"\n            options={[{ value: \'Test 2\', label: \'Test 2\' }]}\n            css={{\n              \'abyss-select-input-root\': {\n                marginTop: \'0 !important\',\n              },\n            }}\n          />\n        </PageHeader.Toolbar>\n      </PageHeader>\n      <Box color="$white" height="100px">\n        <br />\n        <Label>Your page content goes here</Label>\n      </Box>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"disabled-navmenuitem"},"Disabled NavMenu.Item"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to disable an individual NavMenu.Item."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const navMenuItems = [\n    {\n      title: \'Dropdown Menu\',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column title="Section Title">\n            <NavMenu.Item\n              title="HELLO"\n              href="#"\n              description="CSS-in-JS with best-in-class developer experience."\n              isDisabled\n            />\n            <NavMenu.Item\n              title="GOODBYE"\n              href="#"\n              description="Description goes here"\n            />\n          </NavMenu.Column>\n          <NavMenu.Column>\n            <NavMenu.Item\n              title="Sample onClick"\n              onClick={() => console.log(\'onClick pressed\')}\n              description="A message will be logged to the console when this is clicked."\n            />\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n  ];\n  return <NavMenu items={navMenuItems} />;\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={NavMenu}\n  rows={[\n    {\n      name: 'items',\n      type: 'array[shape]',\n      description: 'The items that will be displayed in the navigation menu.',\n    },\n    {\n      name: 'variant',\n      type: \"'default' | 'inverted'\",\n      description: \"The variant for the menu's appearance.\",\n    },\n    {\n      name: 'position',\n      type: \"'start' | 'center' | 'end'\",\n      description: 'Set the position of the menu items',\n    },\n    {\n      name: 'maxNavWidth',\n      type: 'number',\n      description: 'Set the maximum width of the NavMenu component.',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={NavMenu.Columns}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The content that will be displayed in the dropdown menu',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={NavMenu.Column}\n  rows={[\n    {\n      name: 'title',\n      type: 'ReactNode',\n      description: 'The title of the column',\n    },\n    {\n      name: 'onClick',\n      type: 'function',\n      description: 'Callback fired when NavMenu.Column is clicked',\n    },\n    {\n      name: 'href',\n      type: 'string',\n      description:\n        'The URL that the NavMenu.Column will redirect to when clicked',\n    },\n    {\n      name: 'columnCount',\n      type: 'number',\n      description:\n        'The number of columns present inside the parent NavMenu.Columns',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The content that will be displayed within the column',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={NavMenu.Item}\n  rows={[\n    {\n      name: 'title',\n      type: 'ReactNode',\n      description: 'The title of the item',\n    },\n    {\n      name: 'description',\n      type: 'string',\n      description: 'The description of the item',\n    },\n    {\n      name: 'href',\n      type: 'string',\n      description: 'The URL that the Item will redirect to when clicked',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      default: 'false',\n      description: 'The item is disabled when set to true',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={NavMenu}\n  rows={[\n    {\n      name: 'nav-menu-root',\n      description: 'NavMenu root element',\n    },\n    {\n      name: 'nav-menu-container',\n      description: 'NavMenu root container',\n    },\n    {\n      name: 'nav-menu-list',\n      description: 'List of items on the main NavMenu bar',\n    },\n    {\n      name: 'nav-menu-link-root',\n      description: 'Main NavMenu bar link items root container',\n    },\n    {\n      name: 'nav-menu-link',\n      description: 'Main NavMenu bar items with an href (no dropdown menu)',\n    },\n    {\n      name: 'nav-menu-viewport-container',\n      description: 'Main NavMenu dropdown viewport container',\n    },\n    {\n      name: 'nav-menu-viewport',\n      description: 'Main NavMenu dropdown viewport',\n    },\n    {\n      name: 'nav-menu-menu',\n      description:\n        'Main NavMenu bar items with content instead of href (has dropdown menu)',\n    },\n    {\n      name: 'nav-menu-menu-item',\n      description: 'NavMenu menu item content container',\n    },\n    {\n      name: 'nav-menu-menu-tigger',\n      description: 'NavMenu menu item trigger',\n    },\n    {\n      name: 'nav-menu-menu-trigger-icon',\n      description: 'NavMenu menu item trigger icon',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={NavMenu.Columns}\n  rows={[\n    {\n      name: 'nav-menu-columns-root',\n      description: 'NavMenu.Columns root element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={NavMenu.Column}\n  rows={[\n    {\n      name: 'nav-menu-column-root',\n      description: 'NavMenu.Column root element',\n    },\n    {\n      name: 'nav-menu-column',\n      description: 'NavMenu.Column column',\n    },\n    {\n      name: 'nav-menu-column-title',\n      description: 'Title of the column',\n    },\n    {\n      name: 'nav-menu-column-list',\n      description: 'Column list',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={NavMenu.Item}\n  rows={[\n    {\n      name: 'nav-menu-item-root',\n      description: 'NavMenu.Item root element',\n    },\n    {\n      name: 'nav-menu-item-title',\n      description: 'Title of the item',\n    },\n    {\n      name: 'nav-menu-item-link-icon',\n      description:\n        '\"Open in new window\" icon that appears when the href is an external link',\n    },\n    {\n      name: 'nav-menu-item-description',\n      description: 'Description of the item',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description: 'Moves focus to the next focusable element.',\n    },\n    {\n      name: 'Enter',\n      description:\n        'Redirects to the link if the menu bar item is a redirect, or opens the relevant dropdown menu if the item has one.',\n    },\n    {\n      name: 'Space',\n      description:\n        'If focus on a menu bar item with a dropdown, opens the relevant dropdown menu.',\n    },\n    {\n      name: 'Left Arrow',\n      description: 'Focuses the previous menu bar item.',\n    },\n    {\n      name: 'Up Arrow',\n      description: 'Focuses the previous menu bar item.',\n    },\n    {\n      name: 'Right Arrow',\n      description: 'Focuses the next menu bar item.',\n    },\n    {\n      name: 'Down Arrow',\n      description:\n        'Focuses the next menu bar item.  If focus is on an open menu bar item, moves focus into its dropdown menu instead.',\n    },\n    {\n      name: 'Escape',\n      description:\n        'Closes open dropdown menu and moves focus to its menu bar item.',\n    },\n    {\n      name: 'Home',\n      description: 'Moves focus to the first item in the menu.',\n    },\n    {\n      name: 'End',\n      description: 'Moves focus to the last item in the menu.',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},78217:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"overlay-provider",category:"Providers",title:"OverlayProvider",description:"Adds a React Context to support overlay functionality to Abyss modals, drawers, etc.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1",pagination_prev:"web/ui/lagoon-provider",pagination_next:"web/ui/print-provider"},d=void 0,p={unversionedId:"web/ui/overlay-provider",id:"web/ui/overlay-provider",isDocsHomePage:!1,title:"OverlayProvider",description:"Adds a React Context to support overlay functionality to Abyss modals, drawers, etc.",source:"@site/docs/web/ui/OverlayProvider.md",sourceDirName:"web/ui",slug:"/web/ui/overlay-provider",permalink:"/web/ui/overlay-provider",tags:[],version:"current",frontMatter:{id:"overlay-provider",category:"Providers",title:"OverlayProvider",description:"Adds a React Context to support overlay functionality to Abyss modals, drawers, etc.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1",pagination_prev:"web/ui/lagoon-provider",pagination_next:"web/ui/print-provider"},sidebar:"docs",previous:{title:"LagoonProvider",permalink:"/web/ui/lagoon-provider"},next:{title:"PrintProvider",permalink:"/web/ui/print-provider"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Modal Example",id:"modal-example",children:[],level:2},{value:"Drawer Example",id:"drawer-example",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { OverlayProvider } from '@abyss/web/ui/OverlayProvider';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Applications must be wrapped in an OverlayProvider so that it can be hidden from screen readers when an overlay opens."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<OverlayProvider>\n  <App>{children}</App>\n</OverlayProvider>\n")),(0,r.kt)("h2",{id:"modal-example"},"Modal Example"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"OverlayProvider")," is used to support components such as Modal. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"useOverlay")," hook to support state management of the overlay. Find additional resources on our overlay hook in ",(0,r.kt)("a",{parentName:"p",href:"/web/hooks/use-overlay"},"useOverlay"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const modal = useOverlay('data-modal');\n  const { data } = modal.getState();\n\n  return (\n    <React.Fragment>\n      <Button\n        onClick={() => modal.open({ firstName: 'John', lastName: 'Doe' })}\n        aria-haspopup=\"dialog\"\n      >\n        Toggle Modal\n      </Button>\n      <Modal title=\"Modal Example\" model=\"data-modal\">\n        <Modal.Section>\n          <p>First Name: {data && data.firstName}</p>\n          <p>Last Name: {data && data.lastName}</p>\n        </Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"drawer-example"},"Drawer Example"),(0,r.kt)("p",null,"More examples of drawer being used can be seen in ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/drawer"},"Drawer"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const drawer = useOverlay(\'title-drawer\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => drawer.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <Drawer title="Custom Title" model="title-drawer">\n        <Drawer.Section>Custom Title</Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n'))))}g.isMDXComponent=!0},86245:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"page-body",category:"Content",title:"PageBody",description:"Used to create a page body layout.",pagination_prev:"web/ui/dropdown-menu",pagination_next:"web/ui/page-footer"},s=void 0,d={unversionedId:"web/ui/page-body",id:"web/ui/page-body",isDocsHomePage:!1,title:"PageBody",description:"Used to create a page body layout.",source:"@site/docs/web/ui/PageBody.md",sourceDirName:"web/ui",slug:"/web/ui/page-body",permalink:"/web/ui/page-body",tags:[],version:"current",frontMatter:{id:"page-body",category:"Content",title:"PageBody",description:"Used to create a page body layout.",pagination_prev:"web/ui/dropdown-menu",pagination_next:"web/ui/page-footer"},sidebar:"docs",previous:{title:"DropdownMenu",permalink:"/web/ui/dropdown-menu"},next:{title:"PageFooter",permalink:"/web/ui/page-footer"}},p=[{value:"Full Page Layout",id:"full-page-layout",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("FullPageLayout"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { PageBody } from '@abyss/web/ui/PageBody';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <PageBody>\n      <div>Body Content</div>\n    </PageBody>\n  );\n};\n")),(0,i.kt)("h2",{id:"full-page-layout"},"Full Page Layout"),(0,i.kt)(m,{mdxType:"FullPageLayout"})),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBody}\n  rows={[\n    {\n      name: 'children',\n      type: 'React Node',\n      description: 'The children element of the body',\n    },\n    {\n      name: 'fullWidth',\n      type: 'boolean',\n      description: 'Set the max width of the body to full screen',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBody}\n  rows={[\n    {\n      name: 'page-body-root',\n      description: 'Body root',\n    },\n    {\n      name: 'page-body-container',\n      description: 'Body container',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},46587:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"page-body-intro",category:"Content",title:"PageBodyIntro",description:"Used to create a layout of introductory content at the top of your page body.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=13068%3A50542",pagination_prev:"web/ui/page-body",pagination_next:"web/ui/page-footer"},s=void 0,d={unversionedId:"web/ui/page-body-intro",id:"web/ui/page-body-intro",isDocsHomePage:!1,title:"PageBodyIntro",description:"Used to create a layout of introductory content at the top of your page body.",source:"@site/docs/web/ui/PageBodyIntro.md",sourceDirName:"web/ui",slug:"/web/ui/page-body-intro",permalink:"/web/ui/page-body-intro",tags:[],version:"current",frontMatter:{id:"page-body-intro",category:"Content",title:"PageBodyIntro",description:"Used to create a layout of introductory content at the top of your page body.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=13068%3A50542",pagination_prev:"web/ui/page-body",pagination_next:"web/ui/page-footer"},sidebar:"docs",previous:{title:"PageBody",permalink:"/web/ui/page-body"},next:{title:"PageFooter",permalink:"/web/ui/page-footer"}},p=[{value:"PageBodyIntro",id:"pagebodyintro",children:[{value:"Sticky",id:"sticky",children:[],level:3}],level:2},{value:"PageBodyIntro.Row",id:"pagebodyintrorow",children:[],level:2},{value:"PageBodyIntro.Title",id:"pagebodyintrotitle",children:[],level:2},{value:"PageBodyIntro.Profile",id:"pagebodyintroprofile",children:[{value:"Profile Heading",id:"profile-heading",children:[],level:3},{value:"Profile Data",id:"profile-data",children:[],level:3},{value:"Profile Status",id:"profile-status",children:[],level:3}],level:2},{value:"PageBodyIntro.Links",id:"pagebodyintrolinks",children:[],level:2},{value:"PageBodyIntro.RequiredKey",id:"pagebodyintrorequiredkey",children:[],level:2},{value:"Full Page Layout",id:"full-page-layout",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("FullPageLayout"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { PageBodyIntro } from '@abyss/web/ui/PageBodyIntro';\n")),(0,i.kt)("h2",{id:"pagebodyintro"},"PageBodyIntro"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro")," to wrap all the corresponding sub-components and construct an introductory collection of content for your page body. To increase or decrease the default spacing for the individual rows use the ",(0,i.kt)("inlineCode",{parentName:"p"},"rowSpace")," prop. To apply sticky positioning to ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro")," please use the ",(0,i.kt)("inlineCode",{parentName:"p"},"sticky")," prop and see the ",(0,i.kt)("a",{parentName:"p",href:"#sticky"},"Sticky")," section below for details on implementation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const subNavLinks = [\n    { label: 'Jump Link 1', href: '#pagebodyintroprofile' },\n    { label: 'Jump Link 2', href: '#pagebodyintrolinks' },\n    { label: 'Jump Link 3', href: '#pagebodyintrorequiredkey' },\n    { label: 'External Link', href: 'https://www.google.com' },\n  ];\n\n  const profileDataListOne = [\n    { label: 'MPIN', value: '1234457' },\n    { label: 'NPI', value: '28737823' },\n    { label: 'TIN', value: '827382847' },\n    { label: 'Primary Specialty', value: 'Internal Medicine' },\n    { label: 'Demographic/Contract Status', value: 'Active' },\n    { label: 'Provider Hold', value: 'No' },\n  ];\n\n  const profileDataListTwo = [\n    { label: 'Gender', value: 'Male' },\n    { label: 'Date of Birth', value: '07-12-1973' },\n    { label: 'Social Security Number', value: '83498484' },\n    { label: 'Primary Specialty', value: 'Internal Medicine' },\n    { label: 'Degree', value: 'Medical Doctor' },\n  ];\n\n  const dataSectionContent = (\n    <Layout.Stack alignItems=\"left\">\n      <PageBodyIntro.ProfileData profileData={profileDataListOne} />\n      <PageBodyIntro.ProfileData profileData={profileDataListTwo} />\n    </Layout.Stack>\n  );\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n    },\n    {\n      title: 'Open New Tab',\n      onClick: () => {\n        console.log('Open New Tab!');\n      },\n    },\n    {\n      title: 'Save As...',\n      onClick: () => {\n        console.log('Save As...');\n      },\n      icon: <IconMaterial icon=\"save\" />,\n    },\n  ];\n\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <Breadcrumbs\n          size={14}\n          divider=\"/\"\n          items={[\n            { title: 'Home', href: '/' },\n            {\n              title: 'Getting Started',\n              href: '/developers/getting-started/',\n            },\n            { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n          ]}\n        />\n        <DropdownMenu\n          label=\"Table Actions\"\n          hideLabel\n          after={<IconMaterial icon=\"more_vert\" />}\n          menuItems={menuItems}\n        />\n      </PageBodyIntro.Row>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Title>Page Title</PageBodyIntro.Title>\n        <DropdownMenu\n          label=\"Options\"\n          before={<IconMaterial icon=\"grid_view\" />}\n          after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n          menuItems={menuItems}\n        />\n      </PageBodyIntro.Row>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Profile\n          headingSection={\n            <PageBodyIntro.ProfileHeading>\n              Profile Name\n            </PageBodyIntro.ProfileHeading>\n          }\n          dataSection={dataSectionContent}\n          statusSection={<Badge variant=\"success\">Verified</Badge>}\n        />\n      </PageBodyIntro.Row>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Links linkData={subNavLinks} />\n        <PageBodyIntro.RequiredKey />\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,i.kt)("h3",{id:"sticky"},"Sticky"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"sticky")," prop to assign a sticky position to the ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro")," root element. To enable the default settings simply add the ",(0,i.kt)("inlineCode",{parentName:"p"},"sticky")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro")," and the following css properties will be applied:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"{\n  position: 'sticky',\n  boxShadow: 'rgb(0 0 0 / 10%) 0px 1px 2px 0px',\n  top: 0,\n  zIndex: 200,\n}\n")),(0,i.kt)("p",null,"You can override any of these properties and/or include new css properties by passing them in as an object to the ",(0,i.kt)("inlineCode",{parentName:"p"},"sticky")," prop. For example ",(0,i.kt)("inlineCode",{parentName:"p"},"sticky={{ top: 55 }}"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const subNavLinks = [\n    { label: 'Jump Link 1', href: '#pagebodyintroprofile' },\n    { label: 'Jump Link 2', href: '#pagebodyintrolinks' },\n    { label: 'Jump Link 3', href: '#pagebodyintrorequiredkey' },\n    { label: 'External Link', href: 'https://www.google.com' },\n  ];\n\n  const profileDataListOne = [\n    { label: 'MPIN', value: '1234457' },\n    { label: 'NPI', value: '28737823' },\n    { label: 'TIN', value: '827382847' },\n    { label: 'Primary Specialty', value: 'Internal Medicine' },\n    { label: 'Demographic/Contract Status', value: 'Active' },\n    { label: 'Provider Hold', value: 'No' },\n  ];\n\n  const profileDataListTwo = [\n    { label: 'Gender', value: 'Male' },\n    { label: 'Date of Birth', value: '07-12-1973' },\n    { label: 'Social Security Number', value: '83498484' },\n    { label: 'Primary Specialty', value: 'Internal Medicine' },\n    { label: 'Degree', value: 'Medical Doctor' },\n  ];\n\n  const dataSectionContent = (\n    <Layout.Stack alignItems=\"left\">\n      <PageBodyIntro.ProfileData profileData={profileDataListOne} />\n      <PageBodyIntro.ProfileData profileData={profileDataListTwo} />\n    </Layout.Stack>\n  );\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n    },\n    {\n      title: 'Open New Tab',\n      onClick: () => {\n        console.log('Open New Tab!');\n      },\n    },\n    {\n      title: 'Save As...',\n      onClick: () => {\n        console.log('Save As...');\n      },\n      icon: <IconMaterial icon=\"save\" />,\n    },\n  ];\n\n  const form = useForm({});\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  const options = [\n    { value: 'react', label: 'React' },\n    { value: 'ng', label: 'Angular' },\n    { value: 'svelte', label: 'Svelte' },\n    { value: 'vue', label: 'Vue' },\n    { value: 'alpine', label: 'Alpine' },\n    { value: 'ember', label: 'Ember' },\n    { value: 'stimulus', label: 'Stimulus' },\n    { value: 'preact', label: 'Preact' },\n  ];\n\n  return (\n    <PageBody>\n      <PageBodyIntro\n        sticky={{\n          top: 55,\n        }}\n      >\n        <PageBodyIntro.Row>\n          <Breadcrumbs\n            size={14}\n            divider=\"/\"\n            items={[\n              { title: 'Home', href: '/' },\n              {\n                title: 'Getting Started',\n                href: '/developers/getting-started/',\n              },\n              { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n            ]}\n          />\n          <DropdownMenu\n            label=\"Table Actions\"\n            hideLabel\n            after={<IconMaterial icon=\"more_vert\" />}\n            menuItems={menuItems}\n          />\n        </PageBodyIntro.Row>\n        <PageBodyIntro.Row>\n          <PageBodyIntro.Title>Page Title</PageBodyIntro.Title>\n          <DropdownMenu\n            label=\"Options\"\n            before={<IconMaterial icon=\"grid_view\" />}\n            after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n            menuItems={menuItems}\n          />\n        </PageBodyIntro.Row>\n        <PageBodyIntro.Row>\n          <PageBodyIntro.Profile\n            headingSection={\n              <PageBodyIntro.ProfileHeading>\n                Profile Name\n              </PageBodyIntro.ProfileHeading>\n            }\n            dataSection={dataSectionContent}\n            statusSection={<Badge variant=\"success\">Verified</Badge>}\n          />\n        </PageBodyIntro.Row>\n        <PageBodyIntro.Row>\n          <PageBodyIntro.Links linkData={subNavLinks} />\n          <PageBodyIntro.RequiredKey />\n        </PageBodyIntro.Row>\n      </PageBodyIntro>\n      <div\n        style={{\n          padding: '48px 24px',\n          backgroundColor: 'white',\n        }}\n      >\n        <Layout.Stack alignItems=\"left\" grow>\n          <Heading offset={2}>Fill Out Form</Heading>\n          <FormProvider state={form} onSubmit={onSubmit} highlighted>\n            <SelectInput\n              label=\"Select List Usage\"\n              model=\"selectlist\"\n              placeholder=\"Select List Form Provider\"\n              options={options}\n              validators={{ required: true }}\n            />\n            <SelectInputMulti\n              label=\"Your favorite framework/library\"\n              placeholder=\"Pick one\"\n              model=\"frameworks\"\n              isSearchable\n              options={options}\n              validators={{ required: true }}\n            />\n            <DateInput model=\"test-date\" validators={{ required: true }} />\n            <TextInput\n              label=\"TextInput Form\"\n              placeholder=\"Form\"\n              model=\"textForm\"\n              isClearable\n              validators={{ required: true }}\n            />\n            <Button type=\"submit\" style={{ marginTop: '15px' }}>\n              Submit\n            </Button>\n          </FormProvider>\n        </Layout.Stack>\n      </div>\n    </PageBody>\n  );\n};\n")),(0,i.kt)("h2",{id:"pagebodyintrorow"},"PageBodyIntro.Row"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Row")," to create a new row. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"alignLayout")," prop to change the left-to-right layout and ",(0,i.kt)("inlineCode",{parentName:"p"},"alignItems")," to adjust the top-to-bottom alignment. The default ",(0,i.kt)("inlineCode",{parentName:"p"},"alignLayout")," setting is ",(0,i.kt)("inlineCode",{parentName:"p"},"spaced")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"alignItems")," defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"center"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n    },\n    {\n      title: 'Open New Tab',\n      onClick: () => {\n        console.log('Open New Tab!');\n      },\n    },\n    {\n      title: 'Save As...',\n      onClick: () => {\n        console.log('Save As...');\n      },\n      icon: <IconMaterial icon=\"save\" />,\n    },\n  ];\n\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <Breadcrumbs\n          size={14}\n          divider=\"/\"\n          items={[\n            { title: 'Home', href: '/' },\n            {\n              title: 'Getting Started',\n              href: '/developers/getting-started/',\n            },\n            { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n          ]}\n        />\n        <DropdownMenu\n          label=\"Table Actions\"\n          hideLabel\n          after={<IconMaterial icon=\"more_vert\" />}\n          menuItems={menuItems}\n        />\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,i.kt)("h2",{id:"pagebodyintrotitle"},"PageBodyIntro.Title"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Title")," for the page title text. If you need to change the heading-level pass the desired heading-level string to the ",(0,i.kt)("inlineCode",{parentName:"p"},"headingLevel")," prop. The default setting is ",(0,i.kt)("inlineCode",{parentName:"p"},"h2"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Title>Page Title</PageBodyIntro.Title>\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,i.kt)("h2",{id:"pagebodyintroprofile"},"PageBodyIntro.Profile"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Profile")," is used to hold all content related to profile information and maintain the recommended layout for this section. It is comprised of three primary sections and includes a prop to supply the content for each, ",(0,i.kt)("inlineCode",{parentName:"p"},"headingSection"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"dataSection")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"statusSection"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const profileData = [\n    { label: 'MPIN', value: '1234457' },\n    { label: 'NPI', value: '28737823' },\n    { label: 'TIN', value: '827382847' },\n    { label: 'Primary Specialty', value: 'Internal Medicine' },\n    { label: 'Demographic/Contract Status', value: 'Active' },\n    { label: 'Provider Hold', value: 'No' },\n  ];\n\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Profile\n          headingSection={\n            <PageBodyIntro.ProfileHeading>\n              Profile Name\n            </PageBodyIntro.ProfileHeading>\n          }\n          dataSection={<PageBodyIntro.ProfileData profileData={profileData} />}\n          statusSection={<Badge variant=\"success\">Verified</Badge>}\n        />\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,i.kt)("p",null,"See the following sub-sections for further detail on the associated sub-components and the implementation of each."),(0,i.kt)("h3",{id:"profile-heading"},"Profile Heading"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.ProfileHeading")," for the profile heading text. If you need to change the heading-level pass the desired heading-level string to the ",(0,i.kt)("inlineCode",{parentName:"p"},"headingLevel")," prop. The default setting is ",(0,i.kt)("inlineCode",{parentName:"p"},"h3"),"."),(0,i.kt)("p",null,"To insert into the profile section layout pass this component into the ",(0,i.kt)("inlineCode",{parentName:"p"},"headingSection")," prop within ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Profile"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Profile\n          headingSection={\n            <PageBodyIntro.ProfileHeading>\n              Profile Name\n            </PageBodyIntro.ProfileHeading>\n          }\n        />\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,i.kt)("h3",{id:"profile-data"},"Profile Data"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.ProfileData")," is used to provide a list of meta-data associated with the current profile. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"profileData")," prop to pass in an array of objects that include the following two properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"label")," : label that will be displayed for the item"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value")," : corresponding value that will be displayed for the item")),(0,i.kt)("p",null,"To insert into the profile section layout pass this component into the ",(0,i.kt)("inlineCode",{parentName:"p"},"dataSection")," prop within ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Profile"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const profileData = [\n    { label: 'MPIN', value: '1234457' },\n    { label: 'NPI', value: '28737823' },\n    { label: 'TIN', value: '827382847' },\n    { label: 'Primary Specialty', value: 'Internal Medicine' },\n    { label: 'Demographic/Contract Status', value: 'Active' },\n    { label: 'Provider Hold', value: 'No' },\n  ];\n\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Profile\n          dataSection={<PageBodyIntro.ProfileData profileData={profileData} />}\n        />\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,i.kt)("h3",{id:"profile-status"},"Profile Status"),(0,i.kt)("p",null,"There is no sub-component to handle this section but rather it is recommended a ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/badge"},"Badge")," or something similar be utilized and passed into the ",(0,i.kt)("inlineCode",{parentName:"p"},"statusSection")," prop within ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Profile"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const profileData = [\n    { label: 'MPIN', value: '1234457' },\n    { label: 'NPI', value: '28737823' },\n    { label: 'TIN', value: '827382847' },\n    { label: 'Primary Specialty', value: 'Internal Medicine' },\n    { label: 'Demographic/Contract Status', value: 'Active' },\n    { label: 'Provider Hold', value: 'No' },\n  ];\n\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Profile\n          headingSection={\n            <PageBodyIntro.ProfileHeading>\n              Profile Name\n            </PageBodyIntro.ProfileHeading>\n          }\n          dataSection={<PageBodyIntro.ProfileData profileData={profileData} />}\n          statusSection={<Badge variant=\"success\">Verified</Badge>}\n        />\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,i.kt)("p",null,"If the available space below the profile heading is not sufficient and you prefer to have the status located at the bottom of this section simply add it within a new ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Row"),". In the example below the ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/status-indicator/#width"},"StatusIndicator")," is being used in full-width."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const profileData = [\n    { label: 'MPIN', value: '1234457' },\n    { label: 'NPI', value: '28737823' },\n    { label: 'TIN', value: '827382847' },\n    { label: 'Primary Specialty', value: 'Internal Medicine' },\n    { label: 'Demographic/Contract Status', value: 'Active' },\n    { label: 'Provider Hold', value: 'No' },\n  ];\n\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Profile\n          headingSection={\n            <PageBodyIntro.ProfileHeading>\n              Profile Name\n            </PageBodyIntro.ProfileHeading>\n          }\n          dataSection={<PageBodyIntro.ProfileData profileData={profileData} />}\n        />\n      </PageBodyIntro.Row>\n      <PageBodyIntro.Row alignItems=\"top\">\n        <StatusIndicator\n          variant=\"success\"\n          statusLabel=\"Status label\"\n          width=\"100%\"\n        >\n          <StatusIndicator.Icon title=\"success\" />\n          <StatusIndicator.Text>Status</StatusIndicator.Text>\n          <StatusIndicator.Link href=\"#\">Link</StatusIndicator.Link>\n        </StatusIndicator>\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,i.kt)("h2",{id:"pagebodyintrolinks"},"PageBodyIntro.Links"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Links")," to add a row of links. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"linkData")," prop to pass in an array of objects that include the following two properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"label")," : label that will be displayed for the item"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"href")," : sets the url of desired location")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const linkData = [\n    { label: 'Jump Link 1', href: '#pagebodyintrorow' },\n    { label: 'Jump Link 2', href: '#pagebodyintrotitle' },\n    { label: 'Jump Link 3', href: '#pagebodyintroprofile' },\n    { label: 'External Link', href: 'https://www.google.com' },\n  ];\n\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Links linkData={linkData} />\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,i.kt)("p",null,"One common alternative to ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Links")," would be the usage of ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/toggle-tabs"},"ToggleTabs")," as seen in the following example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [toggleValue, setToggleValue] = useState(\'low-d\');\n\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <ToggleTabs\n          onChange={(e) => setToggleValue(e.target.value)}\n          value={toggleValue}\n        >\n          <ToggleTabs.Tab label="Demographics" value="low-d" />\n          <ToggleTabs.Tab label="Policy" value="bind" />\n          <ToggleTabs.Tab label="Care Provider" value="bal" />\n          <ToggleTabs.Tab label="Coverage" value="low-p" />\n          <ToggleTabs.Tab label="Benefits" value="full" />\n        </ToggleTabs>\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n')),(0,i.kt)("h2",{id:"pagebodyintrorequiredkey"},"PageBodyIntro.RequiredKey"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.RequiredKey")," to display a key that corresponds with required fields from an associated form. The default message text is ",(0,i.kt)("inlineCode",{parentName:"p"},"Required")," but a custom message can be utilized by wrapping the text in ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.RequiredKey"),".\nThis component can be utilized outside of ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro")," and is only recommended to be placed within ",(0,i.kt)("inlineCode",{parentName:"p"},"PageBodyIntro")," if a sticky position is used and the key will be visible while the user navigates through the associated form located below. Please see the ",(0,i.kt)("a",{parentName:"p",href:"#sticky"},"Sticky")," section for an example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.RequiredKey />\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,i.kt)("h2",{id:"full-page-layout"},"Full Page Layout"),(0,i.kt)(m,{mdxType:"FullPageLayout"})),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBodyIntro}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element(s) PageBodyIntro wraps',\n    },\n    {\n      name: 'rowSpace',\n      type: 'number | string',\n      description: 'Set the spacing between rows within PageBodyIntro',\n    },\n    {\n      name: 'sticky',\n      type: 'boolean | object',\n      description: 'Apply sticky positioning to PageBodyIntro root element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBodyIntro.Row}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element(s) PageBodyIntro.Row wraps',\n    },\n    {\n      name: 'alignLayout',\n      type: \"'spaced' | 'left' | 'center' | 'right'\",\n      description: 'Set the left-to-right alignment of items on the main axis',\n    },\n    {\n      name: 'alignItems',\n      type: \"'top' | 'center' | 'bottom'\",\n      description: 'Set the top-to-bottom alignment of items on the cross axis',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBodyIntro.Title}\n  rows={[\n    {\n      name: 'children',\n      type: 'string',\n      description: 'The heading text content of PageBodyIntro.Title',\n    },\n    {\n      name: 'headingLevel',\n      type: \"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\",\n      description: 'Set the heading level',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBodyIntro.Profile}\n  rows={[\n    {\n      name: 'headingSection',\n      type: 'ReactNode',\n      description:\n        'Set the content for the heading section within PageBodyIntro.Profile',\n    },\n    {\n      name: 'dataSection',\n      type: 'ReactNode',\n      description:\n        'Set the content for the data section within PageBodyIntro.Profile',\n    },\n    {\n      name: 'statusSection',\n      type: 'ReactNode',\n      description:\n        'Set the content for the status section within PageBodyIntro.Profile',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBodyIntro.ProfileHeading}\n  rows={[\n    {\n      name: 'children',\n      type: 'string',\n      description: 'The heading text content of PageBodyIntro.ProfileHeading',\n    },\n    {\n      name: 'headingLevel',\n      type: \"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\",\n      description: 'Set the heading level',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBodyIntro.ProfileData}\n  rows={[\n    {\n      name: 'profileData',\n      type: 'array[object]',\n      description:\n        'Array of objects to be formatted and displayed within PageBodyIntro.ProfileData { label: string, value: string }',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBodyIntro.Links}\n  rows={[\n    {\n      name: 'linkData',\n      type: 'array[object]',\n      description:\n        'Array of objects to be formatted and displayed as links within PageBodyIntro.Links { label: string, href: string }',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBodyIntro.RequiredKey}\n  rows={[\n    {\n      name: 'children',\n      type: 'string',\n      description: 'The text content of PageBodyIntro.RequiredKey',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBodyIntro}\n  rows={[\n    {\n      name: 'page-body-intro-root',\n      description: 'Page body intro root element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBodyIntro.Row}\n  rows={[\n    {\n      name: 'page-body-intro-row-container',\n      description: 'Page body intro row container element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBodyIntro.Title}\n  rows={[\n    {\n      name: 'page-body-intro-title-container',\n      description: 'Page body intro title container element',\n    },\n    {\n      name: 'page-body-intro-title-text',\n      description: 'Page body intro title text element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBodyIntro.Profile}\n  rows={[\n    {\n      name: 'page-body-intro-profile-container',\n      description: 'Page body intro profile container element',\n    },\n    {\n      name: 'page-body-intro-profile-heading-status-container',\n      description:\n        'Page body intro profile heading and status container element',\n    },\n    {\n      name: 'page-body-intro-profile-data-container',\n      description: 'Page body intro profile data container element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBodyIntro.ProfileHeading}\n  rows={[\n    {\n      name: 'page-body-intro-profile-heading-text',\n      description: 'Page body intro profile-heading text element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBodyIntro.ProfileData}\n  rows={[\n    {\n      name: 'page-body-intro-profile-data-list-container',\n      description: 'Page body intro profile-data list container element',\n    },\n    {\n      name: 'page-body-intro-profile-data-list-item',\n      description: 'Page body intro profile-data list item element',\n    },\n    {\n      name: 'page-body-intro-profile-data-list-item-label-text',\n      description: 'Page body intro profile-data list item label text element',\n    },\n    {\n      name: 'page-body-intro-profile-data-list-item-value-text',\n      description: 'Page body intro profile-data list item value text element',\n    },\n    {\n      name: 'page-body-intro-profile-data-list-item-divider',\n      description: 'Page body intro profile-data list item divider element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBodyIntro.Links}\n  rows={[\n    {\n      name: 'page-body-intro-links-list-container',\n      description: 'Page body intro links list container element',\n    },\n    {\n      name: 'page-body-intro-links-list-item',\n      description: 'Page body intro links list item element',\n    },\n    {\n      name: 'page-body-intro-links-list-item-link',\n      description: 'Page body intro links list item link element',\n    },\n    {\n      name: 'page-body-intro-links-list-item-divider',\n      description: 'Page body intro links list item divider element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBodyIntro.RequiredKey}\n  rows={[\n    {\n      name: 'page-body-intro-required-key-container',\n      description: 'Page body intro required key container element',\n    },\n    {\n      name: 'page-body-intro-required-key-color-box',\n      description: 'Page body intro required key color box element',\n    },\n    {\n      name: 'page-body-intro-required-key-text-asterisk-container',\n      description:\n        'Page body intro required key text and asterisk container element',\n    },\n    {\n      name: 'page-body-intro-required-key-text',\n      description: 'Page body intro required key text element',\n    },\n    {\n      name: 'page-body-intro-required-key-asterisk',\n      description: 'Page body intro required key asterisk element',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},38898:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"page-footer",category:"Content",title:"PageFooter",description:"Used to create a page footer.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1210",pagination_prev:"web/ui/page-body",pagination_next:"web/ui/page-header"},s=void 0,d={unversionedId:"web/ui/page-footer",id:"web/ui/page-footer",isDocsHomePage:!1,title:"PageFooter",description:"Used to create a page footer.",source:"@site/docs/web/ui/PageFooter.md",sourceDirName:"web/ui",slug:"/web/ui/page-footer",permalink:"/web/ui/page-footer",tags:[],version:"current",frontMatter:{id:"page-footer",category:"Content",title:"PageFooter",description:"Used to create a page footer.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1210",pagination_prev:"web/ui/page-body",pagination_next:"web/ui/page-header"},sidebar:"docs",previous:{title:"PageBody",permalink:"/web/ui/page-body"},next:{title:"PageHeader",permalink:"/web/ui/page-header"}},p=[{value:"Sub Footer Title",id:"sub-footer-title",children:[],level:2},{value:"Sub Footer Links",id:"sub-footer-links",children:[],level:2},{value:"Footer Section",id:"footer-section",children:[{value:"Title",id:"title",children:[],level:3},{value:"Spread Sections",id:"spread-sections",children:[],level:3}],level:2},{value:"Footer Link",id:"footer-link",children:[{value:"Href",id:"href",children:[],level:3},{value:"onClick",id:"onclick",children:[],level:3},{value:"Open in New Window",id:"open-in-new-window",children:[],level:3}],level:2},{value:"Full Page Layout",id:"full-page-layout",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("FullPageLayout"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { PageFooter } from '@abyss/web/ui/PageFooter';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const subFooterLinks = [\n    { label: \'Privacy\', href: \'https://www.google.com\' },\n    { label: \'Terms Of Use\', href: \'#\' },\n    { label: \'Opt Out\', href: \'#\' },\n    { label: \'Accessibility\', href: \'#\' },\n  ];\n\n  return (\n    <PageFooter\n      subFooterLinks={subFooterLinks}\n      subFooterTitle="United HealthCare Services, Inc"\n    >\n      <PageFooter.Section title="Section Title">\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n      </PageFooter.Section>\n      <PageFooter.Section title="Section Title">\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n      </PageFooter.Section>\n      <PageFooter.Section title="Section Title">\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n      </PageFooter.Section>\n      <PageFooter.Section title="Section Title">\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n      </PageFooter.Section>\n    </PageFooter>\n  );\n};\n')),(0,i.kt)("h2",{id:"sub-footer-title"},"Sub Footer Title"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"subFooterTitle")," prop to change the title of the copyright section."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<PageFooter subFooterTitle="United HealthCare Services, Inc"></PageFooter>\n')),(0,i.kt)("h2",{id:"sub-footer-links"},"Sub Footer Links"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"subFooterLinks")," prop to add the subfooter link array. Use ",(0,i.kt)("inlineCode",{parentName:"p"},"href")," to set the link to a different page and use ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," to set the descriptive text for the ",(0,i.kt)("inlineCode",{parentName:"p"},"href"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const subFooterLinks = [\n    { label: 'Privacy', href: '#' },\n    { label: 'Terms Of Use', href: '#' },\n    { label: 'Opt Out', href: '#' },\n    { label: 'Accessibility', href: '#' },\n  ];\n  return <PageFooter subFooterLinks={subFooterLinks}></PageFooter>;\n};\n")),(0,i.kt)("h2",{id:"footer-section"},"Footer Section"),(0,i.kt)("h3",{id:"title"},"Title"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," prop to add a title to the footer section container."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<PageFooter>\n  <PageFooter.Section title="Section Title"></PageFooter.Section>\n</PageFooter>\n')),(0,i.kt)("h3",{id:"spread-sections"},"Spread Sections"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"spreadSections")," prop to spread section column content across the footer container. This is only recommended when using 4 or more section columns. Default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," and content is left-aligned."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const subFooterLinks = [\n    { label: \'Privacy\', href: \'#\' },\n    { label: \'Terms Of Use\', href: \'#\' },\n    { label: \'Opt Out\', href: \'#\' },\n    { label: \'Accessibility\', href: \'#\' },\n  ];\n\n  return (\n    <PageFooter\n      subFooterLinks={subFooterLinks}\n      subFooterTitle="United HealthCare Services, Inc"\n      spreadSections\n    >\n      <PageFooter.Section title="Section Title">\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n      </PageFooter.Section>\n      <PageFooter.Section title="Section Title">\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n      </PageFooter.Section>\n      <PageFooter.Section title="Section Title">\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n      </PageFooter.Section>\n      <PageFooter.Section title="Section Title">\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n        <PageFooter.Link href="#">Page Link </PageFooter.Link>\n      </PageFooter.Section>\n    </PageFooter>\n  );\n};\n')),(0,i.kt)("h2",{id:"footer-link"},"Footer Link"),(0,i.kt)("p",null,"The Footer Link leverages props from the Link component. Find additional resources on our ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/link"},"Link")," page."),(0,i.kt)("h3",{id:"href"},"Href"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"href")," prop to set the link to a separate page."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<PageFooter>\n  <PageFooter.Section title="Section Title">\n    <PageFooter.Link href="https://www.google.com">\n      Regular Link\n    </PageFooter.Link>\n    <PageFooter.Link href="#">Based On Root Path</PageFooter.Link>\n  </PageFooter.Section>\n</PageFooter>\n')),(0,i.kt)("h3",{id:"onclick"},"onClick"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"onClick")," prop to trigger a custom function when the footer link title is clicked."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<PageFooter>\n  <PageFooter.Section title=\"Section Title\">\n    <PageFooter.Link\n      onClick={() => {\n        console.log('onClick triggered');\n      }}\n    >\n      Page Link onClick\n    </PageFooter.Link>\n  </PageFooter.Section>\n</PageFooter>\n")),(0,i.kt)("h3",{id:"open-in-new-window"},"Open in New Window"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"openNewWindow")," prop tp specify wheter links open in a new window, ",(0,i.kt)("inlineCode",{parentName:"p"},"openNewWindow")," is false for relative links. Absolute links will open in a new window."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<PageFooter>\n  <PageFooter.Section title="Relative Link">\n    <PageFooter.Link href="#">Relative - Same Window</PageFooter.Link>\n    <PageFooter.Link href="#" openNewWindow>\n      Relative - New Window\n    </PageFooter.Link>\n  </PageFooter.Section>\n  <PageFooter.Section title="Absolute Link">\n    <PageFooter.Link href="https://www.google.com" openNewWindow={false}>\n      Absolute - Same Window\n    </PageFooter.Link>\n    <PageFooter.Link href="https://www.google.com">\n      Absolute - New Window\n    </PageFooter.Link>\n  </PageFooter.Section>\n</PageFooter>\n')),(0,i.kt)("h2",{id:"full-page-layout"},"Full Page Layout"),(0,i.kt)(m,{mdxType:"FullPageLayout"})),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageFooter}\n  rows={[\n    {\n      name: 'children',\n      type: 'React Node',\n      description: 'The children element of the footer',\n    },\n    {\n      name: 'subFooterTitle',\n      type: 'string',\n      description: 'Sets the title of the subfooter copyright section',\n    },\n    {\n      name: 'subFooterLinks',\n      type: 'array[object]',\n      description: 'Array of subfooter data. { label: string, href: string}',\n    },\n    {\n      name: 'fullWidth',\n      type: 'boolean',\n      description: 'Set the max width of the footer to full screen',\n    },\n    {\n      name: 'spreadSections',\n      type: 'boolean',\n      description: 'Spread section column content across the footer container',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageFooter.Section}\n  rows={[\n    {\n      name: 'children',\n      type: 'React Node',\n      description: 'The children element of the footer section',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the footer section container',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageFooter.Link}\n  rows={[\n    {\n      name: 'href',\n      type: 'string',\n      description: 'Set the URL of the link',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'Set the text of the link',\n    },\n    {\n      name: 'onClick',\n      type: 'function',\n      description: 'Used to trigger a custom function when the link is clicked',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageFooter}\n  rows={[\n    {\n      name: 'page-footer-root',\n      description: 'Footer root',\n    },\n    {\n      name: 'page-footer-container',\n      description: 'Footer container',\n    },\n    {\n      name: 'page-footer-links',\n      description: 'Footer links section',\n    },\n    {\n      name: 'page-footer-brandmark-wrapper',\n      description: 'Brandmark wrapper',\n    },\n    {\n      name: 'page-footer-brandmark-container',\n      description: 'Brandmark container',\n    },\n    {\n      name: 'page-footer-copyright-container',\n      description: 'Footer Copyright container',\n    },\n    {\n      name: 'page-footer-copyright',\n      description: 'Copyright container',\n    },\n    {\n      name: 'page-footer-sub-wrapper',\n      description: 'Sub footer wrapper',\n    },\n    {\n      name: 'page-footer-sub-nav',\n      description: 'Sub footer navigation container',\n    },\n    {\n      name: 'page-footer-sub-list-container',\n      description: 'Sub footer link list container',\n    },\n    {\n      name: 'page-footer-sub-list',\n      description: 'Sub footer link list',\n    },\n    {\n      name: 'page-footer-sub-link',\n      description: 'Sub footer link',\n    },\n    {\n      name: 'page-footer-sub-divider',\n      description: 'Sub footer link divider',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageFooter.Section}\n  rows={[\n    {\n      name: 'page-footer-section',\n      description: 'Footer section element',\n    },\n    {\n      name: 'page-footer-section-title',\n      description: 'Footer section title',\n    },\n    {\n      name: 'page-footer-list-containe',\n      description: 'Footer list section',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageFooter.Link}\n  rows={[\n    {\n      name: 'page-footer-link-item',\n      description: 'Link item container',\n    },\n    {\n      name: 'page-footer-link',\n      description: 'Link item',\n    },\n    {\n      name: 'page-footer-link-icon-insert',\n      description: 'Link item chevron icon insert',\n    },\n    {\n      name: 'page-footer-link-icon',\n      description: 'Link chevron icon',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to the next focusable element; all focusable elements in the footer are included in the page Tab sequence.',\n    },\n    {\n      name: 'Shift + Tab',\n      description:\n        'Moves focus to the previous focusable element; all focusable elements in the footer are included in the page Tab sequence.',\n    },\n    {\n      name: 'Enter',\n      description:\n        'When focus is on the link element, pressing Enter will take the user to a separate page.',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},40462:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"page-header",category:"Content",title:"PageHeader",description:"Used to create a page header.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=6132%3A24108",pagination_prev:"web/ui/page-footer",pagination_next:"web/ui/step-indicator"},s=void 0,d={unversionedId:"web/ui/page-header",id:"web/ui/page-header",isDocsHomePage:!1,title:"PageHeader",description:"Used to create a page header.",source:"@site/docs/web/ui/PageHeader.md",sourceDirName:"web/ui",slug:"/web/ui/page-header",permalink:"/web/ui/page-header",tags:[],version:"current",frontMatter:{id:"page-header",category:"Content",title:"PageHeader",description:"Used to create a page header.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=6132%3A24108",pagination_prev:"web/ui/page-footer",pagination_next:"web/ui/step-indicator"},sidebar:"docs",previous:{title:"PageFooter",permalink:"/web/ui/page-footer"},next:{title:"StepIndicator",permalink:"/web/ui/step-indicator"}},p=[{value:"Logo",id:"logo",children:[],level:2},{value:"Logo Redirect",id:"logo-redirect",children:[],level:2},{value:"Logo Title",id:"logo-title",children:[],level:2},{value:"Hide Logo",id:"hide-logo",children:[],level:2},{value:"Top and Bottom Menu Items",id:"top-and-bottom-menu-items",children:[{value:"Disabled NavMenu.Item",id:"disabled-navmenuitem",children:[],level:3}],level:2},{value:"Children",id:"children",children:[],level:2},{value:"Additional Drawer Content",id:"additional-drawer-content",children:[],level:2},{value:"Full Width",id:"full-width",children:[],level:2},{value:"Header.Toolbar",id:"headertoolbar",children:[{value:"Space",id:"space",children:[],level:3}],level:2},{value:"Full Page Layout",id:"full-page-layout",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("FullPageLayout"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { PageHeader } from '@abyss/web/ui/PageHeader';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const topMenuItems = [\n    {\n      title: \'Utility Dropdown\',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column>\n            <NavMenu.Item\n              title="Test Link"\n              description={\n                \'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vitae lorem posuere augue volutpat tincidunt ut in odio. Sed non vehicula tellus.\'\n              }\n              href="https://abyss.uhc.com/"\n            />\n            <NavMenu.Item\n              title="Test Link 2"\n              description={\n                \'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vitae lorem posuere augue volutpat tincidunt ut in odio. Sed non vehicula tellus.\'\n              }\n              href="https://abyss.uhc.com/"\n            />\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n    {\n      title: \'Utility Link\',\n      href: \'https://abyss.uhc.com/\',\n    },\n    {\n      title: (\n        <Layout.Group space={0}>\n          TrackIt\n          <div\n            style={{\n              display: \'flex\',\n              justifyContent: \'center\',\n              alignItems: \'center\',\n              height: \'14px\',\n              width: \'14px\',\n              borderRadius: \'50%\',\n              border: \'solid 1px #FFAF1F\',\n              backgroundColor: \'#FEF7E5\',\n              marginLeft: \'4px\',\n              fontSize: \'10px\',\n              fontWeight: \'700\',\n              color: \'#002677\',\n            }}\n          >\n            8\n          </div>\n        </Layout.Group>\n      ),\n      href: \'#\',\n    },\n    {\n      title: (\n        <Layout.Group space={0}>\n          John\n          <div\n            style={{\n              display: \'flex\',\n              justifyContent: \'center\',\n              alignItems: \'center\',\n              height: \'14px\',\n              width: \'14px\',\n              borderRadius: \'50%\',\n              border: \'solid 1px #002677\',\n              marginLeft: \'4px\',\n              fontSize: \'10px\',\n              fontWeight: \'$bold\',\n            }}\n          >\n            <IconMaterial icon="person" size="$sm" />\n          </div>\n        </Layout.Group>\n      ),\n      href: \'#\',\n    },\n  ];\n  const bottomMenuItems = [\n    { title: \'Dashboard\', href: \'#\' },\n    {\n      title: \'Dropdown Menu\',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column title="Section Title">\n            <NavMenu.Item\n              title="HELLO"\n              href="https://abyss.uhc.com/"\n              description="CSS-in-JS with best-in-class developer experience."\n            />\n            <NavMenu.Item\n              title="GOODBYE"\n              href="https://abyss.uhc.com/"\n              description="Description goes here"\n            />\n          </NavMenu.Column>\n          <NavMenu.Column>\n            <NavMenu.Item\n              title="Sample onClick"\n              onClick={() => console.log(\'onClick pressed\')}\n              description="A message will be logged to the console when this is clicked."\n            />\n          </NavMenu.Column>\n          <NavMenu.Column title="Other Section Title">\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n            <NavMenu.Item\n              title="Colors"\n              href="#"\n              description="Description goes here"\n            />\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n  ];\n  return (\n    <React.Fragment>\n      <PageHeader\n        topMenuItems={topMenuItems}\n        bottomMenuItems={bottomMenuItems}\n        css={{ \'abyss-page-header-root\': { zIndex: 210 } }}\n      />\n      <Box color="$white" height="100px">\n        <Label css={{ paddingTop: \'$md\' }}>Your page content goes here</Label>\n      </Box>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"logo"},"Logo"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"logo")," prop to provide the logo that will be displayed on the far left side of the header. By default, it will show either the UHC or Optum logo, depending on the page's theme."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<PageHeader logoTitle="Default Logo" />\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<PageHeader\n  logo={<IconMaterial icon="anchor" size="$lg" />}\n  logoTitle="IconMaterial Logo"\n/>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<PageHeader\n  logo={\n    <Brandmark\n      brand="uhc"\n      size="$sm"\n      affiliate="uhc"\n      variant="monogram"\n      color="blue"\n    />\n  }\n  logoTitle="Brandmark Logo"\n/>\n')),(0,i.kt)("h2",{id:"logo-redirect"},"Logo Redirect"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"logoRedirect")," prop to provide a link that the ",(0,i.kt)("inlineCode",{parentName:"p"},"logo")," will redirect to when clicked. In most cases, you would want this logo to redirect to your website's home page. If a value is not passed in, the logo will not redirect to anything."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<PageHeader logoRedirect="https://abyss.uhc.com" logoTitle="Logo Redirect" />\n')),(0,i.kt)("h2",{id:"logo-title"},"Logo Title"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"logoTitle")," prop to specify additional detail about the title of the page. It will be displayed directly to the right of the main logo, with a vertical divider between the logo and the logo title."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<PageHeader logoTitle="Logo Title" />\n')),(0,i.kt)("h2",{id:"hide-logo"},"Hide Logo"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"hideLogo")," prop to hide the logo."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<PageHeader hideLogo>Header Without Logo</PageHeader>\n")),(0,i.kt)("h2",{id:"top-and-bottom-menu-items"},"Top and Bottom Menu Items"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"bottomMenuItems")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"topMenuItems")," props to create navigation bars in the header."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"bottomMenuItems")," is given, it will create a ",(0,i.kt)("a",{parentName:"li",href:"/web/ui/nav-menu"},"NavMenu")," under the header (this would be traditionally used to provide links for the distinct categories / pages within the website)."),(0,i.kt)("li",{parentName:"ul"},"When ",(0,i.kt)("inlineCode",{parentName:"li"},"topMenuItems")," is given, it will create a ",(0,i.kt)("a",{parentName:"li",href:"/web/ui/nav-menu"},"NavMenu")," at the top right of the header (this would be traditionally used for things like login / profile information and links, etc.).")),(0,i.kt)("p",null,"Both of these props require the same input structure: an array of objects with the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"{\n  title: node,\n  href: string,\n  onClick: function,\n  content: node,\n}\n")),(0,i.kt)("br",null),(0,i.kt)("p",null,"Each object should have ",(0,i.kt)("strong",{parentName:"p"},"one")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"href"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"onClick"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"content")," - if the object has a value for ",(0,i.kt)("inlineCode",{parentName:"p"},"href")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"onClick"),", then in the menu it will be a link to that page, or a button, respectively; if, instead, it has ",(0,i.kt)("inlineCode",{parentName:"p"},"content")," present, in the menu it will be a dropdown menu that, when opened, will display the objects inside ",(0,i.kt)("inlineCode",{parentName:"p"},"content"),"."),(0,i.kt)("p",null,"When the window size is too small (ex. on a phone), an expand button will appear on the left side of the header, and these two menus will appear there instead of where they normally do."),(0,i.kt)("p",null,"NOTE: both of these props leverage the ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/nav-menu"},"NavMenu")," component, so view its documentation ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/nav-menu"},"here")," for more details on what to pass in for it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const bottomMenuItems = [\n    {\n      title: 'Bottom Menu Items',\n      href: 'https://abyss.uhc.com',\n    },\n    {\n      title: 'Sample onClick',\n      onClick: () => console.log('onClick clicked'),\n    },\n    {\n      title: 'Sample Dropdown 2',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column>\n            <NavMenu.Item\n              title=\"Info\"\n              href=\"#\"\n              description=\"This is where you can put links, etc. relevant to the dropdown's title.\"\n            />\n            <NavMenu.Item\n              title=\"Sample onClick\"\n              onClick={() => console.log('onClick pressed')}\n              description=\"A message will be logged to the console when this is clicked.\"\n            />\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n  ];\n  const topMenuItems = [\n    {\n      title: 'Top Menu Items',\n      href: 'https://abyss.uhc.com',\n    },\n    {\n      title: 'Sample Dropdown 1',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column>\n            <NavMenu.Item\n              title=\"Info\"\n              href=\"#\"\n              description=\"This is where you can put links, etc. relevant to the dropdown's title.\"\n            />\n            <NavMenu.Item\n              title=\"Sample onClick\"\n              onClick={() => console.log('onClick pressed')}\n              description=\"A message will be logged to the console when this is clicked.\"\n            />\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n  ];\n  return (\n    <React.Fragment>\n      <PageHeader\n        topMenuItems={topMenuItems}\n        bottomMenuItems={bottomMenuItems}\n        css={{ 'abyss-page-header-root': { zIndex: 209 } }}\n      />\n      <Box color=\"$white\" height=\"100px\">\n        <Label css={{ padding: '$md' }}>Your page content goes here</Label>\n      </Box>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h3",{id:"disabled-navmenuitem"},"Disabled NavMenu.Item"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to disable an individual NavMenu.Item."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const bottomMenuItems = [\n    {\n      title: \'Sample Dropdown 2\',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column>\n            <NavMenu.Item\n              title="Info"\n              href="#"\n              description="This is where you can put links, etc. relevant to the dropdown\'s title."\n              isDisabled\n            />\n            <NavMenu.Item\n              title="Sample onClick"\n              onClick={() => console.log(\'onClick pressed\')}\n              description="A message will be logged to the console when this is clicked."\n            />\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n  ];\n  const topMenuItems = [\n    {\n      title: \'Sample Dropdown 1\',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column>\n            <NavMenu.Item\n              title="Info"\n              href="#"\n              description="This is where you can put links, etc. relevant to the dropdown\'s title."\n              isDisabled\n            />\n            <NavMenu.Item\n              title="Sample onClick"\n              onClick={() => console.log(\'onClick pressed\')}\n              description="A message will be logged to the console when this is clicked."\n            />\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n  ];\n  return (\n    <React.Fragment>\n      <PageHeader\n        topMenuItems={topMenuItems}\n        bottomMenuItems={bottomMenuItems}\n        css={{ \'abyss-page-header-root\': { zIndex: 209 } }}\n      />\n      <Box color="$white" height="100px">\n        <Label css={{ padding: \'$md\' }}>Your page content goes here</Label>\n      </Box>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"children"},"Children"),(0,i.kt)("p",null,"When children are contained inside the Header component, they will be rendered on the right side of the header. If ",(0,i.kt)("inlineCode",{parentName:"p"},"topMenuItems")," is passed in as well, there will be a horizontal divider between the toolbar and the children. To use a pre-formatted design that aligns items horizontally, use the ",(0,i.kt)("a",{parentName:"p",href:"#headertoolbar"},"Header.Toolbar")," component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<PageHeader>\n  <Text css={{ padding: '$md' }}>Children without topMenuItems</Text>\n</PageHeader>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const topMenuItems = [\n    {\n      title: 'Sample dropdown menu',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column>\n            <NavMenu.Item\n              title=\"Test Link\"\n              description={\n                'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vitae lorem posuere augue volutpat tincidunt ut in odio. Sed non vehicula tellus.'\n              }\n              href=\"https://abyss.uhc.com/\"\n            />\n            <NavMenu.Item\n              title=\"Test Link 2\"\n              description={\n                'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vitae lorem posuere augue volutpat tincidunt ut in odio. Sed non vehicula tellus.'\n              }\n              href=\"https://abyss.uhc.com/\"\n            />\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n    {\n      title: 'Sample link 2',\n      href: 'https://abyss.uhc.com/',\n    },\n  ];\n  return (\n    <PageHeader\n      topMenuItems={topMenuItems}\n      css={{ 'abyss-page-header-root': { zIndex: 208 } }}\n    >\n      <Text css={{ padding: '$md' }}>Children with topMenuItems</Text>\n    </PageHeader>\n  );\n};\n")),(0,i.kt)("h2",{id:"additional-drawer-content"},"Additional Drawer Content"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"extraDrawerContent")," prop to add any additional content to the top of the drawer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const bottomMenuItems = [\n    {\n      title: \'Sample Dropdown 2\',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column>\n            <NavMenu.Item\n              title="Info"\n              href="#"\n              description="This is where you can put links, etc. relevant to the dropdown\'s title."\n              isDisabled\n            />\n            <NavMenu.Item\n              title="Sample onClick"\n              onClick={() => console.log(\'onClick pressed\')}\n              description="A message will be logged to the console when this is clicked."\n            />\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n  ];\n\n  const topMenuItems = [\n    {\n      title: \'Sample Dropdown 1\',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column>\n            <NavMenu.Item\n              title="Info"\n              href="#"\n              description="This is where you can put links, etc. relevant to the dropdown\'s title."\n              isDisabled\n            />\n            <NavMenu.Item\n              title="Sample onClick"\n              onClick={() => console.log(\'onClick pressed\')}\n              description="A message will be logged to the console when this is clicked."\n            />\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n  ];\n\n  const modal = useOverlay(\'pageheader-model\');\n\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n    modal.close();\n  };\n\n  const drawerContent = (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder="Search..."\n        label="Search Site"\n        onSearch={handleSearch}\n        isClearable\n        options={MockData}\n        keys={[\'value\']}\n        model="search-input-form"\n      />\n    </FormProvider>\n  );\n\n  return (\n    <React.Fragment>\n      <PageHeader\n        extraDrawerContent={drawerContent}\n        model="pageheader-model"\n        topMenuItems={topMenuItems}\n        bottomMenuItems={bottomMenuItems}\n        css={{ \'abyss-page-header-root\': { zIndex: 209 } }}\n      />\n      <Box color="$white" height="100px">\n        <Label css={{ padding: \'$md\' }}>Your page content goes here</Label>\n      </Box>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"full-width"},"Full Width"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"fullWidth")," prop to set the width of the Header component to full screen."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<PageHeader fullWidth>\n  <Text css={{ padding: '$md' }}>\n    Header component will stretch to full screen.\n  </Text>\n</PageHeader>\n")),(0,i.kt)("h2",{id:"headertoolbar"},"Header.Toolbar"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Header.Toolbar")," component to render ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," in a pre-formatted layout. When using this component, its children will render horizontally on the far right of the header. You can use multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"Header.Toolbar"),"s if you would like multiple lines."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<PageHeader>\n  <PageHeader.Toolbar space={10}>\n    <SelectInput\n      label=\"Profile Option 1\"\n      value=\"Test 1\"\n      options={[{ value: 'Test 1', label: 'Test 1' }]}\n    />\n    <SelectInput\n      label=\"Profile Option 2\"\n      value=\"Test 2\"\n      options={[{ value: 'Test 2', label: 'Test 2' }]}\n      css={{\n        'abyss-select-input-root': {\n          marginTop: '0 !important',\n        },\n      }}\n    />\n  </PageHeader.Toolbar>\n</PageHeader>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const topMenuItems = [\n    {\n      title: 'Sample Dropdown Menu',\n      content: (\n        <NavMenu.Columns>\n          <NavMenu.Column>\n            <NavMenu.Item\n              title=\"Test Link\"\n              description={\n                'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vitae lorem posuere augue volutpat tincidunt ut in odio. Sed non vehicula tellus.'\n              }\n              href=\"https://abyss.uhc.com/\"\n            />\n            <NavMenu.Item\n              title=\"Test Link 2\"\n              description={\n                'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi vitae lorem posuere augue volutpat tincidunt ut in odio. Sed non vehicula tellus.'\n              }\n              href=\"https://abyss.uhc.com/\"\n            />\n          </NavMenu.Column>\n        </NavMenu.Columns>\n      ),\n    },\n    {\n      title: 'Sample Link',\n      href: 'https://abyss.uhc.com/',\n    },\n  ];\n  return (\n    <PageHeader\n      topMenuItems={topMenuItems}\n      css={{ 'abyss-page-header-root': { zIndex: 208 } }}\n    >\n      <PageHeader.Toolbar space={10}>\n        <SelectInput\n          label=\"Profile Option 1\"\n          value=\"Test 1\"\n          options={[{ value: 'Test 1', label: 'Test 1' }]}\n        />\n        <SelectInput\n          label=\"Profile Option 2\"\n          value=\"Test 2\"\n          options={[{ value: 'Test 2', label: 'Test 2' }]}\n          css={{\n            'abyss-select-input-root': {\n              marginTop: '0 !important',\n            },\n          }}\n        />\n      </PageHeader.Toolbar>\n    </PageHeader>\n  );\n};\n")),(0,i.kt)("h3",{id:"space"},"Space"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"space")," prop with ",(0,i.kt)("inlineCode",{parentName:"p"},"PageHeader.Toolbar")," to specify the amount of white space that will separate elements inside the component from each other. The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<PageHeader>\n  <PageHeader.Toolbar space={50}>\n    <SelectInput\n      label=\"Profile Option 1\"\n      value=\"Test 1\"\n      options={[{ value: 'Test 1', label: 'Test 1' }]}\n    />\n    <SelectInput\n      label=\"Profile Option 2\"\n      value=\"Test 2\"\n      options={[{ value: 'Test 2', label: 'Test 2' }]}\n      css={{\n        'abyss-select-input-root': {\n          marginTop: '0 !important',\n        },\n      }}\n    />\n  </PageHeader.Toolbar>\n</PageHeader>\n")),(0,i.kt)("h2",{id:"full-page-layout"},"Full Page Layout"),(0,i.kt)(m,{mdxType:"FullPageLayout"})),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageHeader}\n  rows={[\n    {\n      name: 'logo',\n      type: 'ReactNode',\n      description:\n        'The logo component that will be displayed on the left side of the header.',\n    },\n    {\n      name: 'logoRedirect',\n      type: 'string',\n      description: 'A link that the logo will redirect to when clicked.',\n    },\n    {\n      name: 'logoTitle',\n      type: 'string',\n      description: 'Text that will be displayed to the right of the logo.',\n    },\n    {\n      name: 'hideLogo',\n      type: 'boolean',\n      description: 'Flag to hide the logo in the header',\n    },\n    {\n      name: 'bottomMenuItems',\n      type: 'shape',\n      description:\n        'The items that will be formatted and displayed in a navigation menu directly under the header.',\n    },\n    {\n      name: 'topMenuItems',\n      type: 'shape',\n      description:\n        'The items that will be formatted and displayed in a toolbar at the top right of the header.',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description:\n        'The items that will be rendered on the right side of the header, under the topMenuItems bar (if it exists).',\n    },\n    {\n      name: 'fullWidth',\n      type: 'boolean',\n      description: 'Set the width of the header to full screen',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageHeader.Toolbar}\n  rows={[\n    {\n      name: 'space',\n      type: 'number',\n      description: 'The number of pixels of white space between each child',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The elements that will be rendered horizontally.',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageHeader}\n  rows={[\n    {\n      name: 'page-header-root',\n      description: 'Header root element',\n    },\n    {\n      name: 'page-header-container',\n      description:\n        'Container for the main section of the header (everything except the bottom NavMenu)',\n    },\n    {\n      name: 'page-header-expand-button',\n      description:\n        'Button to expand the side drawer when screen size is too small',\n    },\n    {\n      name: 'page-header-logo',\n      description: 'Logo displayed on the left of the header',\n    },\n    {\n      name: 'page-header-logo-title',\n      description: 'Title displayed next to logo',\n    },\n    {\n      name: 'page-header-top-nav-menu',\n      description:\n        'Container for the navigation menu at the top right of the header',\n    },\n    {\n      name: 'page-header-bottom-nav-menu',\n      description:\n        'Container for the navigation menu at the bottom of the header',\n    },\n    {\n      name: 'page-header-heading-text-container',\n      description:\n        'Container for the heading text that displays additional detail about the title of the page',\n    },\n    {\n      name: 'page-header-vertical-rule',\n      description: 'Vertical rule that divides header logo and logo title',\n    },\n    {\n      name: 'page-header-content',\n      description: 'Content for header',\n    },\n    {\n      name: 'page-header-toolbars',\n      description: 'Header toolbars',\n    },\n    {\n      name: 'page-header-horizontal-rule',\n      description: 'Horizontal rule that divides items in header toolbar',\n    },\n    {\n      name: 'page-header-drawer-horizontal-rule',\n      description: 'Horizontal rule that divides items in drawer',\n    },\n    {\n      name: 'page-header-drawer-menu-main',\n      description: 'Main header drawer menu',\n    },\n    {\n      name: 'page-header-drawer-menu-sub',\n      description: 'Sub header drawer menu',\n    },\n    {\n      name: 'page-header-drawer-menu-item',\n      description: 'Header drawer menu item',\n    },\n    {\n      name: 'page-header-drawer-menu-item-button',\n      description: 'Header drawer menu item',\n    },\n    {\n      name: 'page-header-drawer-back-button-container',\n      description: 'Container for back button in header drawer',\n    },\n    {\n      name: 'page-header-drawer-selected-menu-name',\n      description: 'Container for selected menu in header',\n    },\n    {\n      name: 'page-header-drawer-header-container',\n      description: 'Container for drawer header',\n    },\n    {\n      name: 'page-header-drawer-selection-container',\n      description: 'Container for drawer selection content',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageHeader.Toolbar}\n  rows={[\n    {\n      name: 'page-header-toolbar-root',\n      description: 'Toolbar root element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description: 'Moves focus to the next focusable element.',\n    },\n    {\n      name: 'Enter',\n      description:\n        'If the logo is selected, redirects to the specified link. If focus is inside the navigation menu, redirects to the link if the menu bar item is a redirect, or opens the relevant dropdown menu if the item has one.',\n    },\n    {\n      name: 'Space',\n      description:\n        'If focus on a menu bar item with a dropdown, opens the relevant dropdown menu.',\n    },\n    {\n      name: 'Left Arrow',\n      description:\n        'When focus is inside one of the navigation menus, focuses the previous menu bar item.',\n    },\n    {\n      name: 'Up Arrow',\n      description:\n        'When focus is inside one of the navigation menus, focuses the previous menu bar item.',\n    },\n    {\n      name: 'Right Arrow',\n      description:\n        'When focus is inside one of the navigation menus, focuses the next menu bar item.',\n    },\n    {\n      name: 'Down Arrow',\n      description:\n        'When focus is inside one of the navigation menus, focuses the next menu bar item.  If focus is on an open menu bar item, moves focus into its dropdown menu.',\n    },\n    {\n      name: 'Escape',\n      description:\n        'Closes open dropdown menu and moves focus to its menu bar item.',\n    },\n    {\n      name: 'Home',\n      description:\n        'If inside a navigation menu, moves focus to the first item in the menu.',\n    },\n    {\n      name: 'End',\n      description:\n        'If inside a navigation menu, moves focus to the last item in the menu.',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},825:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"pagination",category:"Navigation",title:"Pagination",description:"Navigates between a set number of pages.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1564",pagination_prev:"web/ui/nav-menu",pagination_next:"web/ui/router"},d=void 0,p={unversionedId:"web/ui/pagination",id:"web/ui/pagination",isDocsHomePage:!1,title:"Pagination",description:"Navigates between a set number of pages.",source:"@site/docs/web/ui/Pagination.md",sourceDirName:"web/ui",slug:"/web/ui/pagination",permalink:"/web/ui/pagination",tags:[],version:"current",frontMatter:{id:"pagination",category:"Navigation",title:"Pagination",description:"Navigates between a set number of pages.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1564",pagination_prev:"web/ui/nav-menu",pagination_next:"web/ui/router"},sidebar:"docs",previous:{title:"NavMenu",permalink:"/web/ui/nav-menu"},next:{title:"Router",permalink:"/web/ui/router"}},c=[{value:"Pagination",id:"pagination",children:[],level:2},{value:"Callback Functions",id:"callback-functions",children:[],level:2},{value:"Boolean Checks",id:"boolean-checks",children:[],level:2},{value:"Variants",id:"variants",children:[],level:2},{value:"PageSize",id:"pagesize",children:[],level:2},{value:"ResultCount",id:"resultcount",children:[{value:"Additional Text",id:"additional-text",children:[],level:3}],level:2},{value:"RowCount",id:"rowcount",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Pagination } from '@abyss/web/ui/Pagination';\n")),(0,r.kt)("h2",{id:"pagination"},"Pagination"),(0,r.kt)("p",null,"Pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"pages")," variable into the ",(0,r.kt)("inlineCode",{parentName:"p"},"usePagination")," hook to match how many pages you would like to display. Find additional resources on ",(0,r.kt)("inlineCode",{parentName:"p"},"usePagination")," ",(0,r.kt)("a",{parentName:"p",href:"/web/hooks/use-pagination"},"here"),"."),(0,r.kt)("p",null,"Examples of pagination being used can be seen in ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/data-table"},"DataTable")," and ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/search-results"},"Search Results"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const paginationProps = usePagination({ pages: 10 });\n\n  return (\n    <React.Fragment>\n      <Card>\n        <Card.Title>Page {paginationProps.state.currentPage}</Card.Title>\n        <Card.Section>\n          <Pagination {...paginationProps} />\n        </Card.Section>\n      </Card>\n      <pre>{JSON.stringify(paginationProps, null, 2)}</pre>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"callback-functions"},"Callback Functions"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"previousPage"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"gotoPage"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"nextPage")," are callback functions to let pagination know how to navigate to certain pages."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { gotoPage, previousPage, nextPage, state, ...paginationProps } =\n    usePagination({\n      pages: 10,\n    });\n\n  const { currentPage } = state;\n\n  return (\n    <Card>\n      <Card.Title>Page {currentPage}</Card.Title>\n      <Card.Section>\n        <Pagination\n          {...paginationProps}\n          gotoPage={gotoPage}\n          previousPage={previousPage}\n          nextPage={nextPage}\n        />\n      </Card.Section>\n    </Card>\n  );\n};\n")),(0,r.kt)("h2",{id:"boolean-checks"},"Boolean Checks"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"canPreviousPage")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"canNextPage")," are used to check if the previous or next page is accessible given the current page index."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { canPreviousPage, canNextPage, state, ...paginationProps } =\n    usePagination({ pages: 10 });\n\n  const { currentPage, pageCount } = state;\n\n  return (\n    <Card>\n      <Card.Title>Page {currentPage}</Card.Title>\n      <Card.Section>\n        <Pagination\n          {...paginationProps}\n          canPreviousPage={canPreviousPage}\n          canNextPage={canNextPage}\n        />\n      </Card.Section>\n    </Card>\n  );\n};\n")),(0,r.kt)("h2",{id:"variants"},"Variants"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"variant")," prop to change the format of the pagination display. Possible options are ",(0,r.kt)("inlineCode",{parentName:"p"},"compact")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"extended"),", and the default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"extended"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 10 });\n\n  return (\n    <Card>\n      <Card.Title>\n        Page {paginationProps.state.currentPage} (Compact Variant)\n      </Card.Title>\n      <Card.Section>\n        <Pagination {...paginationProps} variant="compact" />\n      </Card.Section>\n    </Card>\n  );\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const paginationProps = usePagination({ pages: 10 });\n\n  return (\n    <Card>\n      <Card.Title>\n        Page {paginationProps.state.currentPage} (Extended Variant - Default)\n      </Card.Title>\n      <Card.Section>\n        <Pagination {...paginationProps} />\n      </Card.Section>\n    </Card>\n  );\n};\n")),(0,r.kt)("h2",{id:"pagesize"},"PageSize"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"PageSize")," component is used to change how many rows to display per page. For an example of its usage please visit ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/data-table"},"Data Table"),"."),(0,r.kt)("p",null,"Its props are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pageSizeOptions"),": The possible values for the dropdown. The default value is ",(0,r.kt)("inlineCode",{parentName:"li"},"[10, 15, 20]"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pageSize"),": The current selected value from the ",(0,r.kt)("inlineCode",{parentName:"li"},"pageSizeOptions"),". This prop is required."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setPageSize"),": Function to set the current value of the ",(0,r.kt)("inlineCode",{parentName:"li"},"pageSize")," prop. This prop is required.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const pageSizeOptions = [10, 15, 20];\n  const [pageSize, setPageSize] = useState(10);\n\n  return (\n    <React.Fragment>\n      <PageSize\n        pageSizeOptions={pageSizeOptions}\n        pageSize={pageSize}\n        setPageSize={setPageSize}\n      />\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h2",{id:"resultcount"},"ResultCount"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ResultCount")," component can display information about the data being displayed. For an example of its usage please visit ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/data-table"},"Data Table"),"."),(0,r.kt)("p",null,"Its props are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pageIndex"),": The current page index in the pagination. This prop is required."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pageSize"),": The current size per page. This prop is required."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"resultsTotalCount"),": The total number of rows in data set. This prop is required.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const paginationProps = usePagination({ pages: 10 });\n  const { data } = utils.useDocDataTable(5, 4);\n\n  return (\n    <React.Fragment>\n      <ResultCount\n        {...paginationProps}\n        resultsTotalCount={data.length}\n        pageSize={5}\n      />\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h3",{id:"additional-text"},"Additional Text"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"additionalText")," prop to display additional information underneath the text."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 10 });\n  const { data } = utils.useDocDataTable(5, 4);\n\n  return (\n    <React.Fragment>\n      <ResultCount\n        additionalText="(Can insert extra text here)"\n        {...paginationProps}\n        resultsTotalCount={data.length}\n        pageSize={5}\n      />\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"rowcount"},"RowCount"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"RowCount")," component displays how many rows are currently on the page. For an example of its usage please visit ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/data-table"},"Data Table"),"."),(0,r.kt)("p",null,"Its props are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"rowCount"),": The number of rows currently being displayed to the user. This prop is required.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const searchResults = [\n    { id: 1 },\n    { id: 2 },\n    { id: 3 },\n    { id: 4 },\n    { id: 5 },\n    { id: 6 },\n    { id: 7 },\n  ];\n\n  const {\n    state: { rowCount },\n  } = usePagination({ data: searchResults, pages: 10, pageSize: 2 });\n\n  return (\n    <React.Fragment>\n      <RowCount rowCount={rowCount} />\n    </React.Fragment>\n  );\n};\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Pagination}\n  rows={[\n    {\n      name: 'previousPage',\n      type: 'function',\n      description: 'Callback function to go to previous page',\n    },\n    {\n      name: 'canPreviousPage',\n      type: 'boolean',\n      description: 'Flag to check if previous page exists',\n    },\n    {\n      name: 'pageIndex',\n      type: 'number',\n      description: 'Index of page',\n    },\n    {\n      name: 'gotoPage',\n      type: 'function',\n      description: 'Function to go to a page',\n    },\n    {\n      name: 'pageCount',\n      type: 'number',\n      description: 'Number of pages',\n    },\n    {\n      name: 'nextPage',\n      type: 'function',\n      description: 'Callback function to go to next page',\n    },\n    {\n      name: 'canNextPage',\n      type: 'boolean',\n      description: 'Flag to check if next page exists',\n    },\n    {\n      name: 'variant',\n      type: \"'compact' | 'extended'\",\n      description: 'Variant for pagination display',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageSize}\n  rows={[\n    {\n      name: 'pageSize',\n      type: 'number',\n      description: 'Set the page size',\n    },\n    {\n      name: 'setPageSize',\n      type: 'function',\n      description: 'Function to set page size',\n    },\n    {\n      name: 'pageSizeOptions',\n      type: 'array[number]',\n      description: 'Default page size options',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={RowCount}\n  rows={[\n    {\n      name: 'rowCount',\n      type: 'number',\n      description: 'number of rows in the current page',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ResultCount}\n  rows={[\n    {\n      name: 'pageIndex',\n      type: 'number',\n      description: 'Index of page',\n    },\n    {\n      name: 'pageSize',\n      type: 'number',\n      description: 'Set the page size',\n    },\n    {\n      name: 'additionalText',\n      type: 'string',\n      description: 'Additional text to display',\n    },\n    {\n      name: 'resultsTotalCount',\n      type: 'number',\n      description: 'Total row count',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Pagination}\n  rows={[\n    {\n      name: 'pagination-root',\n      description: 'Pagination root element',\n    },\n    {\n      name: 'pagination-container',\n      description: 'Pagination container',\n    },\n    {\n      name: 'pagination-text',\n      description: 'Pagination TextInput',\n    },\n    {\n      name: 'pagination-button',\n      description: 'Pagination Button',\n    },\n    {\n      name: 'pagination-page-button',\n      description: 'Page Button',\n    },\n    {\n      name: 'pagination-ellipsis',\n      description: 'Pagination ellipsis',\n    },\n    {\n      name: 'pagination-abbreviated-container',\n      description: 'Pagination abbreviated container',\n    },\n    {\n      name: 'pagination-arrow',\n      description: 'Pagination arrow icon',\n    },\n    {\n      name: 'pagination-icon-left',\n      description: 'Pagination left arrow icon',\n    },\n    {\n      name: 'pagination-text-left',\n      description: 'Pagination previous button text',\n    },\n    {\n      name: 'pagination-divider',\n      description: 'Pagination divider',\n    },\n    {\n      name: 'pagination-text-right',\n      description: 'Pagination next button text',\n    },\n    {\n      name: 'pagination-icon-right',\n      description: 'Pagination right arrow icon',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageSize}\n  rows={[\n    {\n      name: 'pagination-page-size-root',\n      description: 'Page size root element',\n    },\n    {\n      name: 'pagination-page-size-label',\n      description: 'Label',\n    },\n    {\n      name: 'pagination-page-size-select-list',\n      description: 'Select List',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={ResultCount}\n  rows={[\n    {\n      name: 'pagination-results-root',\n      description: 'Pagination results root element',\n    },\n    {\n      name: 'pagination-results-text',\n      description: 'Text',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={RowCount}\n  rows={[\n    {\n      name: 'pagination-row-count-root',\n      description: 'Pagination RowCount root element',\n    },\n    {\n      name: 'pagination-row-count-text',\n      description: 'Pagination RowCount text element',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("p",null,"The pagination container must have a descriptive accessible name. For example, if the pagination control is used for a table, the accessible name might be \u201ctable\u201c pagination. If the pagination control is used for search results, the accessible name might be \u201csearch results\u201c pagination."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," prop to provide your pagination container with an accessibile ",(0,r.kt)("inlineCode",{parentName:"p"},"aria-label"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 10 });\n  return (\n    <Card>\n      <Card.Title>Page {paginationProps.state.currentPage}</Card.Title>\n      <Card.Section>\n        <Pagination {...paginationProps} type="accessible" />\n      </Card.Section>\n    </Card>\n  );\n};\n'))))}g.isMDXComponent=!0},28184:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"popover",category:"Overlay",title:"Popover",description:"Allows users to click an element to display a pop-up box.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1571",pagination_prev:"web/ui/modal",pagination_next:"web/ui/tooltip"},d=void 0,p={unversionedId:"web/ui/popover",id:"web/ui/popover",isDocsHomePage:!1,title:"Popover",description:"Allows users to click an element to display a pop-up box.",source:"@site/docs/web/ui/Popover.md",sourceDirName:"web/ui",slug:"/web/ui/popover",permalink:"/web/ui/popover",tags:[],version:"current",frontMatter:{id:"popover",category:"Overlay",title:"Popover",description:"Allows users to click an element to display a pop-up box.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1571",pagination_prev:"web/ui/modal",pagination_next:"web/ui/tooltip"},sidebar:"docs",previous:{title:"Modal",permalink:"/web/ui/modal"},next:{title:"Tooltip",permalink:"/web/ui/tooltip"}},c=[{value:"Text Elements",id:"text-elements",children:[],level:2},{value:"Popover Wrapper",id:"popover-wrapper",children:[],level:2},{value:"Close Button",id:"close-button",children:[],level:2},{value:"Position",id:"position",children:[],level:2},{value:"Position Offset",id:"position-offset",children:[],level:2},{value:"Align",id:"align",children:[],level:2},{value:"Align Offset",id:"align-offset",children:[],level:2},{value:"When should I use a tooltip vs a popover?",id:"when-should-i-use-a-tooltip-vs-a-popover",children:[{value:"Purpose of Content",id:"purpose-of-content",children:[],level:3},{value:"Size of Content",id:"size-of-content",children:[],level:3},{value:"Interactions",id:"interactions",children:[],level:3},{value:"Conclusion",id:"conclusion",children:[],level:3}],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Popover } from '@abyss/web/ui/Popover';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Popover',\n  inputs: [\n    {\n      prop: 'content',\n      type: 'string',\n    },\n    {\n      prop: 'title',\n      type: 'string',\n    },\n    {\n      prop: 'width',\n      type: 'string',\n    },\n    {\n      prop: 'positionOffset',\n      type: 'number',\n    },\n    {\n      prop: 'position',\n      type: 'select',\n      options: [\n        { label: 'left', value: 'left' },\n        { label: 'top', value: 'top' },\n        { label: 'right', value: 'right' },\n        { label: 'bottom', value: 'bottom' },\n      ],\n    },\n    {\n      prop: 'showClose',\n      type: 'boolean',\n    },\n  ],\n}\n\n<Popover content=\"Insert content\" title=\"Insert title\">\n  This is popover text\n</Popover>\n")),(0,r.kt)("h2",{id:"text-elements"},"Text Elements"),(0,r.kt)("p",null,"Popover comes with two optional text element props, ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"content"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Popover\n  title="Popover Title Here"\n  content="Popover displays secondary information when hovering over an element."\n/>\n')),(0,r.kt)("h2",{id:"popover-wrapper"},"Popover Wrapper"),(0,r.kt)("p",null,"Wrap a custom element with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Popover")," component to replace the default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Popover title="New Icon">\n    <IconBrand icon="alert" size={40} />\n  </Popover>\n  <Popover title="Badge">\n    <Badge variant="outline">Badge</Badge>\n  </Popover>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"close-button"},"Close Button"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"showClose")," prop to add a close button option to the popover."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Popover title="Popover Title" content="Insert Content Here" showClose={true}>\n    Show Close Button\n  </Popover>\n  <Popover\n    title="Popover Title"\n    content="Insert Content Here"\n    showClose={false}\n  >\n    Hide Close Button\n  </Popover>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"position"},"Position"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," prop to change the position of the popover. Options include ",(0,r.kt)("inlineCode",{parentName:"p"},"'left'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'right'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'top'"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"'bottom'"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Popover title="Left" content="Position Left" position="left">\n    Left\n  </Popover>\n  <Popover title="Top" content="Position Top" position="top">\n    Top\n  </Popover>\n  <Popover title="Bottom" content="Position Bottom" position="bottom">\n    Bottom\n  </Popover>\n  <Popover title="Right" content="Position Right" position="right">\n    Right\n  </Popover>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"position-offset"},"Position Offset"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"positionOffset")," prop to change the horizontal offset position of the popover."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group grow>\n  <Popover title="Default Offset (8)">Default Position Offset</Popover>\n  <Popover title="Offset of 16" positionOffset={16}>\n    Offset of 16\n  </Popover>\n  <Popover title="Offset of 32" positionOffset={32}>\n    Offset of 32\n  </Popover>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"align"},"Align"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"align")," prop to set the side of the anchor to render against when open. Options include ",(0,r.kt)("inlineCode",{parentName:"p"},"'start'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'center'"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"'end'"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Popover title="Start" content="Position Start" align="start">\n    Start\n  </Popover>\n  <Popover title="Center" content="Position Center" align="center">\n    Center\n  </Popover>\n  <Popover title="End" content="Position End" align="end">\n    End\n  </Popover>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"align-offset"},"Align Offset"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"alignOffset")," prop to change the offset position of the popover."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group grow>\n  <Popover title="Default Offset (8)" align="start">\n    Default Align Offset\n  </Popover>\n  <Popover title="Offset of 32" align="start" alignOffset={32}>\n    Offset of 32\n  </Popover>\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"when-should-i-use-a-tooltip-vs-a-popover"},"When should I use a tooltip vs a popover?"),(0,r.kt)("p",null,"Glad you asked! There are several considerations when deciding between a ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltip")," or a ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popover"),":"),(0,r.kt)("h3",{id:"purpose-of-content"},"Purpose of Content"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltip")," is a hint or a tip about what an interactive element does. ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltips")," are meant to help clarify or provide supplementary instruction for an element on hover or upon receiving focus. They should not be used to add additional content nor include interactive elements such as links. ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltips")," should not receive mouse or keyboard focus.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"A ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popover")," should be used to provide additional content to static text, such as definitions of words, informational blurbs, or additional product details. They can receive focus and can contain links and other interactive elements."))),(0,r.kt)("h3",{id:"size-of-content"},"Size of Content"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Since ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltips"),' are only meant to tell the purpose of an element they should be short and to the point, for example: "Click X to do X" or "User post count".')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popovers"),", on the other hand, can be much more verbose, they can include a heading,\xa0lines of text in the body, links, etc."))),(0,r.kt)("h3",{id:"interactions"},"Interactions"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltips")," should only be visible on mouse hover or upon receiving focus.\xa0For this\xa0reason, if you need to be able to read the content while interacting with other parts of the page then a ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltip"),' will not work. They should be dismissible using the "escape" key. They should be used on interactive elements where a mouse click or keyboard activation would otherwise trigger the elements primary function.')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popovers")," must be triggered to appear, whether via mouse click or via keyboard navigation. They must be dismissible, whether by clicking on other parts of the page, clicking the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popover")," target, or a specific close button/icon (depending on implementation). For this reason,\xa0you can set up a ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popover")," to allow you to interact with other elements on the page while still being able to read its\xa0content. On top of this, since ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popovers")," will remain open when mousing out of their target, you can add additional buttons or interactions within them."))),(0,r.kt)("h3",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"If you want to give a short hint\xa0or supplemental instructions for an interactive element (such as a submit button), use a ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltip"),"."),(0,r.kt)("p",null,"If you want to add additional content to a static element that might include headings, body text, links, etc, and you need the content to remain open even after mousing away or the element losing focus, then use a ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popover"),"."),(0,r.kt)("p",null,"It should be noted that any vital information users need to complete an action or make a decision should be displayed directly in the page text or button label, rather than a ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltip")," or a ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popover"),".\xa0Critical information hidden in a ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltip")," or a ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popover")," might not be discovered by all users and could create accessibility issues.")),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Popover}\n  rows={[\n    {\n      name: 'content',\n      type: 'string',\n      description: 'Text displayed in popover',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the popover',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element the popover wraps',\n    },\n    {\n      name: 'position',\n      type: \"'left' | 'right' | 'top' | 'bottom'\",\n      description: 'Set the direction where the popover displays',\n    },\n    {\n      name: 'align',\n      type: \"'start' | 'center' | 'end'\",\n      description: 'The side of the anchor to render against when open',\n    },\n    {\n      name: 'positionOffset',\n      type: 'number',\n      description: 'Set the position offset of where the popover displays',\n    },\n    {\n      name: 'alignOffset',\n      type: 'number',\n      description: 'Set the align offset of where the popover displays',\n    },\n    {\n      name: 'width',\n      type: 'string | number',\n      description: 'Width of the popover container',\n    },\n    {\n      name: 'showClose',\n      type: 'boolean',\n      description: 'Flag to show close button or not',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Popover}\n  rows={[\n    {\n      name: 'popover-root',\n      description: 'Root',\n    },\n    {\n      name: 'popover-trigger',\n      description: 'Trigger',\n    },\n    {\n      name: 'popover-trigger-button',\n      description: 'Trigger Button',\n    },\n    {\n      name: 'popover-trigger-icon',\n      description: 'Trigger Icon',\n    },\n    {\n      name: 'popover-content',\n      description: 'Content',\n    },\n    {\n      name: 'popover-header',\n      description: 'Header',\n    },\n    {\n      name: 'popover-title',\n      description: 'Header Title',\n    },\n    {\n      name: 'popover-close-button',\n      description: 'Close Button',\n    },\n    {\n      name: 'popover-close-icon',\n      description: 'Close Button Icon',\n    },\n    {\n      name: 'popover-content-container',\n      description: 'Content Container',\n    },\n    {\n      name: 'popover-arrow',\n      description: 'Arrow',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},24204:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"print-provider",category:"Providers",title:"PrintProvider",description:"Allows print functionality.",pagination_prev:"web/ui/overlay-provider",pagination_next:"web/ui/router-provider"},d=void 0,p={unversionedId:"web/ui/print-provider",id:"web/ui/print-provider",isDocsHomePage:!1,title:"PrintProvider",description:"Allows print functionality.",source:"@site/docs/web/ui/PrintProvider.md",sourceDirName:"web/ui",slug:"/web/ui/print-provider",permalink:"/web/ui/print-provider",tags:[],version:"current",frontMatter:{id:"print-provider",category:"Providers",title:"PrintProvider",description:"Allows print functionality.",pagination_prev:"web/ui/overlay-provider",pagination_next:"web/ui/router-provider"},sidebar:"docs",previous:{title:"OverlayProvider",permalink:"/web/ui/overlay-provider"},next:{title:"RouterProvider",permalink:"/web/ui/router-provider"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"usePrint",id:"useprint",children:[],level:2},{value:"Print Elements",id:"print-elements",children:[{value:"Print.Section",id:"printsection",children:[],level:3},{value:"Print.Title",id:"printtitle",children:[],level:3},{value:"Print.Label",id:"printlabel",children:[],level:3},{value:"Print.Value",id:"printvalue",children:[],level:3},{value:"Print.Table",id:"printtable",children:[],level:3},{value:"Print.Image",id:"printimage",children:[],level:3},{value:"Print.ListItem",id:"printlistitem",children:[],level:3},{value:"Print.Box",id:"printbox",children:[],level:3}],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { PrintProvider } from '@abyss/web/ui/PrintProvider';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Applications must be wrapped in the ",(0,r.kt)("inlineCode",{parentName:"p"},"PrintProvider")," in order to manage the print view for your application."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<PrintProvider>\n  <AppRoot />\n</PrintProvider>\n")),(0,r.kt)("h2",{id:"useprint"},"usePrint"),(0,r.kt)("p",null,"Through usage of the ",(0,r.kt)("inlineCode",{parentName:"p"},"usePrint")," hook you can either trigger the native browser print capability, or activate a PDF download."),(0,r.kt)("p",null,"Refer to ",(0,r.kt)("a",{parentName:"p",href:"/web/hooks/use-print"},"usePrint")," for more details."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { usePrint } from '@abyss/web/hooks/usePrint';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const print = usePrint();\n\n  const logPDF = (pdf) => {\n    console.log(\'pdf\', pdf);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align="left">\n        <Text color="$primary1" fontWeight="$bold">\n          Hello World\n        </Text>\n      </Box>\n\n      <Print.Section>\n        <Print.Value>Hello World</Print.Value>\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"print-elements"},"Print Elements"),(0,r.kt)("p",null,"Using the Print Elements, we are able to customize how our content appears when printed/saved as a PDF."),(0,r.kt)("h3",{id:"printsection"},"Print.Section"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Print.Section")," to section out content in the print area."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const print = usePrint();\n\n  const logPDF = (pdf) => {\n    console.log(\'pdf\', pdf);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align="left">\n        <Text color="$primary1" fontWeight="$bold">\n          Hello World\n        </Text>\n      </Box>\n\n      <Print.Section>\n        <Print.Value>Hello World (Print Section)</Print.Value>\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h3",{id:"printtitle"},"Print.Title"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Print.Title")," to put a title in your printable section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const print = usePrint();\n\n  const logPDF = (pdf) => {\n    console.log(\'pdf\', pdf);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align="left">\n        <Heading offset={1} color="$primary1" fontWeight="$bold">\n          Hello World\n        </Heading>\n      </Box>\n\n      <Print.Section>\n        <Print.Title>Hello World (Print Title)</Print.Title>\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h3",{id:"printlabel"},"Print.Label"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Print.Label")," to put a label in your printable section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const print = usePrint();\n\n  const logPDF = (pdf) => {\n    console.log('pdf', pdf);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align=\"left\">\n        <Label>Hello World: </Label>\n      </Box>\n\n      <Print.Section>\n        <Print.Label>Hello World: (Print Label)</Print.Label>\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h3",{id:"printvalue"},"Print.Value"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Print.Value")," to put a normal text element in your printable section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const print = usePrint();\n\n  const logPDF = (pdf) => {\n    console.log(\'pdf\', pdf);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align="left">\n        <Text color="$primary1" fontWeight="$bold">\n          Hello World\n        </Text>\n      </Box>\n\n      <Print.Section>\n        <Print.Value>Hello World (Print Value)</Print.Value>\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h3",{id:"printtable"},"Print.Table"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Print.Table")," to put a table in your printable section. ",(0,r.kt)("inlineCode",{parentName:"p"},"columns")," should be objects that have a name and value and ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," should be the row values."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const print = usePrint();\n\n  const logPDF = (pdf) => {\n    console.log('pdf', pdf);\n  };\n\n  const columns = [\n    { name: 'Name', key: 'name' },\n    { name: 'Type', key: 'type' },\n    { name: 'Date Modified', key: 'date' },\n  ];\n\n  const rows = [\n    { id: 1, name: 'Games', date: '6/7/2020', type: 'File folder' },\n    { id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder' },\n    { id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file' },\n    { id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document' },\n  ];\n  const printCols = [\n    { name: 'Name', value: '{{name}}' },\n    { name: 'Type', value: '{{type}}' },\n    { name: 'Date Modified', value: '{{date}}' },\n  ];\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align=\"left\">\n        <Table title=\"Base Static Table\" columns={columns} rows={rows} />\n      </Box>\n\n      <Print.Section>\n        <Print.Table data={rows} columns={printCols} />\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h3",{id:"printimage"},"Print.Image"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Print.Image")," to put a image in your printable section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const print = usePrint();\n\n  const img = utils.useBaseUrl(`img/logo.png`);\n\n  const logPDF = (pdf) => {\n    console.log(\'pdf\', pdf);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align="left">\n        <img src={img} alt="abyss.png" />\n      </Box>\n\n      <Print.Section>\n        <Print.Image>{img}</Print.Image>\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h3",{id:"printlistitem"},"Print.ListItem"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Print.ListItem")," to put a list into your printable section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const print = usePrint();\n\n  const logPDF = (pdf) => {\n    console.log('pdf', pdf);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align=\"left\">\n        <ul>\n          <li>Alpha</li>\n          <li>Beta</li>\n          <li>Charlie</li>\n        </ul>\n      </Box>\n\n      <Print.Section>\n        <Print.ListItem>Alpha</Print.ListItem>\n        <Print.ListItem>Beta</Print.ListItem>\n        <Print.ListItem>Charlie</Print.ListItem>\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n")),(0,r.kt)("h3",{id:"printbox"},"Print.Box"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Print.Box")," to create a box around content you want to print"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const print = usePrint();\n\n  const logPDF = (pdf) => {\n    console.log(\'pdf\', pdf);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align="left">\n        <Text color="$primary1" fontWeight="$bold">\n          Hello World\n        </Text>\n      </Box>\n\n      <Print.Section>\n        <Print.Box>Hello World (Print Box)</Print.Box>\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PrintProvider}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'Application contents',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Print.Section}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Section component',\n    },\n    {\n      name: 'showPrint',\n      type: 'boolean',\n      description: 'decides if section shows up in the print or not',\n    },\n    {\n      name: 'hideBorder',\n      type: 'boolean',\n      description: 'decides if border is shown or not',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Print.Title}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Title component',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Print.Label}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Label component',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Print.Value}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Value component',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Print.Table}\n  rows={[\n    {\n      name: 'columns',\n      type: 'array[object]',\n      description: 'Array of column data. { name: string, value: valueKey }',\n    },\n    {\n      name: 'data',\n      type: 'array[object]',\n      description: 'Array of row data. { id: number, valueKey: string }',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Print.Image}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Image component',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Print.ListItem}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the ListItem component',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Print.Box}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Box component',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},67876:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"progress-bar",category:"Feedback",title:"ProgressBar",description:"Used to show users the status of loading an app, ongoing processes, saving changes/updates, and more.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3599%3A29233",pagination_prev:"web/ui/alert",pagination_next:"web/ui/checkbox"},d=void 0,p={unversionedId:"web/ui/progress-bar",id:"web/ui/progress-bar",isDocsHomePage:!1,title:"ProgressBar",description:"Used to show users the status of loading an app, ongoing processes, saving changes/updates, and more.",source:"@site/docs/web/ui/ProgressBar.md",sourceDirName:"web/ui",slug:"/web/ui/progress-bar",permalink:"/web/ui/progress-bar",tags:[],version:"current",frontMatter:{id:"progress-bar",category:"Feedback",title:"ProgressBar",description:"Used to show users the status of loading an app, ongoing processes, saving changes/updates, and more.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3599%3A29233",pagination_prev:"web/ui/alert",pagination_next:"web/ui/checkbox"},sidebar:"docs",previous:{title:"Alert",permalink:"/web/ui/alert"},next:{title:"Checkbox",permalink:"/web/ui/checkbox"}},c=[{value:"Color",id:"color",children:[],level:2},{value:"Labels",id:"labels",children:[],level:2},{value:"Duration",id:"duration",children:[],level:2},{value:"Width",id:"width",children:[],level:2},{value:"Height",id:"height",children:[],level:2},{value:"Border Radius",id:"border-radius",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ProgressBar } from '@abyss/web/ui/ProgressBar';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'ProgressBar',\n  inputs: [\n    {\n      prop: 'barColor',\n      type: 'string',\n    },\n    {\n      prop: 'fillColor',\n      type: 'string',\n    },\n    {\n      prop: 'height',\n      type: 'string',\n    },\n    {\n      prop: 'width',\n      type: 'string',\n    },\n    {\n      prop: 'duration',\n      type: 'number',\n    },\n    {\n      prop: 'percentage',\n      type: 'number',\n    },\n  ]\n}\n\n<ProgressBar percentage={25} />\n")),(0,r.kt)("h2",{id:"color"},"Color"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"fillColor")," prop to change the color of the progress bar fill bar. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"barColor")," prop to change the background color of the progress bar."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ProgressBar percentage={25} fillColor="$interactive1" barColor="$gray4" />\n')),(0,r.kt)("h2",{id:"labels"},"Labels"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"minLabel")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"maxLabel")," prop to set the beginning and ending labels for the progress bar. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"balanceLabel")," to set the title of the progress bar. The ",(0,r.kt)("inlineCode",{parentName:"p"},"balanceLabel")," prop will default to a ",(0,r.kt)("strong",{parentName:"p"},"bold font"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ProgressBar\n  percentage={75}\n  minLabel="$0.00"\n  maxLabel="$2000.00"\n  balanceLabel="Deductible"\n/>\n')),(0,r.kt)("h2",{id:"duration"},"Duration"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"duration")," prop to set the time it takes in milliseconds for the fill bar to reach the set percentage. The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"1200"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<ProgressBar percentage={50} duration={5000} />\n")),(0,r.kt)("h2",{id:"width"},"Width"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," property to set the width of the bar. The default width is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"100%"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<React.Fragment>\n  <ProgressBar percentage={25} />\n  <br />\n  <ProgressBar percentage={25} width="75%" />\n</React.Fragment>\n')),(0,r.kt)("h2",{id:"height"},"Height"),(0,r.kt)("p",null,"Use the",(0,r.kt)("inlineCode",{parentName:"p"},"height")," property to set the width and height of the bar. The default height is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"20"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <ProgressBar percentage={25} />\n  <br />\n  <ProgressBar percentage={25} height={50} />\n</React.Fragment>\n")),(0,r.kt)("h2",{id:"border-radius"},"Border Radius"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"borderRadius")," prop to change the border radius of the bar. The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<ProgressBar percentage={25} borderRadius={10} />\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ProgressBar}\n  rows={[\n    {\n      name: 'percentage',\n      type: 'number',\n      description: 'The percent of the bar to be filled',\n    },\n    {\n      name: 'styles',\n      type: 'object',\n      description: 'Added styles to the progress bar',\n    },\n    {\n      name: 'duration',\n      type: 'number',\n      description: 'Duration of the progress bar animation',\n    },\n    {\n      name: 'width',\n      type: 'number | string',\n      description: 'Width of the progress bar',\n    },\n    {\n      name: 'minLabel',\n      type: 'string',\n      description: 'Starting label on the progress bar',\n    },\n    {\n      name: 'maxLabel',\n      type: 'string',\n      description: 'Ending label on the progress bar',\n    },\n    {\n      name: 'balanceLabel',\n      type: 'string',\n      description: 'Middle label on the progress bar',\n    },\n    {\n      name: 'height',\n      type: 'number',\n      description: 'Height of the progress bar',\n    },\n    {\n      name: 'borderRadius',\n      type: 'number',\n      description: 'Border radius of the progress bar',\n    },\n    {\n      name: 'barColor',\n      type: 'string',\n      description: 'Color of the progress fill bar',\n    },\n    {\n      name: 'fillColor',\n      type: 'string',\n      description: 'Background color of the progress bar',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'string used for the descriptive accessible name',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={ProgressBar}\n  rows={[\n    {\n      name: 'progress-bar-root',\n      description: 'Progress Bar root element',\n    },\n    {\n      name: 'progress-bar-filler',\n      description: 'Progress bar fill',\n    },\n    {\n      name: 'progress-bar-min-label',\n      description: 'Min label',\n    },\n    {\n      name: 'progress-bar-center-label',\n      description: 'Center label',\n    },\n    {\n      name: 'progress-bar-max-label',\n      description: 'Max label',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},13149:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"radio-group",category:"Forms",title:"RadioGroup",description:"Provides a set of checkable buttons, known as radio buttons, where no more than one of the buttons can be checked at a time.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11899",pagination_prev:"web/ui/date-input-range",pagination_next:"web/ui/search-input"},s=void 0,d={unversionedId:"web/ui/radio-group",id:"web/ui/radio-group",isDocsHomePage:!1,title:"RadioGroup",description:"Provides a set of checkable buttons, known as radio buttons, where no more than one of the buttons can be checked at a time.",source:"@site/docs/web/ui/RadioGroup.md",sourceDirName:"web/ui",slug:"/web/ui/radio-group",permalink:"/web/ui/radio-group",tags:[],version:"current",frontMatter:{id:"radio-group",category:"Forms",title:"RadioGroup",description:"Provides a set of checkable buttons, known as radio buttons, where no more than one of the buttons can be checked at a time.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11899",pagination_prev:"web/ui/date-input-range",pagination_next:"web/ui/search-input"},sidebar:"docs",previous:{title:"DateInputRange",permalink:"/web/ui/date-input-range"},next:{title:"SearchInput",permalink:"/web/ui/search-input"}},p=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Label and Subtext",id:"label-and-subtext",children:[],level:2},{value:"Error Message",id:"error-message",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Display",id:"display",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { RadioGroup } from '@abyss/web/ui/RadioGroup';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'RadioGroup',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'string',\n    },\n    {\n      prop: 'errorMessage',\n      type: 'string',\n    },\n    {\n      prop: 'subText',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'display',\n      type: 'select',\n      options: [\n        { label: 'column', value: 'column' },\n        { label: 'row', value: 'row' },\n      ],\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n  ]\n}\n\n() => {\n  const [radioValue, setRadioValue] = useState('one');\n\n  console.log('radioValue', radioValue);\n\n  return (\n    <RadioGroup\n      label=\"Radio Sandbox\"\n      onChange={(e) => setRadioValue(e.target.value)}\n      value={radioValue}\n      subText=\"This is subtext\"\n    >\n      <RadioGroup.Radio label=\"One\" value=\"one\" />\n      <RadioGroup.Radio label=\"Two\" value=\"two\" />\n      <RadioGroup.Radio label=\"Three\" value=\"three\" />\n      <RadioGroup.Radio label=\"Four\" value=\"four\" />\n    </RadioGroup>\n  );\n};\n")),(0,i.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      \'radio-form\': \'two\',\n    },\n  });\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <RadioGroup\n        label="RadioGroup useForm"\n        model="radio-form"\n        validators={{ required: true }}\n      >\n        <RadioGroup.Radio label="One" value="one" />\n        <RadioGroup.Radio label="Two" value="two" />\n        <RadioGroup.Radio label="Three" value="three" />\n        <RadioGroup.Radio label="Four" value="four" />\n      </RadioGroup>\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"usestate"},"useState"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [radioValue, setRadioValue] = useState(\'one\');\n\n  console.log(\'radioValue\', radioValue);\n\n  return (\n    <RadioGroup\n      label="Radio useState"\n      onChange={(e) => setRadioValue(e.target.value)}\n      value={radioValue}\n    >\n      <RadioGroup.Radio label="One" value="one" />\n      <RadioGroup.Radio label="Two" value="two" />\n      <RadioGroup.Radio label="Three" value="three" />\n      <RadioGroup.Radio label="Four" value="four" />\n    </RadioGroup>\n  );\n};\n')),(0,i.kt)("h2",{id:"label-and-subtext"},"Label and Subtext"),(0,i.kt)("p",null,"Label is required, but subtext is not. Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," prop to change the displayed label for the group. Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"hideLabel")," to visibly hide label but retain accessibility. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the radio group."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <RadioGroup\n        label="Label and Subtext"\n        subText="Subtext"\n        model="label-visible"\n      >\n        <RadioGroup.Radio label="One" value="one" />\n        <RadioGroup.Radio label="Two" value="two" />\n      </RadioGroup>\n      <RadioGroup label="Label only" model="label-visible">\n        <RadioGroup.Radio label="One" value="one" />\n        <RadioGroup.Radio label="Two" value="two" />\n      </RadioGroup>\n      <RadioGroup\n        label="Hidden Label"\n        hideLabel\n        subText="Subtext only"\n        model="label-hidden"\n      >\n        <RadioGroup.Radio label="One" value="one" />\n        <RadioGroup.Radio label="Two" value="two" />\n      </RadioGroup>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"error-message"},"Error Message"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to display a custom error message below the radio group."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [radioValue, setRadioValue] = useState(\'\');\n\n  return (\n    <RadioGroup\n      label="Error Message"\n      value={radioValue}\n      onChange={(e) => setRadioValue(e.target.value)}\n      errorMessage="Error Message"\n    >\n      <RadioGroup.Radio label="One" value="one" />\n      <RadioGroup.Radio label="Two" value="two" />\n      <RadioGroup.Radio label="Three" value="three" />\n    </RadioGroup>\n  );\n};\n')),(0,i.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [radioValue, setRadioValue] = useState(\'\');\n\n  return (\n    <RadioGroup\n      value={radioValue}\n      onChange={(e) => setRadioValue(e.target.value)}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    >\n      <RadioGroup.Radio label="One" value="one" />\n      <RadioGroup.Radio label="Two" value="two" />\n      <RadioGroup.Radio label="Three" value="three" />\n    </RadioGroup>\n  );\n};\n')),(0,i.kt)("h2",{id:"disabled"},"Disabled"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to disable all radios in the group. Individual radios can be disabled by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in their respective ",(0,i.kt)("inlineCode",{parentName:"p"},"RadioGroup.Radio")," instead of the outer component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({});\n\n  return (\n    <FormProvider state={form}>\n      <RadioGroup isDisabled label="All Radios Disabled" model="disabled">\n        <RadioGroup.Radio value="dogs" label="Disabled 1" />\n        <RadioGroup.Radio value="cats" label="Disabled 2" />\n        <RadioGroup.Radio value="cats1" label="Disabled 3" />\n        <RadioGroup.Radio value="cats2" label="Disabled 4" />\n      </RadioGroup>\n\n      <RadioGroup label="Individual Radios Disabled" model="disabled2">\n        <RadioGroup.Radio value="dogs" label="Disabled 1" isDisabled />\n        <RadioGroup.Radio value="cats" label="Enabled 1" />\n        <RadioGroup.Radio value="cats1" label="Disabled 2" isDisabled />\n        <RadioGroup.Radio value="cats2" label="Enabled 2" />\n      </RadioGroup>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"display"},"Display"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"display")," prop to set the direction a group of radio buttons appear. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"'column'"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <RadioGroup label="RadioGroup Column" model="column">\n        <RadioGroup.Radio label="Column A" value="A" />\n        <RadioGroup.Radio label="Column B" value="B" />\n      </RadioGroup>\n      <RadioGroup display="row" label="RadioGroup Row" model="row">\n        <RadioGroup.Radio label="Row A" value="A" />\n        <RadioGroup.Radio label="Row B" value="B" />\n      </RadioGroup>\n    </FormProvider>\n  );\n};\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={RadioGroup}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the radio group component',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Set the label of the radio group',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description: 'Value that is selected',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Set the error message',\n    },\n    {\n      name: 'validators',\n      type: 'shape',\n      description: 'Rules for radio validation',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the radio group',\n    },\n    {\n      name: 'display',\n      type: 'string',\n      description: 'Set the direction a group of radio buttons are displayed',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to set if a radio group is disabled',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired every time the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Set the subtext of radio group',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the radio group',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={RadioGroup.Radio}\n  rows={[\n    {\n      name: 'checked',\n      type: 'boolean',\n      description: 'Flag to see if radio is checked',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element the radio wraps',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to see if radio is disabled',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Set the label of radio',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of radio',\n    },\n    {\n      name: 'sizes',\n      type: 'object',\n      description: 'Dictionary of size keys and their corresponding size value',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description: 'Value of the radio',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={RadioGroup}\n  rows={[\n    {\n      name: 'radio-group-root',\n      description: 'Radio Group root element',\n    },\n    {\n      name: 'radio-group-label',\n      description: 'Radio Group label',\n    },\n    {\n      name: 'radio-group-container',\n      description: 'Radio Group container',\n    },\n    {\n      name: 'radio-group-descriptors',\n      description: 'Radio Group descriptors',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={RadioGroup.Radio}\n  rows={[\n    {\n      name: 'radio-label',\n      description: 'Label',\n    },\n    {\n      name: 'radio-button',\n      description: 'Button',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"A radio group is a set of checkable buttons, known as radio buttons, where no more than one of the buttons can be checked at a time. Some implementations may initialize the set with all buttons in the unchecked state in order to force the user to check one of the buttons before moving past a certain point in the workflow."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#radiobutton",mdxType:"ExitLink"},"Radio Group WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [radioValue, setRadioValue] = useState(\'one\');\n\n  return (\n    <RadioGroup\n      label="Accessibility Practice"\n      onChange={(e) => setRadioValue(e.target.value)}\n      value={radioValue}\n      subText="Utilize the Keyboard Interaction table below to test the components accessibility."\n    >\n      <RadioGroup.Radio label="One" value="one" />\n      <RadioGroup.Radio label="Two" value="two" />\n      <RadioGroup.Radio label="Three" value="three" />\n      <RadioGroup.Radio label="Four" value="four" />\n    </RadioGroup>\n  );\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to either the checked radio item or the first radio item in the group.',\n    },\n    {\n      name: 'Space',\n      description: 'When focus is on an unchecked radio item, checks it.',\n    },\n    {\n      name: 'Enter',\n      description: 'When focus is on an unchecked radio item, checks it.',\n    },\n    {\n      name: 'Arrow Down',\n      description: 'Moves focus to the next radio item in the group.',\n    },\n    {\n      name: 'Arrow Right',\n      description: 'Moves focus to the next radio item in the group.',\n    },\n    {\n      name: 'Arrow Up',\n      description: 'Moves focus to the previous radio item in the group.',\n    },\n    {\n      name: 'Arrow Left',\n      description: 'Moves focus to the previous radio item in the group.',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},7781:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"router",category:"Navigation",title:"Router",description:"Collection of navigational components that compose declaratively with your application.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1",pagination_prev:"web/ui/pagination",pagination_next:"web/ui/sub-navigation-menu"},d=void 0,p={unversionedId:"web/ui/router",id:"web/ui/router",isDocsHomePage:!1,title:"Router",description:"Collection of navigational components that compose declaratively with your application.",source:"@site/docs/web/ui/Router.md",sourceDirName:"web/ui",slug:"/web/ui/router",permalink:"/web/ui/router",tags:[],version:"current",frontMatter:{id:"router",category:"Navigation",title:"Router",description:"Collection of navigational components that compose declaratively with your application.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1",pagination_prev:"web/ui/pagination",pagination_next:"web/ui/sub-navigation-menu"},sidebar:"docs",previous:{title:"Pagination",permalink:"/web/ui/pagination"},next:{title:"SubNavigationMenu",permalink:"/web/ui/sub-navigation-menu"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Link Example",id:"link-example",children:[],level:2},{value:"Breadcrumbs Example",id:"breadcrumbs-example",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Router } from '@abyss/web/ui/Router';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Routes must be wrapped in an RouterProvider for navigation to work. Find additional resources on our RouterProvider component in ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/router-provider"},"RouterProvider"),". Routes are chosen based on the best match instead of being traversed in order."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const Page = ({ title }) => {\n    return (\n      <div>\n        <Router.MetaTags>\n          <title>{title}</title>\n          <meta name="description" content={title + \'Page\'} />\n        </Router.MetaTags>\n        <Heading css={{ \'abyss-heading-root\': { marginTop: \'15px\' } }}>\n          {title} Page\n        </Heading>\n      </div>\n    );\n  };\n\n  return (\n    <RouterProvider type="memory">\n      <ul>\n        <li>\n          <Link href="/">Home Page</Link>\n        </li>\n        <li>\n          <Link href="/getting-started/">Getting Started</Link>\n        </li>\n        <li>\n          <Link href="/web/ui/router">Router Routes</Link>\n        </li>\n      </ul>\n      <Router.Routes>\n        <Router.Route path="/" element={<Page title="Home" />} />\n        <Router.Route\n          path="/getting-started/"\n          element={<Page title="Getting Started" />}\n        />\n        <Router.Route\n          path="/web/ui/router/"\n          element={<Page title="Router" />}\n        />\n      </Router.Routes>\n    </RouterProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"link-example"},"Link Example"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Link")," is used to support components for Router. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"href")," prop to set the link to a separate page. Find additional resources on our Link component in ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/link"},"Link"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const Page = ({ title }) => {\n    return (\n      <div>\n        <Router.MetaTags>\n          <title>{title}</title>\n          <meta name="description" />\n        </Router.MetaTags>\n      </div>\n    );\n  };\n\n  return (\n    <RouterProvider type="memory">\n      <ul>\n        <li>\n          <Link href="/web/ui/router">Router Routes</Link>\n        </li>\n      </ul>\n      <Router.Routes>\n        <Router.Route\n          path="/web/ui/router/"\n          element={<Page title="Router" />}\n        />\n      </Router.Routes>\n    </RouterProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"breadcrumbs-example"},"Breadcrumbs Example"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Breadcrumbs")," is used to integrate components with Router. Find additional resources on our Breadcrumbs component in ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/breadcrumbs"},"Breadcrumbs"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const Page = ({ title }) => {\n    return (\n      <div>\n        <Router.MetaTags>\n          <title>{title}</title>\n          <meta name=\"description\" content={title + 'Page'} />\n        </Router.MetaTags>\n        <Heading css={{ 'abyss-heading-root': { margin: '16px 0px' } }}>\n          {title} Page\n        </Heading>\n      </div>\n    );\n  };\n\n  return (\n    <RouterProvider type=\"memory\">\n      <React.Fragment>\n        <Breadcrumbs\n          divider=\"/\"\n          items={[\n            { title: 'Home', href: '/' },\n            { title: 'Getting Started', href: '/getting-started/' },\n            { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n          ]}\n        />\n\n        <Router.Routes>\n          <Router.Route path=\"/\" element={<Page title=\"Home\" />} />\n          <Router.Route\n            path=\"/getting-started/\"\n            element={<Page title=\"Getting Started\" />}\n          />\n          <Router.Route\n            path=\"/web/ui/breadcrumbs/\"\n            element={<Page title=\"Breadcrumbs\" />}\n          />\n        </Router.Routes>\n        <Card>\n          <Card.Title>\n            Click on these links to mimic the use of breadcrumb navigation{' '}\n          </Card.Title>\n          <Card.Section>\n            <ul style={{ display: 'inline-flex' }}>\n              <li style={{ marginRight: '15px' }}>\n                <Link href=\"/\">Home Page</Link>\n              </li>\n              <li style={{ marginRight: '15px' }}>\n                <Link href=\"/getting-started/\">Getting Started</Link>\n              </li>\n              <li style={{ marginRight: '15px' }}>\n                <Link href=\"/web/ui/breadcrumbs/\">Breadcrumbs</Link>\n              </li>\n            </ul>\n          </Card.Section>\n        </Card>\n      </React.Fragment>\n    </RouterProvider>\n  );\n};\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Router.Routes}\n  rows={[\n    {\n      name: 'title',\n      type: 'string',\n      description: 'The title of the router component',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},68113:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"router-provider",category:"Providers",title:"RouterProvider",description:"Used to render routes that match a location.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1",pagination_prev:"web/ui/print-provider",pagination_next:"web/ui/theme-provider"},s=void 0,d={unversionedId:"web/ui/router-provider",id:"web/ui/router-provider",isDocsHomePage:!1,title:"RouterProvider",description:"Used to render routes that match a location.",source:"@site/docs/web/ui/RouterProvider.md",sourceDirName:"web/ui",slug:"/web/ui/router-provider",permalink:"/web/ui/router-provider",tags:[],version:"current",frontMatter:{id:"router-provider",category:"Providers",title:"RouterProvider",description:"Used to render routes that match a location.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1",pagination_prev:"web/ui/print-provider",pagination_next:"web/ui/theme-provider"},sidebar:"docs",previous:{title:"PrintProvider",permalink:"/web/ui/print-provider"},next:{title:"ThemeProvider",permalink:"/web/ui/theme-provider"}},p=[{value:"Usage",id:"usage",children:[],level:2},{value:"Type",id:"type",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { RouterProvider } from '@abyss/web/ui/RouterProvider';\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"All Router objects are passed to this RouterProvider for navigation to work. RouterProvider leverages version 6.0+ of ",(0,i.kt)(m,{href:"https://v5.reactrouter.com/web/guides/quick-start",mdxType:"ExitLink"},"React Router Dom"),". Find additional resources on our Router component in ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/router"},"Router"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const Page = ({ title }) => {\n    return (\n      <div>\n        <Router.MetaTags>\n          <title>{title}</title>\n          <meta name="description" content={title + \'Page\'} />\n        </Router.MetaTags>\n        <Heading css={{ \'abyss-heading-root\': { marginTop: \'15px\' } }}>\n          {title} Page\n        </Heading>\n      </div>\n    );\n  };\n\n  return (\n    <RouterProvider type="memory">\n      <ul>\n        <li>\n          <Link href="/">Home Page</Link>\n        </li>\n        <li>\n          <Link href="/getting-started/">Getting Started</Link>\n        </li>\n        <li>\n          <Link href="/web/ui/router">Router Switch</Link>\n        </li>\n      </ul>\n      <Router.Routes>\n        <Router.Route path="/" element={<Page title="Home" />} />\n        <Router.Route\n          path="/getting-started/"\n          element={<Page title="Getting Started" />}\n        />\n        <Router.Route\n          path="/web/ui/router/"\n          element={<Page title="Router" />}\n        />\n      </Router.Routes>\n    </RouterProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"type"},"Type"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," prop to set the type of router provider. Types include: ",(0,i.kt)("inlineCode",{parentName:"p"},"'browser'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'hash'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'memory'"),". The default is ",(0,i.kt)("inlineCode",{parentName:"p"},"browser"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Browser: A router that uses the HTML5 history API (pushState, replaceState and the popstate event) to keep your UI in sync with the URL."),(0,i.kt)("li",{parentName:"ul"},"Hash: A router that uses the hash portion of the URL (i.e. window.location.hash) to keep your UI in sync with the URL.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"IMPORTANT NOTE: Hash history does not support location.key or location.state. Any code or plugin that needs this behavior won\u2019t work. As this technique is only intended to support legacy browsers, we encourage you to configure your server to work with type ",(0,i.kt)("inlineCode",{parentName:"li"},"'browser'")," instead."))),(0,i.kt)("li",{parentName:"ul"},"Memory: A router that keeps the history of your \u201cURL\u201d in memory (does not read or write to the address bar).")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<RouterProvider type="hash"></RouterProvider>\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={RouterProvider}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The content of the router provider component',\n    },\n    {\n      name: 'type',\n      type: 'string',\n      description: 'Set the type of the route provider',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},33193:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"search-input",category:"Forms",title:"SearchInput",description:"Provides an input field for searching content within a site to find specific items.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=641%3A11899",pagination_prev:"web/ui/radio-group",pagination_next:"web/ui/select-input"},s=void 0,d={unversionedId:"web/ui/search-input",id:"web/ui/search-input",isDocsHomePage:!1,title:"SearchInput",description:"Provides an input field for searching content within a site to find specific items.",source:"@site/docs/web/ui/SearchInput.md",sourceDirName:"web/ui",slug:"/web/ui/search-input",permalink:"/web/ui/search-input",tags:[],version:"current",frontMatter:{id:"search-input",category:"Forms",title:"SearchInput",description:"Provides an input field for searching content within a site to find specific items.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=641%3A11899",pagination_prev:"web/ui/radio-group",pagination_next:"web/ui/select-input"},sidebar:"docs",previous:{title:"RadioGroup",permalink:"/web/ui/radio-group"},next:{title:"SelectInput",permalink:"/web/ui/select-input"}},p=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Section Headers",id:"section-headers",children:[],level:2},{value:"Fuse.js",id:"fusejs",children:[{value:"Fuse Data",id:"fuse-data",children:[],level:3},{value:"Fuse Keys",id:"fuse-keys",children:[],level:3},{value:"Fuse Controlled",id:"fuse-controlled",children:[],level:3},{value:"Fuse Uncontrolled",id:"fuse-uncontrolled",children:[],level:3}],level:2},{value:"Custom Filtering",id:"custom-filtering",children:[],level:2},{value:"API Filtering with Debounce",id:"api-filtering-with-debounce",children:[],level:2},{value:"Result Limit",id:"result-limit",children:[],level:2},{value:"Local Storage",id:"local-storage",children:[],level:2},{value:"Clearable",id:"clearable",children:[],level:2},{value:"Custom Result Render",id:"custom-result-render",children:[],level:2},{value:"Add Elements inside Input",id:"add-elements-inside-input",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Subtext",id:"subtext",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Rounded",id:"rounded",children:[],level:2},{value:"openOnFocus",id:"openonfocus",children:[],level:2},{value:"onClickSearchButton",id:"onclicksearchbutton",children:[],level:2},{value:"onInputChange",id:"oninputchange",children:[],level:2},{value:"Disable Search Result Items",id:"disable-search-result-items",children:[],level:2},{value:"Enable Outside Scroll",id:"enable-outside-scroll",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { SearchInput } from '@abyss/web/ui/SearchInput';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'SearchInput',\n  inputs: [\n    {\n      prop: 'placeholder',\n      type: 'string',\n    },\n    {\n      prop: 'height',\n      type: 'string',\n    },\n    {\n      prop: 'width',\n      type: 'string',\n    },\n    {\n      prop: 'uniqueStorageId',\n      type: 'string',\n    },\n    {\n      prop: 'label',\n      type: 'string',\n    },\n    {\n      prop: 'resultLimit',\n      type: 'number',\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n        {\n      prop: 'rounded',\n      type: 'boolean',\n    },\n    {\n      prop: 'isClearable',\n      type: 'boolean',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n  ],\n}\n\n() => {\n  const MockData = utils.useSearchInputMock();\n  const [value, setValue] = React.useState('');\n\n  const handleSearch = (data) => {\n    console.log('Searched', data);\n  };\n\n  return (\n    <SearchInput\n      placeholder=\"Search Sandbox...\"\n      uniqueStorageId=\"search-input-sandbox\"\n      label=\"Search Sandbox\"\n      hideLabel\n      value={value}\n      onChange={setValue}\n      onSearch={handleSearch}\n      onClear={() => setValue('')}\n      options={MockData}\n      keys={['value']}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder="Search useForm..."\n        model="search-input-form"\n        label="useForm"\n        hideLabel\n        onClickSearchButton={() => {}}\n        options={MockData}\n        onSearch={handleSearch}\n        keys={[\'value\']}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"usestate"},"useState"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const MockData = utils.useSearchInputMock();\n  const [value, setValue] = React.useState('');\n\n  const handleSearch = (data) => {\n    console.log('Searched', data);\n  };\n\n  return (\n    <SearchInput\n      placeholder=\"Search useState...\"\n      uniqueStorageId=\"search-input-state\"\n      value={value}\n      label=\"useState\"\n      hideLabel\n      onChange={setValue}\n      onSearch={handleSearch}\n      onClear={() => setValue('')}\n      isClearable\n      options={MockData}\n      keys={['value']}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"section-headers"},"Section Headers"),(0,i.kt)("p",null,"To create section headers in the list, pass objects into the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," array that have the ",(0,i.kt)("inlineCode",{parentName:"p"},"section")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"items")," properties. ",(0,i.kt)("inlineCode",{parentName:"p"},"section")," specifies the name of the section, which will be bolded and unselectable, while ",(0,i.kt)("inlineCode",{parentName:"p"},"items")," should contain the options within that section (with the same ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"label")," format as normal), which will appear indented."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState('');\n\n  return (\n    <SearchInput\n      label=\"Section Headers Example\"\n      hideLabel\n      placeholder=\"Search...\"\n      value={value}\n      onChange={setValue}\n      onClear={() => setValue('')}\n      openOnFocus\n      options={[\n        { value: '1', label: 'This option is not under any section' },\n        {\n          section: 'Section Header',\n          items: [\n            { value: '11', label: 'Option 1' },\n            { value: '21', label: 'Option 2' },\n          ],\n        },\n        {\n          section: 'Other Section Header',\n          items: [\n            { value: '31', label: 'Option 3' },\n            { value: '41', label: 'Option 4' },\n          ],\n        },\n        ,\n      ]}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"fusejs"},"Fuse.js"),(0,i.kt)("p",null,"Search Bar filtering uses the ",(0,i.kt)(m,{href:"https://fusejs.io",mdxType:"ExitLink"},"Fuse.js")," library to fuzzy filter results. What is fuzzy searching?... Generally speaking, fuzzy searching (more formally known as approximate string matching) is the technique of finding strings that are approximately equal to a given pattern (rather than exactly)."),(0,i.kt)("h3",{id:"fuse-data"},"Fuse Data"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," prop is the information that fuse will filter on and display in the search dropdown. ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," are required keys in each of the objects. You can search on any value(s) in the object, see Fuse Keys below. Required when using fuse."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log('Searched!', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        keys={['value', 'link', 'tags']}\n        placeholder=\"Search...\"\n        model=\"search\"\n        label=\"Fuse Data\"\n        hideLabel\n        options={MockData}\n        onSearch={handleSearch}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h3",{id:"fuse-keys"},"Fuse Keys"),(0,i.kt)("p",null,"List of keys that will be searched. This supports nested paths, weighted search, searching in arrays of objects. Required when using fuse."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log('Searched', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        keys={['value', 'link', 'tags']}\n        placeholder=\"Search...\"\n        label=\"Fuse Keys\"\n        hideLabel\n        model=\"search\"\n        options={MockData}\n        onSearch={handleSearch}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h3",{id:"fuse-controlled"},"Fuse Controlled"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const MockData = utils.useSearchInputMock();\n  const [value, setValue] = React.useState('');\n\n  const handleSearch = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <SearchInput\n      placeholder=\"Search...\"\n      label=\"Search With Fuse.js\"\n      value={value}\n      onChange={setValue}\n      onClear={() => setValue('')}\n      options={MockData}\n      keys={['value']}\n      onSearch={handleSearch}\n    />\n  );\n};\n")),(0,i.kt)("h3",{id:"fuse-uncontrolled"},"Fuse Uncontrolled"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder="Search..."\n        model="search"\n        label="Fuse Uncontrolled"\n        hideLabel\n        options={MockData}\n        onSearch={handleSearch}\n        keys={[\'value\']}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"custom-filtering"},"Custom Filtering"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"customFilter")," prop to override the fuse.js filtering. The results returned from your customFilter function should be passed into the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," prop."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const [results, setResults] = React.useState([]);\n\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  const customFilter = (currentValue) => {\n    if (currentValue) {\n      const updatedList = MockData.filter((item) => {\n        return item.value.toUpperCase().includes(currentValue.toUpperCase());\n      });\n      setResults(updatedList);\n      return updatedList;\n    }\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder="Search..."\n        model="search"\n        label="Custom Filtering"\n        hideLabel\n        customFilter={customFilter}\n        onSearch={handleSearch}\n        options={results}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"api-filtering-with-debounce"},"API Filtering with Debounce"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"apiFiltering")," prop to override the fuse.js filtering and supply a custom function to make asynchronous calls to an API. Both current value and selected value results will be passed to the apiFiltering callback. The results from your api should be passed into the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," prop. If ",(0,i.kt)("inlineCode",{parentName:"p"},"debounceTime")," is not passed a default debounce time of 1000ms will be applied."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log('Searched', data);\n  };\n\n  const apiFilter = (currentValue, selectedValue) => {\n    console.log('currentValue', currentValue);\n    console.log('selectedValue', selectedValue);\n    setLoading(true);\n    utils.useSearchInputMockApi(currentValue).then((response) => {\n      setLoading(false);\n      setResults(response);\n    });\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder=\"Search...\"\n        model=\"search\"\n        label=\"Api Filtering\"\n        onInputChange={(inputValue, isArrowKeyDown) => {\n          if (!isArrowKeyDown) {\n            setLoading(true);\n          }\n        }}\n        hideLabel\n        apiFiltering={apiFilter}\n        onSearch={handleSearch}\n        options={results}\n        isLoading={loading}\n        debounceTime={1200}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"result-limit"},"Result Limit"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"resultLimit")," to choose how many results are shown at a time. The default limit is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"6"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        resultLimit={3}\n        placeholder="Search..."\n        model="search"\n        label="Result Limit"\n        hideLabel\n        options={MockData}\n        onSearch={handleSearch}\n        keys={[\'value\']}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"local-storage"},"Local Storage"),(0,i.kt)("p",null,"To automatically store the users recent searches pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"uniqueStorageId")," prop to have the config stored locally."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder="Search..."\n        model="search"\n        label="Local Storage"\n        hideLabel\n        options={MockData}\n        onSearch={handleSearch}\n        keys={[\'value\']}\n        uniqueStorageId="search-input-storage-id"\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"clearable"},"Clearable"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"isClearable")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to display a clear button in the input field. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"onClear")," prop to handle the clear action for controlled inputs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        resultLimit={3}\n        label="Clearable"\n        hideLabel\n        placeholder="Search..."\n        model="search"\n        options={MockData}\n        isClearable\n        onSearch={handleSearch}\n        keys={[\'value\']}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"custom-result-render"},"Custom Result Render"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"customRender")," prop to customize the render of each option item."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        resultLimit={3}\n        label="Custom Render"\n        hideLabel\n        placeholder="Search..."\n        model="search"\n        options={MockData}\n        onSearch={handleSearch}\n        keys={[\'value\']}\n        customRender={(item) => {\n          return (\n            <div>\n              <b>Custom Render: </b>\n              {item.value}\n            </div>\n          );\n        }}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"add-elements-inside-input"},"Add Elements inside Input"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"inputLeftElement")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"inputRightElement")," props to add elements to the inside of the search input field. The recommended usage is for inserting icons."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder="Search..."\n        model="search-input-form"\n        label="useForm"\n        hideLabel\n        isClearable\n        onClickSearchButton={() => {}}\n        inputLeftElement={\n          <IconMaterial icon="star" size="18px" color="$gray6" />\n        }\n        inputRightElement={<IconMaterial icon="check" size="18px" />}\n        options={MockData}\n        onSearch={handleSearch}\n        keys={[\'value\']}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"label"},"Label"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," prop to customize the label. To hide the input label set ",(0,i.kt)("inlineCode",{parentName:"p"},"hideLabel")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <Layout.Stack grow space={25}>\n        <SearchInput\n          label="Custom Label"\n          placeholder="Visible Label"\n          model="label-search"\n          options={MockData}\n          onSearch={handleSearch}\n          keys={[\'value\']}\n        />\n        <SearchInput\n          label="Custom Label"\n          placeholder="Hidden Label"\n          model="label-search"\n          options={MockData}\n          onSearch={handleSearch}\n          hideLabel\n          keys={[\'value\']}\n        />\n      </Layout.Stack>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"subtext"},"Subtext"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the search input field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        options={MockData}\n        onSearch={handleSearch}\n        isClearable\n        keys={[\'value\']}\n        placeholder="Search..."\n        label="Subtext"\n        model="subText"\n        subText="Custom Subtext"\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const [value, setValue] = React.useState(\'\');\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <SearchInput\n      value={value}\n      onChange={setValue}\n      onSearch={handleSearch}\n      onClear={() => setValue(\'\')}\n      isClearable\n      options={MockData}\n      keys={[\'value\']}\n      placeholder="Search..."\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    />\n  );\n};\n')),(0,i.kt)("h2",{id:"rounded"},"Rounded"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"rounded")," prop to change the style of the ",(0,i.kt)("inlineCode",{parentName:"p"},"SearchInput")," from squared to rounded. The default is squared and set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder="Search..."\n        model="search-rounded"\n        label="Rounded"\n        hideLabel\n        options={MockData}\n        onSearch={handleSearch}\n        keys={[\'value\']}\n        rounded\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"openonfocus"},"openOnFocus"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"openOnFocus")," prop to open the drop-down menu when the search input field is focused."),(0,i.kt)("p",null,"By default the menu will not open until either a value is entered into the input field or ",(0,i.kt)("inlineCode",{parentName:"p"},"uniqueStorageId")," is used and recent searches are present."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        placeholder="Focus to open..."\n        model="search-input-open-on-focus"\n        label="Open On Focus"\n        hideLabel\n        onClickSearchButton={() => {}}\n        options={MockData}\n        keys={[\'value\']}\n        openOnFocus\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"onclicksearchbutton"},"onClickSearchButton"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"onClickSearchButton")," prop to make the spyglass clickable in the search. It gets passed a function and can be used to submit the search query."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        resultLimit={3}\n        label="Clearable"\n        hideLabel\n        placeholder="Search..."\n        model="search"\n        options={MockData}\n        onClickSearchButton={handleSearch}\n        isClearable\n        onSearch={handleSearch}\n        keys={[\'value\']}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"oninputchange"},"onInputChange"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"onInputChange")," prop is an event handler called when the value of text input changes. The callback returns both the value of the input as well a flag if the value was updated via an arrow key up or down."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const onInputChange = (value, isArrowKeyDown) => {\n    console.log('value', value);\n    console.log('isArrowKeyDown', isArrowKeyDown);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        label=\"Clearable\"\n        hideLabel\n        placeholder=\"Search...\"\n        model=\"search\"\n        options={MockData}\n        onInputChange={onInputChange}\n        isClearable\n        keys={['value']}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"disable-search-result-items"},"Disable Search Result Items"),(0,i.kt)("p",null,"Disable an individual search result item by setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," key to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," within the object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const MockData = [\n    {\n      label: 'UnitedHealthcare Claim Estimator',\n      value: 'UnitedHealthcare Claim Estimator',\n    },\n    {\n      label: 'UnitedHealthcare CommunityCare',\n      value: 'UnitedHealthcare CommunityCare',\n      isDisabled: true,\n    },\n    {\n      label: 'UnitedHealthcare Oxford',\n      value: 'UnitedHealthcare Oxford',\n    },\n  ];\n\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log('Searched', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        label=\"Disabled Items\"\n        hideLabel\n        placeholder=\"Search...\"\n        model=\"search\"\n        options={MockData}\n        onSearch={handleSearch}\n        keys={['value']}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"enable-outside-scroll"},"Enable Outside Scroll"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"enableOutsideScroll")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to Enable scroll outside of the search input component while the option list is open. Default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        label="Remove scroll"\n        hideLabel\n        placeholder="Search..."\n        model="search"\n        options={MockData}\n        onSearch={handleSearch}\n        enableOutsideScroll\n      />\n    </FormProvider>\n  );\n};\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={SearchInput}\n  rows={[\n    {\n      name: 'placeholder',\n      type: 'string',\n      description: 'Description of expected value',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to disable search bar',\n    },\n    {\n      name: 'isClearable',\n      type: 'boolean',\n      description: 'Flag to display clear button',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Search input label',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Text displayed below the search input field',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Error message displayed below the search input field',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the search input field',\n    },\n    {\n      name: 'value',\n      type: 'number | string',\n      description: 'Value of search bar',\n    },\n    {\n      name: 'onSubmit',\n      type: 'function',\n      description: 'Callback fired when search is submitted',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired when search is changed',\n    },\n    {\n      name: 'onInputChange',\n      type: 'function',\n      description: 'Callback fired when the value of the text input changes.',\n    },\n    {\n      name: 'onSearch',\n      type: 'function',\n      description: 'Callback fired when search item is selected',\n    },\n    {\n      name: 'customFilter',\n      type: 'function',\n      description: 'Custom Filter used for Fuse',\n    },\n    {\n      name: 'apiFiltering',\n      type: 'function',\n      description: 'Api Filter used for fetching results from an api',\n    },\n    {\n      name: 'onClear',\n      type: 'function',\n      description: 'Callback fired every time search bar clears',\n    },\n    {\n      name: 'customRender',\n      type: 'function',\n      description: 'Custom render for results',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'width',\n      type: 'number | string',\n      description: 'Set width of SearchInput',\n    },\n    {\n      name: 'height',\n      type: 'number | string',\n      description: 'Set height of SearchInput',\n    },\n    {\n      name: 'uniqueStorageId',\n      type: 'string',\n      description: \"Used to store user's recent searches\",\n    },\n    {\n      name: 'options',\n      type: 'array[object]',\n      description: 'Data filtered on by Fuse',\n    },\n    {\n      name: 'fuseConfig',\n      type: 'shape',\n      description: 'Configs for Fuse',\n    },\n    {\n      name: 'keys',\n      type: 'array[string]',\n      description: 'Keys used by Fuse',\n    },\n    {\n      name: 'resultLimit',\n      type: 'number',\n      description: 'Set the limit of number of results',\n    },\n    {\n      name: 'debounceTime',\n      type: 'number',\n      description:\n        'Set the length of time that the Search recommendations should debounce by (in milliseconds)',\n    },\n    {\n      name: 'onClickSearchButton',\n      type: 'function',\n      description:\n        'Toggles whether the spyglass for the search is a button or a decoration. The function passed determines what the spyglass will do when clicked.',\n    },\n    {\n      name: 'enableOutsideScroll',\n      type: 'boolean',\n      default: 'false',\n      description: 'Flag to enable scroll on all outside elements',\n    },\n    {\n      name: 'rounded',\n      type: 'boolean',\n      description: 'Change the search input style from squared to rounded',\n    },\n    {\n      name: 'inputLeftElement',\n      type: 'ReactNode',\n      description: 'Add element to left of inside search input',\n    },\n    {\n      name: 'inputRightElement',\n      type: 'ReactNode',\n      description: 'Add element to right of inside search input',\n    },\n    {\n      name: 'openOnFocus',\n      type: 'boolean',\n      description: 'Drop-down menu will open on focus of search input field',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={SearchInput}\n  rows={[\n    {\n      name: 'search-input-root',\n      description: 'Search input root element',\n    },\n    {\n      name: 'search-input-label',\n      description: 'Search input label element',\n    },\n    {\n      name: 'search-input-input-container',\n      description: 'Search input input container element',\n    },\n    {\n      name: 'search-input-left-element-wrapper',\n      description: 'Wrapper for left input element',\n    },\n    {\n      name: 'search-input-left-element',\n      description: 'Input left element',\n    },\n    {\n      name: 'search-input-right-element-wrapper',\n      description: 'Wrapper for right input element',\n    },\n    {\n      name: 'search-input-right-element',\n      description: 'Input right element',\n    },\n    {\n      name: 'search-input-icon-container',\n      description: 'Search input icon container element',\n    },\n    {\n      name: 'search-input-icon',\n      description: 'Search input icon element',\n    },\n    {\n      name: 'search-input-input',\n      description: 'Search input input element',\n    },\n    {\n      name: 'search-input-loading-container',\n      description: 'Search input loading container element',\n    },\n    {\n      name: 'search-input-loading-spinner',\n      description: 'Search input loading spinner element',\n    },\n    {\n      name: 'search-input-clear',\n      description: 'Search input clear button element',\n    },\n    {\n      name: 'search-input-element-wrapper',\n      description: 'Search input clear/icon element wrapper',\n    },\n    {\n      name: 'search-input-descriptors',\n      description: 'Search input descriptors element',\n    },\n    {\n      name: 'search-input-option-list',\n      description: 'Search Input option list element',\n    },\n    {\n      name: 'search-input-no-options',\n      description: 'Search Input no-options list element',\n    },\n    {\n      name: 'search-input-section',\n      description: 'Search input section header option element',\n    },\n    {\n      name: 'search-input-option',\n      description: 'Search input option element',\n    },\n    {\n      name: 'search-input-local-storage-option-container',\n      description: 'Search input local storage option element container',\n    },\n    {\n      name: 'search-input-option-icon',\n      description: 'Search input option icon element',\n    },\n    {\n      name: 'search-input-option-content',\n      description: 'Search input option content element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"A combobox is a widget made up of the combination of two distinct elements: 1) a single-line textbox, and 2) an associated pop-up element for helping users set the value of the textbox. The popup may be a listbox, grid, tree, or dialog. Many implementations also include a third optional element -- a graphical button adjacent to the textbox, indicating the availability of the popup. Activating the button displays the popup if suggestions are available."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#combobox",mdxType:"ExitLink"},"Combo box WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const MockData = utils.useSearchInputMock();\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log(\'Searched\', data);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SearchInput\n        resultLimit={3}\n        label="Clearable"\n        hideLabel\n        placeholder="Search..."\n        model="search"\n        options={MockData}\n        isClearable\n        onSearch={handleSearch}\n        keys={[\'value\']}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Textbox\"\n  rows={[\n    {\n      name: 'Down Arrow',\n      description:\n        'If the listbox is displayed: Moves focus to the second suggested value. Note that the first value is automatically selected. If the listbox is not displayed: opens the listbox and moves focus to the first value.',\n    },\n    {\n      name: 'Up Arrow',\n      description:\n        'If the listbox is displayed, moves focus to the last suggested value. If the listbox is not displayed, opens the listbox and moves focus to the last value.',\n    },\n    {\n      name: 'Alt + Down Arrow',\n      description:\n        'Opens the listbox without moving focus or changing selection.',\n    },\n    {\n      name: 'Enter',\n      description:\n        'If the listbox is displayed and the first option is automatically selected: Sets the textbox value to the content of the selected option. Closes the listbox.',\n    },\n    {\n      name: 'Esc',\n      description:\n        'Clears the textbox. If the listbox is displayed, closes it.',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Listbox\"\n  rows={[\n    {\n      name: 'Enter',\n      description:\n        'Sets the textbox value to the content of the focused option in the listbox. Closes the listbox. Sets focus on the textbox.',\n    },\n    {\n      name: 'Esc',\n      description:\n        'Closes the listbox. Sets focus on the textbox. Clears the textbox.',\n    },\n    {\n      name: 'Down Arrow',\n      description:\n        'Moves focus to the next option. If focus is on the last option, moves focus to the first option.',\n    },\n    {\n      name: 'Up Arrow',\n      description:\n        'Moves focus to the previous option. If focus is on the first option, moves focus to the last option.',\n    },\n    {\n      name: 'Right Arrow',\n      description:\n        'Moves focus to the textbox and moves the editing cursor one character to the right.',\n    },\n    {\n      name: 'Left Arrow',\n      description:\n        'Moves focus to the textbox and moves the editing cursor one character to the left.',\n    },\n    {\n      name: 'Home',\n      description:\n        'Moves focus to the textbox and places the editing cursor at the beginning of the field.',\n    },\n    {\n      name: 'End',\n      description:\n        'Moves focus to the textbox and places the editing cursor at the end of the field.',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},90519:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"search-results",category:"Data Display",title:"SearchResults",description:"Organizes the results of a search data set and displays them.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3695%3A24074",pagination_prev:"web/ui/indicator",pagination_next:"web/ui/service-sandbox"},d=void 0,p={unversionedId:"web/ui/search-results",id:"web/ui/search-results",isDocsHomePage:!1,title:"SearchResults",description:"Organizes the results of a search data set and displays them.",source:"@site/docs/web/ui/SearchResults.md",sourceDirName:"web/ui",slug:"/web/ui/search-results",permalink:"/web/ui/search-results",tags:[],version:"current",frontMatter:{id:"search-results",category:"Data Display",title:"SearchResults",description:"Organizes the results of a search data set and displays them.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3695%3A24074",pagination_prev:"web/ui/indicator",pagination_next:"web/ui/service-sandbox"},sidebar:"docs",previous:{title:"Indicator",permalink:"/web/ui/indicator"},next:{title:"ServiceSandbox",permalink:"/web/ui/service-sandbox"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Pagination",id:"pagination",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { SearchResults } from '@abyss/web/ui/SearchResults';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"SearchResults is used for formatting search results in a UI."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," prop is an array containing the data that is being searched on. Each object in the array contains three fields, ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," (the title of the result), ",(0,r.kt)("inlineCode",{parentName:"p"},"link")," (a link to the result's page), and ",(0,r.kt)("inlineCode",{parentName:"p"},"content")," (a description of the link / result)."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"searchTerm")," prop is what will be searched on. Each result that is returned will contain the search term."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const searchResults = [\n    {\n      id: 'All Savers Alternate Funding',\n      link: 'https://www.unitedhealthgroup.com',\n      content:\n        'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum accumsan euismod dapibus. Sed volutpat ullamcorper elit, at ornare sem consectetur non. In quam diam, rhoncus eget venenatis eu, iaculis id orci. Cras sit amet lectus sollicitudin, congue lectus ut, ullamcorper tortor. Sed pretium facilisis risus, quis mollis urna pretium non.',\n    },\n    {\n      id: 'Hospital Perf-Based Comp Reports',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Hospital Perf-Based Comp Reports',\n    },\n    {\n      id: 'Individual Health Record',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Individual Health Record',\n    },\n    {\n      id: 'Onboard Pro',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Onboard Pro',\n    },\n    {\n      id: 'Optum Behavioral Provider Express Portal',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Optum Behavioral Provider Express Portal',\n    },\n    {\n      id: 'Physician Performance & Reporting',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Physician Performance & Reporting',\n    },\n    {\n      id: 'Practice Assist',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Practice Assist',\n    },\n    {\n      id: 'Test Registry',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Test Registry',\n    },\n    {\n      id: 'UnitedHealthcare Claim Estimator',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UnitedHealthcare Claim Estimator',\n    },\n    {\n      id: 'UnitedHealthcare CommunityCare',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UnitedHealthcare CommunityCare',\n    },\n    {\n      id: 'UnitedHealthcare Oxford',\n      link: 'https://www.unitedhealthgroup.com',\n      content:\n        'Praesent laoreet eget turpis euismod feugiat. Fusce sodales diam vitae lectus aliquet vehicula. Duis lobortis posuere mauris, quis blandit velit gravida ut. Proin massa metus, pellentesque eu egestas sit amet, tristique quis enim.',\n    },\n    {\n      id: 'UnitedHealthcare Practice Facility Profile',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UnitedHealthcare Practice Facility Profile',\n    },\n    {\n      id: 'UnitedHealthcare Reports',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UnitedHealthcare Reports',\n    },\n    {\n      id: 'UnitedHealthcare West Reports',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UnitedHealthcare West Reports',\n    },\n    {\n      id: 'VACCN',\n      link: 'https://www.unitedhealthgroup.com',\n      content:\n        'Proin massa metus, pellentesque eu egestas sit amet, tristique quis enim.',\n    },\n    {\n      id: 'AARP Provider Online Tool',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'AARP Provider Online Tool',\n    },\n    {\n      id: 'CAQH ProView\u2122',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'CAQH ProView\u2122',\n    },\n    {\n      id: 'Care Conductor and Notification of Pregnancy',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Care Conductor and Notification of Pregnancy',\n    },\n    {\n      id: 'Claims Submission',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Claims Submission',\n    },\n    {\n      id: 'Cover My Meds',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Cover My Meds',\n    },\n    {\n      id: 'UHC Dental DSNP & Medicaid ',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UHC Dental DSNP & Medicaid ',\n    },\n    {\n      id: 'Dental Benefit Providers UHC C&S',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Dental Benefit Providers UHC C&S',\n    },\n    {\n      id: 'HBMA Find a Medical Biller',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'HBMA Find a Medical Biller',\n    },\n    {\n      id: 'Health Plan of Nevada',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Health Plan of Nevada',\n    },\n    {\n      id: 'InstaMed Member Payments',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'InstaMed Member Payments',\n    },\n    {\n      id: 'Medical Billing Education',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Medical Billing Education',\n    },\n    {\n      id: 'Office Ally',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Office Ally',\n    },\n    {\n      id: 'Optum Physical Health',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Optum Physical Health',\n    },\n    {\n      id: 'Secure Messenger Clinical Data Submission',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Secure Messenger Clinical Data Submission',\n    },\n    {\n      id: 'Spectera Vision Providers',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Spectera Vision Providers',\n    },\n    {\n      id: 'UMR',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UMR',\n    },\n    {\n      id: 'UnitedHealth One',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UnitedHealth One',\n    },\n    {\n      id: 'UnitedHealth Premium United in Care',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UnitedHealth Premium United in Care',\n    },\n    {\n      id: 'UnitedHealthcare Claims Research Project',\n      link: '/claims/research',\n      content: 'UnitedHealthcare Claims Research Project',\n    },\n    {\n      id: 'UHC Insights',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UHC Insights',\n    },\n    {\n      id: 'Dental Xchange',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Dental Xchange',\n    },\n    {\n      id: 'Paperless Delivery Options',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Paperless Delivery Options',\n    },\n    {\n      id: 'UnitedHealthcare OneNet PPO Pricing',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UnitedHealthcare OneNet PPO Pricing',\n    },\n    {\n      id: 'Document Vault -  Electronic Letters & Reports',\n      link: '/documentlibrary',\n      content: 'Document Vault -  Electronic Letters & Reports',\n    },\n    {\n      id: 'EPS / Optum Pay',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'EPS / Optum Pay',\n    },\n    {\n      id: 'My Practice Profile',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'My Practice Profile',\n    },\n    {\n      id: 'Eligibility',\n      link: '/eligibility',\n      content: 'Eligibility',\n    },\n    {\n      id: 'Claims',\n      link: '/claims',\n      content: 'Claims',\n    },\n    {\n      id: 'PAAN',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'PAAN',\n    },\n    {\n      id: 'Referrals',\n      link: '/referrals',\n      content: 'Referrals',\n    },\n    {\n      id: 'Direct Connect',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Direct Connect',\n    },\n    {\n      id: 'Optum Intelligent EDI',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Optum Intelligent EDI',\n    },\n    {\n      id: 'Optum VA Community Care Network',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Optum VA Community Care Network',\n    },\n    {\n      id: 'Patterns of Care',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Patterns of Care',\n    },\n    {\n      id: 'PreCheck MyScript',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'PreCheck MyScript',\n    },\n    {\n      id: 'Remote EMR access',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Remote EMR access',\n    },\n    {\n      id: 'UnitedHealthcare Fee Schedule Lookup',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UnitedHealthcare Fee Schedule Lookup',\n    },\n    {\n      id: 'Jade',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Jade',\n    },\n    {\n      id: 'NC Virtual Health',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'NC Virtual Health',\n    },\n    {\n      id: 'UNAS',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UNAS',\n    },\n    {\n      id: 'Specialty Management Access Portal',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Specialty Management Access Portal',\n    },\n    {\n      id: 'Med Therapy Management',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Med Therapy Management',\n    },\n    {\n      id: 'UHOne',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UHOne',\n    },\n    {\n      id: 'Health Plan of NV',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'Health Plan of NV',\n    },\n  ];\n  return <SearchResults data={searchResults} searchTerm=\"united\" />;\n};\n")),(0,r.kt)("h2",{id:"pagination"},"Pagination"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSize")," prop can be used to specify the number of results that appear on each page. The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"10"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const searchResults = [\n    {\n      id: 'UnitedHealthcare OneNet PPO Pricing',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UnitedHealthcare OneNet PPO Pricing',\n    },\n    {\n      id: 'UnitedHealth One',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UnitedHealth One',\n    },\n    {\n      id: 'UnitedHealth Premium United in Care',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UnitedHealth Premium United in Care',\n    },\n    {\n      id: 'UnitedHealthcare Claims Research Project',\n      link: '/claims/research',\n      content: 'UnitedHealthcare Claims Research Project',\n    },\n    {\n      id: 'UnitedHealthcare Practice Facility Profile',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UnitedHealthcare Practice Facility Profile',\n    },\n    {\n      id: 'UnitedHealthcare Reports',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UnitedHealthcare Reports',\n    },\n    {\n      id: 'UnitedHealthcare West Reports',\n      link: 'https://www.unitedhealthgroup.com',\n      content: 'UnitedHealthcare West Reports',\n    },\n  ];\n  return (\n    <SearchResults data={searchResults} searchTerm=\"united\" pageSize={2} />\n  );\n};\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={SearchResults}\n  rows={[\n    {\n      name: 'data',\n      type: 'array[object]',\n      description: 'Data used to compute search',\n    },\n    {\n      name: 'searchTerm',\n      type: 'string',\n      description: 'Search term used in search',\n    },\n    {\n      name: 'pageSize',\n      type: 'number',\n      description: 'Set the size of page',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={SearchResults}\n  rows={[\n    {\n      name: 'search-result-root',\n      description: 'Search result root element',\n    },\n    {\n      name: 'search-result-label',\n      description: 'Label',\n    },\n    {\n      name: 'search-result-container',\n      description: 'Container',\n    },\n    {\n      name: 'search-result-list',\n      description: 'Results list',\n    },\n    {\n      name: 'search-result-item',\n      description: 'Result item',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},2450:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"select-input",category:"Forms",title:"SelectInput",description:"Allows users to select one value from a provided list of options.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1195",pagination_prev:"web/ui/search-input",pagination_next:"web/ui/select-input-multi"},s=void 0,d={unversionedId:"web/ui/select-input",id:"web/ui/select-input",isDocsHomePage:!1,title:"SelectInput",description:"Allows users to select one value from a provided list of options.",source:"@site/docs/web/ui/SelectInput.md",sourceDirName:"web/ui",slug:"/web/ui/select-input",permalink:"/web/ui/select-input",tags:[],version:"current",frontMatter:{id:"select-input",category:"Forms",title:"SelectInput",description:"Allows users to select one value from a provided list of options.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1195",pagination_prev:"web/ui/search-input",pagination_next:"web/ui/select-input-multi"},sidebar:"docs",previous:{title:"SearchInput",permalink:"/web/ui/search-input"},next:{title:"SelectInputMulti",permalink:"/web/ui/select-input-multi"}},p=[{value:"Usage",id:"usage",children:[],level:2},{value:"Section Headers",id:"section-headers",children:[],level:2},{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Add Elements inside Input",id:"add-elements-inside-input",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Disable Option Items",id:"disable-option-items",children:[],level:2},{value:"SubText",id:"subtext",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Loading",id:"loading",children:[],level:2},{value:"Searchable",id:"searchable",children:[],level:2},{value:"onInputChange",id:"oninputchange",children:[],level:2},{value:"API Filtering with Debounce",id:"api-filtering-with-debounce",children:[],level:2},{value:"Custom Render",id:"custom-render",children:[],level:2},{value:"Width",id:"width",children:[],level:2},{value:"Option List Height",id:"option-list-height",children:[],level:2},{value:"Clearable",id:"clearable",children:[],level:2},{value:"Label/Value Key",id:"labelvalue-key",children:[],level:2},{value:"Validation",id:"validation",children:[],level:2},{value:"Highlighted",id:"highlighted",children:[],level:2},{value:"Enable Outside Scroll",id:"enable-outside-scroll",children:[],level:2},{value:"Virtualization",id:"virtualization",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { SelectInput } from '@abyss/web/ui/SelectInput';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'SelectInput',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'string',\n      defaultValue: 'Sandbox',\n    },\n    {\n      prop: 'placeholder',\n      type: 'string',\n    },\n    {\n      prop: 'subText',\n      type: 'string',\n    },\n    {\n      prop: 'width',\n      type: 'string',\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n    {\n      prop: 'isClearable',\n      type: 'boolean',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'isSearchable',\n      type: 'boolean',\n    },\n    {\n      prop: 'highlighted',\n      type: 'boolean',\n      defaultValue: false,\n    },\n  ],\n}\n\n() => {\n  const [value, setValue] = React.useState('alpine');\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <SelectInput\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        value={value}\n        onChange={setValue}\n        onClear={() => setValue('')}\n        isClearable\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," prop to supply the options that can be selected. ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," is an array of objects, where each object should have two properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value"),", which is a unique identifier for the option"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"label"),", which is how the option will be displayed in the list")),(0,i.kt)("p",null,"Sections can also be specified, in which case the section object should have ",(0,i.kt)("inlineCode",{parentName:"p"},"section")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"items")," properties instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," (See ",(0,i.kt)("a",{parentName:"p",href:"#section-headers"},"Section Headers")," for more details)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"[\n  { value: 'id1', label: 'Option 1' },\n  { value: 'id2', label: 'Option 2' },\n  {\n    section: 'Section Header',\n    items: [\n      { value: 'id3', label: 'Sub-section Option 1' },\n      { value: 'id4', label: 'Sub-section Option 2' },\n      ...\n    ],\n  },\n   ...\n]\n")),(0,i.kt)("h2",{id:"section-headers"},"Section Headers"),(0,i.kt)("p",null,"To create section headers in the list, pass objects into the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," array that have the ",(0,i.kt)("inlineCode",{parentName:"p"},"section")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"items")," properties. ",(0,i.kt)("inlineCode",{parentName:"p"},"section")," specifies the name of the section, which will be bolded and unselectable, while ",(0,i.kt)("inlineCode",{parentName:"p"},"items")," should contain the options within that section (with the same ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"label")," format as normal), which will appear indented."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState('');\n\n  return (\n    <SelectInput\n      label=\"Section Headers Example\"\n      placeholder=\"Pick one\"\n      value={value}\n      onChange={setValue}\n      onClear={() => setValue('')}\n      options={[\n        { value: '1', label: 'This option is not under any section' },\n        {\n          section: 'Section Header',\n          items: [\n            { value: '11', label: 'Option 1' },\n            { value: '21', label: 'Option 2' },\n          ],\n        },\n        {\n          section: 'Other Section Header',\n          items: [\n            { value: '31', label: 'Option 3' },\n            { value: '41', label: 'Option 4' },\n          ],\n        },\n        ,\n      ]}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      framework: 'react',\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInput\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        model=\"framework\"\n        isClearable\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n        validators={{ required: true }}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"usestate"},"useState"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState('alpine');\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <SelectInput\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        value={value}\n        onChange={setValue}\n        onClear={() => setValue('')}\n        isClearable\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"add-elements-inside-input"},"Add Elements inside Input"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"inputLeftElement")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"inputRightElement")," props to add elements to the inside of the select input field. The recommended usage is for inserting icons."),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"#validation"},"Validation")," section below for an example on how to incorporate with validation and display error/success states with icons."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <SelectInput\n        label="Add Elements"\n        placeholder="select option"\n        inputLeftElement={\n          <IconMaterial icon="star" size="18px" color="$gray6" />\n        }\n        inputRightElement={<IconMaterial icon="check" size="18px" />}\n        model="activeLabel"\n        isClearable\n        isSearchable\n        options={[\n          { label: \'Option 1\', value: \'1\' },\n          { label: \'Option 2\', value: \'2\' },\n          { label: \'Option 3\', value: \'3\' },\n        ]}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"label"},"Label"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," prop is required. To hide the label use the ",(0,i.kt)("inlineCode",{parentName:"p"},"hideLabel")," prop to show or hide the label."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInput\n        label=\"Active Label\"\n        placeholder=\"Active Label\"\n        model=\"activeLabel\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <SelectInput\n        label=\"Hidden Label\"\n        placeholder=\"Hidden Label\"\n        model=\"hiddenLabel\"\n        hideLabel\n        css={{ 'abyss-select-input-root': { marginTop: '15px' } }}\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <Button type=\"submit\" css={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"disabled"},"Disabled"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to disable the select list input field so users cannot select a value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInput\n        label=\"Disabled\"\n        isDisabled={true}\n        model=\"disabled\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"disable-option-items"},"Disable Option Items"),(0,i.kt)("p",null,"Disable an individual option item by setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," key to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," within the object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState('alpine');\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <SelectInput\n        label=\"Disable Option Items\"\n        placeholder=\"Pick one\"\n        value={value}\n        onChange={setValue}\n        onClear={() => setValue('')}\n        isClearable\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular', isDisabled: true },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"subtext"},"SubText"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the select list input field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      Sublabel: '1',\n    },\n  });\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInput\n        label=\"Sublabel\"\n        subText=\"Sublabel Example\"\n        model=\"Sublabel\"\n        validators={{ required: true }}\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState();\n\n  return (\n    <SelectInput\n      value={value}\n      onChange={setValue}\n      options={[\n        { value: 'react', label: 'React' },\n        { value: 'ng', label: 'Angular' },\n        { value: 'svelte', label: 'Svelte' },\n        { value: 'vue', label: 'Vue' },\n        { value: 'alpine', label: 'Alpine' },\n        { value: 'ember', label: 'Ember' },\n        { value: 'stimulus', label: 'Stimulus' },\n        { value: 'preact', label: 'Preact' },\n      ]}\n      placeholder=\"Pick one\"\n      label=\"Descriptors Display\"\n      subText=\"Subtext Message\"\n      errorMessage=\"Error Message\"\n      descriptorsDisplay=\"column\"\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"loading"},"Loading"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"isLoading")," prop to to display a loading spinner in place of the drop-down option list. This is useful when loading in the SelectInput options."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <Layout.Stack grow>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <SelectInput\n          label=\"Loading\"\n          placeholder={isLoading ? 'Loading...' : 'Select One'}\n          isLoading={isLoading}\n          model=\"loading\"\n          isClearable\n          options={[\n            { label: 'Option 1', value: '1' },\n            { label: 'Option 2', value: '2' },\n            { label: 'Option 3', value: '3' },\n          ]}\n        />\n      </FormProvider>\n      <Button\n        onClick={() => setIsLoading(!isLoading)}\n        style={{ marginTop: '15px' }}\n      >\n        Toggle Loading\n      </Button>\n    </Layout.Stack>\n  );\n};\n")),(0,i.kt)("h2",{id:"searchable"},"Searchable"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"isSearchable")," prop to display an input field for the user to search/filter the list of options."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInput\n        label=\"Searchable\"\n        model=\"searchable\"\n        isSearchable\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"oninputchange"},"onInputChange"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"onInputChange")," prop is an event handler called when the value of the text input changes while searching. The callback returns the current search value of the input. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"onChange")," event handler to capture the value of an option item on selection."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const onInputChange = (value) => {\n    console.log('value', value);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SelectInput\n        label=\"onInputChange\"\n        hideLabel\n        placeholder=\"Search...\"\n        model=\"onInputChange\"\n        isClearable\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n        onInputChange={onInputChange}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"api-filtering-with-debounce"},"API Filtering with Debounce"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"apiFiltering")," prop to override the fuse.js filtering and supply a custom function to make asynchronous calls to an API. Both current value and selected value results will be passed to the apiFiltering callback. The results from your api should be passed into the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," prop. If ",(0,i.kt)("inlineCode",{parentName:"p"},"debounceTime")," is not passed a default debounce time of 1000ms will be applied. In the example below search by the string ",(0,i.kt)("inlineCode",{parentName:"p"},"united")," to see results."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [results, setResults] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const form = useForm();\n\n  const handleSearch = (data) => {\n    console.log('Searched', data);\n  };\n\n  const apiFilter = (currentValue, selectedValue) => {\n    console.log('currentValue', currentValue);\n    console.log('selectedValue', selectedValue);\n    setLoading(true);\n    utils.useSearchInputMockApi(currentValue).then((response) => {\n      setLoading(false);\n      setResults(response);\n    });\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SelectInput\n        placeholder=\"Search...\"\n        model=\"apiFiltering\"\n        label=\"Api Filtering\"\n        isSearchable\n        options={results}\n        isLoading={loading}\n        debounceTime={1200}\n        apiFiltering={apiFilter}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"custom-render"},"Custom Render"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"customRender")," prop to customize the render of each option item. If ",(0,i.kt)("a",{parentName:"p",href:"#section-headers"},"Section Headers")," are used they will also be handled by this function. ",(0,i.kt)("inlineCode",{parentName:"p"},"customRender")," provides the item object as the first parameter and the items state as the second."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState();\n\n  const customRender = (item, state) => {\n    const defaultSettings = {\n      icon: 'cancel',\n      color: '$error1',\n      variant: 'error',\n    };\n\n    const settings = useMemo(() => {\n      const { status } = (item.items && item.items[0]) || item;\n      if (status === 'active') {\n        return {\n          icon: 'check_circle_outline',\n          color: '$success1',\n          variant: 'success',\n        };\n      }\n      return defaultSettings;\n    }, [item]);\n\n    const { icon, color, variant } = settings;\n\n    if (!!item.section) {\n      return (\n        <Layout.Group>\n          <span>{item.section}</span>\n          <IconMaterial icon={icon} color={color} />\n        </Layout.Group>\n      );\n    }\n\n    return <Badge variant={variant}>{item.label}</Badge>;\n  };\n\n  return (\n    <SelectInput\n      label=\"Custom Render\"\n      placeholder=\"Pick one\"\n      value={value}\n      onChange={setValue}\n      onClear={() => setValue('')}\n      isClearable\n      isSearchable\n      maxListHeight={300}\n      options={[\n        {\n          section: 'Active Options',\n          items: [\n            { value: 'option_1', label: 'Option 1', status: 'active' },\n            { value: 'option_2', label: 'Option 2', status: 'active' },\n            { value: 'option_3', label: 'Option 3', status: 'active' },\n          ],\n        },\n        {\n          section: 'Inactive Options',\n          items: [\n            { value: 'option_4', label: 'Option 4', status: 'inactive' },\n            { value: 'option_5', label: 'Option 5', status: 'inactive' },\n            { value: 'option_6', label: 'Option 6', status: 'inactive' },\n          ],\n        },\n      ]}\n      customRender={customRender}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"width"},"Width"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"width")," prop to set the width of the select list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInput\n        label=\"Default Width\"\n        placeholder=\"Width: Default\"\n        model=\"widthDefault\"\n        isClearable\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <SelectInput\n        label=\"Width 75%\"\n        width=\"75%\"\n        placeholder=\"Width: 75%\"\n        model=\"width75\"\n        isClearable\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <SelectInput\n        label=\"Width\"\n        placeholder=\"Width: 300px\"\n        width=\"300px\"\n        model=\"width300\"\n        isClearable\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"option-list-height"},"Option List Height"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"maxListHeight")," prop to set the maximum height the option list can be before it becomes scrollable. The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"185px"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value1, setValue1] = React.useState('');\n  const [value2, setValue2] = React.useState('');\n  const [value3, setValue3] = React.useState('');\n\n  return (\n    <React.Fragment>\n      <SelectInput\n        label=\"100px max height\"\n        placeholder=\"Pick one\"\n        value={value1}\n        onChange={setValue1}\n        maxListHeight={100}\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n      <SelectInput\n        label=\"185px max height - Default\"\n        placeholder=\"Pick one\"\n        value={value2}\n        onChange={setValue2}\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n      <SelectInput\n        label=\"250px max height\"\n        placeholder=\"Pick one\"\n        value={value3}\n        onChange={setValue3}\n        maxListHeight=\"250px\"\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"clearable"},"Clearable"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"isClearable")," prop to to allow for clearable select lists. If ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", a clear button will appear in the input. Note that if you are using ",(0,i.kt)("inlineCode",{parentName:"p"},"useState"),", you will need to pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"onClear")," prop as well to handle clearing the data when the clear button is pressed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      isClearableForm: '1',\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInput\n        label=\"Clearable (with useForm)\"\n        placeholder=\"Pick one\"\n        model=\"isClearableForm\"\n        isClearable\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState('1');\n\n  return (\n    <SelectInput\n      label=\"Clearable (with useState)\"\n      placeholder=\"Pick one\"\n      value={value}\n      onChange={setValue}\n      onClear={() => setValue('')}\n      isClearable\n      options={[\n        { label: 'Option 1', value: '1' },\n        { label: 'Option 2', value: '2' },\n        { label: 'Option 3', value: '3' },\n      ]}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"labelvalue-key"},"Label/Value Key"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"valueKey")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"labelKey")," props to change the key thats used to read the labels and values from the options list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInput\n        label=\"Label/Value Keys\"\n        placeholder=\"Label/Value Keys\"\n        model=\"keys\"\n        isClearable\n        labelKey=\"newLabel\"\n        valueKey=\"newValue\"\n        options={[\n          { newLabel: 'Option 1', newValue: '1' },\n          { newLabel: 'Option 2', newValue: '2' },\n          { newLabel: 'Option 3', newValue: '3' },\n        ]}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"validation"},"Validation"),(0,i.kt)("p",null,"Use the validators prop to set rules for the field to be valid."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const { errors, isSubmitted, isSubmitSuccessful } = form.formState;\n\n  const getIconProps = useCallback(\n    (model) => {\n      if (!isSubmitted) return {};\n\n      let iconProps = {};\n\n      if (!!errors[model]) {\n        iconProps = { icon: 'error', color: '$error1', size: '18px' };\n      }\n      if (isSubmitSuccessful) {\n        iconProps = { icon: 'check', color: '$success1', size: '18px' };\n      }\n\n      const isEmpty = Object.keys(iconProps).length === 0;\n\n      return !isEmpty\n        ? { inputRightElement: <IconMaterial {...iconProps} /> }\n        : {};\n    },\n    [isSubmitted, isSubmitSuccessful]\n  );\n\n  const options = [\n    { label: 'Option 1', value: '1' },\n    { label: 'Option 2', value: '2' },\n    { label: 'Option 3', value: '3' },\n    { label: 'Option 4', value: '4' },\n    { label: 'Option 5', value: '5' },\n  ];\n\n  return (\n    <FormProvider state={form}>\n      <SelectInput\n        label=\"Required Default Message\"\n        model=\"required\"\n        isSearchable\n        options={options}\n        {...getIconProps('required')}\n        validators={{ required: true }}\n      />\n      <SelectInput\n        label=\"Required Custom Message\"\n        model=\"custom-required\"\n        isSearchable\n        options={options}\n        validators={{ required: 'Custom Error Message' }}\n      />\n      <SelectInput\n        label=\"Custom Validators\"\n        model=\"validate\"\n        isSearchable\n        options={options}\n        validators={{\n          required: true,\n          validate: {\n            greaterThanThree: (v) => {\n              return v >= 3 || 'Should be \"Option 3\" or higher';\n            },\n          },\n        }}\n      />\n      <Button type=\"submit\" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"highlighted"},"Highlighted"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"highlighted")," prop to enable the background color for the input. You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"highlighted")," to enable the color to appear if validation is required."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState();\n\n  return (\n    <SelectInput\n      label=\"Your favorite framework/library\"\n      placeholder=\"Pick one\"\n      value={value}\n      onChange={setValue}\n      onClear={() => setValue('')}\n      isClearable\n      isSearchable\n      highlighted\n      options={[\n        { value: 'react', label: 'React' },\n        { value: 'ng', label: 'Angular' },\n        { value: 'svelte', label: 'Svelte' },\n        { value: 'vue', label: 'Vue' },\n        { value: 'alpine', label: 'Alpine' },\n        { value: 'ember', label: 'Ember' },\n        { value: 'stimulus', label: 'Stimulus' },\n        { value: 'preact', label: 'Preact' },\n      ]}\n    />\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit} highlighted>\n      <SelectInput\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        model=\"framework\"\n        isClearable\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n        validators={{ required: true }}\n      />\n      <Button type=\"submit\" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"enable-outside-scroll"},"Enable Outside Scroll"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"enableOutsideScroll")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to enable scroll outside of the search input component while the option list is open. Default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState('alpine');\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <SelectInput\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        value={value}\n        onChange={setValue}\n        onClear={() => setValue('')}\n        isClearable\n        isSearchable\n        enableOutsideScroll\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"virtualization"},"Virtualization"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"virtual")," prop to add virtualization and improve performance when working with larger data sets. Virtualization leverages the ",(0,i.kt)("inlineCode",{parentName:"p"},"useVirtualization")," hook which utilizes the ",(0,i.kt)("strong",{parentName:"p"},"TanStack Virtual")," library. For further configuration details please see the following ",(0,i.kt)("a",{parentName:"p",href:"https://tanstack.com/virtual/v3/docs/api/virtualizer"},"documentation")," for all available props that may be passed in with the ",(0,i.kt)("inlineCode",{parentName:"p"},"virtual")," object. To maximize performance virtualization for the SelectInput component is configured by default to use fixed sizing based on an option item element height of ",(0,i.kt)("inlineCode",{parentName:"p"},"38px"),". If your item height remains fixed but needs to be updated, pass in ",(0,i.kt)("inlineCode",{parentName:"p"},"estimateSize")," and set to the new height, i.e., ",(0,i.kt)("inlineCode",{parentName:"p"},"estimateSize: () => height value"),". If the item height is unknown on render enable dynamic sizing by passing in ",(0,i.kt)("inlineCode",{parentName:"p"},"dynamicSizing: true"),"."),(0,i.kt)("p",null,"Here are the following default settings:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dynamicSizing")," : When ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," each option item element is dynamically measured on render. Note: scrolling performance may not be as smooth (default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"estimateSize")," : Sets item height when using fixed sizing. When using dynamic sizing, to help with scroll performance, set this to the largest possible height of the item elements (default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"38"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overscan")," : Number of element items to render above and below the visible area (default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"5"),").")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const defaultOptionCount = 5000;\n  const withSectionHeaders = false;\n\n  const optionNumberForm = useForm({\n    defaultValues: {\n      optionCount: defaultOptionCount,\n    },\n  });\n\n  const selectInputForm = useForm();\n  const [options, setOptions] = React.useState();\n\n  const generateOptions = (count) => {\n    const options = Array.from(Array(Number(count)).keys()).map((i) => {\n      const optionLabelValue = `Option ${i + 1}`;\n\n      if (withSectionHeaders) {\n        return {\n          section: `Option ${i + 1} Header`,\n          items: [\n            { label: `${optionLabelValue} A`, value: `${optionLabelValue}_A` },\n            { label: `${optionLabelValue} B`, value: `${optionLabelValue}_B` },\n          ],\n        };\n      }\n\n      return { label: optionLabelValue, value: optionLabelValue };\n    });\n    setOptions(options);\n  };\n\n  useEffect(() => {\n    generateOptions(defaultOptionCount);\n  }, []);\n\n  return (\n    <React.Fragment>\n      <FormProvider\n        state={optionNumberForm}\n        onSubmit={({ optionCount }) => generateOptions(optionCount)}\n      >\n        <Layout.Group alignItems="bottom">\n          <TextInput\n            label="Set Number of Dropdown Options"\n            placeholder="Enter number"\n            model="optionCount"\n            mask="numeric"\n          />\n          <Button type="submit">Update Options</Button>\n          <Button\n            variant="outline"\n            type="button"\n            onClick={() => {\n              optionNumberForm.reset();\n              selectInputForm.reset();\n              generateOptions(defaultOptionCount);\n            }}\n          >\n            Reset\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n      <FormProvider state={selectInputForm}>\n        <SelectInput\n          css={{ \'abyss-select-input-multi-root\': { marginTop: \'$lg\' } }}\n          label="SelectInput with Virtualization"\n          placeholder={`Includes ${options ? options.length : 0} options`}\n          model="selectWithVirtual"\n          isClearable\n          isSearchable\n          options={options}\n          virtual\n        />\n\n        <SelectInput\n          label="SelectInput without Virtualization"\n          placeholder={`Includes ${options ? options.length : 0} options`}\n          model="selectWithoutVirtual"\n          isClearable\n          isSearchable\n          options={options}\n        />\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={SelectInput}\n  rows={[\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Select list label',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to show or hide label',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'placeholder',\n      type: 'string',\n      description:\n        'Short description displayed in the select list before the user selects a value',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Error message to be displayed below the select input field',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Text displayed below the select input field',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the select input field',\n    },\n    {\n      name: 'maxListHeight',\n      type: 'number | string',\n      description: 'Set the max height of the option list.',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired everytime the selection value changes',\n    },\n    {\n      name: 'onClear',\n      type: 'function',\n      description:\n        'Callback fired when user clicks the clear button. The isClearable property must be set to true',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    {\n      name: 'onKeyDown',\n      type: 'function',\n      description:\n        'Callback fired everytime a key is pressed while focused in the component',\n    },\n    {\n      name: 'onPaste',\n      type: 'function',\n      description:\n        'Callback fired everytime something is pasted into the component',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    {\n      name: 'onKeyDown',\n      type: 'function',\n      description:\n        'Callback fired everytime a key is pressed while focused in the component',\n    },\n    {\n      name: 'onPaste',\n      type: 'function',\n      description:\n        'Callback fired everytime something is pasted into the component',\n    },\n    {\n      name: 'onInputChange',\n      type: 'function',\n      description:\n        'Callback fired when the value of the search text input changes.',\n    },\n    {\n      name: 'validators',\n      type: 'object',\n      description: 'Set rules for the input field to be valid',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the select list. If true, the select list will be disabled',\n    },\n    {\n      name: 'isClearable',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the ability for a user to clear the select list',\n    },\n    {\n      name: 'isSearchable',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the select list search/filter feature',\n    },\n    {\n      name: 'isLoading',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the loading state of the select list.',\n    },\n    {\n      name: 'options',\n      type: 'object[]',\n      description:\n        'List of options selectable in the select list input. { label: string, value: string }',\n    },\n    {\n      name: 'fuseConfig',\n      type: 'shape',\n      description: 'Configs for Fuse',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description:\n        'Option value or list of option values selected in the select list input.',\n    },\n    {\n      name: 'width',\n      type: 'string',\n      description: 'Width of the select list',\n    },\n    {\n      name: 'labelKey',\n      type: 'string',\n      description:\n        'Set the key value of the label in the options list. Defaults to \"label\"',\n    },\n    {\n      name: 'valueKey',\n      type: 'string',\n      description:\n        'Set the key value of the value in the options list. Defaults to \"value\"',\n    },\n    {\n      name: 'inputLeftElement',\n      type: 'ReactNode',\n      description: 'Add element to left of inside select input',\n    },\n    {\n      name: 'inputRightElement',\n      type: 'ReactNode',\n      description: 'Add element to right of inside select input',\n    },\n    {\n      name: 'enableOutsideScroll',\n      type: 'boolean',\n      description: 'Flag to enable scroll on all outside elements',\n    },\n    {\n      name: 'virtual',\n      type: 'object | boolean',\n      description: 'Adds virtualization to option item drop-down list',\n    },\n    {\n      name: 'debounceTime',\n      type: 'number',\n      description:\n        'Set the length of time that the search should debounce by (in milliseconds)',\n    },\n    {\n      name: 'apiFiltering',\n      type: 'function',\n      description: 'Api Filter used for fetching search results from an api',\n    },\n    {\n      name: 'customRender',\n      type: 'function',\n      description: 'Custom render for option items',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={SelectInput}\n  rows={[\n    {\n      name: 'select-input-root',\n      description: 'Root element',\n    },\n    {\n      name: 'select-input-label',\n      description: 'Label',\n    },\n    {\n      name: 'select-input-input-container',\n      description: 'Input and option list container',\n    },\n    {\n      name: 'select-input-input',\n      description: 'Input',\n    },\n    {\n      name: 'select-input-left-element-wrapper',\n      description: 'Wrapper for left input element',\n    },\n    {\n      name: 'select-input-left-element',\n      description: 'Input left element',\n    },\n    {\n      name: 'select-input-right-element-wrapper',\n      description: 'Wrapper for right input element',\n    },\n    {\n      name: 'select-input-right-element',\n      description: 'Input right element',\n    },\n    {\n      name: 'select-input-clear',\n      description: 'Clear button',\n    },\n    {\n      name: 'select-input-element-wrapper',\n      description: 'Select input clear/icon element wrapper',\n    },\n    {\n      name: 'select-input-loading-container',\n      description: 'Loading spinner container',\n    },\n    {\n      name: 'select-input-loading-spinner',\n      description: 'Loading spinner',\n    },\n    {\n      name: 'select-input-icon-container',\n      description: 'Chevron icon container',\n    },\n    {\n      name: 'select-input-icon',\n      description: 'Chevron icon',\n    },\n    {\n      name: 'select-input-descriptors',\n      description: 'Descriptor',\n    },\n    {\n      name: 'select-input-option-list',\n      description: 'Option list',\n    },\n    {\n      name: 'select-input-no-options',\n      description: 'No options list item',\n    },\n    {\n      name: 'select-input-section',\n      description: 'Option list section header item',\n    },\n    {\n      name: 'select-input-option',\n      description: 'Option list item',\n    },\n    {\n      name: 'select-input-option-content',\n      description: 'Option container',\n    },\n    {\n      name: 'select-input-option-icon',\n      description: 'Selected check icon',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"A combobox is a widget made up of the combination of two distinct elements: 1) a single-line textbox, and 2) an associated pop-up element for helping users set the value of the textbox. The popup may be a listbox, grid, tree, or dialog. Many implementations also include a third optional element -- a graphical button adjacent to the textbox, indicating the availability of the popup. Activating the button displays the popup if suggestions are available."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#combobox",mdxType:"ExitLink"},"Combo box WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      framework: 'react',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <SelectInput\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        model=\"framework\"\n        isClearable\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n        validators={{ required: true }}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Textbox\"\n  rows={[\n    {\n      name: 'Down Arrow',\n      description:\n        'If the listbox is displayed: Moves focus to the second suggested value. Note that the first value is automatically selected. If the listbox is not displayed: opens the listbox and moves focus to the first value.',\n    },\n    {\n      name: 'Up Arrow',\n      description:\n        'If the listbox is displayed, moves focus to the last suggested value. If the listbox is not displayed, opens the listbox and moves focus to the last value.',\n    },\n    {\n      name: 'Alt + Down Arrow',\n      description:\n        'Opens the listbox without moving focus or changing selection.',\n    },\n    {\n      name: 'Enter',\n      description:\n        'If the listbox is displayed and the first option is automatically selected: Sets the textbox value to the content of the selected option. Closes the listbox.',\n    },\n    {\n      name: 'Esc',\n      description:\n        'Clears the textbox. If the listbox is displayed, closes it.',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Listbox\"\n  rows={[\n    {\n      name: 'Enter',\n      description:\n        'Sets the textbox value to the content of the focused option in the listbox. Closes the listbox. Sets focus on the textbox.',\n    },\n    {\n      name: 'Esc',\n      description:\n        'Closes the listbox. Sets focus on the textbox. Clears the textbox.',\n    },\n    {\n      name: 'Down Arrow',\n      description:\n        'Moves focus to the next option. If focus is on the last option, moves focus to the first option.',\n    },\n    {\n      name: 'Up Arrow',\n      description:\n        'Moves focus to the previous option. If focus is on the first option, moves focus to the last option.',\n    },\n    {\n      name: 'Right Arrow',\n      description:\n        'Moves focus to the textbox and moves the editing cursor one character to the right.',\n    },\n    {\n      name: 'Left Arrow',\n      description:\n        'Moves focus to the textbox and moves the editing cursor one character to the left.',\n    },\n    {\n      name: 'Home',\n      description:\n        'Moves focus to the textbox and places the editing cursor at the beginning of the field.',\n    },\n    {\n      name: 'End',\n      description:\n        'Moves focus to the textbox and places the editing cursor at the end of the field.',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},17082:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"select-input-multi",category:"Forms",title:"SelectInputMulti",description:"Allows users to select multiple values from a provided list of options.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3697%3A26104",pagination_prev:"web/ui/select-input",pagination_next:"web/ui/slider"},s=void 0,d={unversionedId:"web/ui/select-input-multi",id:"web/ui/select-input-multi",isDocsHomePage:!1,title:"SelectInputMulti",description:"Allows users to select multiple values from a provided list of options.",source:"@site/docs/web/ui/SelectInputMulti.md",sourceDirName:"web/ui",slug:"/web/ui/select-input-multi",permalink:"/web/ui/select-input-multi",tags:[],version:"current",frontMatter:{id:"select-input-multi",category:"Forms",title:"SelectInputMulti",description:"Allows users to select multiple values from a provided list of options.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3697%3A26104",pagination_prev:"web/ui/select-input",pagination_next:"web/ui/slider"},sidebar:"docs",previous:{title:"SelectInput",permalink:"/web/ui/select-input"},next:{title:"Slider",permalink:"/web/ui/slider"}},p=[{value:"Usage",id:"usage",children:[],level:2},{value:"Section Headers",id:"section-headers",children:[],level:2},{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Add Elements Inside Input",id:"add-elements-inside-input",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Disable Option Items",id:"disable-option-items",children:[],level:2},{value:"SubText",id:"subtext",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Searchable",id:"searchable",children:[],level:2},{value:"onInputChange",id:"oninputchange",children:[],level:2},{value:"Custom Render",id:"custom-render",children:[],level:2},{value:"Width",id:"width",children:[],level:2},{value:"MaxListHeight",id:"maxlistheight",children:[],level:2},{value:"Select All",id:"select-all",children:[],level:2},{value:"Label/Value Key",id:"labelvalue-key",children:[],level:2},{value:"Validation",id:"validation",children:[],level:2},{value:"Highlighted",id:"highlighted",children:[],level:2},{value:"Enable Outside Scroll",id:"enable-outside-scroll",children:[],level:2},{value:"Virtualization",id:"virtualization",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { SelectInputMulti } from '@abyss/web/ui/SelectInputMulti';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'SelectInputMulti',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'string',\n      defaultValue: 'Sandbox',\n    },\n    {\n      prop: 'placeholder',\n      type: 'string',\n    },\n    {\n      prop: 'subText',\n      type: 'string',\n    },\n    {\n      prop: 'width',\n      type: 'string',\n    },\n    {\n      prop: 'maxListHeight',\n      type: 'string',\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'isSearchable',\n      type: 'boolean',\n    },\n    {\n      prop: 'selectAll',\n      type: 'boolean',\n    },\n    {\n      prop: 'highlighted',\n      type: 'boolean',\n      defaultValue: false,\n    },\n  ],\n}\n\n() => {\n  const [value, setValue] = React.useState(['alpine']);\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        value={value}\n        onChange={setValue}\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," prop to supply the options that can be selected. ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," is an array of objects, where each object should have two properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value"),", which is a unique identifier for the option"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"label"),", which is how the option will be displayed in the list")),(0,i.kt)("p",null,"Sections can also be specified, in which case the section object should have ",(0,i.kt)("inlineCode",{parentName:"p"},"section")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"items")," properties instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," (See ",(0,i.kt)("a",{parentName:"p",href:"#section-headers"},"Section Headers")," for more details)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"[\n  { value: 'id1', label: 'Option 1' },\n  { value: 'id2', label: 'Option 2' },\n  {\n    section: 'Section Header',\n    items: [\n      { value: 'id3', label: 'Sub-section Option 1' },\n      { value: 'id4', label: 'Sub-section Option 2' },\n      ...\n    ],\n  },\n   ...\n]\n")),(0,i.kt)("h2",{id:"section-headers"},"Section Headers"),(0,i.kt)("p",null,"To create section headers in the list, pass objects into the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," array that have the ",(0,i.kt)("inlineCode",{parentName:"p"},"section")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"items")," properties. ",(0,i.kt)("inlineCode",{parentName:"p"},"section")," specifies the name of the section, which will be bolded and unselectable, while ",(0,i.kt)("inlineCode",{parentName:"p"},"items")," should contain the options within that section (with the same ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"label")," format as normal), which will appear indented."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState([]);\n\n  return (\n    <SelectInputMulti\n      label=\"Section Headers Example\"\n      placeholder=\"Pick one\"\n      value={value}\n      onChange={setValue}\n      options={[\n        { value: '1', label: 'This option is not under any section' },\n        {\n          section: 'Section Header',\n          items: [\n            { value: '11', label: 'Option 1' },\n            { value: '21', label: 'Option 2' },\n          ],\n        },\n        {\n          section: 'Other Section Header',\n          items: [\n            { value: '31', label: 'Option 3' },\n            { value: '41', label: 'Option 4' },\n          ],\n        },\n        ,\n      ]}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      frameworks: ['react'],\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        model=\"frameworks\"\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n        validators={{ required: true }}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"usestate"},"useState"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState(['alpine']);\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        value={value}\n        onChange={setValue}\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"add-elements-inside-input"},"Add Elements Inside Input"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"inputLeftElement")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"inputRightElement")," props to add elements to the inside of the select input multi field. The recommended usage is for inserting icons."),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"#validation"},"Validation")," section below for an example on how to incorporate with validation and display error/success states with icons."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState(['1']);\n\n  return (\n    <SelectInputMulti\n      label=\"Inside Elements\"\n      value={value}\n      onChange={setValue}\n      options={[\n        { label: 'Option 1', value: '1' },\n        { label: 'Option 2', value: '2' },\n        { label: 'Option 3', value: '3' },\n      ]}\n      isSearchable\n      inputLeftElement={<IconMaterial icon=\"star\" size=\"18px\" color=\"$gray6\" />}\n      inputRightElement={<IconMaterial icon=\"check\" size=\"18px\" />}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"label"},"Label"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," prop is required. To hide the label use the ",(0,i.kt)("inlineCode",{parentName:"p"},"showLabel")," prop to show or hide the label."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInputMulti\n        label=\"Active Label\"\n        placeholder=\"Active Label\"\n        model=\"activeLabel\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <SelectInputMulti\n        label=\"Hidden Label\"\n        placeholder=\"Hidden Label\"\n        model=\"hiddenLabel\"\n        hideLabel\n        css={{ 'abyss-select-input-root': { marginTop: '15px' } }}\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <Button type=\"submit\" css={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"disabled"},"Disabled"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to disable the select list input field so users cannot select a value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInputMulti\n        label=\"Disabled\"\n        isDisabled={true}\n        model=\"disabled\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"disable-option-items"},"Disable Option Items"),(0,i.kt)("p",null,"Disable an individual option item by setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," key to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," within the object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState(['alpine']);\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        value={value}\n        onChange={setValue}\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular', isDisabled: true },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"subtext"},"SubText"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the select list input field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      'sub-text': ['1'],\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInputMulti\n        label=\"SubText\"\n        subText=\"Sub Text Example\"\n        model=\"sub-text\"\n        validators={{ required: true }}\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState();\n  return (\n    <SelectInputMulti\n      value={value}\n      onChange={setValue}\n      options={[\n        { label: 'Option 1', value: '1' },\n        { label: 'Option 2', value: '2' },\n        { label: 'Option 3', value: '3' },\n      ]}\n      isSearchable\n      label=\"Descriptors Display\"\n      subText=\"Subtext Message\"\n      errorMessage=\"Error Message\"\n      descriptorsDisplay=\"column\"\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"searchable"},"Searchable"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"isSearchable")," prop to display an input field for the user to search/filter the list of options this is located inside the dropdown."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInputMulti\n        label=\"Searchable\"\n        model=\"searchable\"\n        isSearchable\n        placeholder=\"Searchable\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"oninputchange"},"onInputChange"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"onInputChange")," prop is an event handler called when the value of the filter text input changes while searching. The callback returns the current search value of the input."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const onInputChange = (value) => {\n    console.log('value', value);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SelectInputMulti\n        label=\"onInputChange\"\n        hideLabel\n        placeholder=\"Search...\"\n        model=\"onInputChange\"\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n        onInputChange={onInputChange}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"custom-render"},"Custom Render"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"customRender")," prop to customize the render of each option item. If ",(0,i.kt)("a",{parentName:"p",href:"#section-headers"},"Section Headers")," are used they will also be handled by this function. ",(0,i.kt)("inlineCode",{parentName:"p"},"customRender")," provides the item object as the first parameter and the items state as the second."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState();\n\n  const customRender = (item, state) => {\n    const defaultSettings = {\n      icon: 'cancel',\n      color: '$error1',\n      variant: 'error',\n    };\n\n    const settings = useMemo(() => {\n      const { status } = (item.items && item.items[0]) || item;\n      if (status === 'active') {\n        return {\n          icon: 'check_circle_outline',\n          color: '$success1',\n          variant: 'success',\n        };\n      }\n      return defaultSettings;\n    }, [item]);\n\n    const { icon, color, variant } = settings;\n\n    if (!!item.section) {\n      return (\n        <Layout.Group>\n          <span>{item.section}</span>\n          <IconMaterial icon={icon} color={color} />\n        </Layout.Group>\n      );\n    }\n\n    return <Badge variant={variant}>{item.label}</Badge>;\n  };\n\n  return (\n    <SelectInputMulti\n      label=\"Custom Render\"\n      placeholder=\"Pick one\"\n      value={value}\n      onChange={setValue}\n      isSearchable\n      maxListHeight={300}\n      customRender={customRender}\n      options={[\n        {\n          section: 'Active Options',\n          items: [\n            { value: 'option_1', label: 'Option 1', status: 'active' },\n            { value: 'option_2', label: 'Option 2', status: 'active' },\n            { value: 'option_3', label: 'Option 3', status: 'active' },\n          ],\n        },\n        {\n          section: 'Inactive Options',\n          items: [\n            { value: 'option_4', label: 'Option 4', status: 'inactive' },\n            { value: 'option_5', label: 'Option 5', status: 'inactive' },\n            { value: 'option_6', label: 'Option 6', status: 'inactive' },\n          ],\n        },\n      ]}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"width"},"Width"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"width")," prop to set the width of the select list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInputMulti\n        label=\"Default Width\"\n        placeholder=\"Width: Default\"\n        model=\"widthDefault\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <SelectInputMulti\n        label=\"Width 75%\"\n        width=\"75%\"\n        placeholder=\"Width: 75%\"\n        model=\"width75\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <SelectInputMulti\n        label=\"Width\"\n        placeholder=\"Width: 300px\"\n        width=\"300px\"\n        model=\"width300\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"maxlistheight"},"MaxListHeight"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"maxListHeight")," to set the height of the dropdown list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      maxListHeight: ['2'],\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInputMulti\n        label=\"Single Select Clearable\"\n        placeholder=\"Single Select Clearable\"\n        model=\"maxListHeight\"\n        maxListHeight=\"100px\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n          { label: 'Option 4', value: '4' },\n          { label: 'Option 5', value: '5' },\n          { label: 'Option 6', value: '6' },\n          { label: 'Option 7', value: '7' },\n          { label: 'Option 8', value: '8' },\n        ]}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"select-all"},"Select All"),(0,i.kt)("p",null,"By setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"selectAll")," property to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),' you can make a "Select All" option visible at the top of the dropdown. When selected all options will be selected. When deselected all options will be deselected.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState(['alpine']);\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        value={value}\n        onChange={setValue}\n        selectAll\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"labelvalue-key"},"Label/Value Key"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"valueKey")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"labelKey")," props to change the key thats used to read the labels and values from the options list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInputMulti\n        label=\"Label/Value Keys\"\n        placeholder=\"Label/Value Keys\"\n        model=\"keys\"\n        labelKey=\"newLabel\"\n        valueKey=\"newValue\"\n        options={[\n          { newLabel: 'Option 1', newValue: '1' },\n          { newLabel: 'Option 2', newValue: '2' },\n          { newLabel: 'Option 3', newValue: '3' },\n        ]}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"validation"},"Validation"),(0,i.kt)("p",null,"Use the validators prop to set rules for the field to be valid."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const { errors, isSubmitted, isSubmitSuccessful } = form.formState;\n\n  const getIconProps = useCallback(\n    (model) => {\n      if (!isSubmitted) return {};\n\n      let iconProps = {};\n\n      if (!!errors[model]) {\n        iconProps = { icon: 'error', color: '$error1', size: '18px' };\n      }\n\n      if (isSubmitSuccessful) {\n        iconProps = { icon: 'check', color: '$success1', size: '18px' };\n      }\n\n      const isEmpty = Object.keys(iconProps).length === 0;\n\n      return !isEmpty\n        ? { inputRightElement: <IconMaterial {...iconProps} /> }\n        : {};\n    },\n    [isSubmitted, isSubmitSuccessful]\n  );\n  const options = [\n    { label: 'Option 1', value: '1' },\n    { label: 'Option 2', value: '2' },\n    { label: 'Option 3', value: '3' },\n    { label: 'Option 4', value: '4' },\n    { label: 'Option 5', value: '5' },\n  ];\n  return (\n    <FormProvider state={form}>\n      <SelectInputMulti\n        label=\"Required Default Message\"\n        model=\"required\"\n        isSearchable\n        options={options}\n        {...getIconProps('required')}\n        validators={{ required: true }}\n      />\n      <SelectInputMulti\n        label=\"Required Custom Message\"\n        model=\"custom-required\"\n        isSearchable\n        options={options}\n        validators={{ required: 'Custom Error Message' }}\n      />\n      <SelectInputMulti\n        label=\"Custom Validators\"\n        model=\"validate\"\n        isSearchable\n        options={options}\n        validators={{\n          required: true,\n          validate: {\n            moreThanTwo: (v) => {\n              return (\n                v.length >= 2 || 'Should include a minimum of two selections'\n              );\n            },\n          },\n        }}\n      />\n      <Button type=\"submit\" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"highlighted"},"Highlighted"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"highlighted")," prop to enable the background color for the input. You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"highlighted")," to enable the color to appear if validation is required."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState();\n\n  return (\n    <SelectInputMulti\n      label=\"Your favorite framework/library\"\n      placeholder=\"Pick one\"\n      value={value}\n      onChange={setValue}\n      isSearchable\n      highlighted\n      options={[\n        { value: 'react', label: 'React' },\n        { value: 'ng', label: 'Angular' },\n        { value: 'svelte', label: 'Svelte' },\n        { value: 'vue', label: 'Vue' },\n        { value: 'alpine', label: 'Alpine' },\n        { value: 'ember', label: 'Ember' },\n        { value: 'stimulus', label: 'Stimulus' },\n        { value: 'preact', label: 'Preact' },\n      ]}\n    />\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit} highlighted>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        model=\"frameworks\"\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n        validators={{ required: true }}\n      />\n      <Button type=\"submit\" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"enable-outside-scroll"},"Enable Outside Scroll"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"enableOutsideScroll")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to enable scroll outside of the search input component while the option list is open. Default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState(['alpine']);\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        value={value}\n        onChange={setValue}\n        enableOutsideScroll\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"virtualization"},"Virtualization"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"virtual")," prop to add virtualization and improve performance when working with larger data sets. Virtualization leverages the ",(0,i.kt)("inlineCode",{parentName:"p"},"useVirtualization")," hook which utilizes the ",(0,i.kt)("strong",{parentName:"p"},"TanStack Virtual")," library. For further configuration details please see the following ",(0,i.kt)("a",{parentName:"p",href:"https://tanstack.com/virtual/v3/docs/api/virtualizer"},"documentation")," for all available props that may be passed in with the ",(0,i.kt)("inlineCode",{parentName:"p"},"virtual")," object. To maximize performance virtualization for the SelectInputMulti component is configured by default to use fixed sizing based on an option item element height of ",(0,i.kt)("inlineCode",{parentName:"p"},"40px"),". If your item height remains fixed but needs to be updated, pass in ",(0,i.kt)("inlineCode",{parentName:"p"},"estimateSize")," and set to the new height, i.e., ",(0,i.kt)("inlineCode",{parentName:"p"},"estimateSize: () => height value"),". If the item height is unknown on render enable dynamic sizing by passing in ",(0,i.kt)("inlineCode",{parentName:"p"},"dynamicSizing: true"),"."),(0,i.kt)("p",null,"Here are the following default settings:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dynamicSizing")," : When ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," each option item element is dynamically measured on render. Note: scrolling performance may not be as smooth (default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"estimateSize")," : Sets item height when using fixed sizing. When using dynamic sizing, to help with scroll performance, set this to the largest possible height of the item elements (default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"40"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overscan")," : Number of element items to render above and below the visible area (default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"5"),").")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const defaultOptionCount = 5000;\n  const withSectionHeaders = false;\n\n  const optionNumberForm = useForm({\n    defaultValues: {\n      optionCount: defaultOptionCount,\n    },\n  });\n\n  const selectInputForm = useForm();\n  const [options, setOptions] = React.useState();\n\n  const generateOptions = (count) => {\n    const options = Array.from(Array(Number(count)).keys()).map((i) => {\n      const optionLabelValue = `Option ${i + 1}`;\n\n      if (withSectionHeaders) {\n        return {\n          section: `Option ${i + 1} Header`,\n          items: [\n            { label: `${optionLabelValue} A`, value: `${optionLabelValue}_A` },\n            { label: `${optionLabelValue} B`, value: `${optionLabelValue}_B` },\n          ],\n        };\n      }\n\n      return { label: optionLabelValue, value: optionLabelValue };\n    });\n    setOptions(options);\n  };\n\n  useEffect(() => {\n    generateOptions(defaultOptionCount);\n  }, []);\n\n  return (\n    <React.Fragment>\n      <FormProvider\n        state={optionNumberForm}\n        onSubmit={({ optionCount }) => generateOptions(optionCount)}\n      >\n        <Layout.Group alignItems="bottom">\n          <TextInput\n            label="Set Number of Dropdown Options"\n            placeholder="Enter number"\n            model="optionCount"\n            mask="numeric"\n          />\n          <Button type="submit">Update Options</Button>\n          <Button\n            variant="outline"\n            type="button"\n            onClick={() => {\n              optionNumberForm.reset();\n              selectInputForm.reset();\n              generateOptions(defaultOptionCount);\n            }}\n          >\n            Reset\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n      <FormProvider state={selectInputForm}>\n        <SelectInputMulti\n          css={{ \'abyss-select-input-multi-root\': { marginTop: \'$lg\' } }}\n          label="SelectInputMulti with Virtualization"\n          placeholder={`Includes ${options ? options.length : 0} options`}\n          model="selectWithVirtual"\n          isSearchable\n          options={options}\n          virtual\n        />\n\n        <SelectInputMulti\n          label="SelectInputMulti without Virtualization"\n          placeholder={`Includes ${options ? options.length : 0} options`}\n          model="selectWithoutVirtual"\n          isSearchable\n          options={options}\n        />\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={SelectInputMulti}\n  rows={[\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Select list label',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to show or hide label',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'placeholder',\n      type: 'string',\n      description:\n        'Short description displayed in the select list before the user selects a value',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Error message to be displayed below the select input field',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Text displayed below the select input field',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below below the select input field',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired every time the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    {\n      name: 'onKeyDown',\n      type: 'function',\n      description:\n        'Callback fired everytime a key is pressed while focused in the component',\n    },\n    {\n      name: 'onPaste',\n      type: 'function',\n      description:\n        'Callback fired everytime something is pasted into the component',\n    },\n    {\n      name: 'onInputChange',\n      type: 'function',\n      description:\n        'Callback fired when the value of the search text input changes.',\n    },\n    {\n      name: 'validators',\n      type: 'object',\n      description: 'Set rules for the input field to be valid',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the select list. If true, the select list will be disabled',\n    },\n    {\n      name: 'inputLeftElement',\n      type: 'ReactNode',\n      description: 'Add element to left of inside select input',\n    },\n    {\n      name: 'inputRightElement',\n      type: 'ReactNode',\n      description: 'Add element to right of inside select input',\n    },\n    {\n      name: 'isSearchable',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the select list search/filter feature',\n    },\n    {\n      name: 'options',\n      type: 'object[]',\n      description:\n        'List of options selectable in the select list input. { label: string, value: string }',\n    },\n    {\n      name: 'fuseConfig',\n      type: 'shape',\n      description: 'Configs for Fuse',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description:\n        'Option value or list of option values selected in the select list input.',\n    },\n    {\n      name: 'width',\n      type: 'string',\n      description: 'Width of the select list',\n    },\n    // {\n    //   name: 'isLoading',\n    //   type: 'boolean',\n    //   description:\n    //     'Flag to enable/disable the loading state of the select list.',\n    // },\n    {\n      name: 'labelKey',\n      type: 'string',\n      description:\n        'Set the key value of the label in the options list. Defaults to \"label\"',\n    },\n    {\n      name: 'valueKey',\n      type: 'string',\n      description:\n        'Set the key value of the value in the options list. Defaults to \"value\"',\n    },\n    {\n      name: 'maxListHeight',\n      type: 'string | number',\n      description: 'Sets the max height of the dropdown menu',\n    },\n    {\n      name: 'selectAll',\n      type: 'boolean',\n      description: 'toggles the Select All option',\n    },\n    {\n      name: 'enableOutsideScroll',\n      type: 'boolean',\n      default: 'false',\n      description: 'Flag to enable scroll on all outside elements',\n    },\n    // {\n    //   name: 'debounceTime',\n    //   type: 'number',\n    //   description:\n    //     'Set the length of time that the search should debounce by (in milliseconds)',\n    // },\n    // {\n    //   name: 'apiFiltering',\n    //   type: 'function',\n    //   description: 'Api Filter used for fetching search results from an api',\n    // },\n    {\n      name: 'customRender',\n      type: 'function',\n      description: 'Custom render for option items',\n    },\n    {\n      name: 'virtual',\n      type: 'object | boolean',\n      description: 'Adds virtualization to option item drop-down list',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={SelectInputMulti}\n  rows={[\n    {\n      name: 'select-input-multi-root',\n      description: 'Root element',\n    },\n    {\n      name: 'select-input-multi-label',\n      description: 'Label',\n    },\n    {\n      name: 'select-input-multi-input-container',\n      description: 'Input and option list container',\n    },\n    {\n      name: 'select-input-multi-input',\n      description: 'Input',\n    },\n    {\n      name: 'select-input-multi-left-element-wrapper',\n      description: 'Wrapper for left input element',\n    },\n    {\n      name: 'select-input-multi-left-element',\n      description: 'Input left element',\n    },\n    {\n      name: 'select-input-multi-right-element-wrapper',\n      description: 'Wrapper for right input element',\n    },\n    {\n      name: 'select-input-multi-right-element',\n      description: 'Input right element',\n    },\n    {\n      name: 'select-input-multi-loading-container',\n      description: 'Loading spinner container',\n    },\n    {\n      name: 'select-input-multi-loading-spinner',\n      description: 'Loading spinner',\n    },\n    {\n      name: 'select-input-multi-icon-container',\n      description: 'Chevron icon container',\n    },\n    {\n      name: 'select-input-multi-icon',\n      description: 'Chevron icon',\n    },\n    {\n      name: 'select-input-multi-descriptors',\n      description: 'Descriptor',\n    },\n    {\n      name: 'select-input-multi-option-list-container',\n      description: 'Option list container',\n    },\n    {\n      name: 'select-input-multi-search-container',\n      description: 'Option list search input container',\n    },\n    {\n      name: 'select-input-multi-search-input',\n      description: 'Option list search input',\n    },\n    {\n      name: 'select-input-multi-option-list-virtual-container',\n      description: 'Option list container when using virtualization',\n    },\n    {\n      name: 'select-input-multi-option-list',\n      description: 'Option list',\n    },\n    {\n      name: 'select-input-multi-no-options',\n      description: 'No options list item',\n    },\n\n    {\n      name: 'select-input-multi-option',\n      description: 'Option list item',\n    },\n    {\n      name: 'select-input-multi-section',\n      description: 'Option list item section',\n    },\n    {\n      name: 'select-input-multi-option-content',\n      description: 'Option container',\n    },\n    {\n      name: 'select-input-multi-option-checkbox',\n      description: 'Option checkbox',\n    },\n    {\n      name: 'select-input-multi-chip-group',\n      description: 'Chip container',\n    },\n    {\n      name: 'select-input-multi-chip',\n      description: 'Chip',\n    },\n    {\n      name: 'select-input-multi-chip-extra-count',\n      description: 'Truncated chip counter',\n    },\n    {\n      name: 'select-input-multi-no-options-selected',\n      description: 'No Options Selected',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"A combobox is a widget made up of the combination of two distinct elements: 1) a single-line textbox, and 2) an associated pop-up element for helping users set the value of the textbox. The popup may be a listbox, grid, tree, or dialog. Many implementations also include a third optional element -- a graphical button adjacent to the textbox, indicating the availability of the popup. Activating the button displays the popup if suggestions are available."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#combobox",mdxType:"ExitLink"},"Combo box WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      framework: ['react'],\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        model=\"framework\"\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n        validators={{ required: true }}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Textbox\"\n  rows={[\n    {\n      name: 'Down Arrow',\n      description:\n        'If the listbox is displayed: Moves focus to the second suggested value. Note that the first value is automatically selected. If the listbox is not displayed: opens the listbox and moves focus to the first value.',\n    },\n    {\n      name: 'Up Arrow',\n      description:\n        'If the listbox is displayed, moves focus to the last suggested value. If the listbox is not displayed, opens the listbox and moves focus to the last value.',\n    },\n    {\n      name: 'Alt + Down Arrow',\n      description:\n        'Opens the listbox without moving focus or changing selection.',\n    },\n    {\n      name: 'Enter',\n      description:\n        'If the listbox is displayed and the first option is automatically selected: Sets the textbox value to the content of the selected option. Closes the listbox.',\n    },\n    {\n      name: 'Esc',\n      description:\n        'Clears the textbox. If the listbox is displayed, closes it.',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Listbox\"\n  rows={[\n    {\n      name: 'Enter',\n      description:\n        'Sets the textbox value to the content of the focused option in the listbox. Closes the listbox. Sets focus on the textbox.',\n    },\n    {\n      name: 'Esc',\n      description:\n        'Closes the listbox. Sets focus on the textbox. Clears the textbox.',\n    },\n    {\n      name: 'Down Arrow',\n      description:\n        'Moves focus to the next option. If focus is on the last option, moves focus to the first option.',\n    },\n    {\n      name: 'Up Arrow',\n      description:\n        'Moves focus to the previous option. If focus is on the first option, moves focus to the last option.',\n    },\n    {\n      name: 'Right Arrow',\n      description:\n        'Moves focus to the textbox and moves the editing cursor one character to the right.',\n    },\n    {\n      name: 'Left Arrow',\n      description:\n        'Moves focus to the textbox and moves the editing cursor one character to the left.',\n    },\n    {\n      name: 'Home',\n      description:\n        'Moves focus to the textbox and places the editing cursor at the beginning of the field.',\n    },\n    {\n      name: 'End',\n      description:\n        'Moves focus to the textbox and places the editing cursor at the end of the field.',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},43775:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"service-sandbox",category:"Data Display",title:"ServiceSandbox",description:"Provides a sandbox to test service endpoints.",pagination_prev:"web/ui/search-results",pagination_next:"web/ui/status-indicator"},d=void 0,p={unversionedId:"web/ui/service-sandbox",id:"web/ui/service-sandbox",isDocsHomePage:!1,title:"ServiceSandbox",description:"Provides a sandbox to test service endpoints.",source:"@site/docs/web/ui/ServiceSandbox.md",sourceDirName:"web/ui",slug:"/web/ui/service-sandbox",permalink:"/web/ui/service-sandbox",tags:[],version:"current",frontMatter:{id:"service-sandbox",category:"Data Display",title:"ServiceSandbox",description:"Provides a sandbox to test service endpoints.",pagination_prev:"web/ui/search-results",pagination_next:"web/ui/status-indicator"},sidebar:"docs",previous:{title:"SearchResults",permalink:"/web/ui/search-results"},next:{title:"StatusIndicator",permalink:"/web/ui/status-indicator"}},c=[{value:"JSON Response",id:"json-response",children:[],level:2},{value:"Image Response",id:"image-response",children:[],level:2},{value:"PDF Response",id:"pdf-response",children:[],level:2},{value:"File Upload",id:"file-upload",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ServiceSandbox } from '@abyss/web/ui/ServiceSandbox';\n")),(0,r.kt)("h2",{id:"json-response"},"JSON Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const onSend = (url, options, callback) => {\n    console.log('url', url);\n    console.log('options', options);\n    console.log('callback return response', callback);\n  };\n\n  return (\n    <ServiceSandbox\n      url=\"http://localhost:8080/Claims/api/claim/action/v1.0\"\n      method=\"get\"\n      parameters={[\n        {\n          in: 'query',\n          key: 'transactionId',\n          description: 'transactionId',\n          type: 'string',\n        },\n        {\n          in: 'query',\n          key: 'tin',\n          description: 'tin',\n          type: 'string',\n        },\n        {\n          in: 'header',\n          key: 'Authorization',\n          description: 'Bearer token',\n          type: 'string',\n        },\n        {\n          in: 'header',\n          key: 'env',\n          description: 'Environment',\n          type: 'string',\n        },\n      ]}\n      responses={[\n        {\n          response: '200',\n          description: 'OK',\n          parameters: {\n            query: {\n              transactionId: '12345-123391-129910-1192010',\n              tin: '12345678',\n            },\n            header: {\n              Authorization: 'Bearer MRLATzo9a4CWw6TaGFFTVX3cY66Ll1OD',\n              env: 'sandbox',\n            },\n          },\n        },\n        {\n          response: '400',\n          description: 'Error',\n          parameters: {\n            query: {\n              transactionId: '00000',\n              tin: '12345678',\n            },\n            header: {\n              Authorization: 'Bearer MRLATzo9a4CWw6TaGFFTVX3cY66Ll1OD',\n              env: 'sandbox',\n            },\n          },\n        },\n      ]}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"image-response"},"Image Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const onSend = (url, options, callback) => {\n    console.log('url', url);\n    console.log('options', options);\n    console.log('callback return response', callback);\n  };\n\n  return (\n    <ServiceSandbox\n      url=\"http://localhost:8080/Eligibility/api/extended/memberIdCardV2/image\"\n      method=\"get\"\n      parameters={[\n        {\n          in: 'query',\n          key: 'transactionId',\n          description: 'transactionId',\n          type: 'string',\n        },\n        {\n          in: 'header',\n          key: 'Authorization',\n          description: 'Bearer token',\n          type: 'string',\n        },\n      ]}\n      responses={[\n        {\n          response: '200',\n          description: 'OK',\n          parameters: {\n            query: {\n              transactionId: '12345678-567899',\n            },\n            header: {\n              Authorization: 'Bearer MRLATzo9a4CWw6TaGFFTVX3cY66Ll1OD',\n              env: 'sandbox',\n            },\n          },\n        },\n        {\n          response: '400',\n          description: 'Error',\n          parameters: {\n            query: {\n              transactionId: '000000',\n            },\n            header: {\n              Authorization: 'Bearer MRLATzo9a4CWw6TaGFFTVX3cY66Ll1OD',\n              env: 'sandbox',\n            },\n          },\n        },\n      ]}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"pdf-response"},"PDF Response"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const onSend = (url, options, callback) => {\n    console.log('url', url);\n    console.log('options', options);\n    console.log('callback return response', callback);\n  };\n\n  return (\n    <ServiceSandbox\n      url=\"http://localhost:8080/Claims/api/attachment/v1.0\"\n      method=\"get\"\n      parameters={[\n        {\n          in: 'query',\n          key: 'attachmentId',\n          description: 'attachmentId',\n          type: 'string',\n        },\n        {\n          in: 'query',\n          key: 'tin',\n          description: 'tin',\n          type: 'string',\n        },\n        {\n          in: 'header',\n          key: 'Authorization',\n          description: 'Bearer token',\n          type: 'string',\n        },\n      ]}\n      responses={[\n        {\n          response: '200',\n          description: 'OK',\n          parameters: {\n            query: {\n              attachmentId:\n                '12345678-12345-489e-8739-f6db8149f5c4%7Cu_prov_attch_2021-01',\n              tin: '12345678',\n            },\n            header: {\n              Authorization: 'Bearer MRLATzo9a4CWw6TaGFFTVX3cY66Ll1OD',\n              env: 'sandbox',\n            },\n          },\n        },\n        {\n          response: '400',\n          description: 'Error',\n          parameters: {\n            query: {\n              attachmentId: '000000',\n              tin: '12345678',\n            },\n            header: {\n              Authorization: 'Bearer MRLATzo9a4CWw6TaGFFTVX3cY66Ll1OD',\n              env: 'sandbox',\n            },\n          },\n        },\n      ]}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"file-upload"},"File Upload"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const onSend = (url, options, callback) => {\n    console.log('url', url);\n    console.log('options', options);\n    console.log('callback return response', callback);\n  };\n\n  return (\n    <ServiceSandbox\n      url=\"http://localhost:8080/priorAuth/v1.0/attachment/upload/v1.0\"\n      method=\"post\"\n      parameters={[\n        {\n          in: 'header',\n          key: 'tin',\n          required: true,\n          description: 'tin',\n          type: 'string',\n        },\n        {\n          in: 'header',\n          key: 'client_id',\n          required: true,\n          description: 'Client ID',\n          type: 'string',\n        },\n        {\n          in: 'formData',\n          key: 'files',\n          description: 'file',\n          required: true,\n          type: 'file',\n        },\n        {\n          in: 'formData',\n          key: 'attachmentsRequest',\n          description: 'attachmentsRequest',\n          type: 'string',\n        },\n      ]}\n      responses={[\n        {\n          response: '200',\n          description: 'OK',\n          parameters: {\n            header: {\n              tin: '12345678',\n              client_id: '9999999',\n            },\n            formData: {\n              attachmentsRequest: 'metadata',\n            },\n          },\n        },\n        {\n          response: '400',\n          description: 'Error',\n          parameters: {\n            header: {\n              tin: '0000000',\n              client_id: '0000000',\n            },\n            formData: {\n              attachmentsRequest: 'metadata',\n            },\n          },\n        },\n      ]}\n    />\n  );\n};\n"))))}g.isMDXComponent=!0},4075:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"slider",category:"Forms",title:"Slider",description:"Used to traverse through different values in a given range.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11970",pagination_prev:"web/ui/select-input-multi",pagination_next:"web/ui/text-input"},s=void 0,d={unversionedId:"web/ui/slider",id:"web/ui/slider",isDocsHomePage:!1,title:"Slider",description:"Used to traverse through different values in a given range.",source:"@site/docs/web/ui/Slider.md",sourceDirName:"web/ui",slug:"/web/ui/slider",permalink:"/web/ui/slider",tags:[],version:"current",frontMatter:{id:"slider",category:"Forms",title:"Slider",description:"Used to traverse through different values in a given range.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11970",pagination_prev:"web/ui/select-input-multi",pagination_next:"web/ui/text-input"},sidebar:"docs",previous:{title:"SelectInputMulti",permalink:"/web/ui/select-input-multi"},next:{title:"TextInput",permalink:"/web/ui/text-input"}},p=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Range Slider",id:"range-slider",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Min &amp; Max Values",id:"min--max-values",children:[],level:2},{value:"Step Value",id:"step-value",children:[],level:2},{value:"Marks",id:"marks",children:[],level:2},{value:"Custom Mark Label",id:"custom-mark-label",children:[],level:2},{value:"Validation",id:"validation",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Popover Always On",id:"popover-always-on",children:[],level:2},{value:"Hide Popover",id:"hide-popover",children:[],level:2},{value:"Custom Popover Label",id:"custom-popover-label",children:[],level:2},{value:"Custom Text Values",id:"custom-text-values",children:[],level:2},{value:"Error Message",id:"error-message",children:[],level:2},{value:"Subtext",id:"subtext",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Slider } from '@abyss/web/ui/Slider';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Slider',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'string',\n    },\n    {\n      prop: 'errorMessage',\n      type: 'string',\n    },\n    {\n      prop: 'minValue',\n      type: 'number',\n    },\n    {\n      prop: 'maxValue',\n      type: 'number',\n    },\n    {\n      prop: 'step',\n      type: 'number',\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n    {\n      prop: 'popoverAlwaysOn',\n      type: 'boolean',\n    },\n    {\n      prop: 'disablePopover',\n      type: 'boolean',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'showMarks',\n      type: 'boolean',\n    },\n  ],\n}\n\n() => {\n  const [value, setValue] = React.useState(0);\n\n  return (\n    <Slider\n      step={10}\n      label=\"Sandbox Slider\"\n      value={value}\n      onChange={(e) => setValue(e)}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      slider: 25,\n    },\n  });\n\n  const handleSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={handleSubmit}>\n      <Slider label="Form Slider" model="slider" />\n      <Button type="submit">Submit</Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"usestate"},"useState"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = React.useState(25);\n\n  return (\n    <>\n      <Slider\n        label="State Slider"\n        value={value}\n        onChange={(e) => setValue(e)}\n      />\n      <Button onClick={() => console.log(value)}>Submit</Button>\n    </>\n  );\n};\n')),(0,i.kt)("h2",{id:"range-slider"},"Range Slider"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState([-20, 20]);\n  const form = useForm({\n    defaultValues: {\n      slider: [-30, 30],\n    },\n  });\n\n  const handleSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        <Slider\n          label="Range Slider Form"\n          model="slider"\n          step={10}\n          minValue={-50}\n          maxValue={50}\n          showMarks\n          isRange\n        />\n        <Button type="submit">Submit</Button>\n      </FormProvider>\n      <Slider\n        label="Range Slider State"\n        value={value}\n        onChange={(e) => setValue(e)}\n        step={10}\n        minValue={-50}\n        maxValue={50}\n        showMarks\n        isRange\n      />\n      <Button onClick={() => handleSubmit(value)}>Submit</Button>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"label"},"Label"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," property to display a label above the slider. To hide the label set ",(0,i.kt)("inlineCode",{parentName:"p"},"hideLabel")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <Slider label="Visible Label" model="slider-label" />\n      <Slider\n        label="Hidden Label"\n        model="slider-hideLabel"\n        subText="Hidden Label"\n        hideLabel\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"min--max-values"},"Min & Max Values"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"minValue")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"maxValue")," properties to set the minimum and maximum values the slider can equal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      slider: 25,\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <Slider\n        label="Min/Max Values"\n        model="slider"\n        minValue={-50}\n        maxValue={50}\n        step={25}\n        showMarks\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"step-value"},"Step Value"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"step")," property to set the number by which value will be incremented/decremented with thumb drag and arrows."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      slider: 20,\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <Slider label="Step Value" model="slider" step={20} showMarks />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"marks"},"Marks"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"showMarks")," property to display marks which will be placed on the track based on the ",(0,i.kt)("inlineCode",{parentName:"p"},"step")," value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      slider: 20,\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <Slider label="Slider Marks" model="slider" step={10} showMarks />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"custom-mark-label"},"Custom Mark Label"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"customMarkLabel")," property to override the default mark label."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      slider: 20,\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <Slider\n        label="Custom Mark Label"\n        model="slider"\n        step={10}\n        showMarks\n        customMarkLabel={(e) => `${e}%`}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"validation"},"Validation"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"validators")," prop to set rules for the slider value to be valid."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      slider: 15,\n    },\n  });\n\n  const handleSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={handleSubmit}>\n      <Slider\n        label="Validation"\n        model="slider"\n        validators={{\n          validate: (value) => value >= 20 || \'Must be larger than 20\',\n        }}\n      />\n      <Button type="submit">Submit</Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"disabled"},"Disabled"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," property to disable the slider."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      slider: 25,\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <Slider label="Disabled Slider" model="slider" isDisabled />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"popover-always-on"},"Popover Always On"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"popoverAlwaysOn")," property to keep the popover always displayed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      slider: 25,\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <Slider label="Always On Popover" model="slider" popoverAlwaysOn />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"hide-popover"},"Hide Popover"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"disablePopover")," property to hide the popover."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      slider: 25,\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <Slider label="Disable Popover" model="slider" disablePopover />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"custom-popover-label"},"Custom Popover Label"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"customPopoverLabel")," property to override the default value displayed in the popover."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      dollar: 0,\n      percent: 25,\n      temp: 75,\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <Slider\n        label="Dollar Label"\n        model="dollar"\n        popoverAlwaysOn\n        customPopoverLabel={(value) => {\n          return `$${value}`;\n        }}\n      />\n      <Slider\n        label="Label Percent"\n        model="percent"\n        popoverAlwaysOn\n        customPopoverLabel={(value, percent) => {\n          return `${Math.round(percent * 100)}%`;\n        }}\n      />\n      <Slider\n        label="Temperature Label"\n        model="temp"\n        popoverAlwaysOn\n        customPopoverLabel={(value) => {\n          return `${value}\xb0F`;\n        }}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"custom-text-values"},"Custom Text Values"),(0,i.kt)("p",null,"Utilize an array such as ",(0,i.kt)("inlineCode",{parentName:"p"},"Marks")," below to change the slider text displayed from numbers to entire text values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const MARKS = [\n    { value: 0, label: 'xs' },\n    { value: 1, label: 'sm' },\n    { value: 2, label: 'md' },\n    { value: 3, label: 'lg' },\n    { value: 4, label: 'xl' },\n  ];\n\n  const form = useForm({\n    defaultValues: {\n      slider: 0,\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <Slider\n        label=\"Custom Text Values\"\n        model=\"slider\"\n        customMarkLabel={(val) =>\n          MARKS.find((mark) => mark.value === val).label\n        }\n        customPopoverLabel={(val) =>\n          MARKS.find((mark) => mark.value === val).label\n        }\n        maxValue={4}\n        showMarks\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"error-message"},"Error Message"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to display a custom error message below the slider."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(20);\n\n  return (\n    <React.Fragment>\n      <Slider\n        label="Error Message"\n        value={value}\n        onChange={(e) => setValue(e)}\n        errorMessage="Custom Error Message"\n      />\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"subtext"},"Subtext"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the slider."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <Slider label="Sub Text" model="slider" subText="Custom SubText" />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(20);\n\n  return (\n    <React.Fragment>\n      <Slider\n        value={value}\n        onChange={(e) => setValue(e)}\n        label="Descriptors Display"\n        subText="Subtext Message"\n        errorMessage="Error Message"\n        descriptorsDisplay="column"\n      />\n    </React.Fragment>\n  );\n};\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Slider}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the slider component',\n    },\n    {\n      name: 'customPopoverLabel',\n      type: 'function',\n      description: 'Set custom popover label',\n    },\n    {\n      name: 'customMarkLabel',\n      type: 'function',\n      description: 'Set custom mark label',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired every time the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    {\n      name: 'isRange',\n      type: 'boolean',\n      description: 'Flag to set if slider is a range',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'minValue',\n      type: 'number',\n      description: 'Set min value',\n    },\n    {\n      name: 'maxValue',\n      type: 'number',\n      description: 'Set max value',\n    },\n    {\n      name: 'step',\n      type: 'number',\n      description: 'Set number of steps',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Set label',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Set error message',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Text displayed below the slider',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the slider',\n    },\n    {\n      name: 'popoverAlwaysOn',\n      type: 'boolean',\n      description: 'Flag to set popover always on',\n    },\n    {\n      name: 'disablePopover',\n      type: 'boolean',\n      description: 'Flag to disable popover',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to disable slider',\n    },\n    {\n      name: 'validation',\n      type: 'shape',\n      description: 'Set rules for slider validation',\n    },\n    {\n      name: 'showMarks',\n      type: 'boolean',\n      description: 'Flag to show slider marks',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Slider}\n  rows={[\n    {\n      name: 'slider-root',\n      description: 'Slider root element',\n    },\n    {\n      name: 'slider-label',\n      description: 'Label',\n    },\n    {\n      name: 'slider-thumb',\n      description: 'Slider thumb',\n    },\n    {\n      name: 'slider-thumb-popover',\n      description: 'Slider thumb popover',\n    },\n    {\n      name: 'slider-track-wrapper',\n      description: 'Track wrapper',\n    },\n    {\n      name: 'slider-track',\n      description: 'Track',\n    },\n    {\n      name: 'slider-track-filler',\n      description: 'Track filler',\n    },\n    {\n      name: 'slider-track-marks',\n      description: 'Marks on track',\n    },\n    {\n      name: 'slider-track-mark-text',\n      description: 'Text at each mark',\n    },\n    {\n      name: 'slider-descriptor',\n      description: 'Descriptor for FormInput',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("h1",{id:"slider"},"Slider"),(0,i.kt)("p",null,"A slider is an input where the user selects a value from within a given range. Sliders typically have a slider thumb that can be moved along a bar or track to change the value of the slider."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#slider",mdxType:"ExitLink"},"Slider WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = React.useState(25);\n\n  return (\n    <>\n      <Slider\n        label="State Slider"\n        value={value}\n        onChange={(e) => setValue(e)}\n      />\n      <Button onClick={() => console.log(value)}>Submit</Button>\n    </>\n  );\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Right Arrow:',\n      description: 'Increase the value of the slider by one step.',\n    },\n    {\n      name: 'Up Arrow:',\n      description: 'Increase the value of the slider by one step.',\n    },\n    {\n      name: 'Down Arrow:',\n      description: 'Decrease the value of the slider by one step.',\n    },\n    {\n      name: 'Left Arrow:',\n      description: 'Decrease the value of the slider by one step.',\n    },\n    {\n      name: 'Home:',\n      description: 'Set the slider to the first allowed value in its range.',\n    },\n    {\n      name: 'End:',\n      description: 'Set the slider to the last allowed value in its range.',\n    },\n  ]}\n/>\n")),(0,i.kt)("h1",{id:"slider-multi-thumb"},"Slider (Multi-Thumb)"),(0,i.kt)("p",null,"A multi-thumb slider is a slider with two or more thumbs that each set a value in a group of related values. For example, in a product search, a two-thumb slider could be used to enable users to set the minimum and maximum price limits for the search. In many two-thumb sliders, the thumbs are not allowed to pass one another, such as when the slider sets the minimum and maximum values for a range. For example, in a price range selector, the maximum value of the thumb that sets the lower end of the range is limited by the current value of the thumb that sets the upper end of the range. Conversely, the minimum value of the upper end thumb is limited by the current value of the lower end thumb. However, in some multi-thumb sliders, each thumb sets a value that does not depend on the other thumb values."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#slidertwothumb",mdxType:"ExitLink"},"Slider WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState([-20, 20]);\n  const form = useForm({\n    defaultValues: {\n      slider: [-30, 30],\n    },\n  });\n\n  const handleSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        <Slider\n          label="Range Slider Form"\n          model="slider"\n          step={10}\n          minValue={-50}\n          maxValue={50}\n          showMarks\n          isRange\n        />\n        <Button type="submit">Submit</Button>\n      </FormProvider>\n      <Slider\n        label="Range Slider State"\n        value={value}\n        onChange={(e) => setValue(e)}\n        step={10}\n        minValue={-50}\n        maxValue={50}\n        showMarks\n        isRange\n      />\n      <Button onClick={() => handleSubmit(value)}>Submit</Button>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Right Arrow',\n      description: 'Increase the value of the slider by one step.',\n    },\n    {\n      name: 'Up Arrow',\n      description: 'Increase the value of the slider by one step.',\n    },\n    {\n      name: 'Left Arrow',\n      description: 'Decrease the value of the slider by one step.',\n    },\n    {\n      name: 'Home',\n      description: 'Set the slider to the first allowed value in its range.',\n    },\n    {\n      name: 'End',\n      description: 'Set the slider to the last allowed value in its range.',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},37623:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"status-indicator",category:"Data Display",title:"StatusIndicator",description:"Provides a status descriptor for UI elements.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A992",pagination_prev:"web/ui/service-sandbox",pagination_next:"web/ui/table"},d=void 0,p={unversionedId:"web/ui/status-indicator",id:"web/ui/status-indicator",isDocsHomePage:!1,title:"StatusIndicator",description:"Provides a status descriptor for UI elements.",source:"@site/docs/web/ui/StatusIndicator.md",sourceDirName:"web/ui",slug:"/web/ui/status-indicator",permalink:"/web/ui/status-indicator",tags:[],version:"current",frontMatter:{id:"status-indicator",category:"Data Display",title:"StatusIndicator",description:"Provides a status descriptor for UI elements.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A992",pagination_prev:"web/ui/service-sandbox",pagination_next:"web/ui/table"},sidebar:"docs",previous:{title:"ServiceSandbox",permalink:"/web/ui/service-sandbox"},next:{title:"Table",permalink:"/web/ui/table"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Variants",id:"variants",children:[],level:2},{value:"StatusIndicator.Text",id:"statusindicatortext",children:[],level:2},{value:"StatusIndicator.Icon",id:"statusindicatoricon",children:[],level:2},{value:"StatusIndicator.Link",id:"statusindicatorlink",children:[],level:2},{value:"Accessibility",id:"accessibility",children:[],level:2},{value:"Width",id:"width",children:[{value:"Decorative Icons",id:"decorative-icons",children:[],level:4},{value:"Meaningful Colors",id:"meaningful-colors",children:[],level:4}],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StatusIndicator } from '@abyss/web/ui/StatusIndicator';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Use StatusIndicator to display status messages to the user."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<StatusIndicator variant="success" statusLabel="Status label">\n  <StatusIndicator.Icon title="success" />\n  <StatusIndicator.Text>Status</StatusIndicator.Text>\n  <StatusIndicator.Link href="#">Link</StatusIndicator.Link>\n</StatusIndicator>\n')),(0,r.kt)("h2",{id:"variants"},"Variants"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"variant")," property to set the color of the ",(0,r.kt)("inlineCode",{parentName:"p"},"StatusIndicator"),".\nThe options are ",(0,r.kt)("inlineCode",{parentName:"p"},"success"),",",(0,r.kt)("inlineCode",{parentName:"p"},"info"),",",(0,r.kt)("inlineCode",{parentName:"p"},"warning"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"error"),". the default is ",(0,r.kt)("inlineCode",{parentName:"p"},"success"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack>\n  <StatusIndicator variant="success" statusLabel="Status label">\n    <StatusIndicator.Icon title="success" />\n    <StatusIndicator.Text>Status</StatusIndicator.Text>\n    <StatusIndicator.Link href="#">Link</StatusIndicator.Link>\n  </StatusIndicator>\n\n  <StatusIndicator variant="info" statusLabel="Status label">\n    <StatusIndicator.Icon title="info" />\n    <StatusIndicator.Text>Status</StatusIndicator.Text>\n    <StatusIndicator.Link href="#">Link</StatusIndicator.Link>\n  </StatusIndicator>\n\n  <StatusIndicator variant="warning" statusLabel="Status label">\n    <StatusIndicator.Icon title="warning" />\n    <StatusIndicator.Text>Status</StatusIndicator.Text>\n    <StatusIndicator.Link href="#">Link</StatusIndicator.Link>\n  </StatusIndicator>\n\n  <StatusIndicator variant="error" statusLabel="Status label">\n    <StatusIndicator.Icon title="error" />\n    <StatusIndicator.Text>Status</StatusIndicator.Text>\n    <StatusIndicator.Link href="#">Link</StatusIndicator.Link>\n  </StatusIndicator>\n</Layout.Stack>\n')),(0,r.kt)("h2",{id:"statusindicatortext"},"StatusIndicator.Text"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"StatusIndicator.Text")," to specify what status text should appear in the indicator."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack>\n  <StatusIndicator variant="success" statusLabel="Status label">\n    <StatusIndicator.Text>Success!</StatusIndicator.Text>\n  </StatusIndicator>\n  <StatusIndicator variant="error" statusLabel="Status label">\n    <StatusIndicator.Text>Error!</StatusIndicator.Text>\n  </StatusIndicator>\n</Layout.Stack>\n')),(0,r.kt)("h2",{id:"statusindicatoricon"},"StatusIndicator.Icon"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"StatusIndicator.Icon")," is an element used to set the icon of the ",(0,r.kt)("inlineCode",{parentName:"p"},"StatusIndicator"),". It has a ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"variant")," property. The variant of the icon can be ",(0,r.kt)("inlineCode",{parentName:"p"},"success"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"info"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"warning"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"error"),". The icon inherits the variant of the ",(0,r.kt)("inlineCode",{parentName:"p"},"StatusIndicator")," by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack>\n  <StatusIndicator variant="success" statusLabel="Status label">\n    <StatusIndicator.Icon title="success" />\n  </StatusIndicator>\n\n  <StatusIndicator variant="warning" statusLabel="Status label">\n    <StatusIndicator.Icon title="info" variant="info" />\n  </StatusIndicator>\n</Layout.Stack>\n')),(0,r.kt)("h2",{id:"statusindicatorlink"},"StatusIndicator.Link"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"StatusIndicator.Link")," to give the ",(0,r.kt)("inlineCode",{parentName:"p"},"StatusIndicator")," a link. ",(0,r.kt)("inlineCode",{parentName:"p"},"StatusIndicator.Link")," takes in an ",(0,r.kt)("inlineCode",{parentName:"p"},"href"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<StatusIndicator variant="info" statusLabel="Status label">\n  <StatusIndicator.Link href="#">Link</StatusIndicator.Link>\n</StatusIndicator>\n')),(0,r.kt)("h2",{id:"accessibility"},"Accessibility"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ariaText")," prop to provide additional information denoted by the color. For more information visit the accessibility tab."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<StatusIndicator\n  ariaText="success"\n  variant="success"\n  statusLabel="Status label"\n>\n  <StatusIndicator.Link href="#">Link</StatusIndicator.Link>\n</StatusIndicator>\n')),(0,r.kt)("h2",{id:"width"},"Width"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," prop to set the desired width. The default setting is ",(0,r.kt)("inlineCode",{parentName:"p"},"fit-content"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<StatusIndicator variant="success" statusLabel="Status label" width="100%">\n  <StatusIndicator.Icon title="success" />\n  <StatusIndicator.Text>Status</StatusIndicator.Text>\n  <StatusIndicator.Link href="#">Link</StatusIndicator.Link>\n</StatusIndicator>\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={StatusIndicator}\n  rows={[\n    {\n      name: 'variant',\n      type: '\"success\" | \"info\" | \"warning\" | \"error\"',\n      description: 'Set the color of the StatusIndicator',\n    },\n    {\n      name: 'statusLabel',\n      type: 'string',\n      description: 'Set a label for the StatusIndicator',\n    },\n    {\n      name: 'ariaText',\n      type: 'string',\n      description: 'Sets the hidden text used for accessibility purposes',\n    },\n    {\n      name: 'width',\n      type: 'string | number',\n      description: 'Sets the width for the StatusIndicator',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={StatusIndicator.Icon}\n  rows={[\n    {\n      name: 'variant',\n      type: '\"success\" | \"info\" | \"warning\" | \"error\"',\n      description: 'Set the color of the StatusIcon',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Sets the title of the icon',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={StatusIndicator.Text}\n  rows={[\n    {\n      name: 'children',\n      type: 'string',\n      description: 'Set the text of the StatusIndicator',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={StatusIndicator.Link}\n  rows={[\n    {\n      name: 'children',\n      type: 'string',\n      description: 'Set the display text for the link',\n    },\n    {\n      name: 'href',\n      type: 'string',\n      description: 'Sets the destination the link should take you to',\n    },\n    {\n      name: 'hideIcon',\n      type: 'boolean',\n      description: 'Flag to hide icon',\n    },\n    {\n      name: 'openNewWindow',\n      type: 'boolean',\n      description: 'Flag to set link to open in a new window',\n    },\n    {\n      name: 'onClick',\n      type: 'function',\n      description: 'Used to trigger a custom function when the link is clicked',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to enable/disable the link',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={StatusIndicator}\n  rows={[\n    {\n      name: 'status-indicator-root',\n      description: 'StatusIndicator root element',\n    },\n    {\n      name: 'status-indicator-label',\n      description: 'StatusIndicator label element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={StatusIndicator.Icon}\n  rows={[\n    {\n      name: 'status-indicator-icon',\n      description: 'StatusIndicator icon element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={StatusIndicator.Text}\n  rows={[\n    {\n      name: 'status-indicator-content',\n      description: 'StatusIndicator content element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={StatusIndicator.Link}\n  rows={[\n    {\n      name: 'status-indicator-link',\n      description: 'StatusIndicator link element',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("p",null,"StatusIndicator's are not focusable, visual text elements used to show a status for quick recognition."),(0,r.kt)("h4",{id:"decorative-icons"},"Decorative Icons"),(0,r.kt)("p",null,"In the StatusIndicator below, since there is sufficient text next to the icon, the icon is considered decorative and and does not need to be exposed to assistive technology."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<StatusIndicator variant="warning" statusLabel="Warning Status">\n  <StatusIndicator.Icon />\n  <StatusIndicator.Text>Warning</StatusIndicator.Text>\n</StatusIndicator>\n')),(0,r.kt)("h4",{id:"meaningful-colors"},"Meaningful Colors"),(0,r.kt)("p",null,"Conveying Meaning Via Color Alone: Color must not used as the only means of conveying information, actions, prompting a response, or distinguishing elements. Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies \u2013 such as screen readers. Ensure that information denoted by the color is either obvious from the content itself (e.g. the visible text), or is included through alternative means, such as additional text hidden with the .sr-only class. This can also be done by using the ariaText prop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<StatusIndicator variant="warning" statusLabel="Warning Status">\n  <StatusIndicator.Text>Warning</StatusIndicator.Text>\n</StatusIndicator>\n'))))}g.isMDXComponent=!0},74538:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"step-indicator",category:"Content",title:"StepIndicator",description:"Used to indicate a users progress through a multi step process. (Also referred to as a progress tracker or stepper)",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1578",pagination_prev:"web/ui/page-header",pagination_next:"web/ui/tabs"},d=void 0,p={unversionedId:"web/ui/step-indicator",id:"web/ui/step-indicator",isDocsHomePage:!1,title:"StepIndicator",description:"Used to indicate a users progress through a multi step process. (Also referred to as a progress tracker or stepper)",source:"@site/docs/web/ui/StepIndicator.md",sourceDirName:"web/ui",slug:"/web/ui/step-indicator",permalink:"/web/ui/step-indicator",tags:[],version:"current",frontMatter:{id:"step-indicator",category:"Content",title:"StepIndicator",description:"Used to indicate a users progress through a multi step process. (Also referred to as a progress tracker or stepper)",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1578",pagination_prev:"web/ui/page-header",pagination_next:"web/ui/tabs"},sidebar:"docs",previous:{title:"PageHeader",permalink:"/web/ui/page-header"},next:{title:"Tabs",permalink:"/web/ui/tabs"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Minimal Variant",id:"minimal-variant",children:[],level:2},{value:"Custom Incomplete Step Icons",id:"custom-incomplete-step-icons",children:[],level:2},{value:"Custom Completed Step Icons",id:"custom-completed-step-icons",children:[],level:2},{value:"Pagination",id:"pagination",children:[],level:2},{value:"Final Text in Button",id:"final-text-in-button",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StepIndicator } from '@abyss/web/ui/StepIndicator';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'StepIndicator',\n  inputs: [\n    {\n      prop: 'barColor',\n      type: 'string',\n    },\n    {\n      prop: 'barSize',\n      type: 'number',\n    },\n    {\n      prop: 'currentStep',\n      type: 'number',\n    },\n    {\n      prop: 'stepSize',\n      type: 'number',\n    },\n       {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'Default', value: 'default' },\n        { label: 'Minimal', value: 'minimal' },\n      ]\n    },\n  ],\n}\n\n<StepIndicator currentStep={3}>\n  <StepIndicator.Step label=\"Personal Information\" />\n  <StepIndicator.Step label=\"Qualifications\" />\n  <StepIndicator.Step label=\"Practice Information\" />\n  <StepIndicator.Step label=\"Locations\" />\n  <StepIndicator.Step label=\"Review & Confirm\"/>\n</StepIndicator>\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"StepIndicator.Step")," like shown below to create as many steps as are desired."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 6 });\n  return (\n    <React.Fragment>\n      <StepIndicator currentStep={paginationProps.state.currentPage}>\n        <StepIndicator.Step label="Personal Information" />\n        <StepIndicator.Step label="Qualifications" />\n        <StepIndicator.Step label="Practice Information" />\n        <StepIndicator.Step label="Locations" />\n        <StepIndicator.Step label="Review & Confirm" />\n      </StepIndicator>\n      <Layout.Group style={{ marginTop: 10 }}>\n        <Button\n          data-id="1"\n          onClick={paginationProps.previousPage}\n          variant="outline"\n          isDisabled={!paginationProps.canPreviousPage}\n        >\n          Previous\n        </Button>\n        <Button\n          data-id="2"\n          onClick={paginationProps.nextPage}\n          isDisabled={!paginationProps.canNextPage}\n        >\n          Next\n        </Button>\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"minimal-variant"},"Minimal Variant"),(0,r.kt)("p",null,"To use the minimal variant style pass in the ",(0,r.kt)("inlineCode",{parentName:"p"},"variant")," prop with a value of ",(0,r.kt)("inlineCode",{parentName:"p"},"minimal")," into the ",(0,r.kt)("inlineCode",{parentName:"p"},"StepIndicator")," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 6, start: 1 });\n  return (\n    <React.Fragment>\n      <StepIndicator\n        currentStep={paginationProps.state.currentPage}\n        variant="minimal"\n      >\n        <StepIndicator.Step label="Personal Information" />\n        <StepIndicator.Step label="Qualifications" />\n        <StepIndicator.Step label="Practice Information" />\n        <StepIndicator.Step label="Locations" />\n        <StepIndicator.Step label="Review & Confirm" />\n      </StepIndicator>\n      <Layout.Group style={{ marginTop: 10 }}>\n        <Button\n          data-id="1"\n          onClick={paginationProps.previousPage}\n          variant="outline"\n          isDisabled={!paginationProps.canPreviousPage}\n        >\n          Previous\n        </Button>\n        <Button\n          data-id="2"\n          onClick={paginationProps.nextPage}\n          isDisabled={!paginationProps.canNextPage}\n        >\n          Next\n        </Button>\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"custom-incomplete-step-icons"},"Custom Incomplete Step Icons"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"icon")," within ",(0,r.kt)("inlineCode",{parentName:"p"},"StepIndicator.Step")," to change the icon of an incomplete step. A full list of icons can be found in the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/icon"},"Icon Component"),". The default for ",(0,r.kt)("inlineCode",{parentName:"p"},"icon")," is set to each step's position in the list (starting at 1)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 4 });\n  return (\n    <React.Fragment>\n      <StepIndicator currentStep={paginationProps.state.currentPage}>\n        <StepIndicator.Step\n          label="Menu"\n          icon={<IconMaterial icon="local_pizza" />}\n        />\n        <StepIndicator.Step\n          label="Checkout"\n          icon={<IconMaterial icon="add_shopping_cart" />}\n        />\n        <StepIndicator.Step\n          label="Delivery"\n          icon={<IconMaterial icon="local_shipping" />}\n        />\n      </StepIndicator>\n      <Layout.Group style={{ marginTop: 10 }}>\n        <Button\n          data-id="1"\n          onClick={paginationProps.previousPage}\n          variant="outline"\n          isDisabled={!paginationProps.canPreviousPage}\n        >\n          Previous\n        </Button>\n        <Button\n          data-id="2"\n          onClick={paginationProps.nextPage}\n          isDisabled={!paginationProps.canNextPage}\n        >\n          Next\n        </Button>\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"custom-completed-step-icons"},"Custom Completed Step Icons"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"icon")," within ",(0,r.kt)("inlineCode",{parentName:"p"},"StepIndicator")," to change the icon for all completed steps. A full list of icons can be found in the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/icon"},"Icon Component"),". The default for ",(0,r.kt)("inlineCode",{parentName:"p"},"icon")," is set to a check mark."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  return (\n    <React.Fragment>\n      <StepIndicator icon={<IconMaterial icon="local_pizza" />} currentStep={3}>\n        <StepIndicator.Step />\n        <StepIndicator.Step />\n        <StepIndicator.Step />\n      </StepIndicator>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"pagination"},"Pagination"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"pages")," variable to match how many pages you would like to display and ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," to set the starting page. Find resources on pagination in the ",(0,r.kt)("a",{parentName:"p",href:"/web/hooks/use-pagination"},"usePagination")," tab."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 6 });\n  return (\n    <React.Fragment>\n      <StepIndicator currentStep={paginationProps.state.currentPage}>\n        <StepIndicator.Step label="Personal Information" />\n        <StepIndicator.Step label="Qualifications" />\n        <StepIndicator.Step label="Practice Information" />\n        <StepIndicator.Step label="Locations" />\n        <StepIndicator.Step label="Review & Confirm" />\n      </StepIndicator>\n      <Layout.Group style={{ marginTop: 10 }}>\n        <Button\n          data-id="1"\n          onClick={paginationProps.previousPage}\n          variant="outline"\n          isDisabled={!paginationProps.canPreviousPage}\n        >\n          Previous\n        </Button>\n        <Button\n          data-id="2"\n          onClick={paginationProps.nextPage}\n          isDisabled={!paginationProps.canNextPage}\n        >\n          Next\n        </Button>\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"pages"),' is set to the number of steps plus one then the step indicator will be able create a bar that is completely filled which would usually be implemented on a "response submitted" style of page.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 6, start: 6 });\n  return (\n    <React.Fragment>\n      <StepIndicator currentStep={paginationProps.state.currentPage}>\n        <StepIndicator.Step label="Personal Information" />\n        <StepIndicator.Step label="Qualifications" />\n        <StepIndicator.Step label="Practice Information" />\n        <StepIndicator.Step label="Locations" />\n        <StepIndicator.Step label="Review & Confirm" />\n      </StepIndicator>\n      <Layout.Group style={{ marginTop: 10 }}>\n        <Button\n          data-id="1"\n          onClick={paginationProps.previousPage}\n          variant="outline"\n          isDisabled={!paginationProps.canPreviousPage}\n        >\n          Previous\n        </Button>\n        <Button\n          data-id="2"\n          onClick={paginationProps.nextPage}\n          isDisabled={!paginationProps.canNextPage}\n        >\n          Next\n        </Button>\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"Otherwise if pages is set to the number of steps as shown below the final page will not be able to get checked."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 5, start: 5 });\n  return (\n    <React.Fragment>\n      <StepIndicator currentStep={paginationProps.state.currentPage}>\n        <StepIndicator.Step label="Personal Information" />\n        <StepIndicator.Step label="Qualifications" />\n        <StepIndicator.Step label="Practice Information" />\n        <StepIndicator.Step label="Locations" />\n        <StepIndicator.Step label="Review & Confirm" />\n      </StepIndicator>\n      <Layout.Group style={{ marginTop: 10 }}>\n        <Button\n          data-id="1"\n          onClick={paginationProps.previousPage}\n          variant="outline"\n          isDisabled={!paginationProps.canPreviousPage}\n        >\n          Previous\n        </Button>\n        <Button\n          data-id="2"\n          onClick={paginationProps.nextPage}\n          isDisabled={!paginationProps.canNextPage}\n        >\n          Next\n        </Button>\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"final-text-in-button"},"Final Text in Button"),(0,r.kt)("p",null,'Use code similar to that below to change the button on the final page to say something like "Submit" instead of "Next"'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 6, start: 2 });\n  const buttonMessage =\n    paginationProps.state.currentPage >= paginationProps.state.pageCount - 1\n      ? \'Submit\'\n      : \'Next\';\n  return (\n    <React.Fragment>\n      <StepIndicator currentStep={paginationProps.state.currentPage}>\n        <StepIndicator.Step label="Personal Information" />\n        <StepIndicator.Step label="Qualifications" />\n        <StepIndicator.Step label="Practice Information" />\n        <StepIndicator.Step label="Locations" />\n        <StepIndicator.Step label="Review & Confirm" />\n      </StepIndicator>\n      <Layout.Group style={{ marginTop: 10 }}>\n        <Button\n          data-id="1"\n          onClick={paginationProps.previousPage}\n          variant="outline"\n          isDisabled={!paginationProps.canPreviousPage}\n        >\n          Previous\n        </Button>\n        <Button\n          data-id="2"\n          onClick={paginationProps.nextPage}\n          isDisabled={!paginationProps.canNextPage}\n        >\n          {buttonMessage}\n        </Button>\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={StepIndicator}\n  rows={[\n    {\n      name: 'barSize',\n      type: 'number',\n      description: 'The size of the bar between the icons',\n      default: 'default = 3 | minimal = 2',\n    },\n    {\n      name: 'barColor',\n      type: 'string',\n      description: 'The color of the bar between the icons',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The stepper children of StepIndicator',\n    },\n    {\n      name: 'currentStep',\n      type: 'number',\n      description: 'The current step on the indicator',\n    },\n    {\n      name: 'stepSize',\n      type: 'number',\n      description: 'Use to set the size of the step icons',\n      default: 'default = 32 | minimal = 16',\n    },\n    {\n      name: 'icon',\n      type: 'ReactNode',\n      description: 'Use to set the icon',\n      default: '<IconMaterial icon=\"check\" size=\"100%\" />',\n    },\n    {\n      name: 'variant',\n      type: \"'default' | 'minimal'\",\n      description: 'Use to set variant style',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={StepIndicator.Step}\n  rows={[\n    {\n      name: 'barColor',\n      type: 'string',\n      description: 'The color of the bar between the icons',\n    },\n    {\n      name: 'currentStep',\n      type: 'number',\n      description: 'The current step/page on the indicator',\n    },\n    {\n      name: 'icon',\n      type: 'ReactNode',\n      description: 'Use to adjust the icon in the stepper at each step',\n    },\n    {\n      name: 'stepSize',\n      type: 'number',\n      description: 'Use to set the size of the step icons',\n    },\n    {\n      name: 'iconComplete',\n      type: 'ReactNode',\n      description: 'Set completed step icon',\n    },\n    {\n      name: 'label',\n      type: 'ReactNode',\n      description: 'The labeled text of each step',\n    },\n    {\n      name: 'stepNumber',\n      type: 'number',\n      description:\n        'The step the stepper is on. Used to determine what color each step should be',\n    },\n    {\n      name: 'stepCount',\n      type: 'number',\n      description: 'The number of steps',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={StepIndicator}\n  rows={[\n    {\n      name: 'step-indicator-root',\n      description: 'Step indicator root element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={StepIndicator.Step}\n  rows={[\n    {\n      name: 'step-indicator-step-root',\n      description: 'Step indicator step root element',\n    },\n    {\n      name: 'step-indicator-step-bar',\n      description: 'Step indicator step bar element',\n    },\n    {\n      name: 'step-indicator-step-icon',\n      description: 'Step indicator step icon element',\n    },\n    {\n      name: 'step-indicator-step-icon-value',\n      description: 'Step indicator step icon value element',\n    },\n    {\n      name: 'step-indicator-step-label',\n      description: 'Step indicator step label element',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},59704:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"sub-navigation-menu",category:"Navigation",title:"SubNavigationMenu",description:"Used to display a navigation menu with links and dropdowns.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/branch/4Q8dpPXNmDfnRP0aFxlMyV/Abyss-Design-System?node-id=12040%3A49421",pagination_prev:"web/ui/router",pagination_next:"web/ui/drawer"},d=void 0,p={unversionedId:"web/ui/sub-navigation-menu",id:"web/ui/sub-navigation-menu",isDocsHomePage:!1,title:"SubNavigationMenu",description:"Used to display a navigation menu with links and dropdowns.",source:"@site/docs/web/ui/SubNavigationMenu.md",sourceDirName:"web/ui",slug:"/web/ui/sub-navigation-menu",permalink:"/web/ui/sub-navigation-menu",tags:[],version:"current",frontMatter:{id:"sub-navigation-menu",category:"Navigation",title:"SubNavigationMenu",description:"Used to display a navigation menu with links and dropdowns.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/branch/4Q8dpPXNmDfnRP0aFxlMyV/Abyss-Design-System?node-id=12040%3A49421",pagination_prev:"web/ui/router",pagination_next:"web/ui/drawer"},sidebar:"docs",previous:{title:"Router",permalink:"/web/ui/router"},next:{title:"Drawer",permalink:"/web/ui/drawer"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"Scroll",id:"scroll",children:[],level:2},{value:"Title",id:"title",children:[],level:2},{value:"SubText",id:"subtext",children:[],level:2},{value:"HeadingLevel",id:"headinglevel",children:[],level:2},{value:"Width",id:"width",children:[],level:2},{value:"Height",id:"height",children:[],level:2},{value:"NavItems",id:"navitems",children:[],level:2},{value:"Variant",id:"variant",children:[],level:2},{value:"Position",id:"position",children:[{value:"Right",id:"right",children:[],level:3},{value:"Left",id:"left",children:[],level:3}],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { SubNavigationMenu } from '@abyss/web/ui/SubNavigationMenu';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Utilize SubNavigationMenu to create a navigation menu on the side of your web page."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const title = 'Menu';\n  const subText = 'Sub menu text';\n\n  const navItems = [\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      openNewWindow: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Button',\n      onClick: () => {\n        console.log('clicked button');\n      },\n    },\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Dropdown Item',\n      isDisabled: false,\n      subItems: [\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n      ],\n    },\n    {\n      title: 'Dropdown Item Link',\n      isDisabled: false,\n      href: '#',\n      isOpenByDefault: true,\n      subItems: [\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n      ],\n    },\n    {\n      title: 'Dropdown Item Button',\n      isDisabled: false,\n      onClick: () => {\n        console.log('clicked button');\n      },\n      subItems: [\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n      ],\n    },\n    {\n      title: 'Dropdown Item Disabled',\n      isDisabled: true,\n      href: '#',\n      subItems: [\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n      ],\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n      before: <IconMaterial icon=\"info\" size={16} />,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n  ];\n  return (\n    <SubNavigationMenu\n      title={title}\n      subText={subText}\n      navItems={navItems}\n      position=\"right\"\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"scroll"},"Scroll"),(0,r.kt)("p",null,"When the Menu has overflow it will begin to scroll."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const title = 'Menu';\n  const subText = 'Sub menu text';\n\n  const navItems = [\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: false,\n      openNewWindow: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Dropdown item',\n      isDisabled: false,\n      isOpenByDefault: true,\n      subItems: [\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n      ],\n    },\n    {\n      title: 'Dropdown item',\n      isDisabled: false,\n      subItems: [\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n      ],\n    },\n    {\n      title: 'Dropdown item',\n      isDisabled: true,\n      subItems: [\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n      ],\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n      before: <IconMaterial icon=\"info\" size={16} />,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n  ];\n  return (\n    <SubNavigationMenu\n      title={title}\n      subText={subText}\n      navItems={navItems}\n      position=\"right\"\n      height=\"250px\"\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"title"},"Title"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," prop to pass in a title for the Menu."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const title = 'Menu';\n\n  const navItems = [\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: false,\n      openNewWindow: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n  ];\n  return (\n    <Layout.Group space={500} alignItems=\"top\">\n      <SubNavigationMenu title={title} navItems={navItems} position=\"right\" />\n    </Layout.Group>\n  );\n};\n")),(0,r.kt)("h2",{id:"subtext"},"SubText"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"subText")," prop to pass in a description for the Menu."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const title = 'Menu';\n  const subText = 'Sub menu text';\n\n  const navItems = [\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: false,\n      openNewWindow: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n  ];\n  return (\n    <SubNavigationMenu\n      title={title}\n      subText={subText}\n      navItems={navItems}\n      position=\"right\"\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"headinglevel"},"HeadingLevel"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"headingLevel")," prop to pass in a specified headingLevel for the title. The default is ",(0,r.kt)("inlineCode",{parentName:"p"},"h3"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const title = 'Menu';\n  const subText = 'Sub menu text';\n\n  const navItems = [\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: false,\n      openNewWindow: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n  ];\n  return (\n    <SubNavigationMenu\n      title={title}\n      subText={subText}\n      navItems={navItems}\n      headingLevel=\"h4\"\n      position=\"right\"\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"width"},"Width"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," prop to set the width of the menu. Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"320px"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const title = 'Menu';\n  const subText = 'Sub menu text';\n\n  const navItems = [\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: false,\n      openNewWindow: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n  ];\n  return (\n    <SubNavigationMenu\n      title={title}\n      subText={subText}\n      navItems={navItems}\n      headingLevel=\"h4\"\n      position=\"right\"\n      width=\"450px\"\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"height"},"Height"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"height")," prop to set the height of the menu. Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"100%"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const title = 'Menu';\n  const subText = 'Sub menu text';\n\n  const navItems = [\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: false,\n      openNewWindow: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n  ];\n  return (\n    <SubNavigationMenu\n      title={title}\n      subText={subText}\n      navItems={navItems}\n      headingLevel=\"h4\"\n      position=\"right\"\n      height=\"250px\"\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"navitems"},"NavItems"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"navItems")," prop to specify what is displayed in the SubNavigationMenu. The prop requires an array of objects that have the form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"navItems: [\n  {\n    title: 'string',\n    href: 'string',\n    isDisabled: 'boolean',\n    before: 'node',\n    after: 'node',\n    onClick: 'func',\n    openNewWindow: 'boolean',\n    subNavItems: 'array[object]',\n    isOpenByDefault: 'boolean',\n  },\n];\n")),(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"navItems")," can have either an ",(0,r.kt)("inlineCode",{parentName:"li"},"href")," or a subset of NavItems in ",(0,r.kt)("inlineCode",{parentName:"li"},"subNavItems"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"navItems")," also takes ",(0,r.kt)("inlineCode",{parentName:"li"},"openNewWindow"),", which will open a new window when the link is clicked. If a non-relative path (like ",(0,r.kt)("a",{parentName:"li",href:"https://google.com"},"https://google.com"),") is passed, then openNewWindow will be ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," by default; otherwise, it will be ",(0,r.kt)("inlineCode",{parentName:"li"},"false")," by default."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"subNavItems")," is specified, then the object will be recognized as a dropdown. You can utilize ",(0,r.kt)("inlineCode",{parentName:"li"},"isOpenByDefault")," to specify if the dropdown starts out open or closed (",(0,r.kt)("inlineCode",{parentName:"li"},"isOpenByDefault")," is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"false")," by default)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"before")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"after")," can be used to place icons or nodes before or after the menu item.")),(0,r.kt)("h2",{id:"variant"},"Variant"),(0,r.kt)("p",null,"Pass in the ",(0,r.kt)("inlineCode",{parentName:"p"},"variant"),' "sideBarMenu" to turn your SubNavigationMenu into a side bar menu that lists out all available links.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const sideBarTitle = 'Sidebar Menu';\n\n  const sideBarMenuItems = [\n    {\n      title: 'Dropdown link',\n      href: '#',\n    },\n    {\n      title: 'Dropdown link',\n      href: '#',\n    },\n    {\n      title: 'Dropdown link',\n      href: '#',\n    },\n    {\n      title: 'Dropdown link',\n      href: '#',\n    },\n    {\n      title: 'Dropdown link',\n      href: '#',\n    },\n  ];\n\n  return (\n    <SubNavigationMenu\n      title={sideBarTitle}\n      navItems={sideBarMenuItems}\n      position=\"right\"\n      variant=\"sideBarMenu\"\n      width=\"200px\"\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"position"},"Position"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"right")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"left")," change the side that the vertical line appears on. ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"right")," by default"),(0,r.kt)("h3",{id:"right"},"Right"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const title = 'Menu';\n  const subText = 'Sub menu text';\n\n  const navItems = [\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: false,\n      openNewWindow: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Dropdown item',\n      isDisabled: false,\n      isOpenByDefault: true,\n      subItems: [\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n      ],\n    },\n    {\n      title: 'Dropdown item',\n      isDisabled: false,\n      subItems: [\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n      ],\n    },\n    {\n      title: 'Dropdown item',\n      isDisabled: true,\n      subItems: [\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n      ],\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n      before: <IconMaterial icon=\"info\" size={16} />,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n  ];\n  return (\n    <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n      <SubNavigationMenu\n        title={title}\n        subText={subText}\n        navItems={navItems}\n        position=\"right\"\n      />\n    </div>\n  );\n};\n")),(0,r.kt)("h3",{id:"left"},"Left"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const title = 'Menu';\n  const subText = 'Sub menu text';\n\n  const navItems = [\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: false,\n      openNewWindow: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '/web/ui/button',\n      isDisabled: true,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Dropdown item',\n      isDisabled: false,\n      isOpenByDefault: true,\n      subItems: [\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n      ],\n    },\n    {\n      title: 'Dropdown item',\n      isDisabled: false,\n      subItems: [\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n      ],\n    },\n    {\n      title: 'Dropdown item',\n      isDisabled: true,\n      subItems: [\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n        {\n          title: 'Dropdown Link',\n          href: '#',\n        },\n      ],\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n    },\n    {\n      title: 'Menu Link',\n      href: '#',\n      before: <IconMaterial icon=\"info\" size={16} />,\n      after: <IconMaterial icon=\"warning\" size={16} />,\n    },\n  ];\n  return (\n    <SubNavigationMenu\n      title={title}\n      subText={subText}\n      navItems={navItems}\n      position=\"left\"\n    />\n  );\n};\n"))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={SubNavigationMenu}\n  rows={[\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Title of the SubNavigrationMenu',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Description of the SubNavigationMenu',\n    },\n    {\n      name: 'onClick',\n      type: 'function',\n      description: 'Callback fired when the dropdown is clicked',\n    },\n    {\n      name: 'navItems',\n      type: 'array[object]',\n      description:\n        'Array of menu items. { title: string, isDisabled: boolean, href: string, before: node, after: node, isOpenByDefault: boolean, subItems: array[object], openNewWindow: boolean, onClick: function}',\n    },\n    {\n      name: 'position',\n      type: 'left | right',\n      description: 'Positions nav on the left or right side',\n    },\n    {\n      name: 'width',\n      type: ' string | number',\n      description: 'changes the width of the menu. Defaults to 320px',\n    },\n    {\n      name: 'height',\n      type: 'string | number',\n      description: 'changes the height of the menu. Defaults to 100%',\n    },\n    {\n      name: 'variant',\n      type: 'default | sideBarMenu',\n      description: 'changes SubNavigationMenu into a sideBarMenu',\n    },\n    {\n      name: 'headingLevel',\n      type: 'h1 | h2 | h3 | h4 | h5 | h6',\n      description: 'changes the heading level of the title. defaults to h3',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={SubNavigationMenu}\n  rows={[\n    {\n      name: 'sub-navigation-menu-root',\n      description: 'root element',\n    },\n    {\n      name: 'sub-navigation-header-container',\n      description: 'Header container',\n    },\n    {\n      name: 'sub-navigation-header-title',\n      description: 'Header title',\n    },\n    {\n      name: 'sub-navigation-header-text',\n      description: 'Header subText',\n    },\n    {\n      name: 'sub-navigation-menu-items',\n      description: 'Menu items unordered list',\n    },\n    {\n      name: 'sub-navigation-menu-item',\n      description: 'Menu List item',\n    },\n    {\n      name: 'sub-navigation-menu-link',\n      description: 'Menu Link',\n    },\n    {\n      name: 'sub-navigation-dropdown-button',\n      description: 'Dropdown button',\n    },\n    {\n      name: 'sub-navigation-dropdown-container',\n      description: 'Dropdown container',\n    },\n    {\n      name: 'sub-navigation-dropdown-wrapper',\n      description: 'Dropdown wrapping title and button',\n    },\n    {\n      name: 'sub-navigation-dropdown-button-chevron',\n      description: 'Button Chevron',\n    },\n    {\n      name: 'sub-navigation-dropdown-title',\n      description: 'Dropdown title/link',\n    },\n    {\n      name: 'sub-navigation-dropdown-list-container',\n      description: 'Dropdown links container',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("p",null,"For icon accessibility please refer to ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/icon-material"},"Icon Material"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description: 'Traverse the SubNavMenu',\n    },\n    {\n      name: 'Enter',\n      description:\n        'Select a SubNavMenu item. When hitting Enter on a dropdown, it will open/close the dropdown.',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},13061:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"table",category:"Data Display",title:"Table",description:"Used to create a static table of data to easily convey information.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1606",pagination_prev:"web/ui/status-indicator",pagination_next:"web/ui/alert"},s=void 0,d={unversionedId:"web/ui/table",id:"web/ui/table",isDocsHomePage:!1,title:"Table",description:"Used to create a static table of data to easily convey information.",source:"@site/docs/web/ui/Table.md",sourceDirName:"web/ui",slug:"/web/ui/table",permalink:"/web/ui/table",tags:[],version:"current",frontMatter:{id:"table",category:"Data Display",title:"Table",description:"Used to create a static table of data to easily convey information.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1606",pagination_prev:"web/ui/status-indicator",pagination_next:"web/ui/alert"},sidebar:"docs",previous:{title:"StatusIndicator",permalink:"/web/ui/status-indicator"},next:{title:"Alert",permalink:"/web/ui/alert"}},p=[{value:"Usage",id:"usage",children:[],level:2},{value:"Table Overflow Scroll",id:"table-overflow-scroll",children:[],level:2},{value:"Manual Table",id:"manual-table",children:[],level:2},{value:"Custom Table",id:"custom-table",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Table } from '@abyss/web/ui/Table';\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," is used strictly for HTML markup on the page. It is a static tabular structure containing one or more rows that each contain one or more cells; it is not an interactive widget. Thus, its cells are not focusable or selectable. They organize information in a way that's easy to scan so that users can look for patterns and develop insights from data."),(0,i.kt)("p",null,"The table consists of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table Header")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table Body"),". Column header names describe the type of content displayed in each column. Column header text uses a medium weight font to differentiate from row text. Each row contains data related to a single entity."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const columns = [\n    { name: 'Name', key: 'name' },\n    { name: 'Type', key: 'type' },\n    { name: 'Date Modified', key: 'date' },\n  ];\n\n  const rows = [\n    { id: 1, name: 'Games', date: '6/7/2020', type: 'File folder' },\n    { id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder' },\n    { id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file' },\n    { id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document' },\n  ];\n\n  return <Table title=\"Base Static Table\" columns={columns} rows={rows} />;\n};\n")),(0,i.kt)("h2",{id:"table-overflow-scroll"},"Table Overflow Scroll"),(0,i.kt)("p",null,"See the example below on how to add overflow scroll to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," by utilizing a wrapper container and adding the overflow style setting."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const columns = [\n    { name: 'Name', key: 'name' },\n    { name: 'Type', key: 'type' },\n    { name: 'Content Size', key: 'size' },\n    { name: 'Upload By', key: 'uploadby' },\n    { name: 'Date Created', key: 'creationdate' },\n    { name: 'Date Modified', key: 'date' },\n    { name: 'Organization', key: 'org' },\n    { name: 'Team', key: 'team' },\n    { name: 'Location', key: 'location' },\n    { name: 'Status', key: 'status' },\n    { name: 'Approval', key: 'approval' },\n  ];\n\n  const rows = [\n    {\n      id: 1,\n      name: 'Games',\n      size: '5GB',\n      uploadby: 'SK',\n      date: '6/7/2020',\n      type: 'File folder',\n      creationdate: '5/7/2020',\n      org: 'Optum',\n      team: 'Abyss',\n      location: 'MN',\n      status: 'Completed',\n      approval: 'Manager',\n    },\n    {\n      id: 2,\n      name: 'Program Files',\n      size: '50GB',\n      uploadby: 'AB',\n      date: '4/7/2021',\n      type: 'File folder',\n      creationdate: '2/7/2021',\n      org: 'Optum',\n      team: 'Abyss',\n      location: 'MN',\n      status: 'Completed',\n      approval: 'Manager',\n    },\n    {\n      id: 3,\n      name: 'bootmgr',\n      size: '100GB',\n      uploadby: 'SK',\n      date: '11/20/2010',\n      type: 'System file',\n      creationdate: '11/10/2009',\n      org: 'Optum',\n      team: 'Abyss',\n      location: 'MN',\n      status: 'Pending',\n      approval: 'Manager',\n    },\n    {\n      id: 4,\n      name: 'log.txt',\n      size: '5KB',\n      uploadby: 'TK',\n      date: '1/18/2016',\n      type: 'Text Document',\n      creationdate: '1/1/2016',\n      org: 'Optum',\n      team: 'Abyss',\n      location: 'MN',\n      status: 'Review',\n      approval: 'Manager',\n    },\n  ];\n\n  const WrapperDiv = styled('div', { overflow: 'auto' });\n\n  return (\n    <WrapperDiv>\n      <Table title=\"Table Scroll\" columns={columns} rows={rows} />\n    </WrapperDiv>\n  );\n};\n")),(0,i.kt)("h2",{id:"manual-table"},"Manual Table"),(0,i.kt)("p",null,"If more customization is needed, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," sub-components to create each section. This allows for adjustments to the individual sections."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Table.Container title="Manual Static Table">\n  <Table.TableHeader>\n    <Table.TableHeaderRow>\n      <Table.Column>Name</Table.Column>\n      <Table.Column>Type</Table.Column>\n      <Table.Column>Date Modified</Table.Column>\n    </Table.TableHeaderRow>\n  </Table.TableHeader>\n  <Table.TableBody>\n    <Table.Row>\n      <Table.Cell>Games</Table.Cell>\n      <Table.Cell>File folder</Table.Cell>\n      <Table.Cell>6/7/2020</Table.Cell>\n    </Table.Row>\n    <Table.Row>\n      <Table.Cell>Program Files</Table.Cell>\n      <Table.Cell>File folder</Table.Cell>\n      <Table.Cell>4/7/2021</Table.Cell>\n    </Table.Row>\n    <Table.Row>\n      <Table.Cell>bootmgr</Table.Cell>\n      <Table.Cell>System file</Table.Cell>\n      <Table.Cell>11/20/2010</Table.Cell>\n    </Table.Row>\n    <Table.Row>\n      <Table.Cell>log.txt</Table.Cell>\n      <Table.Cell>Text Document</Table.Cell>\n      <Table.Cell>1/18/2016</Table.Cell>\n    </Table.Row>\n  </Table.TableBody>\n</Table.Container>\n')),(0,i.kt)("h2",{id:"custom-table"},"Custom Table"),(0,i.kt)("p",null,"If further customization is needed, most styles of ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," can be overridden using ",(0,i.kt)("inlineCode",{parentName:"p"},"css"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Table.Container title=\"Manual Static Table\">\n  <Table.TableHeader>\n    <Table.TableHeaderRow css={{ color: '$white', backgroundColor: '$black' }}>\n      <Table.Column>Name</Table.Column>\n      <Table.Column>Type</Table.Column>\n      <Table.Column>Date Modified</Table.Column>\n    </Table.TableHeaderRow>\n  </Table.TableHeader>\n  <Table.TableBody>\n    <Table.Row>\n      <Table.Cell css={{ color: '$primary1', backgroundColor: '$gray3' }}>\n        Games\n      </Table.Cell>\n      <Table.Cell>File folder</Table.Cell>\n      <Table.Cell css={{ color: '$primary2', backgroundColor: '$primary1' }}>\n        6/7/2020\n      </Table.Cell>\n    </Table.Row>\n    <Table.Row>\n      <Table.Cell css={{ color: '$primary1', backgroundColor: '$gray3' }}>\n        Program Files\n      </Table.Cell>\n      <Table.Cell>File folder</Table.Cell>\n      <Table.Cell css={{ color: '$primary2', backgroundColor: '$primary1' }}>\n        4/7/2021\n      </Table.Cell>\n    </Table.Row>\n  </Table.TableBody>\n</Table.Container>\n"))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Table}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the table component',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Title of the table',\n    },\n    {\n      name: 'columns',\n      type: 'array[object]',\n      description: 'Array of column data. { name: string, key: string }',\n    },\n    {\n      name: 'rows',\n      type: 'array[object]',\n      description: 'Array of column data. { id: number, [column key]: string }',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Table.Container}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the table container component',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Title of the table',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Table.TableHeader}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the table header component',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Table.TableHeaderRow}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the table header row component',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Table.Column}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the table header column component',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Table.TableBody}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the table body component',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Table.Row}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the table row component',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Table.Cell}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the table cell component',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Table}\n  rows={[\n    {\n      name: 'table-root',\n      description: 'Table root element',\n    },\n    {\n      name: 'table-head',\n      description: 'Header container',\n    },\n    {\n      name: 'table-styled-header',\n      description: 'Header Styled Container',\n    },\n    {\n      name: 'table-header-container',\n      description: 'Header Container',\n    },\n    {\n      name: 'table-header-cell-container',\n      description: 'Header cell container',\n    },\n    {\n      name: 'table-body',\n      description: 'Body container',\n    },\n    {\n      name: 'table-row',\n      description: 'Row element',\n    },\n    {\n      name: 'table-row-expanded',\n      description: 'Row expanded',\n    },\n    {\n      name: 'table-cell',\n      description: 'Cell element',\n    },\n    {\n      name: 'table-cell-expanded',\n      description: 'Cell expanded',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Table.Container}\n  rows={[\n    {\n      name: 'table-root',\n      description: 'Table root element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Table.TableHeader}\n  rows={[\n    {\n      name: 'table-head',\n      description: 'Header container',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Table.TableHeaderRow}\n  rows={[\n    {\n      name: 'table-header',\n      description: 'Header row container',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Table.Column}\n  rows={[\n    {\n      name: 'table-styled-header',\n      description: 'Header styled cell container',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Table.TableBody}\n  rows={[\n    {\n      name: 'table-body',\n      description: 'Body container',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Table.Row}\n  rows={[\n    {\n      name: 'table-row',\n      description: 'Row element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Table.Cell}\n  rows={[\n    {\n      name: 'table-cell',\n      description: 'Cell element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"Like an HTML table element, a WAI-ARIA table is a static tabular structure containing one or more rows that each contain one or more cells; it is not an interactive widget. Thus, its cells are not focusable or selectable. The grid pattern is used to make an interactive widget that has a tabular structure."),(0,i.kt)("p",null,"However, tables are often used to present a combination of information and interactive widgets. Since a table is not a widget, each widget contained in a table is a separate stop in the page tab sequence. If the number of widgets is large, replacing the table with a grid can dramatically reduce the length of the page tab sequence because a grid is a composite widget that can contain other widgets."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#table",mdxType:"ExitLink"},"Table WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const columns = [\n    { name: 'Name', key: 'name' },\n    { name: 'Type', key: 'type' },\n    { name: 'Date Modified', key: 'date' },\n  ];\n\n  const rows = [\n    { id: 1, name: 'Games', date: '6/7/2020', type: 'File folder' },\n    { id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder' },\n    { id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file' },\n    { id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document' },\n  ];\n\n  return <Table title=\"Base Static Table\" columns={columns} rows={rows} />;\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Not Applicable',\n      description: 'Not Applicable',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},18914:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"tabs",category:"Content",title:"Tabs",description:"Used to view and switch between different sets of content.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1599",pagination_prev:"web/ui/step-indicator",pagination_next:"web/ui/badge"},s=void 0,d={unversionedId:"web/ui/tabs",id:"web/ui/tabs",isDocsHomePage:!1,title:"Tabs",description:"Used to view and switch between different sets of content.",source:"@site/docs/web/ui/Tabs.md",sourceDirName:"web/ui",slug:"/web/ui/tabs",permalink:"/web/ui/tabs",tags:[],version:"current",frontMatter:{id:"tabs",category:"Content",title:"Tabs",description:"Used to view and switch between different sets of content.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1599",pagination_prev:"web/ui/step-indicator",pagination_next:"web/ui/badge"},sidebar:"docs",previous:{title:"StepIndicator",permalink:"/web/ui/step-indicator"},next:{title:"Badge",permalink:"/web/ui/badge"}},p=[{value:"Display",id:"display",children:[],level:2},{value:"Variants",id:"variants",children:[],level:2},{value:"Title",id:"title",children:[],level:2},{value:"Active (Controlled)",id:"active-controlled",children:[],level:2},{value:"Initial Tab (Uncontrolled)",id:"initial-tab-uncontrolled",children:[],level:2},{value:"SubText",id:"subtext",children:[],level:2},{value:"Grow",id:"grow",children:[],level:2},{value:"Position",id:"position",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Height",id:"height",children:[],level:2},{value:"Custom Headers",id:"custom-headers",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Tabs } from '@abyss/web/ui/Tabs';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Tabs',\n  inputs: [\n    {\n      prop: 'initialTab',\n      type: 'number',\n      description: 'Used to indicate initial tab',\n    },\n    {\n      prop: 'size',\n      type: 'size',\n      description: 'Set size of tabs',\n    },\n    {\n      prop: 'height',\n      type: 'size',\n      description: 'Set size of tabs',\n    },\n    {\n      prop: 'position',\n      type: 'select',\n      options: [\n        { label: 'start', value: 'start' },\n        { label: 'center', value: 'center' },\n        { label: 'end', value: 'end' },\n      ],\n    },\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'enclosed', value: 'enclosed' },\n        { label: 'line', value: 'line' },\n        { label: 'arrow', value: 'arrow' },\n      ],\n    },\n    {\n      prop: 'display',\n      type: 'select',\n      options: [\n        { label: 'row', value: 'row' },\n        { label: 'column', value: 'column' },\n      ],\n    },\n    {\n      prop: 'grow',\n      type: 'boolean',\n    },\n  ]\n}\n\n<Tabs title=\"Tabs Sandbox\">\n  <Tabs.Tab label=\"Tab 1\">Tab 1 Content</Tabs.Tab>\n  <Tabs.Tab label=\"Tab 2\">Tab 2 Content</Tabs.Tab>\n  <Tabs.Tab label=\"Tab 3\">Tab 3 Content</Tabs.Tab>\n</Tabs>\n")),(0,i.kt)("br",null),(0,i.kt)("h2",{id:"display"},"Display"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"display")," property determines whether the tab buttons will be displayed horizontally or vertically. The two options are ",(0,i.kt)("inlineCode",{parentName:"p"},"row")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"column"),", and the default is ",(0,i.kt)("inlineCode",{parentName:"p"},"row"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Card>\n  <Card.Section backgroundColor="$gray3">\n    <Layout.Stack grow space={45}>\n      <Tabs title="Display - Row">\n        <Tabs.Tab label="Row Display - Tab 1">Tab 1 Content</Tabs.Tab>\n        <Tabs.Tab label="Row Display - Tab 2">Tab 2 Content</Tabs.Tab>\n        <Tabs.Tab label="Row Display - Tab 3">Tab 3 Content</Tabs.Tab>\n      </Tabs>\n\n      <Tabs title="Display - Column" display="column">\n        <Tabs.Tab label="Column Display - Tab 1">Tab 1 Content</Tabs.Tab>\n        <Tabs.Tab label="Column Display - Tab 2">Tab 2 Content</Tabs.Tab>\n        <Tabs.Tab label="Column Display - Tab 3">Tab 3 Content</Tabs.Tab>\n      </Tabs>\n    </Layout.Stack>\n  </Card.Section>\n</Card>\n')),(0,i.kt)("h2",{id:"variants"},"Variants"),(0,i.kt)("p",null,"Currently, there are three variants to choose from: ",(0,i.kt)("inlineCode",{parentName:"p"},"enclosed"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"line"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"arrow"),". Each variant can be displayed either vertically or horizontally by modifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"display")," property. The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"enclosed"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Card>\n  <Card.Section backgroundColor="$gray3">\n    <Layout.Stack grow space={45}>\n      <Tabs title="Arrow Variant" variant="arrow">\n        <Tabs.Tab label="Arrow - Tab 1" />\n        <Tabs.Tab label="Arrow - Tab 2" />\n        <Tabs.Tab label="Arrow - Tab 3" />\n      </Tabs>\n\n      <Tabs title="Enclosed Variant">\n        <Tabs.Tab label="Enclosed - Tab 1" />\n        <Tabs.Tab label="Enclosed - Tab 2" />\n        <Tabs.Tab label="Enclosed - Tab 3" />\n      </Tabs>\n\n      <Tabs title="Line Variant" variant="line">\n        <Tabs.Tab label="Line - Tab 1" />\n        <Tabs.Tab label="Line - Tab 2" />\n        <Tabs.Tab label="Line - Tab 3" />\n      </Tabs>\n    </Layout.Stack>\n  </Card.Section>\n</Card>\n')),(0,i.kt)("h2",{id:"title"},"Title"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," property provides a label that describes the purpose of the set of tabs. This is a required property as it gives screen reader users important context."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'<Tabs title="Tab Group Title">\n  <Tabs.Tab label="Tab - 1">Tab 1 Content</Tabs.Tab>\n  <Tabs.Tab label="Tab - 2">Tab 2 Content</Tabs.Tab>\n  <Tabs.Tab label="Tab - 3">Tab 3 Content</Tabs.Tab>\n</Tabs>\n')),(0,i.kt)("h2",{id:"active-controlled"},"Active (Controlled)"),(0,i.kt)("p",null,"To control the tabs active state pass in the index of the desired tab to the ",(0,i.kt)("inlineCode",{parentName:"p"},"active")," prop. This must be used in combination with ",(0,i.kt)("inlineCode",{parentName:"p"},"onTabChange")," to ensure that the active tab state is always current. If no default state is passed the active tab will default to the first tab in the sequence."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [activeIndex, setActiveIndex] = useState(1);\n\n  return (\n    <Layout.Stack alignItems="left" grow>\n      <Tabs\n        title="Active Tab"\n        active={activeIndex}\n        onTabChange={setActiveIndex}\n      >\n        <Tabs.Tab label="Tab - 1">Tab 1 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab - 2">Tab 2 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab - 3">Tab 3 Content</Tabs.Tab>\n      </Tabs>\n      <Layout.Group>\n        <Button onClick={() => setActiveIndex(0)}>Set to Tab 1</Button>\n        <Button onClick={() => setActiveIndex(1)}>Set to Tab 2</Button>\n        <Button onClick={() => setActiveIndex(2)}>Set to Tab 3</Button>\n      </Layout.Group>\n    </Layout.Stack>\n  );\n};\n')),(0,i.kt)("h2",{id:"initial-tab-uncontrolled"},"Initial Tab (Uncontrolled)"),(0,i.kt)("p",null,"If you do not need to subscribe to the tabs active state use the ",(0,i.kt)("inlineCode",{parentName:"p"},"initialTab")," property to set the tab that is active at build time. The default is set to the first tab in the sequence. If used instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"active")," the active state will be uncontrolled and handled internally by the component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Tabs initialTab={2} title="Initial Tab">\n  <Tabs.Tab label="Other Tab - 1">Tab 1 Content</Tabs.Tab>\n  <Tabs.Tab label="Initial Tab - 2">Tab 2 Content</Tabs.Tab>\n  <Tabs.Tab label="Other Tab - 3">Tab 3 Content</Tabs.Tab>\n</Tabs>\n')),(0,i.kt)("h2",{id:"subtext"},"SubText"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"subText")," prop of tab to display helpful text below the tab title."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Card>\n  <Card.Section backgroundColor="$gray3">\n    <Layout.Stack grow space={45}>\n      <Tabs title="Enclosed Variant">\n        <Tabs.Tab label="Enclosed - Tab 1" subText="Sub Text" />\n        <Tabs.Tab label="Enclosed - Tab 2" subText="Sub Text" />\n      </Tabs>\n      <Tabs title="Line Variant" variant="line">\n        <Tabs.Tab\n          label="Line - Tab 1"\n          subText={\n            <span\n              style={{\n                display: \'inline-flex\',\n                alignItems: \'center\',\n                flexWrap: \'wrap\',\n              }}\n            >\n              Sub Text\n              <IconMaterial\n                icon="check"\n                size={18}\n                style={{ marginLeft: \'8px\' }}\n              />\n            </span>\n          }\n        />\n        <Tabs.Tab\n          label="Line - Tab 2"\n          subText={\n            <span\n              style={{\n                display: \'inline-flex\',\n                alignItems: \'center\',\n                flexWrap: \'wrap\',\n              }}\n            >\n              Sub Text\n              <IconMaterial\n                icon="check"\n                size={18}\n                style={{ marginLeft: \'8px\' }}\n              />\n            </span>\n          }\n        />\n      </Tabs>\n    </Layout.Stack>\n  </Card.Section>\n</Card>\n')),(0,i.kt)("h2",{id:"grow"},"Grow"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"grow")," property to prevent the tabs from filling the container evenly. This allows for more customization in the structure of the tabs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Card>\n  <Card.Section backgroundColor="$gray3">\n    <Layout.Stack grow space={45}>\n      <Tabs grow={false} title="Grow False - Row Display">\n        <Tabs.Tab label="Tab 1">Tab 1 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab 2">Tab 2 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab 3">Tab 3 Content</Tabs.Tab>\n      </Tabs>\n\n      <Tabs title="Grow True - Row Display">\n        <Tabs.Tab label="Tab 1">Tab 1 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab 2">Tab 2 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab 3">Tab 3 Content</Tabs.Tab>\n      </Tabs>\n    </Layout.Stack>\n  </Card.Section>\n</Card>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Card>\n  <Card.Section backgroundColor="$gray3">\n    <Layout.Stack grow space={45}>\n      <Tabs\n        grow={false}\n        height={300}\n        title="Grow False - Row Display"\n        display="column"\n      >\n        <Tabs.Tab label="Tab 1">Tab 1 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab 2">Tab 2 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab 3">Tab 3 Content</Tabs.Tab>\n      </Tabs>\n\n      <Tabs height={300} title="Grow True - Row Display" display="column">\n        <Tabs.Tab label="Tab 1">Tab 1 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab 2">Tab 2 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab 3">Tab 3 Content</Tabs.Tab>\n      </Tabs>\n    </Layout.Stack>\n  </Card.Section>\n</Card>\n')),(0,i.kt)("h2",{id:"position"},"Position"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"position")," property to organize the tabs. The three options are ",(0,i.kt)("inlineCode",{parentName:"p"},"start"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"center"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"end"),", and the default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"'start'"),". Note that this only takes effect when the ",(0,i.kt)("inlineCode",{parentName:"p"},"grow")," property is ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Card>\n  <Card.Section backgroundColor="$gray3">\n    <Layout.Stack grow space={45}>\n      <Tabs grow={false} title="Position (Default)" variant="line">\n        <Tabs.Tab label="Tab 1 Default">Tab 1 Default</Tabs.Tab>\n        <Tabs.Tab label="Tab 2 Default">Tab 2 Default</Tabs.Tab>\n        <Tabs.Tab label="Tab 3 Default">Tab 3 Default</Tabs.Tab>\n      </Tabs>\n\n      <Tabs\n        grow={false}\n        position="center"\n        title="Position (Center)"\n        variant="line"\n      >\n        <Tabs.Tab label="Tab 1 Center">Tab 1 Center</Tabs.Tab>\n        <Tabs.Tab label="Tab 2 Center">Tab 2 Center</Tabs.Tab>\n        <Tabs.Tab label="Tab 3 Center">Tab 3 Center</Tabs.Tab>\n      </Tabs>\n\n      <Tabs grow={false} position="end" title="Position (End)" variant="line">\n        <Tabs.Tab label="Tab 1 End">Tab 1 End</Tabs.Tab>\n        <Tabs.Tab label="Tab 2 End">Tab 2 End</Tabs.Tab>\n        <Tabs.Tab label="Tab 3 End">Tab 3 End</Tabs.Tab>\n      </Tabs>\n    </Layout.Stack>\n  </Card.Section>\n</Card>\n')),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," property to specify the left and right padding of the tabs, as well as the minimum height of tabs. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"'$md'"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Card>\n  <Card.Section backgroundColor="$gray3">\n    <Layout.Stack grow space={45}>\n      <Tabs grow={false} size="$sm" title="Size (Small) - Row Display">\n        <Tabs.Tab label="Tab 1 - Small" />\n        <Tabs.Tab label="Tab 2 - Small" />\n        <Tabs.Tab label="Tab 3 - Small" />\n      </Tabs>\n\n      <Tabs grow={false} title="Size (Default) - Row Display">\n        <Tabs.Tab label="Tab 1 - Default" />\n        <Tabs.Tab label="Tab 2 - Default" />\n        <Tabs.Tab label="Tab 3 - Default" />\n      </Tabs>\n\n      <Tabs grow={false} size="$lg" title="Size (Large) - Row Display">\n        <Tabs.Tab label="Tab 1 - Large" />\n        <Tabs.Tab label="Tab 2 - Large" />\n        <Tabs.Tab label="Tab 3 - Large" />\n      </Tabs>\n    </Layout.Stack>\n  </Card.Section>\n</Card>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Card>\n  <Card.Section backgroundColor="$gray3">\n    <Layout.Stack grow space={45}>\n      <Tabs\n        grow={false}\n        title="Size (Default) - Column Display"\n        variant="arrow"\n        display="column"\n      >\n        <Tabs.Tab label="Tab 1 - Default">Tab 1 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab 2 - Default">Tab 2 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab 3 - Default">Tab 3 Center</Tabs.Tab>\n      </Tabs>\n\n      <Tabs\n        grow={false}\n        size="$sm"\n        title="Size (Small) - Column Display"\n        variant="arrow"\n        display="column"\n      >\n        <Tabs.Tab label="Tab 1 - Small">Tab 1 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab 2 - Small">Tab 2 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab 3 - Small">Tab 3 Content</Tabs.Tab>\n      </Tabs>\n\n      <Tabs\n        grow={false}\n        size="$lg"\n        title="Size (Large) - Column Display"\n        variant="arrow"\n        display="column"\n      >\n        <Tabs.Tab label="Tab 1 - Large">Tab 1 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab 2 - Large">Tab 2 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab 3 - Large">Tab 3 Content</Tabs.Tab>\n      </Tabs>\n    </Layout.Stack>\n  </Card.Section>\n</Card>\n')),(0,i.kt)("h2",{id:"height"},"Height"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"height")," property to specify the height of the container. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),". If height is not specified, the tab container will fit the size of the content. If height is specified, then the content becomes scrollable if the content is larger than the set height."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Card>\n  <Card.Section backgroundColor="$gray3">\n    <Layout.Stack grow space={45}>\n      <Tabs\n        display="column"\n        variant="arrow"\n        height="200px"\n        title="Height (200px)"\n      >\n        <Tabs.Tab label="Tab 1 - 200px Height">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum\n          quis eros vel nibh suscipit rhoncus porta in nulla. Mauris nisl sem,\n          semper sit amet faucibus id, lacinia cursus odio. Sed eu libero at est\n          volutpat pulvinar eget vitae ante. Donec nec urna vehicula, fringilla\n          nulla sit amet, laoreet justo. Phasellus accumsan ligula tempus lorem\n          sagittis blandit. Pellentesque habitant morbi tristique senectus et\n          netus et malesuada fames ac turpis egestas. Sed pellentesque dignissim\n          leo in maximus. Duis ac sapien nec dolor maximus condimentum eu\n          imperdiet urna. Nulla aliquet quam vitae massa eleifend, mattis\n          bibendum lorem viverra. Nam interdum mi ipsum, quis congue felis\n          pretium eu. Sed ligula augue, congue at enim id, ullamcorper gravida\n          felis. Ut ut justo sollicitudin, pellentesque lorem ut, aliquet mi.\n          Quisque vitae sem nulla. Praesent maximus luctus nisi, a efficitur\n          enim pharetra a.\n          <br />\n          Praesent ullamcorper nunc nec urna rutrum, sed finibus odio imperdiet.\n          Vestibulum vel lobortis nunc. Sed facilisis augue mollis molestie\n          faucibus. Vestibulum tincidunt faucibus dolor, vitae efficitur nibh\n          posuere ac. Cras tortor justo, vulputate sed justo a, auctor maximus\n          neque. Cras laoreet sodales mauris nec pulvinar. Phasellus semper\n          elementum eros sit amet hendrerit. Ut ullamcorper porta pretium. In\n          feugiat nisl eros, sit amet mattis lacus tincidunt ut. Cras sit amet\n          tortor purus. Integer ac maximus arcu. Nam arcu nisl, elementum vel\n          iaculis lobortis, mollis eget lorem. Fusce imperdiet dolor ipsum, id\n          lacinia dui molestie id. Cras auctor erat iaculis mauris tincidunt, id\n          dapibus tortor mollis. Nunc sagittis egestas lorem, non vehicula\n          mauris dignissim nec. Vivamus elementum urna lacinia ante interdum,\n          quis lobortis ligula volutpat.\n          <br />\n          Nulla felis elit, faucibus in tempor eu, porttitor ac erat. Quisque a\n          consequat nibh, nec pulvinar augue. Praesent fermentum hendrerit\n          viverra. Aliquam sed lacinia justo. Vivamus vitae pulvinar velit.\n          Phasellus in arcu leo. Lorem ipsum dolor sit amet, consectetur\n          adipiscing elit. Praesent congue leo in mauris tincidunt, eu laoreet\n          nulla ultricies. Mauris erat turpis, aliquam id commodo at, cursus non\n          lorem. Maecenas imperdiet auctor nibh, at luctus mi rutrum at. Donec\n          congue auctor dui, sit amet imperdiet ante rutrum eget. Sed lectus\n          ipsum, feugiat sed tincidunt non, efficitur sagittis turpis. Donec\n          pulvinar, augue at eleifend elementum, magna ante pellentesque diam,\n          nec pretium lacus massa vel lorem. Aliquam erat volutpat. Quisque sem\n          ipsum, ullamcorper in pharetra id, venenatis vel lectus. Fusce eros\n          felis, porttitor eget ligula at, sollicitudin accumsan diam.\n        </Tabs.Tab>\n        <Tabs.Tab label="Tab 2 - 200px Height">Tab 2 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab 3 - 200px Height">Tab 3 Content</Tabs.Tab>\n      </Tabs>\n\n      <Tabs\n        display="column"\n        variant="arrow"\n        grow={false}\n        title="Content Height"\n      >\n        <Tabs.Tab label="Tab 1 - Content Height">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum\n          quis eros vel nibh suscipit rhoncus porta in nulla. Mauris nisl sem,\n          semper sit amet faucibus id, lacinia cursus odio. Sed eu libero at est\n          volutpat pulvinar eget vitae ante. Donec nec urna vehicula, fringilla\n          nulla sit amet, laoreet justo. Phasellus accumsan ligula tempus lorem\n          sagittis blandit. Pellentesque habitant morbi tristique senectus et\n          netus et malesuada fames ac turpis egestas. Sed pellentesque dignissim\n          leo in maximus. Duis ac sapien nec dolor maximus condimentum eu\n          imperdiet urna. Nulla aliquet quam vitae massa eleifend, mattis\n          bibendum lorem viverra. Nam interdum mi ipsum, quis congue felis\n          pretium eu. Sed ligula augue, congue at enim id, ullamcorper gravida\n          felis. Ut ut justo sollicitudin, pellentesque lorem ut, aliquet mi.\n          Quisque vitae sem nulla. Praesent maximus luctus nisi, a efficitur\n          enim pharetra a.\n          <br />\n          Praesent ullamcorper nunc nec urna rutrum, sed finibus odio imperdiet.\n          Vestibulum vel lobortis nunc. Sed facilisis augue mollis molestie\n          faucibus. Vestibulum tincidunt faucibus dolor, vitae efficitur nibh\n          posuere ac. Cras tortor justo, vulputate sed justo a, auctor maximus\n          neque. Cras laoreet sodales mauris nec pulvinar. Phasellus semper\n          elementum eros sit amet hendrerit. Ut ullamcorper porta pretium. In\n          feugiat nisl eros, sit amet mattis lacus tincidunt ut. Cras sit amet\n          tortor purus. Integer ac maximus arcu. Nam arcu nisl, elementum vel\n          iaculis lobortis, mollis eget lorem. Fusce imperdiet dolor ipsum, id\n          lacinia dui molestie id. Cras auctor erat iaculis mauris tincidunt, id\n          dapibus tortor mollis. Nunc sagittis egestas lorem, non vehicula\n          mauris dignissim nec. Vivamus elementum urna lacinia ante interdum,\n          quis lobortis ligula volutpat.\n          <br />\n          Nulla felis elit, faucibus in tempor eu, porttitor ac erat. Quisque a\n          consequat nibh, nec pulvinar augue. Praesent fermentum hendrerit\n          viverra. Aliquam sed lacinia justo. Vivamus vitae pulvinar velit.\n          Phasellus in arcu leo. Lorem ipsum dolor sit amet, consectetur\n          adipiscing elit. Praesent congue leo in mauris tincidunt, eu laoreet\n          nulla ultricies. Mauris erat turpis, aliquam id commodo at, cursus non\n          lorem. Maecenas imperdiet auctor nibh, at luctus mi rutrum at. Donec\n          congue auctor dui, sit amet imperdiet ante rutrum eget. Sed lectus\n          ipsum, feugiat sed tincidunt non, efficitur sagittis turpis. Donec\n          pulvinar, augue at eleifend elementum, magna ante pellentesque diam,\n          nec pretium lacus massa vel lorem. Aliquam erat volutpat. Quisque sem\n          ipsum, ullamcorper in pharetra id, venenatis vel lectus. Fusce eros\n          felis, porttitor eget ligula at, sollicitudin accumsan diam.\n        </Tabs.Tab>\n        <Tabs.Tab label="Tab 2 - Content Height">Tab 2 Content</Tabs.Tab>\n        <Tabs.Tab label="Tab 3 - Content Height">Tab 3 Content</Tabs.Tab>\n      </Tabs>\n    </Layout.Stack>\n  </Card.Section>\n</Card>\n')),(0,i.kt)("h2",{id:"custom-headers"},"Custom Headers"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"customRender")," prop to create custom headers with ability to differentiate between Active and Inactive tabs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<Tabs grow title=\"Custom Headers 1\">\n  <Tabs.Tab\n    customRender={(isActive) => {\n      return (\n        <React.Fragment>\n          <Heading offset={5} color={isActive ? '$gray8' : '$interactive1'}>\n            Manage 3rd Party Requests\n          </Heading>\n          <Text size=\"xs\">\n            View and edit 3rd party access to your organization\n          </Text>\n        </React.Fragment>\n      );\n    }}\n  >\n    Tab 1 Content\n  </Tabs.Tab>\n  <Tabs.Tab\n    customRender={(isActive) => {\n      return (\n        <React.Fragment>\n          <Heading offset={5} color={isActive ? '$gray8' : '$interactive1'}>\n            Request 3rd Party Access\n          </Heading>\n          <Text size=\"xs\">\n            Submit Access Requests to 3rd Party Organizations\n          </Text>\n        </React.Fragment>\n      );\n    }}\n  >\n    Tab 2 Content\n  </Tabs.Tab>\n</Tabs>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"render(() => {\n  const content = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.`;\n  const src = utils.useBaseUrl('img/graphics/carousel/pillsMd.png');\n  const slides = Array.from(Array(2).keys()).map((i) => {\n    return (\n      <Slide height=\"300px\" compact variant=\"white\">\n        <Slide.Container>\n          <Slide.Title>Title {i + 1}</Slide.Title>\n          <Slide.Content>{content}</Slide.Content>\n          <Slide.Button href=\"https://www.google.com\">Primary</Slide.Button>\n        </Slide.Container>\n      </Slide>\n    );\n  });\n  return (\n    <Tabs display=\"column\" size=\"$md\" variant=\"arrow\" title=\"Custom Headers 2\">\n      <Tabs.Tab\n        customRender={(isActive) => {\n          return (\n            <React.Fragment>\n              <Flex justify=\"center\" alignItems=\"center\">\n                <IconBrand\n                  icon=\"chat\"\n                  size={24}\n                  style={{ marginRight: '8px' }}\n                />\n                <Flex direction=\"column\">\n                  <Heading\n                    size=\"20px\"\n                    offset={5}\n                    color={isActive ? '$gray8' : '$interactive1'}\n                  >\n                    Sample Tab 1\n                  </Heading>\n                  <Text\n                    size=\"12px\"\n                    color={isActive ? '$gray8' : '$gray7'}\n                    style={{ textAlign: 'left', fontWeight: 'normal' }}\n                  >\n                    {isActive ? 'ACTIVE' : 'INACTIVE'}\n                  </Text>\n                </Flex>\n              </Flex>\n            </React.Fragment>\n          );\n        }}\n      >\n        <div style={{ display: 'flex', justifyContent: 'end' }}>\n          <Carousel compact slides={slides} variant=\"white\" />\n        </div>\n      </Tabs.Tab>\n      <Tabs.Tab\n        customRender={(isActive) => {\n          return (\n            <React.Fragment>\n              <Flex justify=\"center\" alignItems=\"center\">\n                <IconBrand\n                  icon=\"chat\"\n                  size={24}\n                  style={{ marginRight: '8px' }}\n                />\n                <Flex direction=\"column\">\n                  <Heading\n                    size=\"20px\"\n                    offset={5}\n                    color={isActive ? '$gray8' : '$interactive1'}\n                  >\n                    Sample Tab 2\n                  </Heading>\n                  <Text\n                    size=\"12px\"\n                    color={isActive ? '$gray8' : '$gray7'}\n                    style={{ textAlign: 'left', fontWeight: 'normal' }}\n                  >\n                    {isActive ? 'ACTIVE' : 'INACTIVE'}\n                  </Text>\n                </Flex>\n              </Flex>\n            </React.Fragment>\n          );\n        }}\n      >\n        <div style={{ display: 'flex', justifyContent: 'end' }}>\n          <Carousel compact slides={slides} variant=\"white\" />\n        </div>\n      </Tabs.Tab>\n      <Tabs.Tab\n        customRender={(isActive) => {\n          return (\n            <React.Fragment>\n              <Flex justify=\"center\" alignItems=\"center\">\n                <IconBrand\n                  icon=\"chat\"\n                  size={24}\n                  style={{ marginRight: '8px' }}\n                />\n                <Flex direction=\"column\">\n                  <Heading\n                    size=\"20px\"\n                    offset={5}\n                    color={isActive ? '$gray8' : '$interactive1'}\n                  >\n                    Sample Tab 3\n                  </Heading>\n                  <Text\n                    size=\"12px\"\n                    color={isActive ? '$gray8' : '$gray7'}\n                    style={{ textAlign: 'left', fontWeight: 'normal' }}\n                  >\n                    {isActive ? 'ACTIVE' : 'INACTIVE'}\n                  </Text>\n                </Flex>\n              </Flex>\n            </React.Fragment>\n          );\n        }}\n      >\n        <div style={{ display: 'flex', justifyContent: 'end' }}>\n          <Carousel compact slides={slides} variant=\"white\" />\n        </div>\n      </Tabs.Tab>\n    </Tabs>\n  );\n});\n"))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Tabs}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the tabs component',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description:\n        'The name for the tab container.  Used to set the aria-label tag for accessibility concerns.',\n    },\n    {\n      name: 'initialTab',\n      type: 'number',\n      description: 'Used to indicate initial tab',\n    },\n    {\n      name: 'active',\n      type: 'number',\n      description: 'Used to control state and set active tab',\n    },\n    {\n      name: 'position',\n      type: \"'start' | 'center' | 'end'\",\n      description: 'Set position of tab',\n    },\n    {\n      name: 'grow',\n      type: 'boolean',\n      description: 'Flag to grow tabs evenly among space provided',\n    },\n    {\n      name: 'onTabChange',\n      type: 'function',\n      description:\n        'Callback fired everytime tab changes; returns index of selected tab',\n    },\n    {\n      name: 'display',\n      type: \"'row' | 'column'\",\n      description: 'Set the orientation of the tabs',\n    },\n    {\n      name: 'variant',\n      type: \"'enclosed' | 'line' | 'arrow'\",\n      description: 'Set variant of tab between enclosed, line, or arrow',\n    },\n    {\n      name: 'groupProps',\n      type: 'shape',\n      description: 'Set group props',\n    },\n    {\n      name: 'tabsListProps',\n      type: 'shape',\n      description: 'Props to be passed to tabs list',\n    },\n    {\n      name: 'space',\n      type: 'array[number]',\n      description: 'Set space of tabs',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set size of tabs',\n    },\n    {\n      name: 'height',\n      type: 'number | string',\n      description: 'Set height of container',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description: 'Default size options of tabs',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Tabs.Tab}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the tab',\n    },\n    {\n      name: 'label',\n      type: 'string | node',\n      description: 'The label of the tab',\n    },\n    {\n      name: 'customRender',\n      type: 'function',\n      description:\n        'Custom render for tab content. Callback returns the active state of the tab.',\n    },\n    {\n      name: 'subText',\n      type: 'string | node',\n      description: 'Sub Text of the tab.',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Tabs}\n  rows={[\n    {\n      name: 'tabs-root',\n      description: 'Tabs root element',\n    },\n    {\n      name: 'tabs-list',\n      description: 'List of tabs',\n    },\n    {\n      name: 'tabs-content-container',\n      description: 'Container of content in tab',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"Tabs are a set of layered sections of content, known as tab panels, that display one panel of content at a time. Each tab panel has an associated tab element, that when activated, displays the panel. The list of tab elements is arranged along one edge of the currently displayed panel, most commonly the top edge."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," property is used to populate the ",(0,i.kt)("inlineCode",{parentName:"p"},"aria-label")," attribute for each Tabs component. This unique label will help distinguish one tab component from another if there are multiple tab components on the same page, which is helpful for screen reader users. Provide a name that reflects the purpose of the tabs."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#tabpanel",mdxType:"ExitLink"},"Tabs WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description:\n        'When focus moves into the tab list, places focus on the active tab element. If tab list has focus, focus moves to the tab panel. If the tab panel has focus, focus moves to the next focusable element, whether it is inside of the tab panel or outside of it.',\n    },\n    {\n      name: 'Left Arrow',\n      description:\n        'When tab list is in focus, moves focus to the previous tab if the tabs are horizontal.',\n    },\n    {\n      name: 'Right Arrow',\n      description:\n        'When tab list is in focus, moves focus to the next tab if the tabs are horizontal.',\n    },\n    {\n      name: 'Up Arrow',\n      description:\n        'When tab list is in focus, moves focus to the previous tab if the tabs are vertical.',\n    },\n    {\n      name: 'Down Arrow',\n      description:\n        'When the tab list is in focus, moves focus to the next tab if the tabs are vertical.',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},5364:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"text",category:"Typography",title:"Text",description:"Used to create segments of text such as phrases, sentences, and paragraphs.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A367",pagination_prev:"web/ui/label",pagination_next:null},d=void 0,p={unversionedId:"web/ui/text",id:"web/ui/text",isDocsHomePage:!1,title:"Text",description:"Used to create segments of text such as phrases, sentences, and paragraphs.",source:"@site/docs/web/ui/Text.md",sourceDirName:"web/ui",slug:"/web/ui/text",permalink:"/web/ui/text",tags:[],version:"current",frontMatter:{id:"text",category:"Typography",title:"Text",description:"Used to create segments of text such as phrases, sentences, and paragraphs.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A367",pagination_prev:"web/ui/label",pagination_next:null},sidebar:"docs",previous:{title:"Label",permalink:"/web/ui/label"}},c=[{value:"Color",id:"color",children:[],level:2},{value:"Sizes",id:"sizes",children:[],level:2},{value:"Transform",id:"transform",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Text } from '@abyss/web/ui/Text';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Text',\n  inputs: [\n    {\n     prop: 'children',\n     type: 'string',\n    },\n    {\n      prop: 'color',\n      type: 'string',\n    },\n    {\n      prop: 'fontWeight',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'transform',\n      type: 'select',\n      options: [\n        { label: 'default', value: null },\n        { label: 'capitalize', value: 'capitalize' },\n        { label: 'lowercase', value: 'lowercase' },\n        { label: 'uppercase', value: 'uppercase' },\n      ],\n    },\n  ],\n}\n\n<Text>Enter message here</Text>\n")),(0,r.kt)("h2",{id:"color"},"Color"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"color")," property to set the color of the text. The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"black"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Text>Some filler text - Black</Text>\n  <Text color="$error1">Some filler text - error</Text>\n  <Text color="#FF00FF">Some filler text - hex</Text>\n  <Text color="blue">Some filler text - color</Text>\n</Layout.Stack>\n')),(0,r.kt)("h2",{id:"sizes"},"Sizes"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," property to change the size of the text. The default is set to md which is 16px. The values for each size are represented by ",(0,r.kt)("inlineCode",{parentName:"p"},"FontSize - LineHeight"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Text size="$lg">Body 1 - Large / 18px - 24px</Text>\n  <Text size="$md">Body 2 - Medium / 16px - 20px</Text>\n  <Text size="$sm">Body 3 - Small / 14.22px - 16px</Text>\n  <Text size="$xs">Small 1 - Extra Small / 12.64px - 16px</Text>\n</Layout.Stack>\n')),(0,r.kt)("h2",{id:"transform"},"Transform"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"transform")," property to change the formatting of the text. Variants available include the default case, ",(0,r.kt)("inlineCode",{parentName:"p"},"capitalize")," the first letter of each word, ",(0,r.kt)("inlineCode",{parentName:"p"},"lowercase")," all letters, or ",(0,r.kt)("inlineCode",{parentName:"p"},"uppercase")," all letters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Text>Default text</Text>\n  <Text transform="capitalize">Capitalize text</Text>\n  <Text transform="lowercase">Lowercase text</Text>\n  <Text transform="uppercase">Uppercase text</Text>\n</Layout.Stack>\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Text}\n  rows={[\n    {\n      name: 'children',\n      type: 'string',\n      description: 'The contents of the text component',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the text',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the text',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description: 'Default size options for text',\n    },\n    {\n      name: 'transform',\n      type: 'string',\n      description:\n        'Reformat the text by changing whether letters are capitalized or not',\n    },\n    {\n      name: 'fontWeight',\n      type: 'string',\n      description: 'Set the font weight of text',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Text}\n  rows={[\n    {\n      name: 'text-root',\n      description: 'Text root element',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},89894:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"text-input",category:"Forms",title:"TextInput",description:"Allows users to enter text into a UI.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=641%3A11876",pagination_prev:"web/ui/slider",pagination_next:"web/ui/text-input-area"},s=void 0,d={unversionedId:"web/ui/text-input",id:"web/ui/text-input",isDocsHomePage:!1,title:"TextInput",description:"Allows users to enter text into a UI.",source:"@site/docs/web/ui/TextInput.md",sourceDirName:"web/ui",slug:"/web/ui/text-input",permalink:"/web/ui/text-input",tags:[],version:"current",frontMatter:{id:"text-input",category:"Forms",title:"TextInput",description:"Allows users to enter text into a UI.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=641%3A11876",pagination_prev:"web/ui/slider",pagination_next:"web/ui/text-input-area"},sidebar:"docs",previous:{title:"Slider",permalink:"/web/ui/slider"},next:{title:"TextInputArea",permalink:"/web/ui/text-input-area"}},p=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Placeholder",id:"placeholder",children:[],level:2},{value:"Add Elements inside Input",id:"add-elements-inside-input",children:[],level:2},{value:"Addons",id:"addons",children:[],level:2},{value:"Sub Text",id:"sub-text",children:[],level:2},{value:"Error Message",id:"error-message",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Clearable",id:"clearable",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Max Length",id:"max-length",children:[],level:2},{value:"Formatter",id:"formatter",children:[],level:2},{value:"Auto Complete",id:"auto-complete",children:[],level:2},{value:"Highlighted",id:"highlighted",children:[],level:2},{value:"Masks",id:"masks",children:[{value:"Phone",id:"phone",children:[],level:3},{value:"Date",id:"date",children:[],level:3},{value:"Zip",id:"zip",children:[],level:3},{value:"Social Security Number",id:"social-security-number",children:[],level:3},{value:"Numeric",id:"numeric",children:[],level:3},{value:"Currency",id:"currency",children:[],level:3},{value:"Return Unmasked Value",id:"return-unmasked-value",children:[],level:3},{value:"Empty Mask Character",id:"empty-mask-character",children:[],level:3},{value:"Custom Mask Patterns",id:"custom-mask-patterns",children:[],level:3}],level:2},{value:"Types",id:"types",children:[{value:"Text",id:"text",children:[],level:3},{value:"Password",id:"password",children:[],level:3},{value:"Search",id:"search",children:[],level:3}],level:2},{value:"Validation",id:"validation",children:[],level:2},{value:"Width",id:"width",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { TextInput } from '@abyss/web/ui/TextInput';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'TextInput',\n  inputs: [\n    {\n      prop: 'errorMessage',\n      type: 'string',\n    },\n    {\n      prop: 'placeholder',\n      type: 'string',\n    },\n    {\n      prop: 'subText',\n      type: 'string',\n    },\n    {\n      prop: 'width',\n      type: 'number',\n    },\n    {\n      prop: 'mask',\n      type: 'select',\n      isClearable: true,\n      options: [\n        { label: 'Phone', value: 'phone' },\n        { label: 'SSN', value: 'ssn' },\n        { label: 'Date', value: 'date' },\n        { label: 'Zipcode', value: 'zip' },\n        { label: 'Numeric', value: 'numeric' },\n      ]\n    },\n    {\n      prop: 'type',\n      type: 'select',\n      isClearable: true,\n      options: [\n        { label: 'Text', value: 'text' },\n        { label: 'Password', value: 'password' },\n        { label: 'Search', value: 'search' },\n      ]\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n    {\n      prop: 'isClearable',\n      type: 'boolean',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'highlighted',\n      type: 'boolean',\n      defaultValue: false,\n    },\n  ]\n}\n\n() => {\n  const [value, setValue] = useState('State Default Value');\n\n  return (\n    <TextInput\n      label=\"TextInput Sandbox\"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n      onClear={() => setValue('')}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm")," hook for handling TextInput lets the DOM handle form data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      textForm: \'init\',\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <TextInput\n        label="TextInput Form"\n        placeholder="Form"\n        model="textForm"\n        isClearable\n        validators={{ required: true }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"usestate"},"useState"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('');\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <TextInput\n        label=\"TextInput useState\"\n        placeholder=\"State\"\n        value={value}\n        isClearable\n        onChange={(e) => setValue(e.target.value)}\n        onClear={() => setValue('')}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"placeholder"},"Placeholder"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"placeholder")," prop to give users a short description in the input field before they enter a value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Placeholder"\n        placeholder="Placeholder"\n        model="placeholder"\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"add-elements-inside-input"},"Add Elements inside Input"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"inputLeftElement")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"inputRightElement")," props to add elements to the inside of the text input field. The recommended usage is for inserting icons."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Add Elements"\n        placeholder="Placeholder Text"\n        model="addElement"\n        isClearable\n        inputLeftElement={\n          <IconMaterial icon="phone" size="18px" color="$gray6" />\n        }\n        inputRightElement={<IconMaterial icon="check" size="18px" />}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"addons"},"Addons"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"leftAddOn")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"rightAddOn")," props to add addons to the outside of the text input field. The recommended usage is for inserting supplemental text."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Left Addons"\n        placeholder="Placeholder Text"\n        model="leftAddOn"\n        isClearable\n        leftAddOn="http://"\n      />\n      <TextInput\n        label="Right Addons"\n        placeholder="Placeholder Text"\n        model="rightAddOn"\n        isClearable\n        leftAddOn="http://"\n        rightAddOn=".com"\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"sub-text"},"Sub Text"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the input field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput label="Sub Text" model="subText" subText="Custom Sub Text" />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"error-message"},"Error Message"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to display a custom error message below the input field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\'init\');\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Input With Error"\n        errorMessage="Error Message"\n        value={value}\n        isClearable\n        onChange={(e) => setValue(e.target.value)}\n        onClear={() => setValue(\'\')}\n      />\n\n      <TextInput\n        label="Input Addons With Error"\n        errorMessage="Error Message"\n        value={value}\n        isClearable\n        onChange={(e) => setValue(e.target.value)}\n        onClear={() => setValue(\'\')}\n        leftAddOn={\n          <Text color="$gray8" size="$md">\n            http://\n          </Text>\n        }\n        rightAddOn={\n          <Text color="$gray8" size="$md">\n            .com\n          </Text>\n        }\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\'\');\n\n  return (\n    <TextInput\n      onChange={(e) => setValue(e.target.value)}\n      value={value}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    />\n  );\n};\n')),(0,i.kt)("h2",{id:"label"},"Label"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," prop to display a label above the input. To hide the input label set ",(0,i.kt)("inlineCode",{parentName:"p"},"hideLabel")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Custom Label"\n        placeholder="Custom Label"\n        model="custom-label"\n      />\n      <TextInput\n        label="Hidden Label"\n        placeholder="Hidden Label"\n        model="custom-hidden-label"\n        hideLabel\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"clearable"},"Clearable"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"isClearable")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to display a clear button in the input field. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"onClear")," prop to handle the clear action."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      clearable: \'Clearable\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput label="Clearable" model="clearable" isClearable={true} />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"disabled"},"Disabled"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to disable the input field so users cannot enter a value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      disabled: \'Disabled\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput isDisabled={true} label="Disabled" model="disabled" />\n      <TextInput\n        isDisabled={true}\n        label="Addons with Disabled"\n        model="disabled"\n        leftAddOn={\n          <Text color="$gray8" size="$md">\n            http://\n          </Text>\n        }\n        rightAddOn={\n          <Text color="$gray8" size="$md">\n            .com\n          </Text>\n        }\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"max-length"},"Max Length"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"maxLength")," prop to limit the number of characters allowed in the input field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Max Length"\n        maxLength={4}\n        model="maxLength"\n        placeholder="Type to see character limit"\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"formatter"},"Formatter"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"formatter")," prop to format values on change for text inputs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Replace special characters with empty string"\n        model="replaceSpecialCharacters"\n        placeholder="Replace special characters with empty string"\n        formatter={(value) => {\n          return value.replace(/[&\\/\\\\#,+()$~%.\'":*?<>{}]/g, \'\');\n        }}\n      />\n      <TextInput\n        label="Uppercase Characters"\n        model="uppercase"\n        placeholder="Uppercase Characters"\n        formatter={(value) => {\n          return value.toUpperCase();\n        }}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"auto-complete"},"Auto Complete"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"autoComplete")," prop anytime you are collecting information about the user. Head to ",(0,i.kt)(m,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete",mdxType:"ExitLink"},"Mozilla")," to find all of the autocomplete options."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Auto Complete"\n        placeholder="Phone"\n        mask="phone"\n        mask="phone"\n        model="autocomplete"\n        autoComplete="tel-local"\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"highlighted"},"Highlighted"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"highlighted")," prop to enable the background color for the input. You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"highlighted")," to enable the color to appear if validation is required."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('');\n\n  return (\n    <TextInput\n      label=\"TextInput useState\"\n      placeholder=\"State\"\n      value={value}\n      isClearable\n      highlighted\n      onChange={(e) => setValue(e.target.value)}\n      onClear={() => setValue('')}\n    />\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit} highlighted>\n      <TextInput\n        label="TextInput Form"\n        placeholder="Form"\n        model="textForm"\n        isClearable\n        validators={{ required: true }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"masks"},"Masks"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"mask")," prop to set the masking variation of input field. Included masks: ",(0,i.kt)("inlineCode",{parentName:"p"},"'phone'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'date'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'zip'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'dollar'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'numeric'"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"'ssn'"),"."),(0,i.kt)("p",null,"Further configuration can be set by usage of the ",(0,i.kt)("inlineCode",{parentName:"p"},"maskConig")," prop which utlizes the ",(0,i.kt)("strong",{parentName:"p"},"react-number-format")," library to take in an object of additional props. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"maskConfig: {\n  thousandSeperator: ',',\n  allowLeadingZeros: true,\n}\n")),(0,i.kt)("br",null),(0,i.kt)("p",null,"Please visit this ",(0,i.kt)(m,{href:"https://github.com/s-yadav/react-number-format/blob/master/documentation/v4.md",mdxType:"ExitLink"},"link")," for detailed documentation on all available configuration settings."),(0,i.kt)("h3",{id:"phone"},"Phone"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      phone: \'5555551234\',\n    },\n  });\n\n  const [value, setValue] = useState(\'5555551234\');\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form}>\n        <TextInput\n          label="Phone Mask"\n          placeholder="(___) ___-____"\n          mask="phone"\n          model="phone"\n          autoComplete="tel-local"\n        />\n      </FormProvider>\n      <TextInput\n        label="Phone Mask"\n        placeholder="(___) ___-____"\n        mask="phone"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        autoComplete="tel-local"\n      />\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h3",{id:"date"},"Date"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      date: \'01/01/2001\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Date Mask"\n        mask="date"\n        model="date"\n        subText="Date Field Format: mm/dd/yyyy"\n        placeholder="mm/dd/yyyy"\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h3",{id:"zip"},"Zip"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      zip: \'12345\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Zip Mask"\n        mask="zip"\n        model="zip"\n        autoComplete="postal-code"\n        placeholder="_____"\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h3",{id:"social-security-number"},"Social Security Number"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      ssn: \'111223333\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="SSN Mask"\n        mask="ssn"\n        model="ssn"\n        placeholder="___-__-____"\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h3",{id:"numeric"},"Numeric"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      numericConfig: \'1123123.12\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput label="Numeric Mask" mask="numeric" model="numeric" />\n      <TextInput\n        label="Numeric Mask w/ Config"\n        mask="numeric"\n        model="numericConfig"\n        maskConfig={{\n          thousandSeparator: \',\',\n          decimalScale: 2,\n        }}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h3",{id:"currency"},"Currency"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      currency: '1123123.12',\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <TextInput\n        label=\"Currency\"\n        mask=\"numeric\"\n        model=\"currency\"\n        returnUnmaskedValue\n        maskConfig={{\n          thousandSeparator: ',',\n          fixedDecimalScale: true,\n          decimalScale: 2,\n          prefix: '$',\n        }}\n      />\n      <Button type=\"submit\" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h3",{id:"return-unmasked-value"},"Return Unmasked Value"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"returnUnmaskedValue")," prop to return a unmasked value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      phone1: \'1112223333\',\n      phone2: \'(555) 444-3333\',\n    },\n  });\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Phone Mask"\n        mask="phone"\n        model="phone1"\n        autoComplete="tel-local"\n        returnUnmaskedValue\n      />\n      <p>Unmasked Value: {form.getValues(\'phone1\')}</p>\n      <TextInput\n        label="Phone Mask"\n        mask="phone"\n        model="phone2"\n        autoComplete="tel-local"\n        returnUnmaskedValue={false}\n      />\n      <p>Masked Value: {form.getValues(\'phone2\')}</p>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h3",{id:"empty-mask-character"},"Empty Mask Character"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"emptyMaskChar")," prop to replace the empty mask placeholder."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      phone: \'555\',\n      ssn: \'555\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="^ Mask"\n        mask="phone"\n        model="phone"\n        autoComplete="tel-local"\n        emptyMaskChar="^"\n      />\n      <TextInput label="* Mask" mask="ssn" model="ssn" emptyMaskChar="*" />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h3",{id:"custom-mask-patterns"},"Custom Mask Patterns"),(0,i.kt)("p",null,"Pass in a custom pattern into the ",(0,i.kt)("inlineCode",{parentName:"p"},"mask")," prop to create unique masks. The hash string, ",(0,i.kt)("inlineCode",{parentName:"p"},"#"),", allows number inputs inplace of the hash."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      customCC: \'1234567891234567\',\n      customPhone: \'1234567890\',\n      customCurrency: \'50.25\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Custom Mask Credit Card"\n        mask="#### #### #### ####"\n        model="customCC"\n        autoComplete="cc-number"\n      />\n      <TextInput\n        label="Custom Mask Phone"\n        mask="+1 (###) ###-####"\n        model="customPhone"\n        autoComplete="tel-local"\n      />\n      <TextInput\n        label="Custom Currency Mask"\n        model="customCurrency"\n        mask="numeric"\n        maskConfig={{\n          prefix: \'$\',\n          decimalScale: 2,\n          isAllowed: ({ floatValue }) => {\n            const value = floatValue || 0;\n            return value <= 99.99;\n          },\n        }}\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"types"},"Types"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," prop to set the type of input field to be displayed. Types include: ",(0,i.kt)("inlineCode",{parentName:"p"},"'text'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'email'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'tel'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'password'"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"'search'"),"."),(0,i.kt)("h3",{id:"text"},"Text"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      text: \'Type Text\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput label="Type Text" type="text" model="text" />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h3",{id:"password"},"Password"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      password: \'SuperSecretPassword\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Type Text"\n        type="password"\n        model="password"\n        autoComplete="new-password"\n        isClearable\n      />\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h3",{id:"search"},"Search"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"onClickSearch")," prop to set the callback for the search button."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = React.useState(\'Text\');\n\n  const handleSearch = () => {\n    console.log(\'value: \', value);\n  };\n\n  return (\n    <TextInput\n      type="search"\n      label="Search"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n      onClear={() => setValue(\'\')}\n      onClickSearch={handleSearch}\n      isClearable\n      leftAddOn="http://"\n      rightAddOn=".com"\n      inputRightElement={\n        <IconMaterial icon="phone" size="18px" color="$gray6" />\n      }\n    />\n  );\n};\n')),(0,i.kt)("h2",{id:"validation"},"Validation"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"validators")," prop to set rules for the field to be valid."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Required Default Message"\n        model="required"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="Required Custom Message"\n        model="custom-required"\n        validators={{ required: \'Custom Error Message\' }}\n      />\n      <TextInput\n        label="Min Length"\n        model="minLength"\n        validators={{\n          required: true,\n          minLength: {\n            value: 4,\n            message: \'Min Length 4\',\n          },\n        }}\n      />\n      <TextInput\n        label="Max Length"\n        model="maxLength"\n        validators={{\n          required: true,\n          maxLength: {\n            value: 4,\n            message: \'Max Length 4\',\n          },\n        }}\n      />\n      <TextInput\n        label="Custom Pattern (Email)"\n        model="pattern"\n        autoComplete="email"\n        validators={{\n          required: true,\n          pattern: {\n            value:\n              /^(([^<React.Fragment>()[\\]\\\\.,;:\\s@"]+(\\.[^<React.Fragment>()[\\]\\\\.,;:\\s@"]+)*)|(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            message: \'Invalid Email\',\n          },\n        }}\n      />\n      <TextInput\n        label="Custom Validators"\n        model="validate"\n        validators={{\n          validate: {\n            positive: (v) => parseInt(v) > 0 || \'should be greater than 0\',\n            lessThanTen: (v) => parseInt(v) < 10 || \'should be lower than 10\',\n            // you can do asynchronous validation as well\n            //checkUrl: async () => await fetch() || \'error message\',\n            messages: (v) => !v && [\'otherInput1\', \'otherInput2\'],\n          },\n        }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"width"},"Width"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"width")," prop to set the width of the input field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Width Default"\n        model="width1"\n        placeholder="Default Width"\n        isClearable\n      />\n      <TextInput\n        width="75%"\n        label="Width 75%"\n        model="width2"\n        placeholder="Width Set To 75%"\n        isClearable\n      />\n      <TextInput\n        width="335px"\n        model="width3"\n        label="Width 335px"\n        placeholder="Width Set To 335px"\n        isClearable\n      />\n    </FormProvider>\n  );\n};\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={TextInput}\n  rows={[\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Label for input field',\n    },\n    {\n      name: 'placeholder',\n      type: 'string',\n      description:\n        'Short description displayed in the input before the user enters a value',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the input. If true, the input will be disabled',\n    },\n    {\n      name: 'isClearable',\n      type: 'boolean',\n      description:\n        'Flag to display/hide a clear button. If true, a clear button will be visable to the user',\n    },\n    {\n      name: 'isRequired',\n      type: 'boolean',\n      description: 'Flag to require text',\n    },\n    {\n      name: 'returnUnmaskedValue',\n      type: 'boolean',\n      description:\n        'Flag to return masked or unmasked value. If true, the value will be unmasked',\n    },\n    {\n      name: 'returnMaskAsNumber',\n      type: 'boolean',\n      description: 'Flag to return value as masked number',\n    },\n    {\n      name: 'value',\n      type: 'number | string',\n      description: 'Value of the text input',\n    },\n    {\n      name: 'validators',\n      type: 'object',\n      description: 'Set rules for the input field to be valid',\n    },\n    {\n      name: 'css',\n      type: 'shape',\n      description: 'Stitches styling',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired everytime the value changes',\n    },\n    {\n      name: 'onClear',\n      type: 'function',\n      description:\n        'Callback fired when user clicks the clear button. The isClearable property must be set to true',\n    },\n    {\n      name: 'onClickSearch',\n      type: 'function',\n      description: 'Callback fired when user clicks the search button.',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    {\n      name: 'onKeyDown',\n      type: 'function',\n      description:\n        'Callback fired everytime a key is pressed while focused in the component',\n    },\n    {\n      name: 'onPaste',\n      type: 'function',\n      description:\n        'Callback fired everytime something is pasted into the component',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'mask',\n      type: \"'phone' | 'zip' | 'date' | 'ssn' | 'numeric'\",\n      description: 'Format of the input value',\n    },\n    {\n      name: 'maskConfig',\n      type: 'shape',\n      description:\n        'Set configs for mask utilized by the react-number-format library',\n    },\n    {\n      name: 'type',\n      type: 'string',\n      description: 'Set the type of input field',\n    },\n    {\n      name: 'width',\n      type: 'string',\n      description: 'Width of the input field',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Error message to be displayed below input field',\n    },\n    {\n      name: 'emptyMaskChar',\n      type: 'string',\n      description: 'Character placeholder for empty mask inputs',\n    },\n    {\n      name: 'autoComplete',\n      type: 'string',\n      description:\n        'The autocomplete status that is passed to the form element in the FormProvider',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Set the text displayed below input field',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below input field',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to show or hide label',\n    },\n    {\n      name: 'formatter',\n      type: 'function',\n      description:\n        'Function used to format value on change when using form provider',\n    },\n    {\n      name: 'inputLeftElement',\n      type: 'node',\n      description: 'Add element to left of inside text input',\n    },\n    {\n      name: 'inputRightElement',\n      type: 'node',\n      description: 'Add element to right of inside text input',\n    },\n    {\n      name: 'leftAddOn',\n      type: 'node',\n      description: 'Add Addon to left of outside text input',\n    },\n    {\n      name: 'rightAddOn',\n      type: 'node',\n      description: 'Add Addon to right of outside text input',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={TextInput}\n  rows={[\n    {\n      name: 'text-input-root',\n      description: 'TextInput root element',\n    },\n    {\n      name: 'text-input-label',\n      description: 'FormInput label',\n    },\n    {\n      name: 'text-input-clear',\n      description: 'FormInput clear',\n    },\n    {\n      name: 'text-input-descriptors',\n      description: 'Descriptor for FormInput',\n    },\n    {\n      name: 'text-input-left-add-on',\n      description: 'Content for Left AddOn',\n    },\n    {\n      name: 'text-input-right-add-on',\n      description: 'Content for Right AddOn',\n    },\n    {\n      name: 'text-input-left-element',\n      description: 'Content for Left Element',\n    },\n    {\n      name: 'text-input-left-element-wrapper',\n      description: 'Wrapper for Left Element',\n    },\n    {\n      name: 'text-input-right-element',\n      description: 'Content for Right Element',\n    },\n    {\n      name: 'text-input-right-element-wrapper',\n      description: 'Wrapper for Right Element',\n    },\n    {\n      name: 'form-input-wrapper-container',\n      description: 'Wrapper container for input elements',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},57369:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"text-input-area",category:"Forms",title:"TextInputArea",description:"Allows users to enter multi-line text into a UI.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3697%3A25655",pagination_prev:"web/ui/text-input",pagination_next:"web/ui/time-input"},d=void 0,p={unversionedId:"web/ui/text-input-area",id:"web/ui/text-input-area",isDocsHomePage:!1,title:"TextInputArea",description:"Allows users to enter multi-line text into a UI.",source:"@site/docs/web/ui/TextInputArea.md",sourceDirName:"web/ui",slug:"/web/ui/text-input-area",permalink:"/web/ui/text-input-area",tags:[],version:"current",frontMatter:{id:"text-input-area",category:"Forms",title:"TextInputArea",description:"Allows users to enter multi-line text into a UI.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3697%3A25655",pagination_prev:"web/ui/text-input",pagination_next:"web/ui/time-input"},sidebar:"docs",previous:{title:"TextInput",permalink:"/web/ui/text-input"},next:{title:"TimeInput",permalink:"/web/ui/time-input"}},c=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Add Elements inside Input",id:"add-elements-inside-input",children:[],level:2},{value:"Rows",id:"rows",children:[],level:2},{value:"Subtext",id:"subtext",children:[],level:2},{value:"Error Message",id:"error-message",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Max Length",id:"max-length",children:[],level:2},{value:"Display Max Length",id:"display-max-length",children:[],level:2},{value:"Disable Auto Sizing",id:"disable-auto-sizing",children:[],level:2},{value:"Validation",id:"validation",children:[],level:2},{value:"Highlighted",id:"highlighted",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { TextInputArea } from '@abyss/web/ui/TextInputArea';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'TextInputArea',\n  inputs: [\n    {\n      prop: 'placeholder',\n      type: 'string',\n    },\n    {\n      prop: 'subText',\n      type: 'string',\n    },\n    {\n      prop: 'maxLength',\n      type: 'number',\n    },\n    {\n      prop: 'rows',\n      type: 'number',\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'isRequired',\n      type: 'boolean',\n    },\n    {\n      prop: 'displayMaxLength',\n      type: 'boolean',\n    },\n    {\n      prop: 'disableAutoSize',\n      type: 'boolean',\n    },\n  ],\n}\n\n() => {\n  const [value, setValue] = useState('State Default Value');\n\n  return (\n    <TextInputArea\n      label=\"TextInputArea Sandbox\"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," hook for handling TextInputArea lets the DOM handle form data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      textForm: \'Form Value\',\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <TextInputArea\n        label="TextInputArea useForm"\n        model="textForm"\n        validators={{ required: true }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('State Default Value');\n\n  return (\n    <TextInputArea\n      label=\"TextInputArea useState\"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"add-elements-inside-input"},"Add Elements inside Input"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"inputRightElement")," prop to add an element inside of the text input field. The recommended usage is for inserting icons."),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"#validation"},"Validation")," section below for an example on how to incorporate with validation and display error/success states with icons."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInputArea\n        label="Add Elements"\n        placeholder="Placeholder Text"\n        model="addElement"\n        inputRightElement={<IconMaterial icon="check" size="18px" />}\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"rows"},"Rows"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"rows")," prop to set the amount of rows displayed in the text area."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInputArea rows={8} label="Rows" model="rows" />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"subtext"},"Subtext"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the input field."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInputArea\n        label="Sub Text"\n        model="subText"\n        subText="Custom Sub Text"\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"error-message"},"Error Message"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to display a custom error message below the input field."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\'Default Value\');\n\n  return (\n    <TextInputArea\n      label="Input With Error"\n      errorMessage="Error Message"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n    />\n  );\n};\n')),(0,r.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\'\');\n\n  return (\n    <TextInputArea\n      onChange={(e) => setValue(e.target.value)}\n      value={value}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    />\n  );\n};\n')),(0,r.kt)("h2",{id:"label"},"Label"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," prop to display a label above the input. To hide the input label set ",(0,r.kt)("inlineCode",{parentName:"p"},"hideLabel")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInputArea\n        label="Custom Label"\n        placeholder="Custom Label"\n        model="custom-label"\n      />\n      <TextInputArea\n        label="Hidden Label"\n        placeholder="Hidden Label"\n        model="custom-hidden-label"\n        hideLabel\n        style={{ marginTop: \'15px\' }}\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"disabled"},"Disabled"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to disable the input field so users cannot enter a value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      disabled: \'Disabled\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInputArea isDisabled={true} label="Disabled" model="disabled" />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"max-length"},"Max Length"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"maxLength")," prop to limit the number of characters allowed in the input field."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInputArea\n        label="Max Length"\n        maxLength={4}\n        model="maxLength"\n        placeholder="Type to see character limit"\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"display-max-length"},"Display Max Length"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"displayMaxLength")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to display the max length character counter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInputArea\n        label="Display Max Length"\n        maxLength={20}\n        model="displayMaxLength"\n        displayMaxLength\n        placeholder="Type to see character limit"\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"disable-auto-sizing"},"Disable Auto Sizing"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"disableAutoSize")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to disable auto sizing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\n    \'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus sagittis sodales sapien. Donec vitae euismod leo. Suspendisse vel accumsan sapien. Aliquam ut magna convallis, malesuada velit vitae, pulvinar nulla. Suspendisse vitae tortor vulputate orci semper euismod mattis ut metus. Proin semper nulla id suscipit sollicitudin. Curabitur ac vestibulum orci, sed mollis augue. Etiam in sollicitudin ipsum, ut ultrices ante. Etiam et pulvinar tellus. Integer et accumsan dui, ac euismod lacus. Phasellus purus dui, euismod at ante eu, volutpat sodales turpis. Integer fermentum, sapien ut viverra tristique, urna nisi efficitur quam, a pulvinar ex leo eget liber\'\n  );\n\n  return (\n    <React.Fragment>\n      <TextInputArea\n        label="Disabled Auto Sizing"\n        value={value}\n        disableAutoSize\n        onChange={(e) => setValue(e.target.value)}\n      />\n      <TextInputArea\n        label="Auto Sizing"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n      />\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"validation"},"Validation"),(0,r.kt)("p",null,"Use the validators prop to set rules for the field to be valid."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const { errors, isSubmitted, isSubmitSuccessful } = form.formState;\n\n  const getIconProps = useCallback(\n    (model) => {\n      if (!isSubmitted) return {};\n\n      let iconProps = {};\n\n      if (!!errors[model]) {\n        iconProps = { icon: 'error', color: '$error1', size: '18px' };\n      }\n      if (isSubmitSuccessful) {\n        iconProps = { icon: 'check', color: '$success1', size: '18px' };\n      }\n\n      const isEmpty = Object.keys(iconProps).length === 0;\n\n      return !isEmpty\n        ? { inputRightElement: <IconMaterial {...iconProps} /> }\n        : {};\n    },\n    [isSubmitted, isSubmitSuccessful]\n  );\n\n  return (\n    <FormProvider state={form}>\n      <TextInputArea\n        label=\"Required Default Message\"\n        model=\"required\"\n        {...getIconProps('required')}\n        validators={{ required: true }}\n      />\n      <TextInputArea\n        label=\"Required Custom Message\"\n        model=\"custom-required\"\n        validators={{ required: 'Custom Error Message' }}\n      />\n      <Button type=\"submit\" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h2",{id:"highlighted"},"Highlighted"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"highlighted")," prop to enable the background color for the input. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"FormProvider")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"highlighted")," to enable the color to appear if validation is required."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState();\n\n  return (\n    <TextInputArea\n      label="Highlighted"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n      highlighted\n    />\n  );\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit} highlighted>\n      <TextInputArea\n        label="FormProvider Highlighted"\n        model="highlighted"\n        validators={{ required: true }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={TextInputArea}\n  rows={[\n    {\n      name: 'value',\n      type: 'number | string',\n      description: 'Value of the text area',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'validators',\n      type: 'object',\n      description: 'Rules for text area validation',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired everytime the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    {\n      name: 'onKeyDown',\n      type: 'function',\n      description:\n        'Callback fired everytime a key is pressed while focused in the component',\n    },\n    {\n      name: 'onPaste',\n      type: 'function',\n      description:\n        'Callback fired everytime something is pasted into the component',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the text area. If true, the text area will be disabled',\n    },\n    {\n      name: 'isRequired',\n      type: 'boolean',\n      description: 'Flag to require text',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'maxLength',\n      type: 'number',\n      description: 'Maximum amount of characters allowed in the text area',\n    },\n    {\n      name: 'displayMaxLength',\n      type: 'boolean',\n      description: 'Display the maximum length character counter',\n    },\n    {\n      name: 'disableAutoSize',\n      type: 'boolean',\n      description: 'Disable the auto size functionality',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Text displayed below the text area',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Error message displayed below the text area',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the text area',\n    },\n    {\n      name: 'rows',\n      type: 'number',\n      description: 'The number of rows displayed in the text area',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Set the label of the text area',\n    },\n    {\n      name: 'inputRightElement',\n      type: 'ReactNode',\n      description: 'Add element to right of inside text area',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={TextInputArea}\n  rows={[\n    {\n      name: 'text-input-area-root',\n      description: 'TextInputArea root element',\n    },\n    {\n      name: 'text-input-area-label-wrapper',\n      description:\n        'FormInput label wrapper. Contains label and max length label.',\n    },\n    {\n      name: 'text-input-area-label',\n      description: 'FormInput label',\n    },\n    {\n      name: 'text-input-area-max-length-label',\n      description: 'FormInput max length label',\n    },\n    {\n      name: 'text-input-area-input',\n      description: 'FormInput',\n    },\n    {\n      name: 'text-input-area-input-descriptors',\n      description: 'Descriptor for FormInput',\n    },\n    {\n      name: 'text-input-area-right-element-wrapper',\n      description: 'Wrapper for right input element',\n    },\n    {\n      name: 'text-input-area-right-element',\n      description: 'Text input area right element',\n    },\n    {\n      name: 'text-input-area-wrapper-container',\n      description: 'Text input area container',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},79324:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"theme-provider",category:"Providers",title:"ThemeProvider",description:"An Abyss component that passes the theme object down the component tree.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1",pagination_prev:"web/ui/router-provider",pagination_next:"web/ui/heading"},s="Theming",d={unversionedId:"web/ui/theme-provider",id:"web/ui/theme-provider",isDocsHomePage:!1,title:"ThemeProvider",description:"An Abyss component that passes the theme object down the component tree.",source:"@site/docs/web/ui/ThemeProvider.md",sourceDirName:"web/ui",slug:"/web/ui/theme-provider",permalink:"/web/ui/theme-provider",tags:[],version:"current",frontMatter:{id:"theme-provider",category:"Providers",title:"ThemeProvider",description:"An Abyss component that passes the theme object down the component tree.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1",pagination_prev:"web/ui/router-provider",pagination_next:"web/ui/heading"},sidebar:"docs",previous:{title:"RouterProvider",permalink:"/web/ui/router-provider"},next:{title:"Heading",permalink:"/web/ui/heading"}},p=[{value:"Theme Provider",id:"theme-provider",children:[],level:2},{value:"Example",id:"example",children:[],level:2},{value:"Abyss Theme Tokens",id:"abyss-theme-tokens",children:[],level:2}],c={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"theming"},"Theming"),(0,i.kt)("p",null,"Abyss theming supports changing colors, spacing, box-shadows, font families, font sizes and many other properties. Themes let you apply a consistent tone to your app. It allows you to customize all design aspects of your project in order to meet the specific needs of your business or brand. To configure the theme wrap your app with a ",(0,i.kt)("inlineCode",{parentName:"p"},"ThemeProvider")," component:"),(0,i.kt)("h2",{id:"theme-provider"},"Theme Provider"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ThemeProvider")," component allows you to change theme globally. However, this is optional; Abyss components come with a default theme."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ThemeProvider")," relies on the context feature of React to pass the theme down to the components, so you need to make sure that ",(0,i.kt)("inlineCode",{parentName:"p"},"ThemeProvider")," is a parent of the components you are trying to customize."),(0,i.kt)("p",null,"This component takes a theme prop and applies it to the entire React tree that it is wrapping around. It should preferably be used at the root of your component tree."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ThemeProvider}\n  rows={[\n    {\n      name: 'children',\n      type: 'node',\n      description: 'Your component tree.',\n    },\n    {\n      name: 'theme',\n      type: 'union: object | func',\n      description: 'A theme object, usually the result of createTheme().',\n    },\n  ]}\n/>\n")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ThemeProvider } from '@abyss/web/ui/ThemeProvider';\nimport { createTheme } from '@abyss/web/tools/theme';\n\nconst themeOverride = {\n  theme: {\n    colors: {\n      // primary\n      primary1: '#002677',\n      primary2: '#FFFFFF',\n\n      // interactive\n      interactive1: '#196ECF',\n      interactive2: '#0C55B8',\n    },\n    fonts: {...},\n  },\n  themeCss: {...},\n};\n\nconst theme = createTheme('uhc', themeOverride);\n\nconst App = () => {\n  return <ThemeProvider theme={theme}>...</ThemeProvider>;\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n")),(0,i.kt)("h2",{id:"abyss-theme-tokens"},"Abyss Theme Tokens"),(0,i.kt)("p",null,"You can define tokens in the config file and seamlessly consume and access directly in the Style Object. You can create your own themes by overriding the default tokens."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},'() => {\n  const theme = useAbyssTheme();\n  return (\n    <CodeHighlighter code={JSON.stringify(theme, null, 2)} language="json" />\n  );\n};\n')))}u.isMDXComponent=!0},49835:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"time-input",category:"Forms",title:"TimeInput",description:"Capture time input from user.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=24077%3A99544&t=2OvT77S1GipkwVQf-1",pagination_prev:"web/ui/text-input-area",pagination_next:"web/ui/toggle-group"},d=void 0,p={unversionedId:"web/ui/time-input",id:"web/ui/time-input",isDocsHomePage:!1,title:"TimeInput",description:"Capture time input from user.",source:"@site/docs/web/ui/TimeInput.md",sourceDirName:"web/ui",slug:"/web/ui/time-input",permalink:"/web/ui/time-input",tags:[],version:"current",frontMatter:{id:"time-input",category:"Forms",title:"TimeInput",description:"Capture time input from user.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=24077%3A99544&t=2OvT77S1GipkwVQf-1",pagination_prev:"web/ui/text-input-area",pagination_next:"web/ui/toggle-group"},sidebar:"docs",previous:{title:"TextInputArea",permalink:"/web/ui/text-input-area"},next:{title:"ToggleGroup",permalink:"/web/ui/toggle-group"}},c=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Format",id:"format",children:[],level:2},{value:"Minutes Increment",id:"minutes-increment",children:[],level:2},{value:"Add Elements Inside Input",id:"add-elements-inside-input",children:[],level:2},{value:"Subtext",id:"subtext",children:[],level:2},{value:"Error Message",id:"error-message",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Validation",id:"validation",children:[],level:2},{value:"Highlighted",id:"highlighted",children:[],level:2},{value:"Width",id:"width",children:[],level:2},{value:"Enable Outside Scroll",id:"enable-outside-scroll",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { TimeInput } from '@abyss/web/ui/TimeInput';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'TimeInput',\n  inputs: [\n    {\n      prop: 'subText',\n      type: 'string',\n    },\n    {\n      prop: 'errorMessage',\n      type: 'string',\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'highlighted',\n      type: 'boolean',\n      defaultValue: false,\n    },\n    {\n      prop: 'minutesIncrement',\n      type: 'string',\n    },\n        {\n      prop: 'format',\n      type: 'select',\n      options: [\n        { label: '12', value: '12' },\n        { label: '24', value: '24' },\n      ]\n    },\n  ]\n}\n\n() => {\n  const [value, setValue] = useState(null);\n\n  return (\n    <TimeInput\n      label=\"TimeInput Sandbox\"\n      value={value}\n      onChange={setValue}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," hook for handling text input lets the DOM handle form data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      'time-input': '01:00',\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <TimeInput\n        label=\"TimeInput useForm\"\n        model=\"time-input\"\n        validators={{ required: true }}\n      />\n      <Button type=\"submit\" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h2",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('13:00');\n\n  console.log('useState Value', value);\n\n  return (\n    <TimeInput label=\"TimeInput useState\" value={value} onChange={setValue} />\n  );\n};\n")),(0,r.kt)("h2",{id:"format"},"Format"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"format")," prop to change from 12 to 24 hour time format. The default is ",(0,r.kt)("inlineCode",{parentName:"p"},"12"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('13:00');\n\n  console.log('useState Value', value);\n\n  return (\n    <TimeInput\n      label=\"TimeInput Format\"\n      value={value}\n      onChange={setValue}\n      format=\"24\"\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"minutes-increment"},"Minutes Increment"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"minutesIncrement")," prop to update the minute increment options that are available for selection within the time picker. The default is ",(0,r.kt)("inlineCode",{parentName:"p"},"5"),"."),(0,r.kt)("p",null,"NOTE: this setting does not provide any validation when using the input field to enter the time value. If you'd like to add custom validation to only allow certain increments please see the Custom Validators example from the ",(0,r.kt)("a",{parentName:"p",href:"#validation"},"Validation")," section below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('13:00');\n\n  console.log('useState Value', value);\n\n  return (\n    <TimeInput\n      label=\"TimeInput Format\"\n      value={value}\n      onChange={setValue}\n      minutesIncrement=\"30\"\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"add-elements-inside-input"},"Add Elements Inside Input"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"inputLeftElement")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"inputRightElement")," props to add elements to the inside of the time input field. The recommended usage is for inserting icons."),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"#validation"},"Validation")," section below for an example on how to incorporate with validation and display error/success states with icons."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TimeInput\n        label="TimeInput Inside Elements"\n        model="time-input-elements"\n        validators={{ required: true }}\n        inputLeftElement={\n          <IconMaterial icon="assignment" size="18px" color="$gray6" />\n        }\n        inputRightElement={\n          <IconMaterial icon="check" size="18px" color="$success1" />\n        }\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"subtext"},"Subtext"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the time input field. By default it displays ",(0,r.kt)("inlineCode",{parentName:"p"},"Time Format: hh:mm"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(null);\n\n  return (\n    <TimeInput\n      label="TimeInput SubText"\n      value={value}\n      onChange={setValue}\n      subText="Custom Sub Text"\n    />\n  );\n};\n')),(0,r.kt)("h2",{id:"error-message"},"Error Message"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to display a custom error message below the time input field."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(null);\n\n  return (\n    <TimeInput\n      label="TimeInput Error Message"\n      value={value}\n      onChange={setValue}\n      errorMessage="Custom Error Message"\n    />\n  );\n};\n')),(0,r.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(null);\n\n  return (\n    <TimeInput\n      label="TimeInput Descriptors Display"\n      value={value}\n      onChange={setValue}\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    />\n  );\n};\n')),(0,r.kt)("h2",{id:"label"},"Label"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," prop to display a label above the input. To hide the input label set ",(0,r.kt)("inlineCode",{parentName:"p"},"hideLabel")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TimeInput\n        css={{ \'abyss-time-input-root\': { marginBottom: \'20px\' } }}\n        model="time-input"\n        label="TimeInput Custom Label"\n      />\n      <TimeInput\n        model="time-input-2"\n        label="TimeInput Hidden Label"\n        hideLabel\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"disabled"},"Disabled"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to disable the input field so users cannot enter a value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <TimeInput label="TimeInput Disabled" model="time-input" isDisabled />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"validation"},"Validation"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"validators")," prop to set rules for the field to be valid."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const { errors, isSubmitted, isSubmitSuccessful } = form.formState;\n\n  const getIconProps = useCallback(\n    (model) => {\n      if (!isSubmitted) return null;\n\n      let iconProps = {};\n\n      if (!!errors[model]) {\n        iconProps = { icon: 'error', color: '$error1', size: '18px' };\n      }\n      if (isSubmitSuccessful) {\n        iconProps = { icon: 'check', color: '$success1', size: '18px' };\n      }\n\n      return { inputRightElement: <IconMaterial {...iconProps} /> };\n    },\n    [isSubmitted, isSubmitSuccessful]\n  );\n\n  const marginBottom = {\n    'abyss-time-input-root': { marginBottom: '20px' },\n  };\n\n  const minutesIncrement = 15;\n\n  return (\n    <FormProvider state={form}>\n      <TimeInput\n        css={marginBottom}\n        label=\"Required Default Message\"\n        model=\"required\"\n        {...getIconProps('required')}\n        validators={{ required: true }}\n      />\n      <TimeInput\n        css={marginBottom}\n        label=\"Required Custom Message\"\n        model=\"custom-required\"\n        validators={{ required: 'Custom Error Message' }}\n      />\n      <TimeInput\n        label=\"Custom Validators\"\n        model=\"validate\"\n        minutesIncrement={minutesIncrement}\n        subText={`Enter in ${minutesIncrement} minute increments`}\n        validators={{\n          required: true,\n          validate: {\n            incrementAllowed: (v) => {\n              const minuteValue = dayjs(v, 'hh:mm').minute();\n              if (minuteValue % minutesIncrement === 0) return true;\n              return `Only ${minutesIncrement} minute increments are allowed`;\n            },\n          },\n        }}\n      />\n      <Button type=\"submit\" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,r.kt)("h2",{id:"highlighted"},"Highlighted"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"highlighted")," prop to enable the background color for the input. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"FormProvider")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"highlighted")," to enable the color to appear if validation is required."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(null);\n\n  return (\n    <TimeInput\n      label="TimeInput Highlighted"\n      value={value}\n      onChange={setValue}\n      highlighted\n    />\n  );\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit} highlighted>\n      <TimeInput\n        label="FormProvider Highlighted"\n        model="highlighted"\n        validators={{ required: true }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"width"},"Width"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"width")," prop to set the width of the input field."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TimeInput\n        label="Width Default"\n        model="width-1"\n        subText="Default Width"\n      />\n      <TimeInput\n        width="75%"\n        label="Width 75%"\n        model="width-2"\n        subText="Width Set To 75%"\n      />\n      <TimeInput\n        width="335px"\n        model="width-3"\n        label="Width 335px"\n        subText="Width Set To 335px"\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"enable-outside-scroll"},"Enable Outside Scroll"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"enableOutsideScroll"),"prop to",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to enable scroll outside of the time input component while the time picker is open. Default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(null);\n\n  return (\n    <TimeInput\n      label="TimeInput Enable Outside Scroll"\n      value={value}\n      onChange={setValue}\n      enableOutsideScroll\n    />\n  );\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={TimeInput}\n  rows={[\n    {\n      name: 'format',\n      type: '\"12\" | \"24\"',\n      description: 'Sets to either 12 or 24 hour format',\n    },\n    {\n      name: 'minutesIncrement',\n      type: 'string',\n      description:\n        'Sets the minute increment of options that will available within the time picker',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Label for time input field',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the input. If true, the input will be disabled',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description:\n        'Value of the time input.  Must be a string in the format of \"hh:mm\"',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired every time the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired every time the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired every time the component is unfocused',\n    },\n    {\n      name: 'width',\n      type: 'string',\n      description: 'Width of the input field',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Set the text displayed below the time input field',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description:\n        'Set the error message to be displayed below the time input field',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the time input field',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to show or hide label',\n    },\n    {\n      name: 'enableOutsideScroll',\n      type: 'boolean',\n      description: 'Flag to enable scrolling when the time picker is open',\n    },\n    {\n      name: 'inputLeftElement',\n      type: 'ReactNode',\n      description: 'Add element to left of inside time input',\n    },\n    {\n      name: 'inputRightElement',\n      type: 'ReactNode',\n      description: 'Add element to right of inside time input',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={TimeInput}\n  rows={[\n    {\n      name: 'time-input-container',\n      description: 'Container element',\n    },\n    {\n      name: 'time-input-picker-wrapper',\n      description: 'Time picker dialog wrapper',\n    },\n    {\n      name: 'time-input-root',\n      description: 'Time input root',\n    },\n    {\n      name: 'time-input-label',\n      description: 'Time input label',\n    },\n    {\n      name: 'time-input-wrapper',\n      description: 'Time input and icon wrapper',\n    },\n    {\n      name: 'time-input-left-element-wrapper',\n      description: 'Time input wrapper for left element',\n    },\n    {\n      name: 'time-input-left-element',\n      description: 'Time input content for left element',\n    },\n    {\n      name: 'time-input-right-element-wrapper',\n      description: 'Time input wrapper for right element',\n    },\n    {\n      name: 'time-input-right-element',\n      description: 'Time input content for right element',\n    },\n    {\n      name: 'time-input-input-container',\n      description: 'Time input container',\n    },\n    {\n      name: 'time-input-hour-input',\n      description: 'Hours text input',\n    },\n    {\n      name: 'time-input-minute-input',\n      description: 'Minutes text input',\n    },\n    {\n      name: 'time-input-am-pm-input',\n      description: 'AM/PM text input',\n    },\n    {\n      name: 'time-input-picker-button',\n      description: 'Time picker open button',\n    },\n    {\n      name: 'time-input-picker-button-icon',\n      description: 'Time picker open button icon',\n    },\n    {\n      name: 'time-input-descriptors',\n      description: 'Time input descriptors',\n    },\n    {\n      name: 'time-input-picker-container',\n      description: 'Time picker container',\n    },\n    {\n      name: 'time-input-picker-column-group-container',\n      description: 'Time picker column group container',\n    },\n    {\n      name: 'time-input-picker-column-container',\n      description: 'Time picker column container',\n    },\n    {\n      name: 'time-input-picker-separator',\n      description: 'Time picker colon separator',\n    },\n    {\n      name: 'time-input-picker-decrease-hours-button',\n      description: 'Time picker decrease hours button',\n    },\n    {\n      name: 'time-input-picker-increase-hours-button',\n      description: 'Time picker increase hours button',\n    },\n    {\n      name: 'time-input-picker-decrease-minutes-button',\n      description: 'Time picker decrease minutes button',\n    },\n    {\n      name: 'time-input-picker-increase-minutes-button',\n      description: 'Time picker increase minutes button',\n    },\n    {\n      name: 'time-input-picker-arrow-button',\n      description: 'Time picker arrow button',\n    },\n    {\n      name: 'time-input-picker-arrow-button-icon',\n      description: 'Time picker arrow button icon',\n    },\n    {\n      name: 'time-input-picker-hours-option-list',\n      description: 'Time picker hours option list',\n    },\n    {\n      name: 'time-input-picker-minutes-option-list',\n      description: 'Time picker minutes option list',\n    },\n    {\n      name: 'time-input-picker-option-list',\n      description: 'Time picker option list',\n    },\n    {\n      name: 'time-input-picker-option-item',\n      description: 'Time picker option list item',\n    },\n    {\n      name: 'time-input-picker-option-item-content',\n      description: 'Time picker option list item content',\n    },\n    {\n      name: 'time-input-picker-am-pm-toggle',\n      description: 'Time picker AM/PM toggle',\n    },\n    {\n      name: 'time-input-picker-am-tab',\n      description: 'Time picker AM toggle tab',\n    },\n    {\n      name: 'time-input-picker-pm-tab',\n      description: 'Time picker PM toggle tab',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("p",null,'The example below includes a time input field and a button that opens a time picker which implements the dialog design pattern. The dialog contains a list of hour and minute options, decrease/increase buttons and AM/PM toggle tabs that enable the user to select the desired time. Choosing from the time picker populates the time input field. When the dialog is opened, if the input field is empty, then a time of "1:00am" (12 hour format) or "00:00" (24 hour format) is set and the selected hour option is focused. Otherwise, the focus is placed on the hour option that matches the value of the time input field.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TimeInput\n        model="time-input"\n        label="Accessibility Practice"\n        subText="Utilize the Keyboard Interaction table below to test the components accessibility."\n        validators={{ required: true }}\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<div style={{ marginTop: '25px' }}>\n  <Docs.AccessibilityTable\n    title=\"Choose Time Button\"\n    rows={[\n      {\n        name: 'Space',\n        description:\n          'Open the time picker dialog. Move focus to selected hour.',\n      },\n      {\n        name: 'Enter',\n        description:\n          'Open the time picker dialog. Move focus to selected hour.',\n      },\n    ]}\n  />\n</div>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Time Picker Dialog\"\n  rows={[\n    {\n      name: 'Esc',\n      description:\n        'Closes the dialog and returns focus to the Choose Time button',\n    },\n    {\n      name: 'Tab',\n      description: 'Moves focus to next element in the dialog Tab sequence',\n    },\n    {\n      name: 'Shift + Tab',\n      description: 'Moves focus to previous element in the dialog Tab sequence',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Time Picker Dialog: Increase/Decrease Buttons\"\n  rows={[\n    {\n      name: 'Space',\n      description:\n        'Change the hour or minute selection up or down by one option',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Time Picker Dialog: Hour/Minutes List\"\n  rows={[\n    {\n      name: 'Enter',\n      description: 'Close the dialog, and move focus to the Choose Time button',\n    },\n    {\n      name: 'Up Arrow',\n      description:\n        'Moves focus and selection up one option from the currently selected hour or minute',\n    },\n    {\n      name: 'Down Arrow',\n      description:\n        'Moves focus and selection down one option from the currently selected hour or minute',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Time Picker Dialog: AM/PM Toggle Tabs\"\n  rows={[\n    {\n      name: 'Enter',\n      description: 'Close the dialog, and move focus to the Choose Time button',\n    },\n    {\n      name: 'Arrow Right',\n      description: 'Moves focus and selection to the option to the right',\n    },\n    {\n      name: 'Arrow Left',\n      description: 'Moves focus and selection to the option to the left',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},96021:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"toggle-group",category:"Forms",title:"ToggleGroup",description:"Combines checkboxes to give multiple options for selection.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=24220%3A104321&t",pagination_prev:"web/ui/time-input",pagination_next:"web/ui/toggle-switch"},d=void 0,p={unversionedId:"web/ui/toggle-group",id:"web/ui/toggle-group",isDocsHomePage:!1,title:"ToggleGroup",description:"Combines checkboxes to give multiple options for selection.",source:"@site/docs/web/ui/ToggleGroup.md",sourceDirName:"web/ui",slug:"/web/ui/toggle-group",permalink:"/web/ui/toggle-group",tags:[],version:"current",frontMatter:{id:"toggle-group",category:"Forms",title:"ToggleGroup",description:"Combines checkboxes to give multiple options for selection.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=24220%3A104321&t",pagination_prev:"web/ui/time-input",pagination_next:"web/ui/toggle-switch"},sidebar:"docs",previous:{title:"TimeInput",permalink:"/web/ui/time-input"},next:{title:"ToggleSwitch",permalink:"/web/ui/toggle-switch"}},c=[{value:"Usage",id:"usage",children:[],level:2},{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Label and Subtext",id:"label-and-subtext",children:[],level:2},{value:"Error Message",id:"error-message",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Rounded",id:"rounded",children:[],level:2},{value:"Border Radius",id:"border-radius",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Display",id:"display",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ToggleGroup } from '@abyss/web/ui/ToggleGroup';\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},'{\n  component: \'ToggleGroup\',\n  inputs: [\n    {\n      prop: \'label\',\n      type: \'string\',\n    },\n    {\n      prop: \'errorMessage\',\n      type: \'string\',\n    },\n    {\n      prop: \'subText\',\n      type: \'string\',\n    },\n    {\n      prop: \'borderRadius\',\n      type: \'size\',\n    },\n    {\n      prop: \'display\',\n      type: \'select\',\n      defaultValue: \'row\',\n      options: [\n        { label: \'column\', value: \'column\' },\n        { label: \'row\', value: \'row\' },\n      ],\n    },\n    {\n      prop: \'hideLabel\',\n      type: \'boolean\',\n    },\n     {\n      prop: \'rounded\',\n      type: \'boolean\',\n    },\n  ]\n}\n\n() => {\n  const [value, setValue] = useState([\'sun\']);\n\n  console.log(\'value\', value);\n\n  return (\n    <ToggleGroup\n      label="ToggleGroup Sandbox"\n      onChange={(value) => setValue(value)}\n      value={value}\n      subText="This is subtext"\n    >\n      <ToggleGroup.Toggle label="Sun" value="sun" ariaLabel="Sunday"/>\n      <ToggleGroup.Toggle label="Mon" value="mon" ariaLabel="Monday"/>\n      <ToggleGroup.Toggle label="Tue" value="tue" ariaLabel="Tuesday"/>\n      <ToggleGroup.Toggle label="Wed" value="wed" ariaLabel="Wednesday"/>\n      <ToggleGroup.Toggle label="Thu" value="thu" ariaLabel="Thursday"/>\n      <ToggleGroup.Toggle label="Fri" value="fri" ariaLabel="Friday"/>\n      <ToggleGroup.Toggle label="Sat" value="sat" ariaLabel="Saturday"/>\n    </ToggleGroup>\n  );\n};\n')),(0,r.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      \'toggleGroup-form\': [\'home\'],\n    },\n  });\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <ToggleGroup\n        label="ToggleGroup useForm"\n        model="toggleGroup-form"\n        validators={{ required: true }}\n      >\n        <ToggleGroup.Toggle label="One" value="one" />\n        <ToggleGroup.Toggle\n          label={<IconMaterial icon="home" />}\n          value="home"\n          ariaLabel="home"\n        />\n        <ToggleGroup.Toggle label="Three" value="three" />\n        <ToggleGroup.Toggle label="Four" value="four" />\n      </ToggleGroup>\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState([\'one\']);\n\n  console.log(\'value\', value);\n\n  return (\n    <ToggleGroup\n      label="ToggleGroup useState"\n      onChange={(value) => setValue(value)}\n      value={value}\n    >\n      <ToggleGroup.Toggle label="One" value="one" />\n      <ToggleGroup.Toggle\n        label={<IconMaterial icon="home" />}\n        value="home"\n        ariaLabel="home"\n      />\n      <ToggleGroup.Toggle label="Three" value="three" />\n      <ToggleGroup.Toggle label="Four" value="four" />\n    </ToggleGroup>\n  );\n};\n')),(0,r.kt)("h2",{id:"label-and-subtext"},"Label and Subtext"),(0,r.kt)("p",null,"Label is required, but subtext is not. Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," prop to change the displayed label for the group. Pass ",(0,r.kt)("inlineCode",{parentName:"p"},"hideLabel")," to visibly hide label but retain accessibility. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the ",(0,r.kt)("inlineCode",{parentName:"p"},"Toggle Group"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <ToggleGroup\n        label="Label and Subtext"\n        subText="Subtext"\n        model="label-visible-1"\n      >\n        <ToggleGroup.Toggle label="One" value="one" />\n        <ToggleGroup.Toggle label="Two" value="two" />\n      </ToggleGroup>\n      <ToggleGroup label="Label only" model="label-visible-2">\n        <ToggleGroup.Toggle label="One" value="one" />\n        <ToggleGroup.Toggle label="Two" value="two" />\n      </ToggleGroup>\n      <ToggleGroup\n        label="Hidden Label"\n        hideLabel\n        subText="Subtext only"\n        model="label-hidden"\n      >\n        <ToggleGroup.Toggle label="One" value="one" />\n        <ToggleGroup.Toggle label="Two" value="two" />\n      </ToggleGroup>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"error-message"},"Error Message"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to display a custom error message below the toggle group."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\'\');\n\n  return (\n    <ToggleGroup\n      label="Error Message"\n      value={value}\n      onChange={(value) => setValue(value)}\n      errorMessage="Error Message"\n    >\n      <ToggleGroup.Toggle label="One" value="one" />\n      <ToggleGroup.Toggle label="Two" value="two" />\n      <ToggleGroup.Toggle label="Three" value="three" />\n    </ToggleGroup>\n  );\n};\n')),(0,r.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\'\');\n\n  return (\n    <ToggleGroup\n      value={value}\n      onChange={(value) => setValue(value)}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    >\n      <ToggleGroup.Toggle label="One" value="one" />\n      <ToggleGroup.Toggle label="Two" value="two" />\n      <ToggleGroup.Toggle label="Three" value="three" />\n    </ToggleGroup>\n  );\n};\n')),(0,r.kt)("h2",{id:"rounded"},"Rounded"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"rounded")," prop to change the style of the ToggleGroup from Rectangle to ",(0,r.kt)("inlineCode",{parentName:"p"},"rounded"),". The default is squared and set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\'\');\n\n  return (\n    <ToggleGroup\n      value={value}\n      onChange={(value) => setValue(value)}\n      label="Rounded Display"\n      rounded\n    >\n      <ToggleGroup.Toggle label="1" value="one" />\n      <ToggleGroup.Toggle\n        label={<IconMaterial icon="home" />}\n        value="home"\n        ariaLabel="home"\n      />\n      <ToggleGroup.Toggle label="2" value="two" />\n    </ToggleGroup>\n  );\n};\n')),(0,r.kt)("h2",{id:"border-radius"},"Border Radius"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"borderRadius")," prop to set to set the border radius of the container, as well as the selected toggle item. There are two preset values you can use, ",(0,r.kt)("inlineCode",{parentName:"p"},"$md"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"$lg"),", or you can input a custom value. The default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"$md"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [mediumGroupValue, setMediumGroupValue] = useState([\'one\']);\n  const [largeGroupValue, setLargeGroupValue] = useState([\'one\']);\n\n  return (\n    <React.Fragment>\n      <ToggleGroup\n        label="Medium Border Radius - Default"\n        onChange={(value) => setMediumGroupValue(value)}\n        value={mediumGroupValue}\n      >\n        <ToggleGroup.Toggle label="One" value="one" />\n        <ToggleGroup.Toggle label="Two" value="two" />\n        <ToggleGroup.Toggle label="Three" value="three" />\n      </ToggleGroup>\n\n      <ToggleGroup\n        label="Large Border Radius"\n        onChange={(value) => setLargeGroupValue(value)}\n        value={largeGroupValue}\n        borderRadius="$lg"\n      >\n        <ToggleGroup.Toggle label="One" value="one" />\n        <ToggleGroup.Toggle label="Two" value="two" />\n        <ToggleGroup.Toggle label="Three" value="three" />\n      </ToggleGroup>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"disabled"},"Disabled"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," to disable all toggle items in the group. Individual toggle items can be disabled by setting ",(0,r.kt)("inlineCode",{parentName:"p"},"isDisabled")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," in their respective ",(0,r.kt)("inlineCode",{parentName:"p"},"ToggleGroup.Toggle")," instead of the outer component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({});\n\n  return (\n    <FormProvider state={form}>\n      <ToggleGroup\n        isDisabled\n        label="All Items Disabled"\n        model="disabled"\n        display="row"\n      >\n        <ToggleGroup.Toggle value="Disabled 1" label="Disabled 1" />\n        <ToggleGroup.Toggle value="Disabled 2" label="Disabled 2" />\n        <ToggleGroup.Toggle value="Disabled 3" label="Disabled 3" />\n        <ToggleGroup.Toggle value="Disabled 4" label="Disabled 4" />\n      </ToggleGroup>\n\n      <ToggleGroup\n        label="Individual Items Disabled"\n        model="disabled2"\n        display="row"\n      >\n        <ToggleGroup.Toggle value="Disabled 1" label="Disabled 1" isDisabled />\n        <ToggleGroup.Toggle value="Enabled 1" label="Enabled 1" />\n        <ToggleGroup.Toggle value="Disabled 2" label="Disabled 2" isDisabled />\n        <ToggleGroup.Toggle value="Enabled 2" label="Enabled 2" />\n      </ToggleGroup>\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"display"},"Display"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"display")," prop to set the direction in which the toggle group appears. The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"'column'"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <ToggleGroup label="ToggleGroup Row" model="column">\n        <ToggleGroup.Toggle label="Column A" value="A" />\n        <ToggleGroup.Toggle label="Column B" value="B" />\n      </ToggleGroup>\n\n      <ToggleGroup label="ToggleGroup Column" model="row" display="column">\n        <ToggleGroup.Toggle label="Row A" value="Row A" />\n        <ToggleGroup.Toggle label="Row B" value="Row B" />\n      </ToggleGroup>\n    </FormProvider>\n  );\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ToggleGroup}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the ToggleGroup component',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Set the label of the ToggleGroup',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description: 'Value(s) selected',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Set the error message',\n    },\n    {\n      name: 'validators',\n      type: 'shape',\n      description: 'Rules for validation',\n    },\n    {\n      name: 'display',\n      type: \"'row' | 'column'\",\n      description: 'Set the direction in which the toggle group is displayed',\n    },\n    {\n      name: 'borderRadius',\n      type: 'number | string',\n      description:\n        \"Set the border radius of the container and the selected toggle item's background\",\n    },\n    {\n      name: 'borderRadiuses',\n      type: 'object',\n      description: 'Set border radius options',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'rounded',\n      type: 'boolean',\n      description: \"Change the toggle group's style from rectangle to rounded\",\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to disable all toggle items',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired when the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired when the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired when the component is unfocused',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Set the subtext of the ToggleGroup',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the ToggleGroup',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ToggleGroup.Toggle}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element the ToggleGroup.Toggle wraps',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to disable Toggle',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Set the label of Toggle',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description: 'Value of the Toggle',\n    },\n    {\n      name: 'ariaLabel',\n      type: 'string',\n      description: `'aria-label' for Toggle with abbreviated word or icon`,\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={ToggleGroup}\n  rows={[\n    {\n      name: 'toggle-group-root',\n      description: 'ToggleGroup root element',\n    },\n    {\n      name: 'toggle-group-label',\n      description: 'ToggleGroup label',\n    },\n    {\n      name: 'toggle-group-container',\n      description: 'ToggleGroup container',\n    },\n    {\n      name: 'toggle-group-descriptors',\n      description: 'ToggleGroup descriptors',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={ToggleGroup.Toggle}\n  rows={[\n    {\n      name: 'toggle-input-root',\n      description: 'Toggle input root',\n    },\n    {\n      name: 'toggle-input-checkbox',\n      description: 'Toggle input type',\n    },\n    {\n      name: 'toggle-input-label',\n      description: 'Toggle input label',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("p",null,"ToggleGroup at its core functions like a CheckBox Group."),(0,r.kt)("p",null,"A CheckBox group is a set of checkable checkboxes, where more than one of the checkboxes can be checked at a time. Some implementations may initialize the set with all checkboxes in the unchecked state in order to force the user to check one of the checkboxes before moving past a certain point in the workflow."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ariaLabel")," prop in ",(0,r.kt)("inlineCode",{parentName:"p"},"ToggleGroup.Toggle"),' when using abbreviated words or icons. This will include an "aria-label" for screen readers.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState([\'one\']);\n\n  return (\n    <ToggleGroup\n      label="Accessibility Practice"\n      onChange={(value) => setValue(value)}\n      value={value}\n      subText="Utilize the Keyboard Interaction table below to test the components accessibility."\n    >\n      <ToggleGroup.Toggle label="Sun" value="sun" ariaLabel="Sunday" />\n      <ToggleGroup.Toggle label="Mon" value="mon" ariaLabel="Monday" />\n      <ToggleGroup.Toggle label="Tue" value="tue" ariaLabel="Tuesday" />\n      <ToggleGroup.Toggle label="Wed" value="wed" ariaLabel="Wednesday" />\n      <ToggleGroup.Toggle label="Thu" value="thu" ariaLabel="Thursday" />\n      <ToggleGroup.Toggle label="Fri" value="fri" ariaLabel="Friday" />\n      <ToggleGroup.Toggle label="Sat" value="sat" ariaLabel="Saturday" />\n    </ToggleGroup>\n  );\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to first element and then next items in the group Tab sequence',\n    },\n    {\n      name: 'Space',\n      description: 'When focus is on an unchecked checkbox item, checks it.',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},53991:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a,o=t(7896),i=t(31461),r=(t(2784),t(3905)),l=["components"],s={id:"toggle-switch",category:"Forms",title:"ToggleSwitch",description:"Used to switch between on and off between 2 modes.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11906",pagination_prev:"web/ui/toggle-group",pagination_next:"web/ui/toggle-tabs"},d=void 0,p={unversionedId:"web/ui/toggle-switch",id:"web/ui/toggle-switch",isDocsHomePage:!1,title:"ToggleSwitch",description:"Used to switch between on and off between 2 modes.",source:"@site/docs/web/ui/ToggleSwitch.md",sourceDirName:"web/ui",slug:"/web/ui/toggle-switch",permalink:"/web/ui/toggle-switch",tags:[],version:"current",frontMatter:{id:"toggle-switch",category:"Forms",title:"ToggleSwitch",description:"Used to switch between on and off between 2 modes.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11906",pagination_prev:"web/ui/toggle-group",pagination_next:"web/ui/toggle-tabs"},sidebar:"docs",previous:{title:"ToggleGroup",permalink:"/web/ui/toggle-group"},next:{title:"ToggleTabs",permalink:"/web/ui/toggle-tabs"}},c=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Size",id:"size",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:c};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ToggleSwitch } from '@abyss/web/ui/ToggleSwitch';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'ToggleSwitch',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'size'\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean'\n    },\n  ]\n}\n\n() => {\n  const [isChecked, setChecked] = useState(true);\n\n  return (\n    <ToggleSwitch\n      label=\"Label\"\n      isChecked={isChecked}\n      onChange={e => setChecked(e.target.checked)}\n    />\n  );\n};\n")),(0,r.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <ToggleSwitch label="Form ToggleSwitch" model="accept-terms" />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"usestate"},"useState"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isChecked, setChecked] = useState(false);\n\n  return (\n    <ToggleSwitch\n      label="State ToggleSwitch"\n      isChecked={isChecked}\n      onChange={(e) => setChecked(e.target.checked)}\n    />\n  );\n};\n')),(0,r.kt)("h2",{id:"disabled"},"Disabled"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"isDisabled")," property to disable the ",(0,r.kt)("inlineCode",{parentName:"p"},"ToggleSwitch"),". The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <ToggleSwitch\n        isDisabled={true}\n        label="Disabled ToggleSwitch"\n        model="accept-terms"\n      />\n    </FormProvider>\n  );\n};\n')),(0,r.kt)("h2",{id:"size"},"Size"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," property to set the size of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ToggleSwitch"),". Can use predefined sizes or custom number to set size."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <ToggleSwitch label="Small" size="sm" model="size-sm" />\n      <ToggleSwitch label="Medium - Default" model="size-md" />\n      <ToggleSwitch label="Large" size="lg" model="size-lg" />\n      <ToggleSwitch label="Custom / 30px" size="30px" model="size-custom" />\n    </FormProvider>\n  );\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ToggleSwitch}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the toggle switch component',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired everytime the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    // {\n    //     name: 'text',\n    //     type: 'bool',\n    //     description: ' true | false',\n    //   },\n    {\n      name: 'borderRadius',\n      type: 'string',\n      description: 'Set the border radisu',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Label of the toggle switch',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'isChecked',\n      type: 'boolean',\n      description: 'Flag to turn toggle switch on or off',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the toggle switch. If true, the toggle switch will be disabled',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Height and width of the toggle switch',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description: 'The potential size options for the toggle switch',\n    },\n    // {\n    //   name: 'text',\n    //   type: 'boolean',\n    //   description: 'Set the text displayed in toggle switch',\n    // },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={ToggleSwitch}\n  rows={[\n    {\n      name: 'toggle-switch-root',\n      description: 'Toggle Switch root element',\n    },\n    {\n      name: 'toggle-switch-label',\n      description: 'Label',\n    },\n    {\n      name: 'toggle-switch-container',\n      description: 'Container',\n    },\n    // {\n    //   name: 'toggle-switch-text',\n    //   description: 'Text content',\n    // },\n    {\n      name: 'toggle-switch',\n      description: 'Toggle input',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0},50500:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"toggle-tabs",category:"Forms",title:"ToggleTabs",description:"Combines radio buttons and tabs to give multiple options as one element.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3697%3A25496",pagination_prev:"web/ui/toggle-switch",pagination_next:"web/ui/box"},s=void 0,d={unversionedId:"web/ui/toggle-tabs",id:"web/ui/toggle-tabs",isDocsHomePage:!1,title:"ToggleTabs",description:"Combines radio buttons and tabs to give multiple options as one element.",source:"@site/docs/web/ui/ToggleTabs.md",sourceDirName:"web/ui",slug:"/web/ui/toggle-tabs",permalink:"/web/ui/toggle-tabs",tags:[],version:"current",frontMatter:{id:"toggle-tabs",category:"Forms",title:"ToggleTabs",description:"Combines radio buttons and tabs to give multiple options as one element.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3697%3A25496",pagination_prev:"web/ui/toggle-switch",pagination_next:"web/ui/box"},sidebar:"docs",previous:{title:"ToggleSwitch",permalink:"/web/ui/toggle-switch"},next:{title:"Box",permalink:"/web/ui/box"}},p=[{value:"Usage",id:"usage",children:[],level:2},{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Label and Subtext",id:"label-and-subtext",children:[],level:2},{value:"Error Message",id:"error-message",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Border Radius",id:"border-radius",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Display",id:"display",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ToggleTabs } from '@abyss/web/ui/ToggleTabs';\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'ToggleTabs',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'string',\n    },\n    {\n      prop: 'errorMessage',\n      type: 'string',\n    },\n    {\n      prop: 'subText',\n      type: 'string',\n    },\n    {\n      prop: 'borderRadius',\n      type: 'string',\n    },\n    {\n      prop: 'display',\n      type: 'select',\n      options: [\n        { label: 'column', value: 'column' },\n        { label: 'row', value: 'row' },\n      ],\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n    {\n      prop: 'fullWidth',\n      type: 'boolean'\n    },\n  ]\n}\n\n() => {\n  const [toggleValue, setToggleValue] = useState('low-d');\n\n  console.log('toggleValue', toggleValue);\n\n  return (\n    <ToggleTabs\n      label=\"ToggleTabs Sandbox\"\n      onChange={(e) => setToggleValue(e.target.value)}\n      value={toggleValue}\n      subText=\"This is subtext\"\n    >\n      <ToggleTabs.Tab label=\"Low-Deductible\" value=\"low-d\" />\n      <ToggleTabs.Tab label=\"Bind\" value=\"bind\" />\n      <ToggleTabs.Tab label=\"Balanced\" value=\"bal\" />\n      <ToggleTabs.Tab label=\"Low-Premium\" value=\"low-p\" />\n      <ToggleTabs.Tab label=\"Full-Coverage\" value=\"full\" />\n      <ToggleTabs.Tab label=\"No Coverage\" value=\"none\" />\n    </ToggleTabs>\n  );\n};\n")),(0,i.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      \'toggle-form\': \'two\',\n    },\n  });\n  const onSubmit = (data) => {\n    console.log(\'submitted\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <ToggleTabs\n        label="ToggleTabs useForm"\n        model="toggle-form"\n        validators={{ required: true }}\n      >\n        <ToggleTabs.Tab label="One" value="one" />\n        <ToggleTabs.Tab\n          label={<IconMaterial icon="home" />}\n          value="two"\n          ariaLabel="home"\n        />\n        <ToggleTabs.Tab label="Three" value="three" />\n        <ToggleTabs.Tab label="Four" value="four" />\n      </ToggleTabs>\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"usestate"},"useState"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [toggleValue, setToggleValue] = useState(\'one\');\n\n  console.log(\'toggleValue\', toggleValue);\n\n  return (\n    <ToggleTabs\n      label="ToggleTabs useState"\n      onChange={(e) => setToggleValue(e.target.value)}\n      value={toggleValue}\n    >\n      <ToggleTabs.Tab label="One" value="one" />\n      <ToggleTabs.Tab\n        label={<IconMaterial icon="home" />}\n        value="two"\n        ariaLabel="home"\n      />\n      <ToggleTabs.Tab label="Three" value="three" />\n      <ToggleTabs.Tab label="Four" value="four" />\n    </ToggleTabs>\n  );\n};\n')),(0,i.kt)("h2",{id:"label-and-subtext"},"Label and Subtext"),(0,i.kt)("p",null,"Label is required, but subtext is not. Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," prop to change the displayed label for the group. Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"hideLabel")," to visibly hide label but retain accessibility. Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the tabs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <ToggleTabs\n        label="Label and Subtext"\n        subText="Subtext"\n        model="label-visible-1"\n      >\n        <ToggleTabs.Tab label="One" value="one" />\n        <ToggleTabs.Tab label="Two" value="two" />\n      </ToggleTabs>\n      <ToggleTabs label="Label only" model="label-visible-2">\n        <ToggleTabs.Tab label="One" value="one" />\n        <ToggleTabs.Tab label="Two" value="two" />\n      </ToggleTabs>\n      <ToggleTabs\n        label="Hidden Label"\n        hideLabel\n        subText="Subtext only"\n        model="label-hidden"\n      >\n        <ToggleTabs.Tab label="One" value="one" />\n        <ToggleTabs.Tab label="Two" value="two" />\n      </ToggleTabs>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"error-message"},"Error Message"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to display a custom error message below the tabs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [toggleValue, setToggleValue] = useState(\'\');\n\n  return (\n    <ToggleTabs\n      label="Error Message"\n      value={toggleValue}\n      onChange={(e) => setToggleValue(e.target.value)}\n      errorMessage="Error Message"\n    >\n      <ToggleTabs.Tab label="One" value="one" />\n      <ToggleTabs.Tab label="Two" value="two" />\n      <ToggleTabs.Tab label="Three" value="three" />\n    </ToggleTabs>\n  );\n};\n')),(0,i.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [toggleValue, setToggleValue] = useState(\'\');\n\n  return (\n    <ToggleTabs\n      value={toggleValue}\n      onChange={(e) => setToggleValue(e.target.value)}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    >\n      <ToggleTabs.Tab label="One" value="one" />\n      <ToggleTabs.Tab label="Two" value="two" />\n      <ToggleTabs.Tab label="Three" value="three" />\n    </ToggleTabs>\n  );\n};\n')),(0,i.kt)("h2",{id:"border-radius"},"Border Radius"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"borderRadius")," prop to set to set the border radius of the container, as well as the selected tab. There are three preset values you can use, ",(0,i.kt)("inlineCode",{parentName:"p"},"$sm"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"$md"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"$lg"),", or you can input a custom value. The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"$md"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [toggleValue1, setToggleValue1] = useState(\'one\');\n  const [toggleValue2, setToggleValue2] = useState(\'one\');\n  const [toggleValue3, setToggleValue3] = useState(\'one\');\n\n  return (\n    <React.Fragment>\n      <ToggleTabs\n        label="Small Border Radius"\n        onChange={(e) => setToggleValue1(e.target.value)}\n        value={toggleValue1}\n        borderRadius="$sm"\n      >\n        <ToggleTabs.Tab label="One" value="one" />\n        <ToggleTabs.Tab label="Tab Number Two" value="two" />\n        <ToggleTabs.Tab label="Three" value="three" />\n      </ToggleTabs>\n      <ToggleTabs\n        label="Medium Border Radius - Default"\n        onChange={(e) => setToggleValue2(e.target.value)}\n        value={toggleValue2}\n      >\n        <ToggleTabs.Tab label="One" value="one" />\n        <ToggleTabs.Tab label="Tab Number Two" value="two" />\n        <ToggleTabs.Tab label="Three" value="three" />\n      </ToggleTabs>\n      <ToggleTabs\n        label="Large Border Radius"\n        onChange={(e) => setToggleValue3(e.target.value)}\n        value={toggleValue3}\n        borderRadius="$lg"\n      >\n        <ToggleTabs.Tab label="One" value="one" />\n        <ToggleTabs.Tab label="Tab Number Two" value="two" />\n        <ToggleTabs.Tab label="Three" value="three" />\n      </ToggleTabs>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"disabled"},"Disabled"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to disable all tabs in the group. Individual tabs can be disabled by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," in their respective ",(0,i.kt)("inlineCode",{parentName:"p"},"ToggleTabs.Tab")," instead of the outer component."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({});\n\n  return (\n    <FormProvider state={form}>\n      <ToggleTabs isDisabled label="All Tabs Disabled" model="disabled">\n        <ToggleTabs.Tab value="dogs" label="Disabled 1" />\n        <ToggleTabs.Tab value="cats" label="Disabled 2" />\n        <ToggleTabs.Tab value="cats1" label="Disabled 3" />\n        <ToggleTabs.Tab value="cats2" label="Disabled 4" />\n      </ToggleTabs>\n\n      <ToggleTabs label="Individual Tabs Disabled" model="disabled2">\n        <ToggleTabs.Tab value="dogs" label="Disabled 1" isDisabled />\n        <ToggleTabs.Tab value="cats" label="Enabled 1" />\n        <ToggleTabs.Tab value="cats1" label="Disabled 2" isDisabled />\n        <ToggleTabs.Tab value="cats2" label="Enabled 2" />\n      </ToggleTabs>\n    </FormProvider>\n  );\n};\n')),(0,i.kt)("h2",{id:"display"},"Display"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"display")," prop to set the direction in which the tabs appear. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"'row'"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <ToggleTabs label="ToggleTabs Column" model="column" display="column">\n        <ToggleTabs.Tab label="Column A" value="A" />\n        <ToggleTabs.Tab label="Column B" value="B" />\n      </ToggleTabs>\n      <ToggleTabs label="ToggleTabs Row" model="row">\n        <ToggleTabs.Tab label="Row A" value="A" />\n        <ToggleTabs.Tab label="Row B" value="B" />\n      </ToggleTabs>\n    </FormProvider>\n  );\n};\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ToggleTabs}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the ToggleTabs component',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Set the label of the ToggleTabs',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description: 'Value that is selected',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Set the error message',\n    },\n    {\n      name: 'validators',\n      type: 'shape',\n      description: 'Rules for validation',\n    },\n    {\n      name: 'display',\n      type: \"'row' | 'column'\",\n      description: 'Set the direction in which the tabs are displayed',\n    },\n    {\n      name: 'borderRadius',\n      type: 'number | string',\n      description:\n        \"Set the border radius of the container and the selected tab's background\",\n    },\n    {\n      name: 'borderRadiuses',\n      type: 'object',\n      description: 'Set border radius options',\n    },\n    {\n      name: 'fullWidth',\n      type: 'boolean',\n      description:\n        'Flag to make the tabs take up the full width of the container',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to hide label',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to disable all tabs',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired when the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired when the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired when the component is unfocused',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Set the subtext of the ToggleTabs',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below the ToggleTabs',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ToggleTabs.Tab}\n  rows={[\n    {\n      name: 'checked',\n      type: 'boolean',\n      description: 'Flag to see if tab is checked',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element the tab wraps',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description: 'Flag to see if tab is disabled',\n    },\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Set the label of tab',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description: 'Value of the tab',\n    },\n    {\n      name: 'ariaLabel',\n      type: 'string',\n      description: `'aria-label' for Tab with abbreviated word or icons`,\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={ToggleTabs}\n  rows={[\n    {\n      name: 'toggle-tabs-root',\n      description: 'ToggleTabs root element',\n    },\n    {\n      name: 'toggle-tabs-label',\n      description: 'ToggleTabs label',\n    },\n    {\n      name: 'toggle-tabs-container',\n      description: 'ToggleTabs container',\n    },\n    {\n      name: 'toggle-tabs-selected-background',\n      description: 'Background that appears on the selected tab',\n    },\n    {\n      name: 'toggle-tabs-descriptors',\n      description: 'ToggleTabs descriptors',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={ToggleTabs.Tab}\n  rows={[\n    {\n      name: 'tab-root',\n      description: 'Tab Root',\n    },\n    {\n      name: 'tab',\n      description: 'Tab',\n    },\n    {\n      name: 'tab-label',\n      description: 'Tab Label',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"ToggleTabs at its core functions like a Radio Group."),(0,i.kt)("p",null,"A radio group is a set of checkable buttons, known as radio buttons, where no more than one of the buttons can be checked at a time. Some implementations may initialize the set with all buttons in the unchecked state in order to force the user to check one of the buttons before moving past a certain point in the workflow."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ariaLabel")," prop in ",(0,i.kt)("inlineCode",{parentName:"p"},"ToggleTabs.Tab"),' when using abbreviated words or icons. This will include an "aria-label" for screen readers.'),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#toggletabs",mdxType:"ExitLink"}," WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [toggleValue, setToggleValue] = useState(\'one\');\n\n  return (\n    <ToggleTabs\n      label="Accessibility Practice"\n      onChange={(e) => setToggleValue(e.target.value)}\n      value={toggleValue}\n      subText="Utilize the Keyboard Interaction table below to test the components accessibility."\n    >\n      <ToggleTabs.Tab label="One" value="one" />\n      <ToggleTabs.Tab label="Two" value="two" />\n      <ToggleTabs.Tab label="Three" value="three" />\n      <ToggleTabs.Tab label="Four" value="four" />\n    </ToggleTabs>\n  );\n};\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to either the checked radio item or the first radio item in the group.',\n    },\n    {\n      name: 'Space',\n      description: 'When focus is on an unchecked radio item, checks it.',\n    },\n    {\n      name: 'Enter',\n      description: 'When focus is on an unchecked radio item, checks it.',\n    },\n    {\n      name: 'Arrow Down',\n      description: 'Moves focus to the next radio item in the group.',\n    },\n    {\n      name: 'Arrow Right',\n      description: 'Moves focus to the next radio item in the group.',\n    },\n    {\n      name: 'Arrow Up',\n      description: 'Moves focus to the previous radio item in the group.',\n    },\n    {\n      name: 'Arrow Left',\n      description: 'Moves focus to the previous radio item in the group.',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},56556:(e,n,t)=>{"use strict";t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=t(7896),o=t(31461),i=(t(2784),t(3905)),r=["components"],l={id:"tooltip",category:"Overlay",title:"Tooltip",description:"A contextual text bubble that displays a description for an element that appears on pointer hover or keyboard focus.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=12502%3A49489",pagination_prev:"web/ui/popover",pagination_next:"web/ui/collapse-provider"},s=void 0,d={unversionedId:"web/ui/tooltip",id:"web/ui/tooltip",isDocsHomePage:!1,title:"Tooltip",description:"A contextual text bubble that displays a description for an element that appears on pointer hover or keyboard focus.",source:"@site/docs/web/ui/Tooltip.md",sourceDirName:"web/ui",slug:"/web/ui/tooltip",permalink:"/web/ui/tooltip",tags:[],version:"current",frontMatter:{id:"tooltip",category:"Overlay",title:"Tooltip",description:"A contextual text bubble that displays a description for an element that appears on pointer hover or keyboard focus.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=12502%3A49489",pagination_prev:"web/ui/popover",pagination_next:"web/ui/collapse-provider"},sidebar:"docs",previous:{title:"Popover",permalink:"/web/ui/popover"},next:{title:"CollapseProvider",permalink:"/web/ui/collapse-provider"}},p=[{value:"Content",id:"content",children:[],level:2},{value:"asChild",id:"aschild",children:[],level:2},{value:"Position",id:"position",children:[],level:2},{value:"Position Offset",id:"position-offset",children:[],level:2},{value:"Align",id:"align",children:[],level:2},{value:"Delay Duration",id:"delay-duration",children:[],level:2},{value:"Show/Hide Arrow",id:"showhide-arrow",children:[],level:2},{value:"When should I use a tooltip vs a popover?",id:"when-should-i-use-a-tooltip-vs-a-popover",children:[{value:"Purpose of Content",id:"purpose-of-content",children:[],level:3},{value:"Size of Content",id:"size-of-content",children:[],level:3},{value:"Interactions",id:"interactions",children:[],level:3},{value:"Conclusion",id:"conclusion",children:[],level:3}],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},u=c("Tab"),m=c("ExitLink"),g={toc:p};function h(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Tooltip } from '@abyss/web/ui/Tooltip';\n")),(0,i.kt)("br",null),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Tooltip',\n  inputs: [\n    {\n      prop: 'content',\n      type: 'string',\n      defaultValue: 'When should I use a tooltip vs a popover?',\n    },\n    {\n      prop: 'children',\n      type: 'node',\n    },\n    {\n      prop: 'position',\n      type: 'select',\n      options: [\n        { label: 'top', value: 'top' },\n        { label: 'bottom', value: 'bottom' },\n        { label: 'left', value: 'left' },\n        { label: 'right', value: 'right' },\n      ],\n    },\n    {\n      prop: 'positionOffset',\n      type: 'number',\n    },\n    {\n      prop: 'align',\n      type: 'select',\n      options: [\n        { label: 'start', value: 'start' },\n        { label: 'center', value: 'center' },\n        { label: 'end', value: 'end' },\n      ],\n    },\n    {\n      prop: 'delayDuration',\n      type: 'number'\n    },\n    {\n      prop: 'hideArrow',\n      type: 'boolean',\n    },\n    {\n      prop: 'asChild',\n      type: 'boolean',\n    },\n  ],\n}\n\n<Tooltip>\n  <Button aria-label=\"Tooltip information\" rounded>\n    <IconMaterial icon=\"question_mark\" color=\"$white\" />\n  </Button>\n</Tooltip>\n\n")),(0,i.kt)("h2",{id:"content"},"Content"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"content")," prop to insert a text description that appears on pointer hover or keyboard focus."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group grow>\n  <Tooltip content="Use this button to save information in your profile, after that you will be able to access it any time and share it via email.">\n    <Button>Save to profile</Button>\n  </Tooltip>\n  <Tooltip content="Click to view more options">\n    <Button aria-label="More options" rounded>\n      <IconMaterial icon="more_vert" color="$primary2" />\n    </Button>\n  </Tooltip>\n  <Tooltip content="Customize user settings">\n    <Button after={<IconMaterial icon="settings" color="$primary2" />}>\n      Settings\n    </Button>\n  </Tooltip>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"aschild"},"asChild"),(0,i.kt)("p",null,"Using ",(0,i.kt)("inlineCode",{parentName:"p"},"asChild")," prop will merge the original component props with the props of the supplied element/component and change the underlying DOM node. The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". Set ",(0,i.kt)("inlineCode",{parentName:"p"},"asChild")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," to render tooltip on static elements."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group grow>\n  <Tooltip content="Tooltip on dynamic element.">\n    <Button>Hover me!</Button>\n  </Tooltip>\n  <Tooltip content="Tooltip on static element." asChild={false}>\n    Hover me!\n  </Tooltip>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"position"},"Position"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"position")," prop to change the position of the tooltip. Options include ",(0,i.kt)("inlineCode",{parentName:"p"},"'left'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'right'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'top'"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"'bottom'"),". The default position is ",(0,i.kt)("inlineCode",{parentName:"p"},"'bottom'"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group grow>\n  <Tooltip content="Bottom" position="bottom">\n    <Button aria-label="Keyboard arrow down" rounded>\n      <IconMaterial icon="keyboard_arrow_down" color="$primary2" />\n    </Button>\n  </Tooltip>\n  <Tooltip content="Left" position="left">\n    <Button aria-label="Keyboard arrow left" rounded>\n      <IconMaterial icon="keyboard_arrow_left" color="$primary2" />\n    </Button>\n  </Tooltip>\n  <Tooltip content="Top" position="top">\n    <Button aria-label="Keyboard arrow up" rounded>\n      <IconMaterial icon="keyboard_arrow_up" color="$primary2" />\n    </Button>\n  </Tooltip>\n  <Tooltip content="Right" position="right">\n    <Button aria-label="Keyboard arrow right" rounded>\n      <IconMaterial icon="keyboard_arrow_right" color="$primary2" />\n    </Button>\n  </Tooltip>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"position-offset"},"Position Offset"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"positionOffset")," prop to change the offset position of the popover. The default value is ",(0,i.kt)("inlineCode",{parentName:"p"},"4"),". Maximum ",(0,i.kt)("inlineCode",{parentName:"p"},"positionOffset")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"16"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group grow>\n  <Tooltip content="Offset: 4" positionOffset={4}>\n    <Button>Offset: 4</Button>\n  </Tooltip>\n  <Tooltip content="Offset: 8" positionOffset={8}>\n    <Button>Offset: 8</Button>\n  </Tooltip>\n  <Tooltip content="Offset: 16" positionOffset={16}>\n    <Button>Offset: 16</Button>\n  </Tooltip>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"align"},"Align"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"align")," prop to set the side of the anchor to render against when open. Options include ",(0,i.kt)("inlineCode",{parentName:"p"},"'start'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'center'"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"'end'"),". The default alignment is ",(0,i.kt)("inlineCode",{parentName:"p"},"center"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group grow>\n  <Tooltip content="Align: Start" align="start">\n    <Button>Start</Button>\n  </Tooltip>\n  <Tooltip content="Align: Center" align="center">\n    <Button>Center</Button>\n  </Tooltip>\n  <Tooltip content="Align: End" align="end">\n    <Button>End</Button>\n  </Tooltip>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"delay-duration"},"Delay Duration"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"delayDuration")," prop to control the time it takes for the tooltip to open. The default is ",(0,i.kt)("inlineCode",{parentName:"p"},"300")," milliseconds. Setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"delayDuration")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," will render tooltip instantly. Maximum ",(0,i.kt)("inlineCode",{parentName:"p"},"delayDuration")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"700")," milliseconds."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group grow>\n  <Tooltip content="Delay: 0" delayDuration={0}>\n    <Button aria-label="Tooltip deplay 0ms" rounded>\n      <IconMaterial icon="timer" color="$primary2" />\n    </Button>\n  </Tooltip>\n  <Tooltip content="Delay: 300" delayDuration={300}>\n    <Button aria-label="Tooltip deplay 300ms" rounded>\n      <IconMaterial icon="timer" color="$primary2" />\n    </Button>\n  </Tooltip>\n  <Tooltip content="Delay: 700" delayDuration={700}>\n    <Button aria-label="Tooltip deplay 700ms" rounded>\n      <IconMaterial icon="timer" color="$primary2" />\n    </Button>\n  </Tooltip>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"showhide-arrow"},"Show/Hide Arrow"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"hideArrow")," prop to hide an arrow element rendered alongside the tooltip. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". This can be used to help visually link the tooltip with the the content."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group grow>\n  <Tooltip content="Hide Arrow" hideArrow positionOffset={8}>\n    <Button>Hide Arrow</Button>\n  </Tooltip>\n  <Tooltip content="Show Arrow">\n    <Button>Show Arrow</Button>\n  </Tooltip>\n</Layout.Group>\n')),(0,i.kt)("h2",{id:"when-should-i-use-a-tooltip-vs-a-popover"},"When should I use a tooltip vs a popover?"),(0,i.kt)("p",null,"Glad you asked! There are several considerations when deciding between a ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltip")," or a ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popover"),":"),(0,i.kt)("h3",{id:"purpose-of-content"},"Purpose of Content"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltip")," is a hint or a tip about what an interactive element does. ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltips")," are meant to help clarify or provide supplementary instruction for an element on hover or upon receiving focus. They should not be used to add additional content nor include interactive elements such as links. ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltips")," should not receive mouse or keyboard focus.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popover")," should be used to provide additional content to static text, such as definitions of words, informational blurbs, or additional product details. They can receive focus and can contain links and other interactive elements."))),(0,i.kt)("h3",{id:"size-of-content"},"Size of Content"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Since ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltips"),' are only meant to tell the purpose of an element they should be short and to the point, for example: "Click X to do X" or "User post count".')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popovers"),", on the other hand, can be much more verbose, they can include a heading,\xa0lines of text in the body, links, etc."))),(0,i.kt)("h3",{id:"interactions"},"Interactions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltips")," should only be visible on mouse hover or upon receiving focus.\xa0For this\xa0reason, if you need to be able to read the content while interacting with other parts of the page then a ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltip"),' will not work. They should be dismissible using the "escape" key. They should be used on interactive elements where a mouse click or keyboard activation would otherwise trigger the elements primary function.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popovers")," must be triggered to appear, whether via mouse click or via keyboard navigation. They must be dismissible, whether by clicking on other parts of the page, clicking the ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popover")," target, or a specific close button/icon (depending on implementation). For this reason,\xa0you can set up a ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popover")," to allow you to interact with other elements on the page while still being able to read its\xa0content. On top of this, since ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popovers")," will remain open when mousing out of their target, you can add additional buttons or interactions within them."))),(0,i.kt)("h3",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"If you want to give a short hint\xa0or supplemental instructions for an interactive element (such as a submit button), use a ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltip"),"."),(0,i.kt)("p",null,"If you want to add additional content to a static element that might include headings, body text, links, etc, and you need the content to remain open even after mousing away or the element losing focus, then use a ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popover"),"."),(0,i.kt)("p",null,"It should be noted that any vital information users need to complete an action or make a decision should be displayed directly in the page text or button label, rather than a ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltip")," or a ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popover"),".\xa0Critical information hidden in a ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/tooltip"},"Tooltip")," or a ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/popover"},"Popover")," might not be discovered by all users and could create accessibility issues.")),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Tooltip}\n  rows={[\n    {\n      name: 'content',\n      type: 'string',\n      description:\n        'Conceptual text that appears on pointer hover or keyboard focus.',\n    },\n    {\n      name: 'position',\n      type: '\"top\" | \"bottom\" | \"left\" | \"right\" ',\n      description: 'Sets the position of the tooltip from the trigger',\n    },\n    {\n      name: 'positionOffset',\n      type: 'number',\n      description: 'Sets the distance in pixels from the trigger',\n    },\n    {\n      name: 'align',\n      type: '\"start\" | \"center\" | \"end\"',\n      description: 'Sets the alignment against the trigger',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The children element of the tooltip',\n    },\n    {\n      name: 'asChild',\n      type: 'boolean',\n      description:\n        'Sets the component to the HTML tag or custom component of the only child.',\n    },\n    {\n      name: 'delayDuration',\n      type: 'number',\n      description: 'Sets the time it takes for tooltip to open',\n    },\n    {\n      name: 'hideArrow',\n      type: 'boolean',\n      description: 'Flag to show/hide arrow rendered alongside tooltip',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Tooltip}\n  rows={[\n    {\n      name: 'tooltip-root',\n      description: 'Tooltip root element',\n    },\n    {\n      name: 'tooltip-trigger',\n      description: 'Tooltip trigger element',\n    },\n    {\n      name: 'tooltip-content',\n      description: 'Tooltip content element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"Tooltips provide contextual information about an element when that owning element receives focus or is hovered over, but is otherwise not visible on the page. While a tooltip can be placed on any content, they generally are tips for tools or controls, such as providing additional content for icons that have brief labels (or no labels at all, which is not accessible!). Instead of using tooltips and hiding important information, consider writing clear, succinct, always visible descriptions. If you have space, don't use tooltips. Just provide clear labels and sufficient body text. Please visit this ",(0,i.kt)(m,{href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/tooltip_role",mdxType:"ExitLink"},"link")," to read more on accessibility."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Tooltip content="Contact Us">\n    <Button aria-label="Contact Us" rounded>\n      <IconMaterial icon="speaker_notes" color="$primary2" />\n    </Button>\n  </Tooltip>\n</Layout.Group>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description: 'Opens/closes the tooltip without delay.',\n    },\n    {\n      name: 'Escape',\n      description: 'If open, closes the tooltip without delay.',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},85945:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const a=t.p+"assets/images/abyss_admirals_flowchart-3e3dcc69848be816deff3ec249d922f8.png"},1202:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const a=t.p+"assets/images/assets_panel-ec466033c4f983a467b13c776f3487e4.jpg"},41025:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const a=t.p+"assets/images/figma_dashboard-ee1c1241cc876453c54774d22dfb1d93.png"},95527:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const a=t.p+"assets/images/google_chrome-6ad8a92f732e9e843b52eb037b486b44.png"},83153:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const a=t.p+"assets/images/workspace-8fd2b027dca89a9ffced9188727f671b.svg"},51631:(e,n,t)=>{var a={"./design-checklist.md":72787,"./design-kit.md":62738};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}o.keys=function(){return Object.keys(a)},o.resolve=i,e.exports=o,o.id=51631},38662:(e,n,t)=>{var a={"./abyss-admirals.md":85672,"./abyss-contributors.md":83169,"./accessibility-testing.md":96535,"./component-testing.md":65790,"./documentation-guide.md":43174,"./environments.md":67041,"./getting-started.md":28645,"./style-customization.md":34642,"./versioning-guide.md":2080,"./workspace-setup.md":67157};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}o.keys=function(){return Object.keys(a)},o.resolve=i,e.exports=o,o.id=38662},26566:(e,n,t)=>{var a={"./Brandmark.md":99550,"./IconBrand.md":49355,"./colors.md":97519,"./typography.md":11635};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}o.keys=function(){return Object.keys(a)},o.resolve=i,e.exports=o,o.id=26566},74275:(e,n,t)=>{var a={"./Brandmark.md":26114,"./IconBrand.md":10601,"./colors.md":17454,"./typography.md":21549};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}o.keys=function(){return Object.keys(a)},o.resolve=i,e.exports=o,o.id=74275},87100:(e,n,t)=>{var a={"./Brandmark.md":66275,"./IconBrand.md":13277,"./colors.md":97884,"./typography.md":65405};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}o.keys=function(){return Object.keys(a)},o.resolve=i,e.exports=o,o.id=87100},79406:(e,n,t)=>{var a={"./about.md":66693,"./accessibility.md":62838,"./contact-us.md":2027,"./overview.md":52483,"./product-resources.md":67802,"./releases.md":55319};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}o.keys=function(){return Object.keys(a)},o.resolve=i,e.exports=o,o.id=79406},42472:(e,n,t)=>{var a={"./useCollapse.md":91772,"./useCountdown.md":30446,"./useForm.md":91106,"./useFormFieldArray.md":84645,"./useMediaQuery.md":18818,"./useOverlay.md":19214,"./usePagination.md":94747,"./usePrint.md":78599,"./useVisuallyHidden.md":5643};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}o.keys=function(){return Object.keys(a)},o.resolve=i,e.exports=o,o.id=42472},64090:(e,n,t)=>{var a={"./Accordion.md":70384,"./ActionNav.md":87323,"./Alert.md":86612,"./Badge.md":58074,"./Box.md":59660,"./Breadcrumbs.md":75116,"./Button.md":41123,"./Card.md":88151,"./Carousel.md":6048,"./Checkbox.md":88363,"./CheckboxGroup.md":32522,"./CheckboxTree.md":2582,"./Chip.md":99689,"./CodeHighlighter.md":28878,"./CollapseProvider.md":88614,"./ContentEditor.md":93413,"./DataTable.md":93093,"./DateInput.md":99905,"./DateInputRange.md":76363,"./Divider.md":11762,"./DragAndDrop.md":19464,"./Drawer.md":44705,"./DropdownMenu.md":90802,"./FileUpload.md":76164,"./Flex.md":10138,"./FloatingSection.md":26987,"./FormProvider.md":68597,"./Fullscreen.md":27216,"./Grid.md":30727,"./Heading.md":57713,"./Icon.md":53711,"./IconMaterial.md":67815,"./Indicator.md":73610,"./Label.md":42785,"./LagoonProvider.md":93299,"./Layout.md":5091,"./Link.md":18452,"./LoadingOverlay.md":93822,"./LoadingSpinner.md":41082,"./MediaQuery.md":51976,"./Modal.md":71850,"./NavMenu.md":89829,"./OverlayProvider.md":78217,"./PageBody.md":86245,"./PageBodyIntro.md":46587,"./PageFooter.md":38898,"./PageHeader.md":40462,"./Pagination.md":825,"./Popover.md":28184,"./PrintProvider.md":24204,"./ProgressBar.md":67876,"./RadioGroup.md":13149,"./Router.md":7781,"./RouterProvider.md":68113,"./SearchInput.md":33193,"./SearchResults.md":90519,"./SelectInput.md":2450,"./SelectInputMulti.md":17082,"./ServiceSandbox.md":43775,"./Slider.md":4075,"./StatusIndicator.md":37623,"./StepIndicator.md":74538,"./SubNavigationMenu.md":59704,"./Table.md":13061,"./Tabs.md":18914,"./Text.md":5364,"./TextInput.md":89894,"./TextInputArea.md":57369,"./ThemeProvider.md":79324,"./TimeInput.md":49835,"./ToggleGroup.md":96021,"./ToggleSwitch.md":53991,"./ToggleTabs.md":50500,"./Tooltip.md":56556};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}o.keys=function(){return Object.keys(a)},o.resolve=i,e.exports=o,o.id=64090},4147:e=>{"use strict";e.exports={i8:"1.20.0"}}}]);