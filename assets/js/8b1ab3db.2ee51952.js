"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[4145],{30876:(n,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>m});var o=t(67294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,o,a=function(n,e){if(null==n)return{};var t,o,a={},i=Object.keys(n);for(o=0;o<i.length;o++)t=i[o],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(o=0;o<i.length;o++)t=i[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var c=o.createContext({}),d=function(n){var e=o.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):r(r({},e),n)),t},l=function(n){var e=d(n.components);return o.createElement(c.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},p=o.forwardRef((function(n,e){var t=n.components,a=n.mdxType,i=n.originalType,c=n.parentName,l=s(n,["components","mdxType","originalType","parentName"]),p=d(t),m=a,b=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return t?o.createElement(b,r(r({ref:e},l),{},{components:t})):o.createElement(b,r({ref:e},l))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=t.length,r=new Array(i);r[0]=p;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=n,s.mdxType="string"==typeof n?n:a,r[1]=s;for(var d=2;d<i;d++)r[d]=t[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},19464:(n,e,t)=>{t.r(e),t.d(e,{contentTitle:()=>c,default:()=>g,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var o=t(7896),a=t(31461),i=(t(67294),t(30876)),r=["components"],s={id:"drag-and-drop",category:"Content",title:"DragAndDrop",description:"Used to create a dynamic set of data that can easily be moved by the user.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=6830%3A24990",pagination_prev:"web/ui/carousel",pagination_next:"web/ui/dropdown-menu"},c=void 0,d={unversionedId:"web/ui/drag-and-drop",id:"web/ui/drag-and-drop",isDocsHomePage:!1,title:"DragAndDrop",description:"Used to create a dynamic set of data that can easily be moved by the user.",source:"@site/docs/web/ui/DragAndDrop.md",sourceDirName:"web/ui",slug:"/web/ui/drag-and-drop",permalink:"/web/ui/drag-and-drop",tags:[],version:"current",frontMatter:{id:"drag-and-drop",category:"Content",title:"DragAndDrop",description:"Used to create a dynamic set of data that can easily be moved by the user.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=6830%3A24990",pagination_prev:"web/ui/carousel",pagination_next:"web/ui/dropdown-menu"},sidebar:"docs",previous:{title:"Carousel",permalink:"/web/ui/carousel"},next:{title:"DropdownMenu",permalink:"/web/ui/dropdown-menu"}},l=[{value:"Drag and Drop",id:"drag-and-drop",children:[],level:2},{value:"Actions",id:"actions",children:[],level:2},{value:"Hiding Actions",id:"hiding-actions",children:[],level:2},{value:"Disabling Drag",id:"disabling-drag",children:[],level:2},{value:"Disable Accordion",id:"disable-accordion",children:[],level:2},{value:"onSave / onCancel",id:"onsave--oncancel",children:[],level:2},{value:"onDragEnd",id:"ondragend",children:[],level:2},{value:"Responders",id:"responders",children:[],level:2}],u=function(n){return function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}},p=u("Tab"),m=u("ExitLink"),b={toc:l};function g(n){var e=n.components,t=(0,a.Z)(n,r);return(0,i.kt)("wrapper",(0,o.Z)({},b,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)(p,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { DragAndDrop } from '@abyss/web/ui/DragAndDrop';\n")),(0,i.kt)("h2",{id:"drag-and-drop"},"Drag and Drop"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," prop must be unique for each item.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"columnContent")," prop sets the content for a column")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"columnItems")," prop set the array of items for a column.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"isVisible")," prop set the default icon's visibility.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Note: Please cache content preferences at the API level."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  state = [\n    {\n      id: 'col1',\n      columnContent: 'Section 1',\n      isVisible: true,\n      columnItems: [\n        {\n          id: 'task1',\n          content: 'content 1',\n          isVisible: true,\n        },\n        { id: 'task2', content: 'content 2', isVisible: true },\n        { id: 'task3', content: 'content 3', isVisible: true },\n        { id: 'task4', content: 'content 4', isVisible: true },\n      ],\n    },\n\n    {\n      id: 'col2',\n      columnContent: 'Section 2',\n      isVisible: true,\n      columnItems: [\n        { id: 'task5', content: 'content 5', isVisible: true },\n        { id: 'task6', content: 'content 6', isVisible: true },\n        { id: 'task7', content: 'content 7', isVisible: true },\n        {\n          id: 'task8',\n          content: 'content 8',\n          isVisible: true,\n        },\n      ],\n    },\n    {\n      id: 'col3',\n      columnContent: 'Section 3',\n      isVisible: true,\n      columnItems: [\n        { id: 'task9', content: 'content 9', isVisible: true },\n        { id: 'task10', content: 'content 10', isVisible: true },\n      ],\n    },\n  ];\n\n  const [data, setData] = useState(state);\n\n  return <DragAndDrop data={data} setData={setData} />;\n};\n")),(0,i.kt)("h2",{id:"actions"},"Actions"),(0,i.kt)("p",null,"Actions can be passed in the column or row levels of drag and drop using the ",(0,i.kt)("inlineCode",{parentName:"p"},"action")," prop. Within the ",(0,i.kt)("inlineCode",{parentName:"p"},"action")," prop an icon can be set using the ",(0,i.kt)("inlineCode",{parentName:"p"},"icon")," prop and a method for the icon can be set using the ",(0,i.kt)("inlineCode",{parentName:"p"},"method")," prop."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  state = [\n    {\n      id: \'col1\',\n      columnContent: \'Section 1\',\n      isVisible: true,\n      action: {\n        icon: (\n          <IconMaterial\n            icon={\'info\'}\n            size="18px"\n            color="$gray6"\n            variant="outlined"\n          />\n        ),\n        method: (column) => {\n          console.log(\'column clicked: \', column);\n        },\n      },\n      columnItems: [\n        {\n          id: \'task1\',\n          content: \'content 1\',\n          isVisible: true,\n          action: {\n            icon: (\n              <IconMaterial\n                icon="info"\n                size="18px"\n                color="$gray6"\n                variant="outlined"\n              />\n            ),\n            method: (row, column) => {\n              console.log(\'row clicked: \', row, column);\n            },\n          },\n        },\n        {\n          id: \'task2\',\n          content: \'content 2\',\n          isVisible: true,\n          action: {\n            icon: (\n              <IconMaterial\n                icon="info"\n                size="18px"\n                color="$gray6"\n                variant="outlined"\n              />\n            ),\n            method: (row, column) => {\n              console.log(\'row clicked: \', row, column);\n            },\n          },\n        },\n        {\n          id: \'task3\',\n          content: \'content 3\',\n          isVisible: true,\n          action: {\n            icon: (\n              <IconMaterial\n                icon="info"\n                size="18px"\n                color="$gray6"\n                variant="outlined"\n              />\n            ),\n            method: () => {\n              console.log(\'Action clicked\');\n            },\n          },\n        },\n        {\n          id: \'task4\',\n          content: \'content 4\',\n          isVisible: true,\n          action: {\n            icon: (\n              <IconMaterial\n                icon="info"\n                size="18px"\n                color="$gray6"\n                variant="outlined"\n              />\n            ),\n            method: () => {\n              console.log(\'Action clicked\');\n            },\n          },\n        },\n      ],\n    },\n  ];\n  const [data, setData] = useState(state);\n\n  return <DragAndDrop data={data} setData={setData} />;\n};\n')),(0,i.kt)("h2",{id:"hiding-actions"},"Hiding Actions"),(0,i.kt)("p",null,"Actions can be disabled by setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"hideAction")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  state = [\n    {\n      id: 'col1',\n      columnContent: 'Section 1',\n      isVisible: true,\n      hideAction: true,\n      columnItems: [\n        {\n          id: 'task1',\n          content: 'content 1',\n          isVisible: true,\n          hideAction: true,\n        },\n        {\n          id: 'task2',\n          content: 'content 2',\n          isVisible: true,\n          hideAction: true,\n        },\n        {\n          id: 'task3',\n          content: 'content 3',\n          isVisible: true,\n          hideAction: true,\n        },\n        {\n          id: 'task4',\n          content: 'content 4',\n          isVisible: true,\n          hideAction: true,\n        },\n      ],\n    },\n  ];\n\n  const [data, setData] = useState(state);\n\n  return <DragAndDrop data={data} setData={setData} />;\n};\n")),(0,i.kt)("h2",{id:"disabling-drag"},"Disabling Drag"),(0,i.kt)("p",null,"Columns and rows can be locked and disabled causing them to not be draggable by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDragDisabled")," prop. Note: Please keep locked items at the top or bottom."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  state = [\n    {\n      id: 'col1',\n      columnContent: 'Section 1',\n      isVisible: true,\n      columnItems: [\n        {\n          id: 'task1',\n          content: 'content 1',\n          isVisible: true,\n        },\n        { id: 'task2', content: 'content 2', isVisible: true },\n        {\n          id: 'task3',\n          content: 'content 3',\n          isVisible: true,\n          props: { isDragDisabled: true },\n        },\n        {\n          id: 'task4',\n          content: 'content 4',\n          isVisible: true,\n          props: { isDragDisabled: true },\n        },\n      ],\n    },\n    {\n      id: 'col2',\n      columnContent: 'Section 2',\n      isVisible: true,\n      columnItems: [\n        {\n          id: 'task5',\n          content: 'content 5',\n          isVisible: true,\n        },\n        { id: 'task6', content: 'content 6', isVisible: true },\n        {\n          id: 'task7',\n          content: 'content 7',\n          isVisible: true,\n          props: { isDragDisabled: true },\n        },\n        {\n          id: 'task8',\n          content: 'content 8',\n          isVisible: true,\n          props: { isDragDisabled: true },\n        },\n      ],\n    },\n    {\n      id: 'col3',\n      isDragDisabled: true, // Disables the entire column from being dragged\n      columnContent: 'Section 3',\n      isVisible: true,\n      columnItems: [\n        {\n          id: 'task9',\n          content: 'content 9',\n          isVisible: true,\n        },\n        { id: 'task10', content: 'content 10', isVisible: true },\n        {\n          id: 'task11',\n          content: 'content 11',\n          isVisible: true,\n          props: { isDragDisabled: true },\n        },\n        {\n          id: 'task12',\n          content: 'content 12',\n          isVisible: true,\n          props: { isDragDisabled: true },\n        },\n      ],\n    },\n  ];\n\n  const [data, setData] = useState(state);\n\n  return <DragAndDrop data={data} setData={setData} />;\n};\n")),(0,i.kt)("h2",{id:"disable-accordion"},"Disable Accordion"),(0,i.kt)("p",null,"The accordion can be disabled using the ",(0,i.kt)("inlineCode",{parentName:"p"},"accordionDisabled")," prop."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  state = [\n    {\n      id: 'col1',\n      columnContent: 'Section 1',\n      isVisible: true,\n      columnItems: [\n        {\n          id: 'task1',\n          content: 'content 1',\n          isVisible: true,\n        },\n        { id: 'task2', content: 'content 2', isVisible: true },\n        { id: 'task3', content: 'content 3', isVisible: true },\n        { id: 'task4', content: 'content 4', isVisible: true },\n      ],\n    },\n\n    {\n      id: 'col2',\n      columnContent: 'Section 2',\n      isVisible: true,\n      columnItems: [\n        { id: 'task5', content: 'content 5', isVisible: true },\n        { id: 'task6', content: 'content 6', isVisible: true },\n        { id: 'task7', content: 'content 7', isVisible: true },\n        {\n          id: 'task8',\n          content: 'content 8',\n          isVisible: true,\n        },\n      ],\n    },\n    {\n      id: 'col3',\n      columnContent: 'Section 3',\n      isVisible: true,\n      columnItems: [\n        { id: 'task9', content: 'content 9', isVisible: true },\n        { id: 'task10', content: 'content 10', isVisible: true },\n      ],\n    },\n  ];\n\n  const [data, setData] = useState(state);\n\n  return <DragAndDrop data={data} setData={setData} accordionDisabled />;\n};\n")),(0,i.kt)("h2",{id:"onsave--oncancel"},"onSave / onCancel"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"onSave"),": callback fired once the drag and drop order is saved."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"onCancel"),": callback fired once the drag and drop order is canceled.")),(0,i.kt)("p",null,"The callback functions can take two positional arguments. The first argument is the state of the data when the customize order button is clicked. The second argument is the state of the data when the save or cancel button is clicked."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const state = [\n    {\n      id: 'col1',\n      columnContent: 'Section 1',\n      isVisible: true,\n      columnItems: [\n        {\n          id: 'task1',\n          content: 'content 1',\n          isVisible: true,\n        },\n        { id: 'task2', content: 'content 2', isVisible: true },\n        { id: 'task3', content: 'content 3', isVisible: true },\n        { id: 'task4', content: 'content 4', isVisible: true },\n      ],\n    },\n  ];\n\n  const [data, setData] = useState(state);\n\n  const onSave = (oldData, data) => {\n    console.log('onSave data:', data);\n    console.log('onSave oldData:', oldData);\n  };\n\n  const onCancel = (oldData, data) => {\n    console.log('onCancel data', data);\n    console.log('onCancel oldData:', oldData);\n  };\n\n  return (\n    <DragAndDrop\n      data={data}\n      setData={setData}\n      onSave={onSave}\n      onCancel={onCancel}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"ondragend"},"onDragEnd"),(0,i.kt)("p",null,"Callback fired once a drag has ended. It is the responsibility of this responder to synchronously apply changes that has resulted from the drag."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  state = [\n    {\n      id: 'col1',\n      columnContent: 'Section 1',\n      isVisible: true,\n      columnItems: [\n        {\n          id: 'task1',\n          content: 'content 1',\n          isVisible: true,\n        },\n        { id: 'task2', content: 'content 2', isVisible: true },\n        { id: 'task3', content: 'content 3', isVisible: true },\n        { id: 'task4', content: 'content 4', isVisible: true },\n      ],\n    },\n  ];\n\n  const [data, setData] = useState(state);\n\n  onDragEnd = (result) => {\n    const { destination, source, draggableId } = result;\n    const findColumnIndex = (element) => {\n      return element.id === result.source.droppableId;\n    };\n\n    if (!destination) {\n      return;\n    }\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (destination.droppableId !== source.droppableId) {\n      return;\n    }\n\n    if (result.type === 'column') {\n      const columns = Array.from(data);\n      const [reorderedItem] = columns.splice(result.source.index, 1);\n      columns.splice(result.destination.index, 0, reorderedItem);\n      setData(columns);\n    } else if (result.type === 'row') {\n      if (destination.droppableId === 'column') {\n        return;\n      }\n      const columns = Array.from(data);\n      const columnIndex = columns.findIndex(findColumnIndex);\n      const { columnItems } = columns[columnIndex];\n\n      const [reorderedItem] = columnItems.splice(result.source.index, 1);\n      columnItems.splice(result.destination.index, 0, reorderedItem);\n      setData(columns);\n    }\n  };\n  return <DragAndDrop data={data} onDragEnd={onDragEnd} setData={setData} />;\n};\n")),(0,i.kt)("h2",{id:"responders"},"Responders"),(0,i.kt)("p",null,"Responders are top level application events that you can use to perform your own state updates, style updates, as well as to make screen reader announcements. More information about onBeforeCapture, onBeforeDragStart, onDragStart, onDragUpdate, and onDragEnd can be found on the ",(0,i.kt)(m,{href:"https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/guides/responders.md",mdxType:"ExitLink"},"beautiful Dnd docs."))),(0,i.kt)(p,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={DragAndDrop}\n  rows={[\n    {\n      name: 'data',\n      type: 'array[shape]',\n      description: 'Set the data of the drag and drop',\n    },\n    {\n      name: 'setData',\n      type: 'function',\n      description: 'Callback to set the state data',\n    },\n    {\n      name: 'onBeforeCapture',\n      type: 'function',\n      description:\n        'Callback fired when a drag is about to start and dimensions have not been collected from the DOM',\n    },\n    {\n      name: 'onBeforeDragStart',\n      type: 'function',\n      description:\n        'Callback fired when a drag is about to start and dimensions have been captured from the DOM',\n    },\n    {\n      name: 'onSave',\n      type: 'function',\n      description: 'Callback fired when the save button is clicked',\n    },\n    {\n      name: 'onCancel',\n      type: 'function',\n      description: 'Callback fired when the cancel button is clicked',\n    },\n    {\n      name: 'onDragStart',\n      type: 'function',\n      description: 'Callback fired when a drag has started',\n    },\n    {\n      name: 'onDragUpdate',\n      type: 'function',\n      description: 'Callback fired when a something has changed during a drag',\n    },\n    {\n      name: 'onDragEnd',\n      type: 'function',\n      description: 'Callback fired when a drag has ended',\n    },\n    {\n      name: 'accordionDisabled',\n      type: 'boolean',\n      description: 'Turn the accordion on or off',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={DragAndDrop}\n  rows={[\n    {\n      name: 'drag-and-drop-root',\n      description: 'Drag and drop root element',\n    },\n    {\n      name: 'drag-and-drop-options',\n      description: 'Options menu root element',\n    },\n    {\n      name: 'drag-and-drop-context',\n      description: 'Drag and drop context element',\n    },\n    {\n      name: 'options-container',\n      description: 'Options menu container',\n    },\n    {\n      name: 'options-expand-button',\n      description: 'Options menu expand button',\n    },\n    {\n      name: 'options-expand-button-icon',\n      description: 'Options menu expand button icon',\n    },\n    {\n      name: 'options-customize-button-icon',\n      description: 'Options menu customize button icon',\n    },\n    {\n      name: 'options-save-button-icon',\n      description: 'Options menu customize button icon',\n    },\n    {\n      name: 'options-animation',\n      description: 'Options menu animation',\n    },\n    {\n      name: 'options-button-container',\n      description: 'Options menu button container',\n    },\n    {\n      name: 'options-customize-button',\n      description: 'Options menu customize button',\n    },\n    {\n      name: 'options-save-button',\n      description: 'Options menu save button',\n    },\n    {\n      name: 'options-cancel-button',\n      description: 'Options menu cancel button',\n    },\n    {\n      name: 'accordion-root',\n      description: 'Root element',\n    },\n    {\n      name: 'accordion-item',\n      description: 'accordion item at the column level',\n    },\n    {\n      name: 'accordion-trigger',\n      description: 'accordion trigger at the column level',\n    },\n    {\n      name: 'columns-droppable-container',\n      description: 'Droppable container of the columns',\n    },\n    {\n      name: 'columns-droppable-area',\n      description: 'Droppable area of the columns',\n    },\n    {\n      name: 'columns-container',\n      description: 'Columns container',\n    },\n    {\n      name: 'column-container',\n      description: 'Column root element',\n    },\n    {\n      name: 'draggable-column-item',\n      description: 'draggable column container',\n    },\n    {\n      name: 'draggable-column-item',\n      description: 'Column item container',\n    },\n    {\n      name: 'column-header',\n      description: 'Column header root',\n    },\n    {\n      name: 'column-indicator',\n      description: 'Column indicator container',\n    },\n    {\n      name: 'column-content',\n      description: 'Column title container',\n    },\n    {\n      name: 'column-action',\n      description: 'Column action container',\n    },\n    {\n      name: 'column-buttons',\n      description: 'Column buttons container',\n    },\n    {\n      name: 'column-up-button',\n      description: 'Column up button',\n    },\n    {\n      name: 'column-up-icon',\n      description: 'Column up arrow icon',\n    },\n    {\n      name: 'column-down-icon',\n      description: 'Column down arrow icon',\n    },\n    {\n      name: 'column-drag-icon',\n      description: 'Column drag icon',\n    },\n    {\n      name: 'column-visibility-icon',\n      description: 'Column visibility icon',\n    },\n    {\n      name: 'column-down-button',\n      description: 'Column down button',\n    },\n    {\n      name: 'rows-droppable-container',\n      description: 'Rows droppable container',\n    },\n    {\n      name: 'rows-droppable-area',\n      description: 'Rows droppable area root',\n    },\n    {\n      name: 'row-container',\n      description: 'Row container root',\n    },\n    {\n      name: 'row-accordion-content',\n      description: 'Row accordion content container',\n    },\n    {\n      name: 'row-header',\n      description: 'Row header root',\n    },\n    {\n      name: 'row-content-buttons-container',\n      description: 'Row wrapper for content and buttons',\n    },\n    {\n      name: 'row-content',\n      description: 'Row content root',\n    },\n    {\n      name: 'row-buttons',\n      description: 'Row buttons container',\n    },\n    {\n      name: 'row-drag-icon',\n      description: 'Row drag or lock icon',\n    },\n    {\n      name: 'row-visibility-icon',\n      description: 'Row visibility icon',\n    },\n    {\n      name: 'row-up-icon',\n      description: 'Row up icon',\n    },\n    {\n      name: 'row-down-icon',\n      description: 'Row down icon',\n    },\n    {\n      name: 'row-up-button',\n      description: 'Row up button',\n    },\n    {\n      name: 'row-down-button',\n      description: 'Row down button',\n    },\n    {\n      name: 'row-indicator',\n      description: 'Row indicator',\n    },\n    {\n      name: 'row-action',\n      description: 'Row action container',\n    },\n    {\n      name: 'row-draggable-container',\n      description: 'Row draggable container',\n    },\n    {\n      name: 'row-draggable-item',\n      description: 'Row draggable item',\n    },\n    {\n      name: 'row-placeholder',\n      description: 'Placeholder for a row that appears at the bottom',\n    },\n    {\n      name: 'column-placeholder',\n      description: 'Placeholder for a column that appears at the bottom',\n    },\n  ]}\n/>\n"))),(0,i.kt)(p,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"DragAndDrop Accordion\"\n  rows={[\n    {\n      name: 'Spacebar',\n      description:\n        'Open and close the accordion when focus is on the accordion trigger',\n    },\n    {\n      name: 'Enter',\n      description:\n        'Open and close the accordion when focus is on the accordion trigger',\n    },\n    {\n      name: 'Tab',\n      description: 'Move forward through the tabbable elements',\n    },\n    {\n      name: 'Shift + Tab',\n      description: 'Moves focus to previous element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"DragAndDrop Draggable\"\n  rows={[\n    {\n      name: 'Spacebar',\n      description:\n        'Pick up a draggable object and drop an object when focus is on the draggable indicator',\n    },\n    {\n      name: 'Esc',\n      description: 'Cancel the drag',\n    },\n    {\n      name: 'Tab',\n      description: 'Move forward through the tabbable elements',\n    },\n    {\n      name: 'Shift + Tab',\n      description: 'Moves focus to previous element',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0}}]);