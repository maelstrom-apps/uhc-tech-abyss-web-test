"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[212],{87323:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>k,frontMatter:()=>c,metadata:()=>d,toc:()=>p});var i,a=t(7896),o=t(31461),r=(t(2784),t(3905)),s=["components"],c={id:"action-nav",category:"Navigation",title:"ActionNav",description:"Used to keep track of tasks as well as for navigation.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=2540%3A21341",pagination_prev:"web/ui/icon-material",pagination_next:"web/ui/breadcrumbs"},l=void 0,d={unversionedId:"web/ui/action-nav",id:"web/ui/action-nav",isDocsHomePage:!1,title:"ActionNav",description:"Used to keep track of tasks as well as for navigation.",source:"@site/docs/web/ui/ActionNav.md",sourceDirName:"web/ui",slug:"/web/ui/action-nav",permalink:"/web/ui/action-nav",tags:[],version:"current",frontMatter:{id:"action-nav",category:"Navigation",title:"ActionNav",description:"Used to keep track of tasks as well as for navigation.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=2540%3A21341",pagination_prev:"web/ui/icon-material",pagination_next:"web/ui/breadcrumbs"},sidebar:"docs",previous:{title:"IconMaterial",permalink:"/web/ui/icon-material"},next:{title:"Breadcrumbs",permalink:"/web/ui/breadcrumbs"}},p=[{value:"ActionNav",id:"actionnav",children:[],level:2},{value:"Height",id:"height",children:[],level:2},{value:"ActionNav.Item",id:"actionnavitem",children:[],level:2},{value:"Link",id:"link",children:[{value:"ActionText",id:"actiontext",children:[],level:3},{value:"Href",id:"href",children:[],level:3},{value:"onClick",id:"onclick",children:[],level:3}],level:2},{value:"Icons",id:"icons",children:[{value:"Custom Icon",id:"custom-icon",children:[],level:3},{value:"Hiding Icon",id:"hiding-icon",children:[],level:3},{value:"Variants",id:"variants",children:[],level:3}],level:2},{value:"Icon Title",id:"icon-title",children:[],level:2},{value:"ActionNav.Item",id:"actionnavitem-1",children:[],level:2}],h=(i="Tab",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),v={toc:p};function k(e){var n=e.components,t=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},v,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(h,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ActionNav } from '@abyss/web/ui/ActionNav';\n")),(0,r.kt)("h2",{id:"actionnav"},"ActionNav"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"title")," prop can be used to change the title of the header card"),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"subText")," prop can be used to change the subText of the header card"),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"headingLevel")," prop can be used to change the headingLevel of the header card title.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to Do"\n  subText="Take action on any tasks that require attention."\n  headingLevel="h2"\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="info"\n  />\n  <ActionNav.Item\n    title="Task 2"\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n    actionText="5 Tasks Left"\n    variant="warning"\n  />\n</ActionNav>\n')),(0,r.kt)("h2",{id:"height"},"Height"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"height")," prop to adjust the height of the ActionNav. The default size is set to 48px."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<React.Fragment>\n  <ActionNav\n    title="Tasks Left to Do"\n    subText="Take action on any tasks that require attention."\n  >\n    <ActionNav.Item\n      title="Task 1"\n      href="/developers/getting-started/"\n      actionText="3 Tasks Left"\n      variant="info"\n    />\n    <ActionNav.Item\n      title="Task 2"\n      onClick={() => {\n        console.log(\'onClick triggered\');\n      }}\n      actionText="5 Tasks Left"\n      variant="warning"\n    />\n  </ActionNav>\n\n  <ActionNav\n    title="Tasks Left to Do"\n    subText="Take action on any tasks that require attention."\n    height={60}\n  >\n    <ActionNav.Item\n      title="Task 1"\n      href="/developers/getting-started/"\n      actionText="3 Tasks Left"\n      variant="info"\n    />\n    <ActionNav.Item\n      title="Task 2"\n      onClick={() => {\n        console.log(\'onClick triggered\');\n      }}\n      actionText="5 Tasks Left"\n      variant="warning"\n    />\n  </ActionNav>\n\n  <ActionNav\n    title="Tasks Left to Do"\n    subText="Take action on any tasks that require attention."\n    height="80px"\n  >\n    <ActionNav.Item\n      title="Task 1"\n      href="/developers/getting-started/"\n      actionText="3 Tasks Left"\n      variant="info"\n    />\n    <ActionNav.Item\n      title="Task 2"\n      onClick={() => {\n        console.log(\'onClick triggered\');\n      }}\n      actionText="5 Tasks Left"\n      variant="warning"\n    />\n  </ActionNav>\n</React.Fragment>\n')),(0,r.kt)("h2",{id:"actionnavitem"},"ActionNav.Item"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," prop to set the title of the action item."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav title="ActionNav Items With Title">\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="info"\n  />\n  <ActionNav.Item\n    title="Task 2"\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n    actionText="5 Tasks Left"\n    variant="warning"\n  />\n</ActionNav>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav title="ActionNav Items Without Title">\n  <ActionNav.Item\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n    actionText="1 Complete"\n    variant="success"\n  />\n  <ActionNav.Item\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n    actionText="1 Pending"\n    variant="info"\n  />\n  <ActionNav.Item\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n    actionText="1 Requireds Action"\n    variant="warning"\n  />\n</ActionNav>\n')),(0,r.kt)("h2",{id:"link"},"Link"),(0,r.kt)("h3",{id:"actiontext"},"ActionText"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"actionText")," prop to set the description for the action."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to Do"\n  subText="Take action on any tasks that require attention."\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="info"\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n  />\n  <ActionNav.Item\n    id="task-two-id"\n    title={\n      <Layout.Group as="span">\n        Task 2\n        <IconMaterial icon="info" size={20} />\n      </Layout.Group>\n    }\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n    actionText={\n      <Layout.Stack space={0}>\n        2 Tasks Left\n        <Text size="$xs" fontWeight={400} color="$error1">\n          These expire within 5 days.\n        </Text>\n      </Layout.Stack>\n    }\n    variant="error"\n  />\n</ActionNav>\n')),(0,r.kt)("h3",{id:"href"},"Href"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use the ",(0,r.kt)("inlineCode",{parentName:"li"},"href")," prop to set the link to a separate page."),(0,r.kt)("li",{parentName:"ul"},"Use the ",(0,r.kt)("inlineCode",{parentName:"li"},"openNewWindow")," prop to open the link in a new window.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to Do"\n  subText="Take action on any tasks that require attention."\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="info"\n  />\n  <ActionNav.Item\n    title="Task 2"\n    href="/developers/getting-started/"\n    openNewWindow\n    actionText="2 Tasks Left"\n    variant="warning"\n  />\n</ActionNav>\n')),(0,r.kt)("h3",{id:"onclick"},"onClick"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onClick")," prop to trigger a custom function when the actionText is clicked"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to Do"\n  subText="Take action on any tasks that require attention."\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="info"\n  />\n  <ActionNav.Item\n    title="Task 2"\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n    actionText="5 Tasks Left"\n    variant="warning"\n  />\n</ActionNav>\n')),(0,r.kt)("h2",{id:"icons"},"Icons"),(0,r.kt)("h3",{id:"custom-icon"},"Custom Icon"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"icon")," prop to pass in a specific ",(0,r.kt)("inlineCode",{parentName:"p"},"Icon")," component. Find further guidance on material icons in the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/icon-material"},"Material Icons Tab")," and on accessibility within the ",(0,r.kt)("a",{parentName:"p",href:"/accessibility/#icons"},"Accessibility Icons Section"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to Do"\n  subText="Take action on any tasks that require attention."\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    icon={<IconMaterial icon="home" size={24} />}\n  />\n  <ActionNav.Item\n    title="Task 2"\n    href="https://www.optum.com"\n    actionText="5 Tasks Left"\n    icon={<IconMaterial icon="health_and_safety" size={24} variant="filled" />}\n  />\n</ActionNav>\n')),(0,r.kt)("h3",{id:"hiding-icon"},"Hiding Icon"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"hideIcon")," prop to disable the ",(0,r.kt)("inlineCode",{parentName:"p"},"Template"),". The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to Do"\n  subText="Take action on any tasks that require attention."\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    hideIcon\n  />\n</ActionNav>\n')),(0,r.kt)("h3",{id:"variants"},"Variants"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"variant")," prop to change the style of the type of icon that appears next to the ",(0,r.kt)("inlineCode",{parentName:"p"},"actionText"),". Available variants include ",(0,r.kt)("inlineCode",{parentName:"p"},"'error'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'success'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'warning'")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"'info'"),". The default is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"'error'")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to Do"\n  subText="Take action on any tasks that require attention."\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="error"\n  />\n  <ActionNav.Item\n    title="Task 2"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="success"\n  />\n  <ActionNav.Item\n    title="Task 3"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="warning"\n  />\n  <ActionNav.Item\n    title="Task 4"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="info"\n  />\n</ActionNav>\n')),(0,r.kt)("h2",{id:"icon-title"},"Icon Title"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"iconTitle")," prop whenever additional meaning must be conveyed beyond what's provided by the action description. When used the icon is accessible by screen readers. For further guidance please see the ",(0,r.kt)("a",{parentName:"p",href:"/accessibility/#icons"},"Accessibility Icons Section"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to Do"\n  subText="Take action on any tasks that require attention."\n  headingLevel="h2"\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="error"\n    iconTitle="Task includes errors. Please resolve before proceeding."\n  />\n  <ActionNav.Item\n    title="Task 2"\n    onClick={() => {\n      console.log(\'onClick triggered\');\n    }}\n    actionText="3 Tasks Left"\n    variant="warning"\n    iconTitle="Task includes warnings."\n  />\n</ActionNav>\n'))),(0,r.kt)(h,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ActionNav}\n  rows={[\n    {\n      name: 'children',\n      type: 'array[node]',\n      description:\n        'List of the individual ActionNav items. Does not include the first, header card as that is always present.',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the ActionNav header card.',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Set the subtext of the ActionNav header card.',\n    },\n    {\n      name: 'height',\n      type: 'number | string',\n      description: 'Set the height of the ActionNav bar.',\n    },\n    {\n      name: 'headingLevel',\n      type: 'h1 | h2 | h3 | h4 | h5 | h6',\n      description: 'Set the type of heading the title is in the header card.',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ActionNav.Item}\n  rows={[\n    {\n      name: 'title',\n      type: 'string | node',\n      description: 'Set the title of the section.',\n    },\n    {\n      name: 'actionText',\n      type: 'string | node',\n      description: 'The description for the action.',\n    },\n    {\n      name: 'icon',\n      type: 'string | node',\n      description:\n        'The icon that will be displayed to the right of the actionText.',\n    },\n    {\n      name: 'iconTitle',\n      type: 'string',\n      description: 'Set the title of the selected Alert icon variant.',\n    },\n    {\n      name: 'href',\n      type: 'string',\n      description: 'Link to route to on click when actionText is clicked.',\n    },\n    {\n      name: 'openNewWindow',\n      type: 'boolean',\n      description: 'Set true to open a link in a new browser window',\n    },\n    {\n      name: 'variant',\n      type: \"'info' | 'success' | 'error' | 'warning'\",\n      description:\n        'The variant for the Alert icon in the section (if it is being displayed).',\n    },\n    {\n      name: 'hideIcon',\n      type: 'boolean',\n      description: 'Set to true to hide the AlertIcon.',\n    },\n    {\n      name: 'onClick',\n      type: 'function',\n      description:\n        'Used to trigger a custom function when the actionText is clicked',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={ActionNav}\n  rows={[\n    {\n      name: 'action-nav-root',\n      description: 'The root ActionNav container',\n    },\n    {\n      name: 'action-nav-header',\n      description: 'The header (the first element in the ActionNav) container',\n    },\n    {\n      name: 'action-nav-header-card',\n      description: 'The header card within the header',\n    },\n    {\n      name: 'action-nav-header-text',\n      description: 'The title text of the section',\n    },\n    {\n      name: 'action-nav-text',\n      description: 'The subtext of the section',\n    },\n    {\n      name: 'action-nav-chevron-after',\n      description: 'The chevron shape on the right side of each ActionNav Item',\n    },\n    {\n      name: 'action-nav-list',\n      description: 'The unordered list container around the ActionNav Items',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={ActionNav.Item}\n  rows={[\n    {\n      name: 'action-nav-list-item',\n      description: 'The container for the ActionNav Item',\n    },\n    {\n      name: 'action-nav-header-text',\n      description: 'The title text of the section',\n    },\n    {\n      name: 'action-nav-vertical-rule',\n      description: 'The vertical divider between the header and the subtext',\n    },\n    {\n      name: 'action-nav-link-wrapper',\n      description: 'The wrapper for the navigation link',\n    },\n    {\n      name: 'action-nav-icon',\n      description: 'The icon being displayed with the subtext',\n    },\n    {\n      name: 'action-nav-chevron-before',\n      description: 'The chevron indent on the left side of each ActionNav Item',\n    },\n    {\n      name: 'action-nav-chevron-after',\n      description: 'The chevron shape on the right side of each ActionNav Item',\n    },\n    {\n      name: 'action-nav-link-container',\n      description: 'The div container around the icon, link, and arrow icon',\n    },\n  ]}\n/>\n"))),(0,r.kt)(h,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("p",null,"ActionNav is a navigation tool that is used to keep track of tasks and navigate users to their tasks."),(0,r.kt)("h2",{id:"actionnavitem-1"},"ActionNav.Item"),(0,r.kt)("p",null,"ActionNav.Item is an item in the ActionNav. In order for the ActionNav items to be accessible by screen readers, each ActionNav.Item should have a unique title. If an icon is included the ",(0,r.kt)("inlineCode",{parentName:"p"},"iconTitle")," prop should be used whenever additional meaning must be conveyed beyond what's provided by the action description. For further guidance please see the ",(0,r.kt)("a",{parentName:"p",href:"/accessibility/#icons"},"Accessibility Icons Section"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<ActionNav\n  title="Tasks Left to do"\n  subText="Take action on any tasks that require attention."\n>\n  <ActionNav.Item\n    title="Task 1"\n    href="/developers/getting-started/"\n    actionText="3 Tasks Left"\n    variant="info"\n  />\n  <ActionNav.Item\n    title="Task 2"\n    href="https://www.optum.com"\n    actionText="5 Tasks Left"\n    variant="warning"\n    iconTitle="Task includes warnings."\n  />\n</ActionNav>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to the next focusable element; all focusable elements in the ActionNav included in the page Tab sequence.',\n    },\n    {\n      name: 'Enter',\n      description:\n        'When focused on a link in the ActionNav, pressing enter will click on the link and navigate you to its page / external link.',\n    },\n  ]}\n/>\n"))))}k.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>v});var i=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=i.createContext({}),l=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=l(e.components);return i.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=l(t),v=a,k=h["".concat(c,".").concat(v)]||h[v]||p[v]||o;return t?i.createElement(k,r(r({ref:n},d),{},{components:t})):i.createElement(k,r({ref:n},d))}));function v(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=h;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var l=2;l<o;l++)r[l]=t[l];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"}}]);