"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[7787],{30876:(e,n,t)=>{t.d(n,{Zo:()=>g,kt:()=>u});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},g=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),c=p(t),u=o,h=c["".concat(s,".").concat(u)]||c[u]||d[u]||i;return t?r.createElement(h,a(a({ref:n},g),{},{components:t})):r.createElement(h,a({ref:n},g))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},28878:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>g});var r=t(7896),o=t(31461),i=(t(67294),t(30876)),a=["components"],l={id:"code-highlighter",category:"Data Display",title:"CodeHighlighter",description:"Used to highlight segments of code.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A26369",pagination_prev:"web/ui/chip",pagination_next:"web/ui/data-table"},s=void 0,p={unversionedId:"web/ui/code-highlighter",id:"web/ui/code-highlighter",isDocsHomePage:!1,title:"CodeHighlighter",description:"Used to highlight segments of code.",source:"@site/docs/web/ui/CodeHighlighter.md",sourceDirName:"web/ui",slug:"/web/ui/code-highlighter",permalink:"/web/ui/code-highlighter",tags:[],version:"current",frontMatter:{id:"code-highlighter",category:"Data Display",title:"CodeHighlighter",description:"Used to highlight segments of code.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3585%3A26369",pagination_prev:"web/ui/chip",pagination_next:"web/ui/data-table"},sidebar:"docs",previous:{title:"Chip",permalink:"/web/ui/chip"},next:{title:"DataTable",permalink:"/web/ui/data-table"}},g=[{value:"Language",id:"language",children:[],level:2},{value:"Show Line Numbers",id:"show-line-numbers",children:[],level:2}],d=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},c=d("Tab"),u=d("ExitLink"),h={toc:g};function m(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(c,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { CodeHighlighter } from '@abyss/web/ui/CodeHighlighter';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'CodeHighlighter',\n  inputs: [\n    {\n      prop: 'code',\n      type: 'string',\n    },\n    {\n      prop: 'language',\n      type: 'string',\n    },\n    {\n      prop: 'showLineNumbers',\n      type: 'boolean',\n    },\n  ]\n}\n\n<CodeHighlighter code=\"console.log('hello world!');\" language=\"js\" />\n")),(0,i.kt)("h2",{id:"language"},"Language"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"language")," prop to set the desired language for highlighting. See the following ",(0,i.kt)(u,{href:"https://prismjs.com/#supported-languages",mdxType:"ExitLink"},"documentation")," for the complete list of supported languages and their corresponding values. Default value is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"jsx")," (React JSX)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const defaultCodeSnippet = `body {\n  background-color: lightblue;\n}\n\nh1 {\n  color: white;\n  text-align: center;\n}\n\np {\n  font-family: verdana;\n  font-size: 20px;\n}`;\n\n  const [value, setValue] = useState(defaultCodeSnippet);\n\n  return (\n    <React.Fragment>\n      <CodeHighlighter code={value} language=\"css\" />\n      <Divider />\n      <TextInputArea\n        label=\"Code\"\n        value={value}\n        rows={4}\n        disableAutoSize\n        onChange={(e) => setValue(e.target.value)}\n        css={{\n          'abyss-text-input-area-root': { marginBottom: '$md' },\n        }}\n      />\n      <Button\n        css={{ 'abyss-button-root': { marginBottom: '$lg' } }}\n        onClick={() => setValue('')}\n      >\n        Clear\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"show-line-numbers"},"Show Line Numbers"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"showLineNumbers")," prop to display line numbers within your highlighted code block."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const defaultCodeSnippet = `<div>\n  <h1>Hello World</h1>\n</div>`;\n\n  return (\n    <CodeHighlighter\n      code={defaultCodeSnippet}\n      language="html"\n      showLineNumbers\n    />\n  );\n};\n'))),(0,i.kt)(c,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={CodeHighlighter}\n  rows={[\n    {\n      name: 'code',\n      type: 'string',\n      description: 'The code to be highlighted',\n    },\n    {\n      name: 'language',\n      type: 'string',\n      description: 'The type of coding language to highlight',\n    },\n    {\n      name: 'theme',\n      type: 'shape',\n      description: 'The theme used for the highlighter',\n      default: '-',\n    },\n    {\n      name: 'showLineNumbers',\n      type: 'boolean',\n      description: 'Display line numbers',\n      default: 'false',\n    },\n    {\n      name: 'showBorder',\n      type: 'boolean',\n      description: 'Display border around code block',\n      default: 'true',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={CodeHighlighter}\n  rows={[\n    {\n      name: 'code-highlighter-root',\n      description: 'CodeHighlighter root element',\n    },\n  ]}\n/>\n"))))}m.isMDXComponent=!0}}]);