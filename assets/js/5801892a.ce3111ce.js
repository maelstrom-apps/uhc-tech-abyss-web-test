"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[1115],{44705:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>p,default:()=>g,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var r,a=t(7896),o=t(31461),i=(t(2784),t(3905)),s=["components"],l={id:"drawer",category:"Overlay",title:"Drawer",description:"Displays an overlay area at any side of the screen.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11860",pagination_prev:"web/ui/sub-navigation-menu",pagination_next:"web/ui/loading-overlay"},p=void 0,c={unversionedId:"web/ui/drawer",id:"web/ui/drawer",isDocsHomePage:!1,title:"Drawer",description:"Displays an overlay area at any side of the screen.",source:"@site/docs/web/ui/Drawer.md",sourceDirName:"web/ui",slug:"/web/ui/drawer",permalink:"/web/ui/drawer",tags:[],version:"current",frontMatter:{id:"drawer",category:"Overlay",title:"Drawer",description:"Displays an overlay area at any side of the screen.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11860",pagination_prev:"web/ui/sub-navigation-menu",pagination_next:"web/ui/loading-overlay"},sidebar:"docs",previous:{title:"SubNavigationMenu",permalink:"/web/ui/sub-navigation-menu"},next:{title:"LoadingOverlay",permalink:"/web/ui/loading-overlay"}},d=[{value:"useOverlay",id:"useoverlay",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Title",id:"title",children:[],level:2},{value:"Passing Data",id:"passing-data",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Title Align",id:"title-align",children:[],level:2},{value:"Position",id:"position",children:[],level:2},{value:"Overflow",id:"overflow",children:[],level:2},{value:"closeOnClickOutside",id:"closeonclickoutside",children:[],level:2},{value:"closeOnEscPress",id:"closeonescpress",children:[],level:2},{value:"Drawer Footer",id:"drawer-footer",children:[],level:2}],u=(r="Tab",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),m={toc:d};function g(e){var n=e.components,t=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Drawer } from '@abyss/web/ui/Drawer';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Drawer',\n  inputs: [\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'position',\n      type: 'select',\n      options: [\n        { label: 'left', value: 'left' },\n        { label: 'top', value: 'top' },\n        { label: 'bottom', value: 'bottom' },\n        { label: 'right', value: 'right' },\n      ],\n    },\n    {\n      prop: 'title',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'string',\n    },\n  ],\n}\n\n() => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Drawer\n        title=\"Enter title here\"\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n      >\n        Press escape to close the drawer\n      </Drawer>\n      <Button onClick={() => setIsOpen(true)} aria-haspopup=\"dialog\">\n        Toggle Drawer\n      </Button>\n    </React.Fragment>\n  );\n}\n")),(0,i.kt)("h2",{id:"useoverlay"},"useOverlay"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useOverlay")," hook lets the DOM handle form data and the overlays state. To utilize the ",(0,i.kt)("a",{parentName:"p",href:"/web/hooks/use-overlay"},"useOverlay")," hook the root/parent must be wrapped with the ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/overlay-provider"},"OverlayProvider"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const drawer = useOverlay(\'drawer-form\');\n\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => drawer.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <Drawer title="Register" model="drawer-form">\n          <Drawer.Section>\n            <TextInput\n              label="First Name"\n              model="first-name"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Last Name"\n              model="last-name"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Email"\n              type="email"\n              model="email"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Password"\n              type="password"\n              model="password"\n              validators={{ required: true }}\n            />\n            <div style={{ marginTop: 20, marginBottom: 20 }}>\n              <Checkbox\n                label="I agree to terms and conditions"\n                model="terms-condition"\n                validators={{ required: true }}\n              />\n            </div>\n          </Drawer.Section>\n          <Drawer.Section>\n            <Layout.Group alignLayout="right">\n              <Button variant="outline" onClick={() => drawer.close()}>\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  form.handleSubmit(onSubmit)();\n                  if (form.formState.isValid) {\n                    drawer.close();\n                  }\n                }}\n              >\n                Submit\n              </Button>\n            </Layout.Group>\n          </Drawer.Section>\n        </Drawer>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"usestate"},"useState"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook to set the open state of the drawer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setIsOpen(true)} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <Drawer\n          title="Register"\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n        >\n          <Drawer.Section>\n            <TextInput\n              label="First Name"\n              model="first-name"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Last Name"\n              model="last-name"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Email"\n              type="email"\n              model="email"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Password"\n              type="password"\n              model="password"\n              validators={{ required: true }}\n            />\n            <div style={{ marginTop: 20, marginBottom: 20 }}>\n              <Checkbox\n                label="I agree to terms and conditions"\n                model="terms-condition"\n                validators={{ required: true }}\n              />\n            </div>\n          </Drawer.Section>\n          <Drawer.Section>\n            <Layout.Group alignLayout="right">\n              <Button onClick={() => setIsOpen(false)} variant="outline">\n                Cancel\n              </Button>\n              <Button onClick={() => setIsOpen(false)}>Submit</Button>\n            </Layout.Group>\n          </Drawer.Section>\n        </Drawer>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"title"},"Title"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," prop to set the title of the drawer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const drawer = useOverlay(\'title-drawer\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => drawer.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <Drawer title="Custom Title" model="title-drawer">\n        <Drawer.Section>Custom Title</Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"passing-data"},"Passing Data"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"getState")," method retrieve the state of the drawer. Structure: ",(0,i.kt)("inlineCode",{parentName:"p"},"{ isOpen: Boolean, data: Object }"),". Pass data into the open/toggle methods to use in the drawer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const drawer = useOverlay('data-drawer');\n  const { data } = drawer.getState();\n\n  return (\n    <React.Fragment>\n      <Button\n        onClick={() => drawer.open({ firstName: 'John', lastName: 'Doe' })}\n        aria-haspopup=\"dialog\"\n      >\n        Toggle Drawer\n      </Button>\n      <Drawer title=\"Passing Data to Drawer\" model=\"data-drawer\">\n        <Drawer.Section>\n          <p>First Name: {data && data.firstName}</p>\n          <p>Last Name: {data && data.lastName}</p>\n        </Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," prop to set the width of the drawer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [size, setSize] = useState('450px');\n\n  const openDrawer = (size) => {\n    setSize(size);\n    setIsOpen(true);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => openDrawer('sm')} aria-haspopup=\"dialog\">\n          Small (Default)\n        </Button>\n        <Button onClick={() => openDrawer('md')} aria-haspopup=\"dialog\">\n          Medium\n        </Button>\n        <Button onClick={() => openDrawer('lg')} aria-haspopup=\"dialog\">\n          Large\n        </Button>\n      </Layout.Group>\n\n      <Drawer\n        title={`Drawer Size: ${size}`}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        size={size}\n      >\n        <Drawer.Section>Press escape to close the drawer</Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"title-align"},"Title Align"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"titleAlign")," prop to align the position of the title."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n  const drawer = useOverlay('title-aligment');\n\n  const [align, setAlign] = useState('left');\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button\n          aria-haspopup=\"dialog\"\n          onClick={() => {\n            drawer.open();\n            setAlign('left');\n          }}\n        >\n          Left\n        </Button>\n        <Button\n          aria-haspopup=\"dialog\"\n          onClick={() => {\n            drawer.open();\n            setAlign('center');\n          }}\n        >\n          Center\n        </Button>\n        <Button\n          aria-haspopup=\"dialog\"\n          onClick={() => {\n            drawer.open();\n            setAlign('right');\n          }}\n        >\n          Right\n        </Button>\n      </Layout.Group>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <Drawer\n          title=\"Title Alignment\"\n          position=\"top\"\n          titleAlign={align}\n          model=\"title-aligment\"\n        >\n          <Drawer.Section>Title Alignment</Drawer.Section>\n        </Drawer>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"position"},"Position"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"position")," prop to set the position of the drawer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [position, setPosition] = useState('left');\n\n  const openDrawer = (position) => {\n    setPosition(position);\n    setIsOpen(true);\n  };\n\n  return (\n    <React.Fragment>\n      <Drawer\n        title={`Drawer Postion: ${position}`}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        position={position}\n      >\n        <Drawer.Section>Press escape to close the drawer</Drawer.Section>\n      </Drawer>\n      <Layout.Group>\n        <Button onClick={() => openDrawer('left')} aria-haspopup=\"dialog\">\n          Left\n        </Button>\n        <Button onClick={() => openDrawer('right')} aria-haspopup=\"dialog\">\n          Right\n        </Button>\n        <Button onClick={() => openDrawer('top')} aria-haspopup=\"dialog\">\n          Top\n        </Button>\n        <Button onClick={() => openDrawer('bottom')} aria-haspopup=\"dialog\">\n          Bottom\n        </Button>\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"overflow"},"Overflow"),(0,i.kt)("p",null,"Overflow is handled within the content of the drawer. The title will remain static."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const drawer = useOverlay(\'overflow-drawer\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => drawer.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <Drawer title="Overflow" model="overflow-drawer">\n        <Drawer.Section>\n          {Array.from(Array(50).keys()).map((item) => {\n            return (\n              <p key={item} style={{ marginBottom: 65 }}>\n                Overflow Example - Scroll\n              </p>\n            );\n          })}\n        </Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"closeonclickoutside"},"closeOnClickOutside"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"closeOnClickOutside")," to prevent closing the drawer on outside clicks. Drawers using this prop can still be closed with the close button or through use of state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const drawer = useOverlay(\'drawer-closeOnClickOutside\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => drawer.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <Drawer\n        closeOnClickOutside={false}\n        title="Not closing on outside click"\n        model="drawer-closeOnClickOutside"\n      >\n        <Drawer.Section>Not closing on outside click</Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"closeonescpress"},"closeOnEscPress"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"closeOnEscPress")," to prevent closing the drawer on Esc key. Drawers using this prop can still be closed with the close button or through use of state."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Accessibility Notice: The ability to close or dismiss modals and dialogs with the escape key is an absolutely fundamental requirement for accessible keyboard navigation. As such, this prop should ONLY be used temporarily when programmatically necessary, such as waiting for search results to load or for an API call to return. If the process hangs or takes more than a few seconds, then this prop should be removed so users can choose to dismiss the modal.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const drawer = useOverlay(\'drawer-closeOnEscPress\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => drawer.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <Drawer\n        closeOnEscPress={false}\n        title="No Close on Escape Press"\n        model="drawer-closeOnEscPress"\n      >\n        <Drawer.Section>No Close on Escape Press</Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"drawer-footer"},"Drawer Footer"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"footer")," to add a footer container to a drawer."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const drawer = useOverlay(\'drawer-footer\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => drawer.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <Drawer\n        title="Drawer With Footer "\n        model="drawer-footer"\n        footer={\n          <Drawer.Section>\n            <Layout.Group alignLayout="right">\n              <Button onClick={() => drawer.close()}>Cancel</Button>\n            </Layout.Group>\n          </Drawer.Section>\n        }\n      >\n        <Drawer.Section>\n          {Array.from(Array(30).keys()).map((item) => {\n            return (\n              <p key={item} style={{ marginBottom: 65 }}>\n                Drawer footer with cancel button\n              </p>\n            );\n          })}\n        </Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Drawer}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Drawer component',\n    },\n    {\n      name: 'footer',\n      type: 'node',\n      description: 'The contents of the Drawer footer',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the drawer',\n    },\n    {\n      name: 'position',\n      type: \"'left' | 'top' | 'bottom' | 'right'\",\n      description: 'Set the position where the drawer appears',\n    },\n    {\n      name: 'isOpen',\n      type: 'boolean',\n      description: 'Flag to check if drawer is opened',\n    },\n    {\n      name: 'onClose',\n      type: 'function',\n      description: 'Callback fired everytime drawer is closed',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of drawer',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'duration',\n      type: 'number',\n      description: 'Set the duration of the transition animation',\n    },\n    {\n      name: 'titleAlign',\n      type: 'string',\n      description: 'Set the alignment of the title',\n    },\n    {\n      name: 'hideClose',\n      type: 'boolean',\n      description: 'set to true to hide close button on drawer',\n    },\n    {\n      name: 'closeOnBackgroundClick',\n      type: 'boolean',\n      description:\n        'set to false to stop drawer from closing on background click',\n    },\n    {\n      name: 'closeOnEscPress',\n      type: 'boolean',\n      description:\n        'set to false to stop drawer from closing on escape key press',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Drawer.Section}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Drawer Section component',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Drawer}\n  rows={[\n    {\n      name: 'modal-root',\n      description: 'Drawer root element',\n    },\n    {\n      name: 'modal-overlay',\n      description: 'Drawer overlay element',\n    },\n    {\n      name: 'modal-content-container',\n      description: 'Drawer content container',\n    },\n    {\n      name: 'modal-header-container',\n      description: 'Drawer header container',\n    },\n    {\n      name: 'modal-header-title',\n      description: 'Drawer title element',\n    },\n    {\n      name: 'modal-body',\n      description: 'Drawer body element',\n    },\n    {\n      name: 'modal-footer',\n      description: 'Drawer footer element',\n    },\n    {\n      name: 'modal-close-button',\n      description: 'Drawer close button element',\n    },\n    {\n      name: 'modal-close-icon',\n      description: 'Drawer close icon element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Drawer.Section}\n  rows={[\n    {\n      name: 'modal-section-root',\n      description: 'Drawer Section root element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Esc',\n      description: 'Closes the Drawer.',\n    },\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to the next interactive element within the Drawer.  Once the last interactive element in the Drawer is reached, pressing Tab again moves focus to the first interactive element within the Drawer.',\n    },\n    {\n      name: 'Shift + Tab',\n      description:\n        'Moves focus to the previous interactive element within the Drawer.  Once the first interactive element in the Drawer is reached, pressing Shift + Tab again moves focus to the last interactive element within the Drawer.',\n    },\n  ]}\n/>\n")),(0,i.kt)("h3",null,"Drawer Content"),(0,i.kt)("p",null,"The content included on the Drawer must be accessible."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const drawer = useOverlay(\'accessible-drawer\');\n\n  return (\n    <>\n      <Button onClick={() => drawer.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <Drawer title="Accessible Drawer" model="accessible-drawer">\n        <Drawer.Section>\n          <Button>Button is accessible in drawer</Button>\n        </Drawer.Section>\n      </Drawer>\n    </>\n  );\n};\n')),(0,i.kt)("h3",null,"Triggering Elements"),(0,i.kt)("p",null,'Use the aria-haspopup attribute on buttons or other triggering elements that open content like dialogs, listboxes, trees, menus, grids, etc.\xa0 Use a corresponding value that indicates what kind of popup will be displayed when the trigger element is activated. In turn, the element that pops up must be of the role indicated. For example use aria-haspop="dialog" on buttons that open modal dialogs. Be sure to include role="dialog" on the containing element of the dialog itself, too.'),(0,i.kt)("p",null,"See the docs on 'haspop' for more details:",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-haspopup"},"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-haspopup"),"\naria-haspopup - Accessibility | MDN\nThe aria-haspopup attribute indicates the availability and type of interactive popup element that can be triggered by the element on which the attribute is set."),(0,i.kt)("h3",null,"Esc Override"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"closeOnEscPress")," to prevent closing the modal on Esc key. Modals using this prop can still be closed with the close button or through use of state."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," Accessibility Notice: The ability to close or dismiss modals and dialogs with the escape key is an absolutely fundamental requirement for accessible keyboard navigation. As such, this prop should ONLY be used temporarily when programmatically necessary, such as waiting for search results to load or for an API call to return. If the process hangs or takes more than a few seconds, then this prop should be removed so users can choose to dismiss the modal.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const modal = useOverlay(\'closeOnEscPress-modal\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => modal.open()} aria-haspopup="dialog">\n        Toggle Drawer\n      </Button>\n      <Drawer\n        closeOnEscPress={false}\n        title="No Close on Escape Press"\n        model="closeOnEscPress-modal"\n      >\n        <Drawer.Section>No Close on Escape Press</Drawer.Section>\n      </Drawer>\n    </React.Fragment>\n  );\n};\n'))))}g.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(g,i(i({ref:n},c),{},{components:t})):r.createElement(g,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);