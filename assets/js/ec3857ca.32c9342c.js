"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[6905],{30876:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(t),g=a,m=d["".concat(i,".").concat(g)]||d[g]||u[g]||o;return t?r.createElement(m,s(s({ref:n},c),{},{components:t})):r.createElement(m,s({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,s[1]=p;for(var l=2;l<o;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},18974:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>i,default:()=>d,frontMatter:()=>p,metadata:()=>l,toc:()=>c});var r=t(7896),a=t(31461),o=(t(67294),t(30876)),s=["components"],p={id:"graphql-endpoints",title:"GraphQL Endpoints"},i=void 0,l={unversionedId:"developers/tutorials/graphql-endpoints",id:"developers/tutorials/graphql-endpoints",isDocsHomePage:!1,title:"GraphQL Endpoints",description:"---",source:"@site/docs/developers/tutorials/7-graphql-endpoints.md",sourceDirName:"developers/tutorials",slug:"/developers/tutorials/graphql-endpoints",permalink:"/developers/tutorials/graphql-endpoints",tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"graphql-endpoints",title:"GraphQL Endpoints"},sidebar:"docs",previous:{title:"Styled Components",permalink:"/developers/tutorials/styled-components"},next:{title:"GraphQL Requests",permalink:"/developers/tutorials/graphql-requests"}},c=[{value:"Step 1: Running Your API Server",id:"step-1-running-your-api-server",children:[],level:3},{value:"Step 2: Adding Mock Data &amp; Service",id:"step-2-adding-mock-data--service",children:[],level:3},{value:"Step 3: Adding A GraphQL Schema",id:"step-3-adding-a-graphql-schema",children:[],level:3},{value:"Step 4: Adding A GraphQL Resolver",id:"step-4-adding-a-graphql-resolver",children:[],level:3},{value:"Step 5: Accessing GraphQL API",id:"step-5-accessing-graphql-api",children:[],level:3},{value:"Step 6: Swapping Mock Data for Live DataSource",id:"step-6-swapping-mock-data-for-live-datasource",children:[],level:3}],u={toc:c};function d(e){var n=e.components,t=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," ",(0,o.kt)("br",null),"We would appreciate any feedback on our tutorial guide. If you are stuck at any time, make sure to contact the Abyss Admiral assigned to your team. If they cannot help, send a help request on our ",(0,o.kt)("a",{parentName:"p",href:"/contact-us/"},"Contact Page"),"."),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Before starting, be sure to complete the ",(0,o.kt)("a",{parentName:"p",href:"/developers/tutorials/create-abyss-app/"},"Create Abyss App")," tutorial."),(0,o.kt)("h3",{id:"step-1-running-your-api-server"},"Step 1: Running Your API Server"),(0,o.kt)("p",null,"Make sure you have completed all previous tutorial pages and ran them successfully. We will now be shifting our focus from the front-end of the application to the back-end API."),(0,o.kt)("p",null,"In your Terminal, navigate into the ",(0,o.kt)("strong",{parentName:"p"},"my-new-app")," directory. Once there, run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm run api\n")),(0,o.kt)("p",null,"Once you see the screen shown below, your API server is now up and running!"),(0,o.kt)("center",null,(0,o.kt)("img",{src:"/img/graphics/graphql-landing-page.png",alt:"drawing",width:"700"})),(0,o.kt)("h3",{id:"step-2-adding-mock-data--service"},"Step 2: Adding Mock Data & Service"),(0,o.kt)("p",null,"Navigate to ",(0,o.kt)("strong",{parentName:"p"},"products/api/src/services"),". Within the ",(0,o.kt)("strong",{parentName:"p"},"services")," folder, create a folder named ",(0,o.kt)("strong",{parentName:"p"},'"person"'),". Within this ",(0,o.kt)("strong",{parentName:"p"},"person")," folder, create an ",(0,o.kt)("strong",{parentName:"p"},'"index.js"')," file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"\u2514\u2500\u2500 products\n    \u2514\u2500\u2500 api\n        \u251c\u2500\u2500 src\n        |   \u251c\u2500\u2500 graphql\n        |   \u251c\u2500\u2500 routes\n        |   \u251c\u2500\u2500 services\n        |   |   \u2514\u2500\u2500 person\n        |   |       \u2514\u2500\u2500 index.js\n        |   \u2514\u2500\u2500 server.js\n        \u2514\u2500\u2500 package.json\n")),(0,o.kt)("p",null,"Add the following code in ",(0,o.kt)("strong",{parentName:"p"},"index.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// this is a mock database with name, email, company and location properties for each person\nconst personDB = {\n  dolphin: {\n    name: 'Danny Dolphin',\n    email: 'danny@optum.com',\n    company: 'Optum',\n    location: 'Atlantic Ocean',\n  },\n  whale: {\n    name: 'Willy Whale',\n    email: 'willy@uhg.com',\n    company: 'UHG',\n    location: 'Pacific Ocean',\n  },\n  penguin: {\n    name: 'Penny Penguin',\n    email: 'penny@uhc.com',\n    company: 'UHC',\n    location: 'Arctic Ocean',\n  },\n};\n\nexport const personServices = {\n  getPerson: async (args) => {\n    const data = personDB[args.msid];\n\n    return data;\n  },\n};\n")),(0,o.kt)("h3",{id:"step-3-adding-a-graphql-schema"},"Step 3: Adding A GraphQL Schema"),(0,o.kt)("p",null,"A GraphQL schema allows you to receive specific data from the database based on the request call. The schema allows the data to be used and displayed in the GraphQL sandbox."),(0,o.kt)("p",null,"Navigate to ",(0,o.kt)("strong",{parentName:"p"},"products/api/src/graphql/schema"),". Within the ",(0,o.kt)("strong",{parentName:"p"},"schema")," folder, create a file named ",(0,o.kt)("strong",{parentName:"p"},'"Person.gql"'),"."),(0,o.kt)("p",null,"Add the following code in your ",(0,o.kt)("strong",{parentName:"p"},"Person.gql")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"# ID is a type, similar to a String. The exclamation(!) makes it a required field\ntype Query {\n  person(msid: ID!): Person\n}\n\n# type Person contains the information we want from the database\ntype Person {\n  name: String\n  email: String\n  company: String\n  location: String\n}\n")),(0,o.kt)("h3",{id:"step-4-adding-a-graphql-resolver"},"Step 4: Adding A GraphQL Resolver"),(0,o.kt)("p",null,"We will now be adding a resolver, which acts as a GraphQL query handler."),(0,o.kt)("p",null,"Launch Visual Studio Code, then open ",(0,o.kt)("strong",{parentName:"p"},"my-new-app"),". Navigate to ",(0,o.kt)("strong",{parentName:"p"},"products/api/src/graphql/resolvers.js")),(0,o.kt)("p",null,"Import the following statement:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { personServices } from '../services/person';\n")),(0,o.kt)("p",null,"Insert the following code within the export query statement:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"person: (_, args) => {\n  return personServices.getPerson(args);\n},\n")),(0,o.kt)("p",null,"This is how your code should look like in your ",(0,o.kt)("strong",{parentName:"p"},"resolvers.js")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { githubServices } from '../services/github';\nimport { personServices } from '../services/person';\n\nexport const resolvers = {\n  Query: {\n    user: (_, args) => {\n      return githubServices.getUser(args);\n    },\n    person: (_, args) => {\n      return personServices.getPerson(args);\n    },\n  },\n};\n")),(0,o.kt)("h3",{id:"step-5-accessing-graphql-api"},"Step 5: Accessing GraphQL API"),(0,o.kt)("p",null,"Make sure you are running ",(0,o.kt)("inlineCode",{parentName:"p"},"npm run api")," in your terminal."),(0,o.kt)("p",null,"To check if you successfully created a GraphQL API, click the following link in your browser:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"http://localhost:4000/graphql"},"GraphQL Sandbox Explorer")),(0,o.kt)("p",null,"Once you launch your GraphQL webpage, follow the instructions in the following images:"),(0,o.kt)("center",null,(0,o.kt)("img",{src:"/img/graphics/GraphQLPart1.png",alt:"drawing",width:"700"})," "),(0,o.kt)("center",null,(0,o.kt)("img",{src:"/img/graphics/GraphQLPart2.png",alt:"drawing",width:"700"})," "),(0,o.kt)("center",null,(0,o.kt)("img",{src:"/img/graphics/GraphQLPart3.png",alt:"drawing",width:"700"})," "),(0,o.kt)("center",null,(0,o.kt)("img",{src:"/img/graphics/GraphQLPart4.png",alt:"drawing",width:"700"})," "),(0,o.kt)("h3",{id:"step-6-swapping-mock-data-for-live-datasource"},"Step 6: Swapping Mock Data for Live DataSource"),(0,o.kt)("p",null,"Navigate to ",(0,o.kt)("strong",{parentName:"p"},"products/api/src/services/person/index.js"),"."),(0,o.kt)("p",null,"Replace the current code in ",(0,o.kt)("strong",{parentName:"p"},"index.js")," with the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { dataSource } from '@abyss/api/tools/dataSource';\n\n// create a connection to the GitHub API\nconst personAPI = dataSource({\n  url: 'https://github.optum.com/api/v3',\n});\n\nexport const personServices = {\n  getPerson: async (args) => {\n    const { data } = await personAPI({\n      method: 'GET',\n      path: `/users/${args.msid}`,\n    });\n    return data;\n  },\n};\n")),(0,o.kt)("p",null,"You can try inserting your msid in the variable section and click the query button to see a corresponding query response."),(0,o.kt)("p",null,"Great job, you have successfully created a GraphQL API!"))}d.isMDXComponent=!0}}]);