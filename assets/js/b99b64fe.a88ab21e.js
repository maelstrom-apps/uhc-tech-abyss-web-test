"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[6863],{30876:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>p});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),d=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return o.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=d(t),p=a,g=u["".concat(s,".").concat(p)]||u[p]||m[p]||l;return t?o.createElement(g,i(i({ref:n},c),{},{components:t})):o.createElement(g,i({ref:n},c))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=u;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,i[1]=r;for(var d=2;d<l;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},71850:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>d,default:()=>g,frontMatter:()=>s,metadata:()=>c,toc:()=>m});var o,a=t(7896),l=t(31461),i=(t(67294),t(30876)),r=["components"],s={id:"modal",category:"Overlay",title:"Modal",description:"Displays an overlay area at the center of the screen.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1550",pagination_prev:"web/ui/loading-spinner",pagination_next:"web/ui/popover"},d=void 0,c={unversionedId:"web/ui/modal",id:"web/ui/modal",isDocsHomePage:!1,title:"Modal",description:"Displays an overlay area at the center of the screen.",source:"@site/docs/web/ui/Modal.md",sourceDirName:"web/ui",slug:"/web/ui/modal",permalink:"/web/ui/modal",tags:[],version:"current",frontMatter:{id:"modal",category:"Overlay",title:"Modal",description:"Displays an overlay area at the center of the screen.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1550",pagination_prev:"web/ui/loading-spinner",pagination_next:"web/ui/popover"},sidebar:"docs",previous:{title:"LoadingSpinner",permalink:"/web/ui/loading-spinner"},next:{title:"Popover",permalink:"/web/ui/popover"}},m=[{value:"useOverlay",id:"useoverlay",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Title",id:"title",children:[],level:2},{value:"Passing Data",id:"passing-data",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Title Align",id:"title-align",children:[],level:2},{value:"Overflow",id:"overflow",children:[],level:2},{value:"Modal Footer",id:"modal-footer",children:[],level:2},{value:"Customization",id:"customization",children:[],level:2}],u=(o="Tab",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),p={toc:m};function g(e){var n=e.components,t=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Modal } from '@abyss/web/ui/Modal';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Modal',\n  inputs: [\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'title',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'size',\n    },\n  ],\n}\n\n() => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Modal\n        title=\"Enter title here\"\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n      >\n        <Modal.Section>Press escape to close the modal</Modal.Section>\n      </Modal>\n      <Button onClick={() => setIsOpen(true)}>\n        Toggle Modal\n      </Button>\n    </React.Fragment>\n  );\n}\n")),(0,i.kt)("h2",{id:"useoverlay"},"useOverlay"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useOverlay")," hook lets the DOM handle form data and the overlays state. To utilize the ",(0,i.kt)("a",{parentName:"p",href:"/web/hooks/use-overlay"},"useOverlay")," hook the root/parent must be wrapped with the ",(0,i.kt)("a",{parentName:"p",href:"/web/ui/overlay-provider"},"OverlayProvider"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const modal = useOverlay(\'modal-form\');\n\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => modal.open()}>Toggle Modal</Button>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <Modal title="Register" model="modal-form">\n          <Modal.Section>\n            <Grid>\n              <Grid.Col span={6}>\n                <TextInput\n                  label="First Name"\n                  model="first-name"\n                  validators={{ required: true }}\n                />\n              </Grid.Col>\n              <Grid.Col span={6}>\n                <TextInput\n                  label="Last Name"\n                  model="last-name"\n                  validators={{ required: true }}\n                />\n              </Grid.Col>\n              <Grid.Col span={12}>\n                <TextInput\n                  label="Email"\n                  type="email"\n                  model="email"\n                  validators={{ required: true }}\n                />\n              </Grid.Col>\n              <Grid.Col span={12}>\n                <TextInput\n                  label="Password"\n                  type="password"\n                  model="password"\n                  validators={{ required: true }}\n                />\n              </Grid.Col>\n              <Grid.Col span={12}>\n                <Checkbox\n                  label="I agree to terms and conditions"\n                  model="terms-condition"\n                  validators={{ required: true }}\n                />\n              </Grid.Col>\n            </Grid>\n          </Modal.Section>\n          <Modal.Section>\n            <Layout.Group alignLayout="right">\n              <Button variant="outline" onClick={() => modal.close()}>\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  form.handleSubmit(onSubmit)();\n                  if (form.formState.isValid) {\n                    modal.close();\n                  }\n                }}\n              >\n                Submit\n              </Button>\n            </Layout.Group>\n          </Modal.Section>\n        </Modal>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"usestate"},"useState"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook to set the open state of the modal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setIsOpen(true)}>Toggle Modal</Button>\n      <Modal title="Register" isOpen={isOpen} onClose={() => setIsOpen(false)}>\n        <Modal.Section>\n          <Grid>\n            <Grid.Col span={6}>\n              <TextInput label="First Name" />\n            </Grid.Col>\n            <Grid.Col span={6}>\n              <TextInput label="Last Name" />\n            </Grid.Col>\n            <Grid.Col span={12}>\n              <TextInput label="Email" type="email" />\n            </Grid.Col>\n            <Grid.Col span={12}>\n              <TextInput label="Password" type="password" />\n            </Grid.Col>\n            <Grid.Col span={12}>\n              <Checkbox label="I agree to terms and conditions" />\n            </Grid.Col>\n          </Grid>\n        </Modal.Section>\n        <Modal.Section>\n          <Layout.Group alignLayout="right">\n            <Button variant="outline" onClick={() => setIsOpen(false)}>\n              Cancel\n            </Button>\n            <Button>Submit</Button>\n          </Layout.Group>\n        </Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"title"},"Title"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"title")," prop to set the title of the modal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const modal = useOverlay(\'title-modal\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => modal.open()}>Toggle Modal</Button>\n      <Modal title="Custom Title" model="title-modal">\n        <Modal.Section>Custom Title</Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"passing-data"},"Passing Data"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"getState")," method retrieve the state of the modal. Structure: ",(0,i.kt)("inlineCode",{parentName:"p"},"{ isOpen: Boolean, data: Object }"),". Pass data into the open/toggle methods to use in the modal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const modal = useOverlay('data-modal');\n  const { data } = modal.getState();\n\n  return (\n    <React.Fragment>\n      <Button\n        onClick={() => modal.open({ firstName: 'John', lastName: 'Doe' })}\n      >\n        Toggle Modal\n      </Button>\n      <Modal title=\"Passing Data to Modal\" model=\"data-modal\">\n        <Modal.Section>\n          <p>First Name: {data && data.firstName}</p>\n          <p>Last Name: {data && data.lastName}</p>\n        </Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," prop to set the width of the modal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [size, setSize] = useState('lg');\n\n  const handleClick = (size) => {\n    setIsOpen(true);\n    setSize(size);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => handleClick('lg')}>Large (Default)</Button>\n        <Button onClick={() => handleClick('md')}>Medium</Button>\n        <Button onClick={() => handleClick('sm')}>Small</Button>\n        <Button onClick={() => handleClick('full')}>Full</Button>\n      </Layout.Group>\n\n      <Modal\n        title={`Modal Size: ${size}`}\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        size={size}\n      >\n        <Modal.Section>Press escape to close the modal</Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"title-align"},"Title Align"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"titleAlign")," prop to align the position of the title."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n  const modal = useOverlay(\'title-aligment\');\n\n  const [align, setAlign] = useState(\'left\');\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button\n          onClick={() => {\n            modal.open();\n            setAlign(\'left\');\n          }}\n        >\n          Left\n        </Button>\n        <Button\n          onClick={() => {\n            modal.open();\n            setAlign(\'center\');\n          }}\n        >\n          Center\n        </Button>\n        <Button\n          onClick={() => {\n            modal.open();\n            setAlign(\'right\');\n          }}\n        >\n          Right\n        </Button>\n      </Layout.Group>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <Modal\n          title="Title Alignment"\n          titleAlign={align}\n          model="title-aligment"\n        >\n          <Modal.Section>\n            <Grid>\n              <Grid.Col span={6}>\n                <TextInput label="First Name" />\n              </Grid.Col>\n              <Grid.Col span={6}>\n                <TextInput label="Last Name" />\n              </Grid.Col>\n              <Grid.Col span={12}>\n                <TextInput label="Email" type="email" />\n              </Grid.Col>\n              <Grid.Col span={12}>\n                <TextInput label="Password" type="password" />\n              </Grid.Col>\n              <Grid.Col span={12}>\n                <Checkbox label="I agree to terms and conditions" />\n              </Grid.Col>\n            </Grid>\n          </Modal.Section>\n          <Modal.Section>\n            <Layout.Group alignLayout="right">\n              <Button variant="outline" onClick={() => modal.close()}>\n                Cancel\n              </Button>\n              <Button type="submit">Submit</Button>\n            </Layout.Group>\n          </Modal.Section>\n        </Modal>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"overflow"},"Overflow"),(0,i.kt)("p",null,"Overflow is handled within the content of the modal. The title will remain static."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const modal = useOverlay(\'overflow-modal\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => modal.open()}>Toggle Modal</Button>\n      <Modal title="Overflow" model="overflow-modal">\n        <Modal.Section>\n          {Array.from(Array(50).keys()).map((item) => {\n            return (\n              <p key={item} style={{ marginBottom: 65 }}>\n                Overflow Example - Scroll\n              </p>\n            );\n          })}\n        </Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"modal-footer"},"Modal Footer"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Modal.Footer")," to add a footer container to a modal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const modal = useOverlay(\'modal-footer\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => modal.open()}>Toggle Modal</Button>\n      <Modal\n        title="Modal With Footer "\n        model="modal-footer"\n        footer={\n          <Modal.Section>\n            <Layout.Group alignLayout="right">\n              <Button onClick={() => modal.close()}>Cancel</Button>\n            </Layout.Group>\n          </Modal.Section>\n        }\n      >\n        <Modal.Section>\n          {Array.from(Array(30).keys()).map((item) => {\n            return (\n              <p key={item} style={{ marginBottom: 65 }}>\n                modal footer with cancel button\n              </p>\n            );\n          })}\n        </Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n')),(0,i.kt)("h2",{id:"customization"},"Customization"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const modal = useOverlay('customization');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => modal.open()}>Toggle Modal</Button>\n      <Modal\n        title=\"Customize Modal To Fit Your Design Needs\"\n        titleAlign=\"center\"\n        model=\"customization\"\n        css={{\n          'abyss-modal-header-container': { marginTop: '$md' },\n        }}\n      >\n        <div\n          style={{\n            border: '7px solid white',\n            background: 'white',\n            borderRadius: '50%',\n            position: 'absolute',\n            top: '-2%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n          }}\n        >\n          <IconBrand icon=\"desktop\" size=\"xl\" />\n        </div>\n        <Modal.Section>\n          <p>\n            Nulla a hendrerit leo. Morbi ac suscipit nunc. Suspendisse cursus\n            hendrerit magna quis euismod. Integer rhoncus, nulla in maximus\n            efficitur, felis felis laoreet quam, ut tincidunt ex est eu nulla.\n            Curabitur pharetra vel elit eu egestas. Donec consectetur rhoncus\n            felis, efficitur tristique erat ultrices et. Proin at ipsum elit.\n            Donec mauris sem, cursus a velit eu, hendrerit rhoncus mi. Ut quis\n            sem lacinia, sodales nulla vel, feugiat odio.\n          </p>\n        </Modal.Section>\n        <Modal.Section>\n          <Layout.Stack alignLayout=\"center\" alignItems=\"center\">\n            <Button onClick={() => modal.close()}>Tell Me More</Button>\n            <Link onClick={() => modal.close()}>Skip The Tour</Link>\n          </Layout.Stack>\n        </Modal.Section>\n      </Modal>\n    </React.Fragment>\n  );\n};\n"))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Modal}\n  rows={[\n    {\n      name: 'children',\n      type: 'node',\n      description: 'The contents of the Modal component',\n    },\n    {\n      name: 'footer',\n      type: 'node',\n      description: 'The contents of the Modal footer',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the modal',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'isOpen',\n      type: 'boolean',\n      description: 'Flag to check if modal is opened',\n    },\n    {\n      name: 'onClose',\n      type: 'function',\n      description: 'Callback fired everytime modal is closed',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Size of modal',\n    },\n    {\n      name: 'titleAlign',\n      type: 'string',\n      description: 'Set the alignment of the title',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Modal.Section}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Modal Section component',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Modal}\n  rows={[\n    {\n      name: 'modal-root',\n      description: 'Modal root element',\n    },\n    {\n      name: 'modal-overlay',\n      description: 'Modal overlay element',\n    },\n    {\n      name: 'modal-content-container',\n      description: 'Modal content container',\n    },\n    {\n      name: 'modal-header-container',\n      description: 'Modal header container',\n    },\n    {\n      name: 'modal-header-title',\n      description: 'Modal title element',\n    },\n    {\n      name: 'modal-body',\n      description: 'Modal body element',\n    },\n    {\n      name: 'modal-footer',\n      description: 'Modal footer element',\n    },\n    {\n      name: 'modal-close-button',\n      description: 'Modal close button element',\n    },\n    {\n      name: 'modal-close-icon',\n      description: 'Modal close icon element',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Modal.Section}\n  rows={[\n    {\n      name: 'modal-section-root',\n      description: 'Modal Section root element',\n    },\n  ]}\n/>\n"))),(0,i.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Esc',\n      description: 'Closes the dialog.',\n    },\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to the next interactive element within the dialog.  Once the last interactive element in the dialog is reached, pressing Tab again moves focus to the first interactive element within the dialog.',\n    },\n    {\n      name: 'Shift + Tab',\n      description:\n        'Moves focus to the previous interactive element within the dialog.  Once the first interactive element in the dialog is reached, pressing Shift + Tab again moves focus to the last interactive element within the dialog.',\n    },\n  ]}\n/>\n")),(0,i.kt)("h3",null,"Dialog Content"),(0,i.kt)("p",null,"The content included on the dialog must be accessible."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const modal = useOverlay(\'accessible-modal\');\n\n  return (\n    <>\n      <Button onClick={() => modal.open()}>Toggle Modal</Button>\n      <Modal title="Accessible Modal" model="accessible-modal">\n        <Modal.Section>\n          <Button>Button is accessible in modal</Button>\n        </Modal.Section>\n      </Modal>\n    </>\n  );\n};\n'))))}g.isMDXComponent=!0}}]);