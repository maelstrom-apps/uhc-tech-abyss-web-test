"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[8846],{30876:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>c});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(t),c=i,m=u["".concat(s,".").concat(c)]||u[c]||g[c]||r;return t?a.createElement(m,l(l({ref:n},p),{},{components:t})):a.createElement(m,l({ref:n},p))}));function c(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var d=2;d<r;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},57713:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>d,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>g});var a,i=t(7896),r=t(31461),l=(t(67294),t(30876)),o=["components"],s={id:"heading",category:"Typography",title:"Heading",description:"Creates appropriately sized and nested heading elements.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1536",pagination_prev:"web/ui/theme-provider",pagination_next:"web/ui/label"},d=void 0,p={unversionedId:"web/ui/heading",id:"web/ui/heading",isDocsHomePage:!1,title:"Heading",description:"Creates appropriately sized and nested heading elements.",source:"@site/docs/web/ui/Heading.md",sourceDirName:"web/ui",slug:"/web/ui/heading",permalink:"/web/ui/heading",tags:[],version:"current",frontMatter:{id:"heading",category:"Typography",title:"Heading",description:"Creates appropriately sized and nested heading elements.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1536",pagination_prev:"web/ui/theme-provider",pagination_next:"web/ui/label"},sidebar:"docs",previous:{title:"ThemeProvider",permalink:"/web/ui/theme-provider"},next:{title:"Label",permalink:"/web/ui/label"}},g=[{value:"Usage",id:"usage",children:[],level:2},{value:"Offset",id:"offset",children:[],level:2},{value:"Display",id:"display",children:[],level:2},{value:"Nesting",id:"nesting",children:[],level:2},{value:"Nesting Example",id:"nesting-example",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)}),c={toc:g};function m(e){var n=e.components,t=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)(u,{label:"Overview",mdxType:"Tab"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Heading } from '@abyss/web/ui/Heading';\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Heading',\n  inputs: [\n    {\n      prop: 'children',\n      type: 'string',\n      defaultValue: 'Heading',\n    },\n{\n      prop: 'offset',\n      type: 'select',\n      options: [\n        { label: '0', value: '0' },\n        { label: '1', value: '1' },\n        { label: '2', value: '2' },\n        { label: '3', value: '3' },\n        { label: '4', value: '4' },\n        { label: '5', value: '5' },\n      ],\n    },\n    {\n      prop: 'color',\n      type: 'select',\n      options: [\n        { label: '$primary1', value: '$primary1' },\n        { label: '$interactive1', value: '$interactive1' },\n        { label: '$gray8', value: '$gray8' },\n        { label: 'lightseagreen', value: 'lightseagreen' },\n        { label: '#ff0000', value: '#ff0000' },\n      ],\n    },\n    {\n      prop: 'textAlign',\n      type: 'select',\n      options: [\n        { label: 'left', value: 'left' },\n        { label: 'center', value: 'center' },\n        { label: 'right', value: 'right' },\n      ],\n    },\n  ]\n}\n\n<Heading>Heading</Heading>\n")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("p",null,"If we want to add a new h2 to the page and lower every other heading it's now easy to add another ",(0,l.kt)("inlineCode",{parentName:"p"},"<Heading.Level>")," wrapper to indent everything and you're done. Much easier than updating lots of ",(0,l.kt)("inlineCode",{parentName:"p"},"<h*>")," numbers around the code to realign them all."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"<Heading.Level>")," concept means you only need to think about whether it's a deeper level, without having to know the specific heading level number."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <Heading>This is h1 title</Heading>\n  <Heading.Level>\n    <Heading>This is h2 title</Heading>\n  </Heading.Level>\n</React.Fragment>\n")),(0,l.kt)("h2",{id:"offset"},"Offset"),(0,l.kt)("p",null,"If you want to have heading levels relative to the current level you can provide an offset prop,\nwhich is a more concise way of writing ",(0,l.kt)("inlineCode",{parentName:"p"},"<Heading.Level>")," at each heading breakpoint. This will override the heading level, and allow you to manually set the level corresponding to the design."),(0,l.kt)("p",null,"However ",(0,l.kt)("inlineCode",{parentName:"p"},"<Level>")," will establish a new deeper heading level context whereas offset will not, again, requiring you to manually set the offet level with each new heading."),(0,l.kt)("p",null,"You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"offset={0|1|2|3|4|5}"),". The below headings are ",(0,l.kt)("inlineCode",{parentName:"p"},"h1")," followed by an ",(0,l.kt)("inlineCode",{parentName:"p"},"h5"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <Heading>Providers</Heading>\n  <Heading offset={4}>Choose your primary provider</Heading>\n  <p>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n    cillum dolore eu fugiat nulla pariatur.\n  </p>\n</React.Fragment>\n")),(0,l.kt)("h2",{id:"display"},"Display"),(0,l.kt)("p",null,"Display sizes are ",(0,l.kt)("inlineCode",{parentName:"p"},"<h1>")," tags, with options that are the largest sizes in the DPL."),(0,l.kt)("p",null,"Using the tag ",(0,l.kt)("inlineCode",{parentName:"p"},"display="),"you can target one of three display sizes: ",(0,l.kt)("inlineCode",{parentName:"p"},"1 | 2 | 3"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <Heading display={1}>Welcome to UnitedHealth</Heading>\n  <Heading display={2}>Welcome to UnitedHealth</Heading>\n  <Heading display={3}>Welcome to UnitedHealth</Heading>\n</React.Fragment>\n")),(0,l.kt)("h2",{id:"nesting"},"Nesting"),(0,l.kt)("p",null,"Nesting headers, allows us to have multiple levels of headers, without having to directly tag each level of ",(0,l.kt)("inlineCode",{parentName:"p"},"<h*>")," tags."),(0,l.kt)("p",null,"Each level of heading is specifically designed to take up the same height of space, given a specific ",(0,l.kt)("inlineCode",{parentName:"p"},"font-size")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"margin"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<React.Fragment>\n  <Heading>This is h1 title</Heading>\n  <Heading.Level>\n    <Heading>This is h2 title</Heading>\n    <Heading.Level>\n      <Heading>This is h3 title</Heading>\n      <Heading.Level>\n        <Heading>This is h4 title</Heading>\n        <Heading.Level>\n          <Heading>This is h5 title</Heading>\n          <Heading.Level>\n            <Heading>This is h6 title</Heading>\n          </Heading.Level>\n        </Heading.Level>\n      </Heading.Level>\n    </Heading.Level>\n  </Heading.Level>\n</React.Fragment>\n")),(0,l.kt)("h2",{id:"nesting-example"},"Nesting Example"),(0,l.kt)("p",null,"Nested headers can be combined together with text to organize sections and create a seamless document experience."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<React.Fragment>\n  <Heading>Medical Visit</Heading>\n  <Heading.Level>\n    <Heading>Planned Visits</Heading>\n    <Heading.Level>\n      <Heading color="$interactive1">Clinical Care</Heading>\n      <p>\n        Vitae nunc sed velit dignissim. Nunc congue nisi vitae suscipit tellus\n        mauris a diam. Risus in hendrerit gravida rutrum quisque non tellus.\n        Orci nulla pellentesque dignissim enim sit.\n      </p>\n      <Heading color="$interactive1">Professional Care</Heading>\n      <p>\n        Porttitor leo a diam sollicitudin tempor id eu nisl. Donec ultrices\n        tincidunt arcu non sodales neque sodales. Et malesuada fames ac turpis\n        egestas integer eget. Pretium vulputate sapien nec sagittis. Lobortis\n        scelerisque fermentum dui faucibus.\n      </p>\n    </Heading.Level>\n    <Heading>Emergency Visits</Heading>\n    <Heading.Level>\n      <Heading color="$interactive1">Emergency Room Care</Heading>\n      <p>\n        Nunc faucibus a pellentesque sit. In ante metus dictum at tempor commodo\n        ullamcorper a. Ut sem nulla pharetra diam sit amet nisl suscipit\n        adipiscing. Urna et pharetra pharetra massa massa. Velit sed ullamcorper\n        morbi tincidunt ornare massa eget. Orci nulla pellentesque dignissim\n        enim. Scelerisque fermentum dui faucibus in. Duis at tellus at urna\n        condimentum mattis pellentesque id.\n      </p>\n    </Heading.Level>\n  </Heading.Level>\n</React.Fragment>\n'))),(0,l.kt)(u,{label:"Integration",mdxType:"Tab"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Heading}\n  rows={[\n    {\n      name: 'offset',\n      type: 'number',\n      description:\n        '0 | 1 | 2 | 3 | 4 | 5. Each number will offset the hierarchy of heading you choose. 0 is <h1>, and so on.',\n    },\n    {\n      name: 'children',\n      type: 'string',\n      description: 'The text to be input into the heading component.',\n    },\n    {\n      name: 'textAlign',\n      type: 'start | center',\n      description: '',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the heading text',\n    },\n    {\n      name: 'display',\n      type: 'number',\n      description: 'Target one of three display sizes',\n    },\n  ]}\n/>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Heading}\n  rows={[\n    {\n      name: 'heading-root',\n      description: 'Heading root element',\n    },\n  ]}\n/>\n"))))}m.isMDXComponent=!0}}]);