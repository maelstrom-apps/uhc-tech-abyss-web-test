"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[3512],{17082:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>u,toc:()=>p});var l=t(7896),a=t(31461),i=(t(2784),t(3905)),o=["components"],r={id:"select-input-multi",category:"Forms",title:"SelectInputMulti",description:"Allows users to select multiple values from a provided list of options.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3697%3A26104",pagination_prev:"web/ui/select-input",pagination_next:"web/ui/slider"},s=void 0,u={unversionedId:"web/ui/select-input-multi",id:"web/ui/select-input-multi",isDocsHomePage:!1,title:"SelectInputMulti",description:"Allows users to select multiple values from a provided list of options.",source:"@site/docs/web/ui/SelectInputMulti.md",sourceDirName:"web/ui",slug:"/web/ui/select-input-multi",permalink:"/web/ui/select-input-multi",tags:[],version:"current",frontMatter:{id:"select-input-multi",category:"Forms",title:"SelectInputMulti",description:"Allows users to select multiple values from a provided list of options.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=3697%3A26104",pagination_prev:"web/ui/select-input",pagination_next:"web/ui/slider"},sidebar:"docs",previous:{title:"SelectInput",permalink:"/web/ui/select-input"},next:{title:"Slider",permalink:"/web/ui/slider"}},p=[{value:"Usage",id:"usage",children:[],level:2},{value:"Section Headers",id:"section-headers",children:[],level:2},{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Hide Chips",id:"hide-chips",children:[],level:2},{value:"Selected Items Container",id:"selected-items-container",children:[],level:2},{value:"Add Elements Inside Input",id:"add-elements-inside-input",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Disable Option Items",id:"disable-option-items",children:[],level:2},{value:"SubText",id:"subtext",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Searchable",id:"searchable",children:[],level:2},{value:"onInputChange",id:"oninputchange",children:[],level:2},{value:"Custom Render",id:"custom-render",children:[],level:2},{value:"Width",id:"width",children:[],level:2},{value:"MaxListHeight",id:"maxlistheight",children:[],level:2},{value:"Select All",id:"select-all",children:[],level:2},{value:"Label/Value Key",id:"labelvalue-key",children:[],level:2},{value:"Validation",id:"validation",children:[],level:2},{value:"Highlighted",id:"highlighted",children:[],level:2},{value:"Enable Outside Scroll",id:"enable-outside-scroll",children:[],level:2},{value:"Virtualization",id:"virtualization",children:[],level:2}],c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",n)}},d=c("Tab"),m=c("ExitLink"),b={toc:p};function h(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,l.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(d,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { SelectInputMulti } from '@abyss/web/ui/SelectInputMulti';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'SelectInputMulti',\n  inputs: [\n    {\n      prop: 'label',\n      type: 'string',\n      defaultValue: 'Sandbox',\n    },\n    {\n      prop: 'placeholder',\n      type: 'string',\n    },\n    {\n      prop: 'subText',\n      type: 'string',\n    },\n    {\n      prop: 'width',\n      type: 'string',\n    },\n    {\n      prop: 'maxListHeight',\n      type: 'string',\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'isSearchable',\n      type: 'boolean',\n    },\n    {\n      prop: 'selectAll',\n      type: 'boolean',\n    },\n    {\n      prop: 'highlighted',\n      type: 'boolean',\n      defaultValue: false,\n    },\n  ],\n}\n\n() => {\n  const [value, setValue] = React.useState(['alpine']);\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        value={value}\n        onChange={setValue}\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," prop to supply the options that can be selected. ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," is an array of objects, where each object should have two properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value"),", which is a unique identifier for the option"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"label"),", which is how the option will be displayed in the list")),(0,i.kt)("p",null,"Sections can also be specified, in which case the section object should have ",(0,i.kt)("inlineCode",{parentName:"p"},"section")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"items")," properties instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," (See ",(0,i.kt)("a",{parentName:"p",href:"#section-headers"},"Section Headers")," for more details)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"[\n  { value: 'id1', label: 'Option 1' },\n  { value: 'id2', label: 'Option 2' },\n  {\n    section: 'Section Header',\n    items: [\n      { value: 'id3', label: 'Sub-section Option 1' },\n      { value: 'id4', label: 'Sub-section Option 2' },\n      ...\n    ],\n  },\n   ...\n]\n")),(0,i.kt)("h2",{id:"section-headers"},"Section Headers"),(0,i.kt)("p",null,"To create section headers in the list, pass objects into the ",(0,i.kt)("inlineCode",{parentName:"p"},"options")," array that have the ",(0,i.kt)("inlineCode",{parentName:"p"},"section")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"items")," properties. ",(0,i.kt)("inlineCode",{parentName:"p"},"section")," specifies the name of the section, which will be bolded and unselectable, while ",(0,i.kt)("inlineCode",{parentName:"p"},"items")," should contain the options within that section (with the same ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"label")," format as normal), which will appear indented."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState([]);\n\n  return (\n    <SelectInputMulti\n      label=\"Section Headers Example\"\n      placeholder=\"Pick one\"\n      value={value}\n      onChange={setValue}\n      options={[\n        { value: '1', label: 'This option is not under any section' },\n        {\n          section: 'Section Header',\n          items: [\n            { value: '11', label: 'Option 1' },\n            { value: '21', label: 'Option 2' },\n          ],\n        },\n        {\n          section: 'Other Section Header',\n          items: [\n            { value: '31', label: 'Option 3' },\n            { value: '41', label: 'Option 4' },\n          ],\n        },\n        ,\n      ]}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useForm")," hook lets the DOM handle form data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      frameworks: ['react'],\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        model=\"frameworks\"\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n        validators={{ required: true }}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"usestate"},"useState"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState(['alpine']);\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        value={value}\n        onChange={setValue}\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"hide-chips"},"Hide Chips"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"hideChips")," prop to display the selected items as a comma separated list. Once the list exceeds the available space it will display, ",(0,i.kt)("inlineCode",{parentName:"p"},"[selection count] Selected"),". If all available options are selected, ",(0,i.kt)("inlineCode",{parentName:"p"},"All Selected ([total count])"),", will be displayed. Default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false")," and selections will display as chips."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState(['alpine']);\n  return (\n    <SelectInputMulti\n      label=\"Hide Chips\"\n      placeholder=\"Choose an option\"\n      value={value}\n      onChange={setValue}\n      isSearchable\n      options={[\n        { value: 'react', label: 'React' },\n        { value: 'ng', label: 'Angular' },\n        { value: 'svelte', label: 'Svelte' },\n        { value: 'vue', label: 'Vue' },\n        { value: 'alpine', label: 'Alpine' },\n        { value: 'ember', label: 'Ember' },\n        { value: 'stimulus', label: 'Stimulus' },\n        { value: 'preact', label: 'Preact' },\n      ]}\n      hideChips\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"selected-items-container"},"Selected Items Container"),(0,i.kt)("p",null,"This example demonstrates how to display the selected items within a separate container outside of the SelectInputMulti."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState([\n    'react',\n    'ng',\n    'svelte',\n    'vue',\n    'alpine',\n    'ember',\n    'stimulus',\n    'preact',\n  ]);\n\n  const options = [\n    { value: 'react', label: 'React' },\n    { value: 'ng', label: 'Angular' },\n    { value: 'svelte', label: 'Svelte' },\n    { value: 'vue', label: 'Vue' },\n    { value: 'alpine', label: 'Alpine' },\n    { value: 'ember', label: 'Ember' },\n    { value: 'stimulus', label: 'Stimulus' },\n    { value: 'preact', label: 'Preact' },\n  ];\n  return (\n    <Layout.Stack grow space={15}>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        value={value}\n        onChange={setValue}\n        isSearchable\n        options={options}\n        hideChips\n      />\n      <Layout.Stack grow space={4}>\n        <Label>Selected Items Container</Label>\n        <Box\n          color=\"$white\"\n          height={100}\n          padding=\"$sm\"\n          css={{\n            'abyss-box-root': {\n              border: '1px solid $gray6',\n              borderRadius: '4px',\n              overflow: 'auto',\n            },\n          }}\n          tabIndex=\"0\"\n        >\n          <ul>\n            {value.map((val, index) => (\n              <li\n                key={`multi_item_${index}`}\n                style={{ marginBottom: '8px', fontSize: '14px' }}\n              >\n                {options.map((option) => {\n                  if (option.value === val) return option.label;\n                })}\n              </li>\n            ))}\n          </ul>\n        </Box>\n      </Layout.Stack>\n    </Layout.Stack>\n  );\n};\n")),(0,i.kt)("h2",{id:"add-elements-inside-input"},"Add Elements Inside Input"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"inputLeftElement")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"inputRightElement")," props to add elements to the inside of the select input multi field. The recommended usage is for inserting icons."),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"#validation"},"Validation")," section below for an example on how to incorporate with validation and display error/success states with icons."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState(['1']);\n\n  return (\n    <SelectInputMulti\n      label=\"Inside Elements\"\n      value={value}\n      onChange={setValue}\n      options={[\n        { label: 'Option 1', value: '1' },\n        { label: 'Option 2', value: '2' },\n        { label: 'Option 3', value: '3' },\n      ]}\n      isSearchable\n      inputLeftElement={<IconMaterial icon=\"star\" size=\"18px\" color=\"$gray6\" />}\n      inputRightElement={<IconMaterial icon=\"check\" size=\"18px\" />}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"label"},"Label"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"label")," prop is required. To hide the label use the ",(0,i.kt)("inlineCode",{parentName:"p"},"showLabel")," prop to show or hide the label."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInputMulti\n        label=\"Active Label\"\n        placeholder=\"Active Label\"\n        model=\"activeLabel\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <SelectInputMulti\n        label=\"Hidden Label\"\n        placeholder=\"Hidden Label\"\n        model=\"hiddenLabel\"\n        hideLabel\n        css={{ 'abyss-select-input-root': { marginTop: '15px' } }}\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <Button type=\"submit\" css={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"disabled"},"Disabled"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to disable the select list input field so users cannot select a value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInputMulti\n        label=\"Disabled\"\n        isDisabled={true}\n        model=\"disabled\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"disable-option-items"},"Disable Option Items"),(0,i.kt)("p",null,"Disable an individual option item by setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"isDisabled")," key to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," within the object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState(['alpine']);\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        value={value}\n        onChange={setValue}\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular', isDisabled: true },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"subtext"},"SubText"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the select list input field."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      'sub-text': ['1'],\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInputMulti\n        label=\"SubText\"\n        subText=\"Sub Text Example\"\n        model=\"sub-text\"\n        validators={{ required: true }}\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState();\n  return (\n    <SelectInputMulti\n      value={value}\n      onChange={setValue}\n      options={[\n        { label: 'Option 1', value: '1' },\n        { label: 'Option 2', value: '2' },\n        { label: 'Option 3', value: '3' },\n      ]}\n      isSearchable\n      label=\"Descriptors Display\"\n      subText=\"Subtext Message\"\n      errorMessage=\"Error Message\"\n      descriptorsDisplay=\"column\"\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"searchable"},"Searchable"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"isSearchable")," prop to display an input field for the user to search/filter the list of options this is located inside the dropdown."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInputMulti\n        label=\"Searchable\"\n        model=\"searchable\"\n        isSearchable\n        placeholder=\"Searchable\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"oninputchange"},"onInputChange"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"onInputChange")," prop is an event handler called when the value of the filter text input changes while searching. The callback returns the current search value of the input."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const onInputChange = (value) => {\n    console.log('value', value);\n  };\n\n  return (\n    <FormProvider state={form}>\n      <SelectInputMulti\n        label=\"onInputChange\"\n        hideLabel\n        placeholder=\"Search...\"\n        model=\"onInputChange\"\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n        onInputChange={onInputChange}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"custom-render"},"Custom Render"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"customRender")," prop to customize the render of each option item. If ",(0,i.kt)("a",{parentName:"p",href:"#section-headers"},"Section Headers")," are used they will also be handled by this function. ",(0,i.kt)("inlineCode",{parentName:"p"},"customRender")," provides the item object as the first parameter and the items state as the second."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState();\n\n  const customRender = (item, state) => {\n    const defaultSettings = {\n      icon: 'cancel',\n      color: '$error1',\n      variant: 'error',\n    };\n\n    const settings = useMemo(() => {\n      const { status } = (item.items && item.items[0]) || item;\n      if (status === 'active') {\n        return {\n          icon: 'check_circle_outline',\n          color: '$success1',\n          variant: 'success',\n        };\n      }\n      return defaultSettings;\n    }, [item]);\n\n    const { icon, color, variant } = settings;\n\n    if (!!item.section) {\n      return (\n        <Layout.Group>\n          <span>{item.section}</span>\n          <IconMaterial icon={icon} color={color} />\n        </Layout.Group>\n      );\n    }\n\n    return <Badge variant={variant}>{item.label}</Badge>;\n  };\n\n  return (\n    <SelectInputMulti\n      label=\"Custom Render\"\n      placeholder=\"Pick one\"\n      value={value}\n      onChange={setValue}\n      isSearchable\n      maxListHeight={300}\n      customRender={customRender}\n      options={[\n        {\n          section: 'Active Options',\n          items: [\n            { value: 'option_1', label: 'Option 1', status: 'active' },\n            { value: 'option_2', label: 'Option 2', status: 'active' },\n            { value: 'option_3', label: 'Option 3', status: 'active' },\n          ],\n        },\n        {\n          section: 'Inactive Options',\n          items: [\n            { value: 'option_4', label: 'Option 4', status: 'inactive' },\n            { value: 'option_5', label: 'Option 5', status: 'inactive' },\n            { value: 'option_6', label: 'Option 6', status: 'inactive' },\n          ],\n        },\n      ]}\n    />\n  );\n};\n")),(0,i.kt)("h2",{id:"width"},"Width"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"width")," prop to set the width of the select list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInputMulti\n        label=\"Default Width\"\n        placeholder=\"Width: Default\"\n        model=\"widthDefault\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <SelectInputMulti\n        label=\"Width 75%\"\n        width=\"75%\"\n        placeholder=\"Width: 75%\"\n        model=\"width75\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <SelectInputMulti\n        label=\"Width\"\n        placeholder=\"Width: 300px\"\n        width=\"300px\"\n        model=\"width300\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n        ]}\n      />\n      <Button type=\"submit\" style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"maxlistheight"},"MaxListHeight"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"maxListHeight")," to set the height of the dropdown list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      maxListHeight: ['2'],\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInputMulti\n        label=\"Single Select Clearable\"\n        placeholder=\"Single Select Clearable\"\n        model=\"maxListHeight\"\n        maxListHeight=\"100px\"\n        options={[\n          { label: 'Option 1', value: '1' },\n          { label: 'Option 2', value: '2' },\n          { label: 'Option 3', value: '3' },\n          { label: 'Option 4', value: '4' },\n          { label: 'Option 5', value: '5' },\n          { label: 'Option 6', value: '6' },\n          { label: 'Option 7', value: '7' },\n          { label: 'Option 8', value: '8' },\n        ]}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"select-all"},"Select All"),(0,i.kt)("p",null,"By setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"selectAll")," property to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),' you can make a "Select All" option visible at the top of the dropdown. When selected all options will be selected. When deselected all options will be deselected.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState(['alpine']);\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        value={value}\n        onChange={setValue}\n        selectAll\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"labelvalue-key"},"Label/Value Key"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"valueKey")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"labelKey")," props to change the key thats used to read the labels and values from the options list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <SelectInputMulti\n        label=\"Label/Value Keys\"\n        placeholder=\"Label/Value Keys\"\n        model=\"keys\"\n        labelKey=\"newLabel\"\n        valueKey=\"newValue\"\n        options={[\n          { newLabel: 'Option 1', newValue: '1' },\n          { newLabel: 'Option 2', newValue: '2' },\n          { newLabel: 'Option 3', newValue: '3' },\n        ]}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"validation"},"Validation"),(0,i.kt)("p",null,"Use the validators prop to set rules for the field to be valid."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const { errors, isSubmitted, isSubmitSuccessful } = form.formState;\n\n  const getIconProps = useCallback(\n    (model) => {\n      if (!isSubmitted) return {};\n\n      let iconProps = {};\n\n      if (!!errors[model]) {\n        iconProps = { icon: 'error', color: '$error1', size: '18px' };\n      }\n\n      if (isSubmitSuccessful) {\n        iconProps = { icon: 'check', color: '$success1', size: '18px' };\n      }\n\n      const isEmpty = Object.keys(iconProps).length === 0;\n\n      return !isEmpty\n        ? { inputRightElement: <IconMaterial {...iconProps} /> }\n        : {};\n    },\n    [isSubmitted, isSubmitSuccessful]\n  );\n  const options = [\n    { label: 'Option 1', value: '1' },\n    { label: 'Option 2', value: '2' },\n    { label: 'Option 3', value: '3' },\n    { label: 'Option 4', value: '4' },\n    { label: 'Option 5', value: '5' },\n  ];\n  return (\n    <FormProvider state={form}>\n      <SelectInputMulti\n        label=\"Required Default Message\"\n        model=\"required\"\n        isSearchable\n        options={options}\n        {...getIconProps('required')}\n        validators={{ required: true }}\n      />\n      <SelectInputMulti\n        label=\"Required Custom Message\"\n        model=\"custom-required\"\n        isSearchable\n        options={options}\n        validators={{ required: 'Custom Error Message' }}\n      />\n      <SelectInputMulti\n        label=\"Custom Validators\"\n        model=\"validate\"\n        isSearchable\n        options={options}\n        validators={{\n          required: true,\n          validate: {\n            moreThanTwo: (v) => {\n              return (\n                v.length >= 2 || 'Should include a minimum of two selections'\n              );\n            },\n          },\n        }}\n      />\n      <Button type=\"submit\" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"highlighted"},"Highlighted"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"highlighted")," prop to enable the background color for the input. You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"FormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"highlighted")," to enable the color to appear if validation is required."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState();\n\n  return (\n    <SelectInputMulti\n      label=\"Your favorite framework/library\"\n      placeholder=\"Pick one\"\n      value={value}\n      onChange={setValue}\n      isSearchable\n      highlighted\n      options={[\n        { value: 'react', label: 'React' },\n        { value: 'ng', label: 'Angular' },\n        { value: 'svelte', label: 'Svelte' },\n        { value: 'vue', label: 'Vue' },\n        { value: 'alpine', label: 'Alpine' },\n        { value: 'ember', label: 'Ember' },\n        { value: 'stimulus', label: 'Stimulus' },\n        { value: 'preact', label: 'Preact' },\n      ]}\n    />\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit} highlighted>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        model=\"frameworks\"\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n        validators={{ required: true }}\n      />\n      <Button type=\"submit\" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("h2",{id:"enable-outside-scroll"},"Enable Outside Scroll"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"enableOutsideScroll")," prop to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," to enable scroll outside of the search input component while the option list is open. Default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = React.useState(['alpine']);\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        value={value}\n        onChange={setValue}\n        enableOutsideScroll\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: '15px' }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,i.kt)("h2",{id:"virtualization"},"Virtualization"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"virtual")," prop to add virtualization and improve performance when working with larger data sets. Virtualization leverages the ",(0,i.kt)("inlineCode",{parentName:"p"},"useVirtualization")," hook which utilizes the ",(0,i.kt)("strong",{parentName:"p"},"TanStack Virtual")," library. For further configuration details please see the following ",(0,i.kt)("a",{parentName:"p",href:"https://tanstack.com/virtual/v3/docs/api/virtualizer"},"documentation")," for all available props that may be passed in with the ",(0,i.kt)("inlineCode",{parentName:"p"},"virtual")," object. To maximize performance virtualization for the SelectInputMulti component is configured by default to use fixed sizing based on an option item element height of ",(0,i.kt)("inlineCode",{parentName:"p"},"40px"),". If your item height remains fixed but needs to be updated, pass in ",(0,i.kt)("inlineCode",{parentName:"p"},"estimateSize")," and set to the new height, i.e., ",(0,i.kt)("inlineCode",{parentName:"p"},"estimateSize: () => height value"),". If the item height is unknown on render enable dynamic sizing by passing in ",(0,i.kt)("inlineCode",{parentName:"p"},"dynamicSizing: true"),"."),(0,i.kt)("p",null,"Here are the following default settings:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dynamicSizing")," : When ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," each option item element is dynamically measured on render. Note: scrolling performance may not be as smooth (default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"estimateSize")," : Sets item height when using fixed sizing. When using dynamic sizing, to help with scroll performance, set this to the largest possible height of the item elements (default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"40"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"overscan")," : Number of element items to render above and below the visible area (default value is ",(0,i.kt)("inlineCode",{parentName:"li"},"5"),").")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const defaultOptionCount = 5000;\n  const withSectionHeaders = false;\n\n  const optionNumberForm = useForm({\n    defaultValues: {\n      optionCount: defaultOptionCount,\n    },\n  });\n\n  const selectInputForm = useForm();\n  const [options, setOptions] = React.useState();\n\n  const generateOptions = (count) => {\n    const options = Array.from(Array(Number(count)).keys()).map((i) => {\n      const optionLabelValue = `Option ${i + 1}`;\n\n      if (withSectionHeaders) {\n        return {\n          section: `Option ${i + 1} Header`,\n          items: [\n            { label: `${optionLabelValue} A`, value: `${optionLabelValue}_A` },\n            { label: `${optionLabelValue} B`, value: `${optionLabelValue}_B` },\n          ],\n        };\n      }\n\n      return { label: optionLabelValue, value: optionLabelValue };\n    });\n    setOptions(options);\n  };\n\n  useEffect(() => {\n    generateOptions(defaultOptionCount);\n  }, []);\n\n  return (\n    <React.Fragment>\n      <FormProvider\n        state={optionNumberForm}\n        onSubmit={({ optionCount }) => generateOptions(optionCount)}\n      >\n        <Layout.Group alignItems="bottom">\n          <TextInput\n            label="Set Number of Dropdown Options"\n            placeholder="Enter number"\n            model="optionCount"\n            mask="numeric"\n          />\n          <Button type="submit">Update Options</Button>\n          <Button\n            variant="outline"\n            type="button"\n            onClick={() => {\n              optionNumberForm.reset();\n              selectInputForm.reset();\n              generateOptions(defaultOptionCount);\n            }}\n          >\n            Reset\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n      <FormProvider state={selectInputForm}>\n        <SelectInputMulti\n          css={{ \'abyss-select-input-multi-root\': { marginTop: \'$lg\' } }}\n          label="SelectInputMulti with Virtualization"\n          placeholder={`Includes ${options ? options.length : 0} options`}\n          model="selectWithVirtual"\n          isSearchable\n          options={options}\n          virtual\n        />\n\n        <SelectInputMulti\n          label="SelectInputMulti without Virtualization"\n          placeholder={`Includes ${options ? options.length : 0} options`}\n          model="selectWithoutVirtual"\n          isSearchable\n          options={options}\n        />\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n'))),(0,i.kt)(d,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={SelectInputMulti}\n  rows={[\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Select list label',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to show or hide label',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'placeholder',\n      type: 'string',\n      description:\n        'Short description displayed in the select list before the user selects a value',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Error message to be displayed below the select input field',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Text displayed below the select input field',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below below the select input field',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired every time the value changes',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    {\n      name: 'onKeyDown',\n      type: 'function',\n      description:\n        'Callback fired everytime a key is pressed while focused in the component',\n    },\n    {\n      name: 'onPaste',\n      type: 'function',\n      description:\n        'Callback fired everytime something is pasted into the component',\n    },\n    {\n      name: 'onInputChange',\n      type: 'function',\n      description:\n        'Callback fired when the value of the search text input changes.',\n    },\n    {\n      name: 'validators',\n      type: 'object',\n      description: 'Set rules for the input field to be valid',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the select list. If true, the select list will be disabled',\n    },\n    {\n      name: 'inputLeftElement',\n      type: 'ReactNode',\n      description: 'Add element to left of inside select input',\n    },\n    {\n      name: 'inputRightElement',\n      type: 'ReactNode',\n      description: 'Add element to right of inside select input',\n    },\n    {\n      name: 'isSearchable',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the select list search/filter feature',\n    },\n    {\n      name: 'options',\n      type: 'object[]',\n      description:\n        'List of options selectable in the select list input. { label: string, value: string }',\n    },\n    {\n      name: 'fuseConfig',\n      type: 'shape',\n      description: 'Configs for Fuse',\n    },\n    {\n      name: 'value',\n      type: 'string',\n      description:\n        'Option value or list of option values selected in the select list input.',\n    },\n    {\n      name: 'width',\n      type: 'string',\n      description: 'Width of the select list',\n    },\n    // {\n    //   name: 'isLoading',\n    //   type: 'boolean',\n    //   description:\n    //     'Flag to enable/disable the loading state of the select list.',\n    // },\n    {\n      name: 'labelKey',\n      type: 'string',\n      description:\n        'Set the key value of the label in the options list. Defaults to \"label\"',\n    },\n    {\n      name: 'valueKey',\n      type: 'string',\n      description:\n        'Set the key value of the value in the options list. Defaults to \"value\"',\n    },\n    {\n      name: 'maxListHeight',\n      type: 'string | number',\n      description: 'Sets the max height of the dropdown menu',\n    },\n    {\n      name: 'selectAll',\n      type: 'boolean',\n      description: 'toggles the Select All option',\n    },\n    {\n      name: 'enableOutsideScroll',\n      type: 'boolean',\n      default: 'false',\n      description: 'Flag to enable scroll on all outside elements',\n    },\n    // {\n    //   name: 'debounceTime',\n    //   type: 'number',\n    //   description:\n    //     'Set the length of time that the search should debounce by (in milliseconds)',\n    // },\n    // {\n    //   name: 'apiFiltering',\n    //   type: 'function',\n    //   description: 'Api Filter used for fetching search results from an api',\n    // },\n    {\n      name: 'customRender',\n      type: 'function',\n      description: 'Custom render for option items',\n    },\n    {\n      name: 'virtual',\n      type: 'object | boolean',\n      description: 'Adds virtualization to option item drop-down list',\n    },\n    {\n      name: 'hideChips',\n      type: 'boolean',\n      description:\n        'Hide chips and show selected options in comma separated values',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={SelectInputMulti}\n  rows={[\n    {\n      name: 'select-input-multi-root',\n      description: 'Root element',\n    },\n    {\n      name: 'select-input-multi-label',\n      description: 'Label',\n    },\n    {\n      name: 'select-input-multi-input-container',\n      description: 'Input and option list container',\n    },\n    {\n      name: 'select-input-multi-input',\n      description: 'Input',\n    },\n    {\n      name: 'select-input-multi-left-element-wrapper',\n      description: 'Wrapper for left input element',\n    },\n    {\n      name: 'select-input-multi-left-element',\n      description: 'Input left element',\n    },\n    {\n      name: 'select-input-multi-right-element-wrapper',\n      description: 'Wrapper for right input element',\n    },\n    {\n      name: 'select-input-multi-right-element',\n      description: 'Input right element',\n    },\n    {\n      name: 'select-input-multi-loading-container',\n      description: 'Loading spinner container',\n    },\n    {\n      name: 'select-input-multi-loading-spinner',\n      description: 'Loading spinner',\n    },\n    {\n      name: 'select-input-multi-icon-container',\n      description: 'Chevron icon container',\n    },\n    {\n      name: 'select-input-multi-icon',\n      description: 'Chevron icon',\n    },\n    {\n      name: 'select-input-multi-descriptors',\n      description: 'Descriptor',\n    },\n    {\n      name: 'select-input-multi-option-list-container',\n      description: 'Option list container',\n    },\n    {\n      name: 'select-input-multi-search-container',\n      description: 'Option list search input container',\n    },\n    {\n      name: 'select-input-multi-search-input',\n      description: 'Option list search input',\n    },\n    {\n      name: 'select-input-multi-option-list-virtual-container',\n      description: 'Option list container when using virtualization',\n    },\n    {\n      name: 'select-input-multi-option-list',\n      description: 'Option list',\n    },\n    {\n      name: 'select-input-multi-no-options',\n      description: 'No options list item',\n    },\n\n    {\n      name: 'select-input-multi-option',\n      description: 'Option list item',\n    },\n    {\n      name: 'select-input-multi-section',\n      description: 'Option list item section',\n    },\n    {\n      name: 'select-input-multi-option-content',\n      description: 'Option container',\n    },\n    {\n      name: 'select-input-multi-option-checkbox',\n      description: 'Option checkbox',\n    },\n    {\n      name: 'select-input-multi-chip-group',\n      description: 'Chip container',\n    },\n    {\n      name: 'select-input-multi-chip',\n      description: 'Chip',\n    },\n    {\n      name: 'select-input-multi-chip-extra-count',\n      description: 'Truncated chip counter',\n    },\n    {\n      name: 'select-input-multi-no-options-selected',\n      description: 'No Options Selected',\n    },\n    {\n      name: 'select-input-multi-hide-pills-content',\n      description: 'Hide Pills',\n    },\n  ]}\n/>\n"))),(0,i.kt)(d,{label:"Accessibility",mdxType:"Tab"},(0,i.kt)("p",null,"A combobox is a widget made up of the combination of two distinct elements: 1) a single-line textbox, and 2) an associated pop-up element for helping users set the value of the textbox. The popup may be a listbox, grid, tree, or dialog. Many implementations also include a third optional element -- a graphical button adjacent to the textbox, indicating the availability of the popup. Activating the button displays the popup if suggestions are available."),(0,i.kt)("p",null,"Adheres to the ",(0,i.kt)(m,{href:"https://www.w3.org/TR/wai-aria-practices-1.2/#combobox",mdxType:"ExitLink"},"Combo box WAI-ARIA design pattern"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      framework: ['react'],\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <SelectInputMulti\n        label=\"Your favorite framework/library\"\n        placeholder=\"Pick one\"\n        model=\"framework\"\n        isSearchable\n        options={[\n          { value: 'react', label: 'React' },\n          { value: 'ng', label: 'Angular' },\n          { value: 'svelte', label: 'Svelte' },\n          { value: 'vue', label: 'Vue' },\n          { value: 'alpine', label: 'Alpine' },\n          { value: 'ember', label: 'Ember' },\n          { value: 'stimulus', label: 'Stimulus' },\n          { value: 'preact', label: 'Preact' },\n        ]}\n        validators={{ required: true }}\n      />\n    </FormProvider>\n  );\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Textbox\"\n  rows={[\n    {\n      name: 'Down Arrow',\n      description:\n        'If the listbox is displayed: Moves focus to the second suggested value. Note that the first value is automatically selected. If the listbox is not displayed: opens the listbox and moves focus to the first value.',\n    },\n    {\n      name: 'Up Arrow',\n      description:\n        'If the listbox is displayed, moves focus to the last suggested value. If the listbox is not displayed, opens the listbox and moves focus to the last value.',\n    },\n    {\n      name: 'Alt + Down Arrow',\n      description:\n        'Opens the listbox without moving focus or changing selection.',\n    },\n    {\n      name: 'Enter',\n      description:\n        'If the listbox is displayed and the first option is automatically selected: Sets the textbox value to the content of the selected option. Closes the listbox.',\n    },\n    {\n      name: 'Esc',\n      description:\n        'Clears the textbox. If the listbox is displayed, closes it.',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  title=\"Listbox\"\n  rows={[\n    {\n      name: 'Enter',\n      description:\n        'Sets the textbox value to the content of the focused option in the listbox. Closes the listbox. Sets focus on the textbox.',\n    },\n    {\n      name: 'Esc',\n      description:\n        'Closes the listbox. Sets focus on the textbox. Clears the textbox.',\n    },\n    {\n      name: 'Down Arrow',\n      description:\n        'Moves focus to the next option. If focus is on the last option, moves focus to the first option.',\n    },\n    {\n      name: 'Up Arrow',\n      description:\n        'Moves focus to the previous option. If focus is on the first option, moves focus to the last option.',\n    },\n    {\n      name: 'Right Arrow',\n      description:\n        'Moves focus to the textbox and moves the editing cursor one character to the right.',\n    },\n    {\n      name: 'Left Arrow',\n      description:\n        'Moves focus to the textbox and moves the editing cursor one character to the left.',\n    },\n    {\n      name: 'Home',\n      description:\n        'Moves focus to the textbox and places the editing cursor at the beginning of the field.',\n    },\n    {\n      name: 'End',\n      description:\n        'Moves focus to the textbox and places the editing cursor at the end of the field.',\n    },\n  ]}\n/>\n"))))}h.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var l=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,l,a=function(e,n){if(null==e)return{};var t,l,a={},i=Object.keys(e);for(l=0;l<i.length;l++)t=i[l],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)t=i[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=l.createContext({}),u=function(e){var n=l.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return l.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},d=l.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,b=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return t?l.createElement(b,o(o({ref:n},p),{},{components:t})):l.createElement(b,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,o[1]=r;for(var u=2;u<i;u++)o[u]=t[u];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);