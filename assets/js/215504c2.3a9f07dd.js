"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[4582],{74392:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>u,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7896),a=n(31461),o=(n(2784),n(3905)),l=["components"],i={id:"form-building",title:"Form Building"},u=void 0,s={unversionedId:"developers/tutorials/form-building",id:"developers/tutorials/form-building",isDocsHomePage:!1,title:"Form Building",description:"---",source:"@site/docs/developers/tutorials/4-form-building.md",sourceDirName:"developers/tutorials",slug:"/developers/tutorials/form-building",permalink:"/developers/tutorials/form-building",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"form-building",title:"Form Building"},sidebar:"docs",previous:{title:"Page Routing",permalink:"/developers/tutorials/page-routing"},next:{title:"Custom Themes",permalink:"/developers/tutorials/custom-themes"}},p=[{value:"Step 1: Create a Form Page",id:"step-1-create-a-form-page",children:[],level:3},{value:"Step 2: Building A Form",id:"step-2-building-a-form",children:[],level:3},{value:"Step 3: Testing your Form",id:"step-3-testing-your-form",children:[],level:3}],m={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," ",(0,o.kt)("br",null),"We would appreciate any feedback on our tutorial guide. If you are stuck at any time, make sure to contact the Abyss Admiral assigned to your team. If they cannot help, send a help request on our ",(0,o.kt)("a",{parentName:"p",href:"/contact-us/"},"Contact Page"),"."),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Before starting, be sure to complete the ",(0,o.kt)("a",{parentName:"p",href:"/developers/tutorials/create-abyss-app/"},"Create Abyss App")," tutorial."),(0,o.kt)("h3",{id:"step-1-create-a-form-page"},"Step 1: Create a Form Page"),(0,o.kt)("p",null,"In Visual Studio Code, open ",(0,o.kt)("strong",{parentName:"p"},"my-new-app")," project. From here, navigate into ",(0,o.kt)("strong",{parentName:"p"},"products/web/src/routes"),", and create a new folder, name ",(0,o.kt)("strong",{parentName:"p"},'"FormPage"'),". Within this new folder, we'll be creating two new files, named ",(0,o.kt)("strong",{parentName:"p"},'"index.js"')," and ",(0,o.kt)("strong",{parentName:"p"},'"FormPage.jsx"'),"."),(0,o.kt)("p",null,"Remember to connect your page to the router in ",(0,o.kt)("strong",{parentName:"p"},"products/web/src/routes/Routes.jsx")," by including a new Route shown below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Router.Route path="/form-page" element={<FormPage />} />\n')),(0,o.kt)("p",null,"You may reference the ",(0,o.kt)("a",{parentName:"p",href:"/developers/tutorials/page-routing/"},"Page Routing")," tutorial for more information on creating pages."),(0,o.kt)("h3",{id:"step-2-building-a-form"},"Step 2: Building A Form"),(0,o.kt)("p",null,"Within ",(0,o.kt)("strong",{parentName:"p"},"FormPage.jsx")," will be adding the ",(0,o.kt)("a",{parentName:"p",href:"/web/ui/form-provider"},"FormProvider")," and ",(0,o.kt)("a",{parentName:"p",href:"/web/ui/text-input"},"TextInput")," components to create a sample form. At the top of your file, copy and paste the following import statements:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { useForm } from '@abyss/web/hooks/useForm';\nimport { FormProvider } from '@abyss/web/ui/FormProvider';\nimport { TextInput } from '@abyss/web/ui/TextInput';\n")),(0,o.kt)("p",null,"A form can consist of many types of input components. In this form, we are using ",(0,o.kt)("strong",{parentName:"p"},"TextInput")," to populate the user's first name, middle name, and last name. Make sure all inputs are children of of the ",(0,o.kt)("strong",{parentName:"p"},"FormProvider")," component."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const FormPage = () => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="First Name"\n        model="firstName"\n        isClearable\n        validators={{ required: true }}\n      />\n      <TextInput label="Middle Name" model="middleName" isClearable />\n      <TextInput\n        label="Last Name"\n        model="lastName"\n        isClearable\n        validators={{ required: true }}\n      />\n    </FormProvider>\n  );\n};\n\nrender(() => {\n  return <FormPage />;\n});\n')),(0,o.kt)("p",null,"We can also include a ",(0,o.kt)("strong",{parentName:"p"},"SelectInput")," component as another alternative to collecting user input. Import your ",(0,o.kt)("strong",{parentName:"p"},"SelectInput")," component, and then add the following code after the last ",(0,o.kt)("strong",{parentName:"p"},"TextInput")," component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"<SelectInput\n  label=\"Favorite Fruit\"\n  placeholder=\"Select your favorite fruit\"\n  validators={{ required: true }}\n  isClearable\n  isSearchable\n  model=\"favoriteFruit\"\n  options={[\n    { value: 'honeycrisp-apple', label: 'Honeycrisp Apple' },\n    { value: 'pineapple', label: 'Pineapple' },\n    { value: 'mango', label: 'Mango' },\n    { value: 'banana', label: 'Banana' },\n    { value: 'raspberry', label: 'Raspberry' },\n    { value: 'strawberry', label: 'Strawberry' },\n    { value: 'blueberry', label: 'Blueberry' },\n  ]}\n/>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const FormPage = () => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label=\"First Name\"\n        model=\"firstName\"\n        isClearable\n        validators={{ required: true }}\n      />\n      <TextInput label=\"Middle Name\" model=\"middleName\" isClearable />\n      <TextInput\n        label=\"Last Name\"\n        model=\"lastName\"\n        isClearable\n        validators={{ required: true }}\n      />\n      <SelectInput\n        label=\"Favorite Fruit\"\n        placeholder=\"Select your favorite fruit\"\n        validators={{ required: true }}\n        isClearable\n        isSearchable\n        model=\"favoriteFruit\"\n        options={[\n          { value: 'honeycrisp-apple', label: 'Honeycrisp Apple' },\n          { value: 'pineapple', label: 'Pineapple' },\n          { value: 'mango', label: 'Mango' },\n          { value: 'banana', label: 'Banana' },\n          { value: 'raspberry', label: 'Raspberry' },\n          { value: 'strawberry', label: 'Strawberry' },\n          { value: 'blueberry', label: 'Blueberry' },\n        ]}\n      />\n    </FormProvider>\n  );\n};\n\nrender(() => {\n  return <FormPage />;\n});\n")),(0,o.kt)("p",null,"Lastly, we will create buttons in order to submit and clear the form inputs. The ",(0,o.kt)("strong",{parentName:"p"},"Layout")," component will be utilized in order to format the page. Import the ",(0,o.kt)("strong",{parentName:"p"},"Button")," and ",(0,o.kt)("strong",{parentName:"p"},"Layout")," components, and then after the last ",(0,o.kt)("strong",{parentName:"p"},"SelectInput")," that you added above, within the body of ",(0,o.kt)("strong",{parentName:"p"},"FormProvider"),", insert the following code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<Layout.Space />\n<Layout.Group alignLayout="right">\n  <Button variant="outline" onClick={handleClear}>\n    Clear Form\n  </Button>\n  <Button type="submit">Submit Form</Button>\n</Layout.Group>\n')),(0,o.kt)("p",null,"Let's add handlers for our submit and clear functions. Below the ",(0,o.kt)("strong",{parentName:"p"},"useForm()")," hook, add the two functions below for ",(0,o.kt)("strong",{parentName:"p"},"handleSubmit")," and ",(0,o.kt)("strong",{parentName:"p"},"handleClear"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const form = useForm();\n\nconst handleSubmit = (data) => {\n  console.log('Form Data', data);\n  alert('Submitted!');\n};\n\nconst handleClear = () => {\n  setFormValues();\n  form.reset();\n};\n")),(0,o.kt)("p",null,"Finally, attach the ",(0,o.kt)("strong",{parentName:"p"},"handleSubmit")," function by adding an ",(0,o.kt)("strong",{parentName:"p"},"onSubmit")," prop to your ",(0,o.kt)("strong",{parentName:"p"},"FormProvider"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"<FormProvider state={form} onSubmit={handleSubmit}>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const FormPage = () => {\n  const form = useForm();\n\n  const handleSubmit = (data) => {\n    console.log('Form Data', data);\n    alert('Submitted!');\n  };\n\n  const handleClear = () => {\n    form.reset();\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={handleSubmit}>\n      <TextInput\n        label=\"First Name\"\n        model=\"firstName\"\n        isClearable\n        validators={{ required: true }}\n      />\n      <TextInput label=\"Middle Name\" model=\"middleName\" isClearable />\n      <TextInput\n        label=\"Last Name\"\n        model=\"lastName\"\n        isClearable\n        validators={{ required: true }}\n      />\n      <SelectInput\n        label=\"Favorite Fruit\"\n        placeholder=\"Select your favorite fruit\"\n        validators={{ required: true }}\n        isClearable\n        isSearchable\n        model=\"favoriteFruit\"\n        options={[\n          { value: 'honeycrisp-apple', label: 'Honeycrisp Apple' },\n          { value: 'pineapple', label: 'Pineapple' },\n          { value: 'mango', label: 'Mango' },\n          { value: 'banana', label: 'Banana' },\n          { value: 'raspberry', label: 'Raspberry' },\n          { value: 'strawberry', label: 'Strawberry' },\n          { value: 'blueberry', label: 'Blueberry' },\n        ]}\n      />\n      <Layout.Space />\n      <Layout.Group alignLayout=\"right\">\n        <Button variant=\"outline\" onClick={handleClear}>\n          Clear Form\n        </Button>\n        <Button type=\"submit\">Submit Form</Button>\n      </Layout.Group>\n    </FormProvider>\n  );\n};\n\nrender(() => {\n  return <FormPage />;\n});\n")),(0,o.kt)("h3",{id:"step-3-testing-your-form"},"Step 3: Testing your Form"),(0,o.kt)("p",null,"At the end of creating a form & submitting the data, your code in ",(0,o.kt)("strong",{parentName:"p"},"FormPage.jsx")," should look like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { useForm } from '@abyss/web/hooks/useForm';\nimport { FormProvider } from '@abyss/web/ui/FormProvider';\nimport { TextInput } from '@abyss/web/ui/TextInput';\nimport { SelectInput } from '@abyss/web/ui/SelectInput';\nimport { Button } from '@abyss/web/ui/Button';\nimport { Layout } from '@abyss/web/ui/Layout';\n\nconst FormPage = () => {\n  const form = useForm();\n\n  const handleSubmit = (data) => {\n    console.log('Form Data', data);\n    alert('Submitted!');\n  };\n\n  const handleClear = () => {\n    form.reset();\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={handleSubmit}>\n      <TextInput\n        label=\"First Name\"\n        model=\"firstName\"\n        isClearable\n        validators={{ required: true }}\n      />\n      <TextInput label=\"Middle Name\" model=\"middleName\" isClearable />\n      <TextInput\n        label=\"Last Name\"\n        model=\"lastName\"\n        isClearable\n        validators={{ required: true }}\n      />\n      <SelectInput\n        label=\"Favorite Fruit\"\n        placeholder=\"Select your favorite fruit\"\n        validators={{ required: true }}\n        isClearable\n        isSearchable\n        model=\"favoriteFruit\"\n        options={[\n          { value: 'honeycrisp-apple', label: 'Honeycrisp Apple' },\n          { value: 'pineapple', label: 'Pineapple' },\n          { value: 'mango', label: 'Mango' },\n          { value: 'banana', label: 'Banana' },\n          { value: 'raspberry', label: 'Raspberry' },\n          { value: 'strawberry', label: 'Strawberry' },\n          { value: 'blueberry', label: 'Blueberry' },\n        ]}\n      />\n      <Layout.Space />\n      <Layout.Group alignLayout=\"right\">\n        <Button variant=\"outline\" onClick={handleClear}>\n          Clear Form\n        </Button>\n        <Button type=\"submit\">Submit Form</Button>\n      </Layout.Group>\n    </FormProvider>\n  );\n};\n")),(0,o.kt)("p",null,"Great job, you have successfully built a form!"))}d.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(n),c=a,b=d["".concat(u,".").concat(c)]||d[c]||m[c]||o;return n?r.createElement(b,l(l({ref:t},p),{},{components:n})):r.createElement(b,l({ref:t},p))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);