"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[5906],{30876:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>c});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(t),c=r,h=m["".concat(s,".").concat(c)]||m[c]||d[c]||l;return t?a.createElement(h,o(o({ref:n},u),{},{components:t})):a.createElement(h,o({ref:n},u))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},89894:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>s,default:()=>v,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var a=t(7896),r=t(31461),l=(t(67294),t(30876)),o=["components"],i={id:"text-input",category:"Forms",title:"TextInput",description:"Allows users to enter text into a UI.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=641%3A11876",pagination_prev:"web/ui/slider",pagination_next:"web/ui/text-input-area"},s=void 0,p={unversionedId:"web/ui/text-input",id:"web/ui/text-input",isDocsHomePage:!1,title:"TextInput",description:"Allows users to enter text into a UI.",source:"@site/docs/web/ui/TextInput.md",sourceDirName:"web/ui",slug:"/web/ui/text-input",permalink:"/web/ui/text-input",tags:[],version:"current",frontMatter:{id:"text-input",category:"Forms",title:"TextInput",description:"Allows users to enter text into a UI.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=641%3A11876",pagination_prev:"web/ui/slider",pagination_next:"web/ui/text-input-area"},sidebar:"docs",previous:{title:"Slider",permalink:"/web/ui/slider"},next:{title:"TextInputArea",permalink:"/web/ui/text-input-area"}},u=[{value:"useForm (Recommended)",id:"useform-recommended",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Placeholder",id:"placeholder",children:[],level:2},{value:"Add Elements inside Input",id:"add-elements-inside-input",children:[],level:2},{value:"Addons",id:"addons",children:[],level:2},{value:"Sub Text",id:"sub-text",children:[],level:2},{value:"Error Message",id:"error-message",children:[],level:2},{value:"Descriptors Display",id:"descriptors-display",children:[],level:2},{value:"Label",id:"label",children:[],level:2},{value:"Clearable",id:"clearable",children:[],level:2},{value:"Disabled",id:"disabled",children:[],level:2},{value:"Max Length",id:"max-length",children:[],level:2},{value:"Formatter",id:"formatter",children:[],level:2},{value:"Auto Complete",id:"auto-complete",children:[],level:2},{value:"Highlighted",id:"highlighted",children:[],level:2},{value:"Masks",id:"masks",children:[{value:"Phone",id:"phone",children:[],level:3},{value:"Date",id:"date",children:[],level:3},{value:"Zip",id:"zip",children:[],level:3},{value:"Social Security Number",id:"social-security-number",children:[],level:3},{value:"Numeric",id:"numeric",children:[],level:3},{value:"Currency",id:"currency",children:[],level:3},{value:"Return Unmasked Value",id:"return-unmasked-value",children:[],level:3},{value:"Empty Mask Character",id:"empty-mask-character",children:[],level:3},{value:"Custom Mask Patterns",id:"custom-mask-patterns",children:[],level:3}],level:2},{value:"Types",id:"types",children:[{value:"Text",id:"text",children:[],level:3},{value:"Password",id:"password",children:[],level:3},{value:"Search",id:"search",children:[],level:3}],level:2},{value:"Validation",id:"validation",children:[],level:2},{value:"Width",id:"width",children:[],level:2}],d=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",n)}},m=d("Tab"),c=d("ExitLink"),h={toc:u};function v(e){var n=e.components,t=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},h,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)(m,{label:"Overview",mdxType:"Tab"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { TextInput } from '@abyss/web/ui/TextInput';\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'TextInput',\n  inputs: [\n    {\n      prop: 'errorMessage',\n      type: 'string',\n    },\n    {\n      prop: 'placeholder',\n      type: 'string',\n    },\n    {\n      prop: 'subText',\n      type: 'string',\n    },\n    {\n      prop: 'width',\n      type: 'number',\n    },\n    {\n      prop: 'mask',\n      type: 'select',\n      isClearable: true,\n      options: [\n        { label: 'Phone', value: 'phone' },\n        { label: 'SSN', value: 'ssn' },\n        { label: 'Date', value: 'date' },\n        { label: 'Zipcode', value: 'zip' },\n        { label: 'Numeric', value: 'numeric' },\n      ]\n    },\n    {\n      prop: 'type',\n      type: 'select',\n      isClearable: true,\n      options: [\n        { label: 'Text', value: 'text' },\n        { label: 'Password', value: 'password' },\n        { label: 'Search', value: 'search' },\n      ]\n    },\n    {\n      prop: 'hideLabel',\n      type: 'boolean',\n    },\n    {\n      prop: 'isClearable',\n      type: 'boolean',\n    },\n    {\n      prop: 'isDisabled',\n      type: 'boolean',\n    },\n    {\n      prop: 'highlighted',\n      type: 'boolean',\n      defaultValue: false,\n    },\n  ]\n}\n\n() => {\n  const [value, setValue] = useState('State Default Value');\n\n  return (\n    <TextInput\n      label=\"TextInput Sandbox\"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n      onClear={() => setValue('')}\n    />\n  );\n};\n")),(0,l.kt)("h2",{id:"useform-recommended"},"useForm (Recommended)"),(0,l.kt)("p",null,"Using the ",(0,l.kt)("inlineCode",{parentName:"p"},"useForm")," hook for handling TextInput lets the DOM handle form data."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      textForm: \'init\',\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <TextInput\n        label="TextInput Form"\n        placeholder="Form"\n        model="textForm"\n        isClearable\n        validators={{ required: true }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"usestate"},"useState"),(0,l.kt)("p",null,"Using the ",(0,l.kt)("inlineCode",{parentName:"p"},"useState")," hook gets values from the component state."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('');\n\n  const onSubmit = () => {\n    console.log('value', value);\n  };\n\n  return (\n    <React.Fragment>\n      <TextInput\n        label=\"TextInput useState\"\n        placeholder=\"State\"\n        value={value}\n        isClearable\n        onChange={(e) => setValue(e.target.value)}\n        onClear={() => setValue('')}\n      />\n      <Button onClick={onSubmit} style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </React.Fragment>\n  );\n};\n")),(0,l.kt)("h2",{id:"placeholder"},"Placeholder"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"placeholder")," prop to give users a short description in the input field before they enter a value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Placeholder"\n        placeholder="Placeholder"\n        model="placeholder"\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"add-elements-inside-input"},"Add Elements inside Input"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"inputLeftElement")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"inputRightElement")," props to add elements to the inside of the text input field. The recommended usage is for inserting icons."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Add Elements"\n        placeholder="Placeholder Text"\n        model="addElement"\n        isClearable\n        inputLeftElement={\n          <IconMaterial icon="phone" size="18px" color="$gray6" />\n        }\n        inputRightElement={<IconMaterial icon="check" size="18px" />}\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"addons"},"Addons"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"leftAddOn")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"rightAddOn")," props to add addons to the outside of the text input field. The recommended usage is for inserting supplemental text."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Left Addons"\n        placeholder="Placeholder Text"\n        model="leftAddOn"\n        isClearable\n        leftAddOn="http://"\n      />\n      <TextInput\n        label="Right Addons"\n        placeholder="Placeholder Text"\n        model="rightAddOn"\n        isClearable\n        leftAddOn="http://"\n        rightAddOn=".com"\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"sub-text"},"Sub Text"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"subText")," prop to display helpful text below the input field."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput label="Sub Text" model="subText" subText="Custom Sub Text" />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"error-message"},"Error Message"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"errorMessage")," prop to display a custom error message below the input field."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\'init\');\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Input With Error"\n        errorMessage="Error Message"\n        value={value}\n        isClearable\n        onChange={(e) => setValue(e.target.value)}\n        onClear={() => setValue(\'\')}\n      />\n\n      <TextInput\n        label="Input Addons With Error"\n        errorMessage="Error Message"\n        value={value}\n        isClearable\n        onChange={(e) => setValue(e.target.value)}\n        onClear={() => setValue(\'\')}\n        leftAddOn={\n          <Text color="$gray8" size="$md">\n            http://\n          </Text>\n        }\n        rightAddOn={\n          <Text color="$gray8" size="$md">\n            .com\n          </Text>\n        }\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"descriptors-display"},"Descriptors Display"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," prop to set the orientation of the error message and subtext descriptor content. Available variants include 'column' and 'row'. The default is set to 'row'."),(0,l.kt)("p",null,"Use the ",(0,l.kt)("a",{parentName:"p",href:"form-provider#descriptors-display"},"FormProvider")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"descriptorsDisplay")," to set the descriptors orientation across an entire form."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = useState(\'\');\n\n  return (\n    <TextInput\n      onChange={(e) => setValue(e.target.value)}\n      value={value}\n      label="Descriptors Display"\n      subText="Subtext Message"\n      errorMessage="Error Message"\n      descriptorsDisplay="column"\n    />\n  );\n};\n')),(0,l.kt)("h2",{id:"label"},"Label"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"label")," prop to display a label above the input. To hide the input label set ",(0,l.kt)("inlineCode",{parentName:"p"},"hideLabel")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Custom Label"\n        placeholder="Custom Label"\n        model="custom-label"\n      />\n      <TextInput\n        label="Hidden Label"\n        placeholder="Hidden Label"\n        model="custom-hidden-label"\n        hideLabel\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"clearable"},"Clearable"),(0,l.kt)("p",null,"Set the ",(0,l.kt)("inlineCode",{parentName:"p"},"isClearable")," prop to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to display a clear button in the input field. Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"onClear")," prop to handle the clear action."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      clearable: \'Clearable\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput label="Clearable" model="clearable" isClearable={true} />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"disabled"},"Disabled"),(0,l.kt)("p",null,"Set the ",(0,l.kt)("inlineCode",{parentName:"p"},"isDisabled")," prop to ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," to disable the input field so users cannot enter a value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      disabled: \'Disabled\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput isDisabled={true} label="Disabled" model="disabled" />\n      <TextInput\n        isDisabled={true}\n        label="Addons with Disabled"\n        model="disabled"\n        leftAddOn={\n          <Text color="$gray8" size="$md">\n            http://\n          </Text>\n        }\n        rightAddOn={\n          <Text color="$gray8" size="$md">\n            .com\n          </Text>\n        }\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"max-length"},"Max Length"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"maxLength")," prop to limit the number of characters allowed in the input field."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Max Length"\n        maxLength={4}\n        model="maxLength"\n        placeholder="Type to see character limit"\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"formatter"},"Formatter"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"formatter")," prop to format values on change for text inputs."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Replace special characters with empty string"\n        model="replaceSpecialCharacters"\n        placeholder="Replace special characters with empty string"\n        formatter={(value) => {\n          return value.replace(/[&\\/\\\\#,+()$~%.\'":*?<>{}]/g, \'\');\n        }}\n      />\n      <TextInput\n        label="Uppercase Characters"\n        model="uppercase"\n        placeholder="Uppercase Characters"\n        formatter={(value) => {\n          return value.toUpperCase();\n        }}\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"auto-complete"},"Auto Complete"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"autoComplete")," prop anytime you are collecting information about the user. Head to ",(0,l.kt)(c,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete",mdxType:"ExitLink"},"Mozilla")," to find all of the autocomplete options."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Auto Complete"\n        placeholder="Phone"\n        mask="phone"\n        mask="phone"\n        model="autocomplete"\n        autoComplete="tel-local"\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"highlighted"},"Highlighted"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"highlighted")," prop to enable the background color for the input. You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"FormProvider")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"highlighted")," to enable the color to appear if validation is required."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const [value, setValue] = useState('');\n\n  return (\n    <TextInput\n      label=\"TextInput useState\"\n      placeholder=\"State\"\n      value={value}\n      isClearable\n      highlighted\n      onChange={(e) => setValue(e.target.value)}\n      onClear={() => setValue('')}\n    />\n  );\n};\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit} highlighted>\n      <TextInput\n        label="TextInput Form"\n        placeholder="Form"\n        model="textForm"\n        isClearable\n        validators={{ required: true }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"masks"},"Masks"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"mask")," prop to set the masking variation of input field. Included masks: ",(0,l.kt)("inlineCode",{parentName:"p"},"'phone'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"'date'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"'zip'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"'dollar'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"'numeric'"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"'ssn'"),"."),(0,l.kt)("p",null,"Further configuration can be set by usage of the ",(0,l.kt)("inlineCode",{parentName:"p"},"maskConig")," prop which utlizes the ",(0,l.kt)("strong",{parentName:"p"},"react-number-format")," library to take in an object of additional props. For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"maskConfig: {\n  thousandSeperator: ',',\n  allowLeadingZeros: true,\n}\n")),(0,l.kt)("br",null),(0,l.kt)("p",null,"Please visit this ",(0,l.kt)(c,{href:"https://github.com/s-yadav/react-number-format/blob/master/documentation/v4.md",mdxType:"ExitLink"},"link")," for detailed documentation on all available configuration settings."),(0,l.kt)("h3",{id:"phone"},"Phone"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      phone: \'5555551234\',\n    },\n  });\n\n  const [value, setValue] = useState(\'5555551234\');\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form}>\n        <TextInput\n          label="Phone Mask"\n          placeholder="(___) ___-____"\n          mask="phone"\n          model="phone"\n          autoComplete="tel-local"\n        />\n      </FormProvider>\n      <TextInput\n        label="Phone Mask"\n        placeholder="(___) ___-____"\n        mask="phone"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        autoComplete="tel-local"\n      />\n    </React.Fragment>\n  );\n};\n')),(0,l.kt)("h3",{id:"date"},"Date"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      date: \'01/01/2001\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Date Mask"\n        mask="date"\n        model="date"\n        subText="Date Field Format: mm/dd/yyyy"\n        placeholder="mm/dd/yyyy"\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h3",{id:"zip"},"Zip"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      zip: \'12345\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Zip Mask"\n        mask="zip"\n        model="zip"\n        autoComplete="postal-code"\n        placeholder="_____"\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h3",{id:"social-security-number"},"Social Security Number"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      ssn: \'111223333\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="SSN Mask"\n        mask="ssn"\n        model="ssn"\n        placeholder="___-__-____"\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h3",{id:"numeric"},"Numeric"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      numericConfig: \'1123123.12\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput label="Numeric Mask" mask="numeric" model="numeric" />\n      <TextInput\n        label="Numeric Mask w/ Config"\n        mask="numeric"\n        model="numericConfig"\n        maskConfig={{\n          thousandSeparator: \',\',\n          decimalScale: 2,\n        }}\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h3",{id:"currency"},"Currency"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm({\n    defaultValues: {\n      currency: '1123123.12',\n    },\n  });\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <FormProvider state={form} onSubmit={onSubmit}>\n      <TextInput\n        label=\"Currency\"\n        mask=\"numeric\"\n        model=\"currency\"\n        returnUnmaskedValue\n        maskConfig={{\n          thousandSeparator: ',',\n          fixedDecimalScale: true,\n          decimalScale: 2,\n          prefix: '$',\n        }}\n      />\n      <Button type=\"submit\" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n")),(0,l.kt)("h3",{id:"return-unmasked-value"},"Return Unmasked Value"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"returnUnmaskedValue")," prop to return a unmasked value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      phone1: \'1112223333\',\n      phone2: \'(555) 444-3333\',\n    },\n  });\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Phone Mask"\n        mask="phone"\n        model="phone1"\n        autoComplete="tel-local"\n        returnUnmaskedValue\n      />\n      <p>Unmasked Value: {form.getValues(\'phone1\')}</p>\n      <TextInput\n        label="Phone Mask"\n        mask="phone"\n        model="phone2"\n        autoComplete="tel-local"\n        returnUnmaskedValue={false}\n      />\n      <p>Masked Value: {form.getValues(\'phone2\')}</p>\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h3",{id:"empty-mask-character"},"Empty Mask Character"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"emptyMaskChar")," prop to replace the empty mask placeholder."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      phone: \'555\',\n      ssn: \'555\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="^ Mask"\n        mask="phone"\n        model="phone"\n        autoComplete="tel-local"\n        emptyMaskChar="^"\n      />\n      <TextInput label="* Mask" mask="ssn" model="ssn" emptyMaskChar="*" />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h3",{id:"custom-mask-patterns"},"Custom Mask Patterns"),(0,l.kt)("p",null,"Pass in a custom pattern into the ",(0,l.kt)("inlineCode",{parentName:"p"},"mask")," prop to create unique masks. The hash string, ",(0,l.kt)("inlineCode",{parentName:"p"},"#"),", allows number inputs inplace of the hash."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      customCC: \'1234567891234567\',\n      customPhone: \'1234567890\',\n      customCurrency: \'50.25\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Custom Mask Credit Card"\n        mask="#### #### #### ####"\n        model="customCC"\n        autoComplete="cc-number"\n      />\n      <TextInput\n        label="Custom Mask Phone"\n        mask="+1 (###) ###-####"\n        model="customPhone"\n        autoComplete="tel-local"\n      />\n      <TextInput\n        label="Custom Currency Mask"\n        model="customCurrency"\n        mask="numeric"\n        maskConfig={{\n          prefix: \'$\',\n          decimalScale: 2,\n          isAllowed: ({ floatValue }) => {\n            const value = floatValue || 0;\n            return value <= 99.99;\n          },\n        }}\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"types"},"Types"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," prop to set the type of input field to be displayed. Types include: ",(0,l.kt)("inlineCode",{parentName:"p"},"'text'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"'email'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"'tel'"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"'password'"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"'search'"),"."),(0,l.kt)("h3",{id:"text"},"Text"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      text: \'Type Text\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput label="Type Text" type="text" model="text" />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h3",{id:"password"},"Password"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm({\n    defaultValues: {\n      password: \'SuperSecretPassword\',\n    },\n  });\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Type Text"\n        type="password"\n        model="password"\n        autoComplete="new-password"\n        isClearable\n      />\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h3",{id:"search"},"Search"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"onClickSearch")," prop to set the callback for the search button."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [value, setValue] = React.useState(\'Text\');\n\n  const handleSearch = () => {\n    console.log(\'value: \', value);\n  };\n\n  return (\n    <TextInput\n      type="search"\n      label="Search"\n      value={value}\n      onChange={(e) => setValue(e.target.value)}\n      onClear={() => setValue(\'\')}\n      onClickSearch={handleSearch}\n      isClearable\n      leftAddOn="http://"\n      rightAddOn=".com"\n      inputRightElement={\n        <IconMaterial icon="phone" size="18px" color="$gray6" />\n      }\n    />\n  );\n};\n')),(0,l.kt)("h2",{id:"validation"},"Validation"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"validators")," prop to set rules for the field to be valid."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Required Default Message"\n        model="required"\n        validators={{ required: true }}\n      />\n      <TextInput\n        label="Required Custom Message"\n        model="custom-required"\n        validators={{ required: \'Custom Error Message\' }}\n      />\n      <TextInput\n        label="Min Length"\n        model="minLength"\n        validators={{\n          required: true,\n          minLength: {\n            value: 4,\n            message: \'Min Length 4\',\n          },\n        }}\n      />\n      <TextInput\n        label="Max Length"\n        model="maxLength"\n        validators={{\n          required: true,\n          maxLength: {\n            value: 4,\n            message: \'Max Length 4\',\n          },\n        }}\n      />\n      <TextInput\n        label="Custom Pattern (Email)"\n        model="pattern"\n        autoComplete="email"\n        validators={{\n          required: true,\n          pattern: {\n            value:\n              /^(([^<React.Fragment>()[\\]\\\\.,;:\\s@"]+(\\.[^<React.Fragment>()[\\]\\\\.,;:\\s@"]+)*)|(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            message: \'Invalid Email\',\n          },\n        }}\n      />\n      <TextInput\n        label="Custom Validators"\n        model="validate"\n        validators={{\n          validate: {\n            positive: (v) => parseInt(v) > 0 || \'should be greater than 0\',\n            lessThanTen: (v) => parseInt(v) < 10 || \'should be lower than 10\',\n            // you can do asynchronous validation as well\n            //checkUrl: async () => await fetch() || \'error message\',\n            messages: (v) => !v && [\'otherInput1\', \'otherInput2\'],\n          },\n        }}\n      />\n      <Button type="submit" style={{ marginTop: 15 }}>\n        Submit\n      </Button>\n    </FormProvider>\n  );\n};\n')),(0,l.kt)("h2",{id:"width"},"Width"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"width")," prop to set the width of the input field."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const form = useForm();\n\n  return (\n    <FormProvider state={form}>\n      <TextInput\n        label="Width Default"\n        model="width1"\n        placeholder="Default Width"\n        isClearable\n      />\n      <TextInput\n        width="75%"\n        label="Width 75%"\n        model="width2"\n        placeholder="Width Set To 75%"\n        isClearable\n      />\n      <TextInput\n        width="335px"\n        model="width3"\n        label="Width 335px"\n        placeholder="Width Set To 335px"\n        isClearable\n      />\n    </FormProvider>\n  );\n};\n'))),(0,l.kt)(m,{label:"Integration",mdxType:"Tab"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={TextInput}\n  rows={[\n    {\n      name: 'label',\n      type: 'string',\n      description: 'Label for input field',\n    },\n    {\n      name: 'placeholder',\n      type: 'string',\n      description:\n        'Short description displayed in the input before the user enters a value',\n    },\n    {\n      name: 'isDisabled',\n      type: 'boolean',\n      description:\n        'Flag to enable/disable the input. If true, the input will be disabled',\n    },\n    {\n      name: 'isClearable',\n      type: 'boolean',\n      description:\n        'Flag to display/hide a clear button. If true, a clear button will be visable to the user',\n    },\n    {\n      name: 'isRequired',\n      type: 'boolean',\n      description: 'Flag to require text',\n    },\n    {\n      name: 'returnUnmaskedValue',\n      type: 'boolean',\n      description:\n        'Flag to return masked or unmasked value. If true, the value will be unmasked',\n    },\n    {\n      name: 'returnMaskAsNumber',\n      type: 'boolean',\n      description: 'Flag to return value as masked number',\n    },\n    {\n      name: 'value',\n      type: 'number | string',\n      description: 'Value of the text input',\n    },\n    {\n      name: 'validators',\n      type: 'object',\n      description: 'Set rules for the input field to be valid',\n    },\n    {\n      name: 'css',\n      type: 'shape',\n      description: 'Stitches styling',\n    },\n    {\n      name: 'onChange',\n      type: 'function',\n      description: 'Callback fired everytime the value changes',\n    },\n    {\n      name: 'onClear',\n      type: 'function',\n      description:\n        'Callback fired when user clicks the clear button. The isClearable property must be set to true',\n    },\n    {\n      name: 'onClickSearch',\n      type: 'function',\n      description: 'Callback fired when user clicks the search button.',\n    },\n    {\n      name: 'onFocus',\n      type: 'function',\n      description: 'Callback fired everytime the component is focused',\n    },\n    {\n      name: 'onBlur',\n      type: 'function',\n      description: 'Callback fired everytime the component is unfocused',\n    },\n    {\n      name: 'onKeyDown',\n      type: 'function',\n      description:\n        'Callback fired everytime a key is pressed while focused in the component',\n    },\n    {\n      name: 'onPaste',\n      type: 'function',\n      description:\n        'Callback fired everytime something is pasted into the component',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'mask',\n      type: \"'phone' | 'zip' | 'date' | 'ssn' | 'numeric'\",\n      description: 'Format of the input value',\n    },\n    {\n      name: 'maskConfig',\n      type: 'shape',\n      description:\n        'Set configs for mask utilized by the react-number-format library',\n    },\n    {\n      name: 'type',\n      type: 'string',\n      description: 'Set the type of input field',\n    },\n    {\n      name: 'width',\n      type: 'string',\n      description: 'Width of the input field',\n    },\n    {\n      name: 'errorMessage',\n      type: 'string',\n      description: 'Error message to be displayed below input field',\n    },\n    {\n      name: 'emptyMaskChar',\n      type: 'string',\n      description: 'Character placeholder for empty mask inputs',\n    },\n    {\n      name: 'autoComplete',\n      type: 'string',\n      description:\n        'The autocomplete status that is passed to the form element in the FormProvider',\n    },\n    {\n      name: 'subText',\n      type: 'string',\n      description: 'Set the text displayed below input field',\n    },\n    {\n      name: 'descriptorsDisplay',\n      type: '\"row\" | \"column\"',\n      description:\n        'Set the orientation of descriptor content located below input field',\n    },\n    {\n      name: 'hideLabel',\n      type: 'boolean',\n      description: 'Flag to show or hide label',\n    },\n    {\n      name: 'formatter',\n      type: 'function',\n      description:\n        'Function used to format value on change when using form provider',\n    },\n    {\n      name: 'inputLeftElement',\n      type: 'node',\n      description: 'Add element to left of inside text input',\n    },\n    {\n      name: 'inputRightElement',\n      type: 'node',\n      description: 'Add element to right of inside text input',\n    },\n    {\n      name: 'leftAddOn',\n      type: 'node',\n      description: 'Add Addon to left of outside text input',\n    },\n    {\n      name: 'rightAddOn',\n      type: 'node',\n      description: 'Add Addon to right of outside text input',\n    },\n  ]}\n/>\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={TextInput}\n  rows={[\n    {\n      name: 'text-input-root',\n      description: 'TextInput root element',\n    },\n    {\n      name: 'text-input-label',\n      description: 'FormInput label',\n    },\n    {\n      name: 'text-input-clear',\n      description: 'FormInput clear',\n    },\n    {\n      name: 'text-input-descriptors',\n      description: 'Descriptor for FormInput',\n    },\n    {\n      name: 'text-input-left-add-on',\n      description: 'Content for Left AddOn',\n    },\n    {\n      name: 'text-input-right-add-on',\n      description: 'Content for Right AddOn',\n    },\n    {\n      name: 'text-input-left-element',\n      description: 'Content for Left Element',\n    },\n    {\n      name: 'text-input-left-element-wrapper',\n      description: 'Wrapper for Left Element',\n    },\n    {\n      name: 'text-input-right-element',\n      description: 'Content for Right Element',\n    },\n    {\n      name: 'text-input-right-element-wrapper',\n      description: 'Wrapper for Right Element',\n    },\n    {\n      name: 'form-input-wrapper-container',\n      description: 'Wrapper container for input elements',\n    },\n  ]}\n/>\n"))))}v.isMDXComponent=!0}}]);