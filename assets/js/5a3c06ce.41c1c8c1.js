"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[1480],{30876:(n,e,i)=>{i.d(e,{Zo:()=>p,kt:()=>u});var t=i(67294);function a(n,e,i){return e in n?Object.defineProperty(n,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[e]=i,n}function o(n,e){var i=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),i.push.apply(i,t)}return i}function r(n){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?o(Object(i),!0).forEach((function(e){a(n,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(i,e))}))}return n}function s(n,e){if(null==n)return{};var i,t,a=function(n,e){if(null==n)return{};var i,t,a={},o=Object.keys(n);for(t=0;t<o.length;t++)i=o[t],e.indexOf(i)>=0||(a[i]=n[i]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)i=o[t],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(n,i)&&(a[i]=n[i])}return a}var l=t.createContext({}),d=function(n){var e=t.useContext(l),i=e;return n&&(i="function"==typeof n?n(e):r(r({},e),n)),i},p=function(n){var e=d(n.components);return t.createElement(l.Provider,{value:e},n.children)},g={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},c=t.forwardRef((function(n,e){var i=n.components,a=n.mdxType,o=n.originalType,l=n.parentName,p=s(n,["components","mdxType","originalType","parentName"]),c=d(i),u=a,m=c["".concat(l,".").concat(u)]||c[u]||g[u]||o;return i?t.createElement(m,r(r({ref:e},p),{},{components:i})):t.createElement(m,r({ref:e},p))}));function u(n,e){var i=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=i.length,r=new Array(o);r[0]=c;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:a,r[1]=s;for(var d=2;d<o;d++)r[d]=i[d];return t.createElement.apply(null,r)}return t.createElement.apply(null,i)}c.displayName="MDXCreateElement"},41082:(n,e,i)=>{i.r(e),i.d(e,{contentTitle:()=>l,default:()=>L,frontMatter:()=>s,metadata:()=>d,toc:()=>p});var t=i(7896),a=i(31461),o=(i(67294),i(30876)),r=["components"],s={id:"loading-spinner",category:"Overlay",title:"LoadingSpinner",description:"Infinite loading spinner",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=2398%3A21821",pagination_prev:"web/ui/loading-overlay",pagination_next:"web/ui/modal"},l=void 0,d={unversionedId:"web/ui/loading-spinner",id:"web/ui/loading-spinner",isDocsHomePage:!1,title:"LoadingSpinner",description:"Infinite loading spinner",source:"@site/docs/web/ui/LoadingSpinner.md",sourceDirName:"web/ui",slug:"/web/ui/loading-spinner",permalink:"/web/ui/loading-spinner",tags:[],version:"current",frontMatter:{id:"loading-spinner",category:"Overlay",title:"LoadingSpinner",description:"Infinite loading spinner",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=2398%3A21821",pagination_prev:"web/ui/loading-overlay",pagination_next:"web/ui/modal"},sidebar:"docs",previous:{title:"LoadingOverlay",permalink:"/web/ui/loading-overlay"},next:{title:"Modal",permalink:"/web/ui/modal"}},p=[{value:"Overview",id:"overview",children:[],level:2},{value:"Children",id:"children",children:[],level:2},{value:"Variants",id:"variants",children:[],level:2},{value:"Button",id:"button",children:[],level:2}],g=function(n){return function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)}},c=g("Tab"),u=g("ExitLink"),m={toc:p};function L(n){var e=n.components,i=(0,a.Z)(n,r);return(0,o.kt)("wrapper",(0,t.Z)({},m,i,{components:e,mdxType:"MDXLayout"}),(0,o.kt)(c,{label:"Overview",mdxType:"Tab"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { LoadingSpinner } from '@abyss/web/ui/LoadingSpinner';\n")),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"Loading Spinner requires the ",(0,o.kt)("inlineCode",{parentName:"p"},"ariaLoadingLabel")," prop, to describe what is happening while the loading spinner is active. Common labels are 'Submitting Form', 'Downloading Files', 'Content is loading', etc. Be descriptive as possible."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'<LoadingSpinner ariaLoadingLabel="Downloading" isLoading={isLoading} />\n')),(0,o.kt)("h2",{id:"children"},"Children"),(0,o.kt)("p",null,"On size ",(0,o.kt)("inlineCode",{parentName:"p"},"$lg"),", the Loading Spinner takes in and displays a child. For branding or icons, you can go to the Brandmark, Icon Material, or Icon Brand page for options."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isLoading, setIsLoading] = useState(true);\n  const toggleLoading = () => {\n    setIsLoading(!isLoading);\n  };\n\n  return (\n    <Layout.Group>\n      <LoadingSpinner\n        size="$lg"\n        isLoading={isLoading}\n        ariaLoadingLabel="Loading page"\n      >\n        <IconMaterial color="$primary1" icon="upload_file" size="35px" />\n      </LoadingSpinner>\n      <Box color="$primary1">\n        <LoadingSpinner\n          size="$lg"\n          variant="light"\n          isLoading={isLoading}\n          ariaLoadingLabel="Downloading files"\n        >\n          <IconMaterial color="$white" icon="upload_file" size="35px" />\n        </LoadingSpinner>\n      </Box>\n    </Layout.Group>\n  );\n};\n')),(0,o.kt)("h2",{id:"variants"},"Variants"),(0,o.kt)("p",null,"Loading spinner comes in three sizes, ",(0,o.kt)("inlineCode",{parentName:"p"},"$lg, $md, $sm"),". With the ",(0,o.kt)("inlineCode",{parentName:"p"},"$sm")," variant being used solely for use on buttons. There are two variants to choose from, ",(0,o.kt)("inlineCode",{parentName:"p"},"default | light"),". The default settings are set to ",(0,o.kt)("inlineCode",{parentName:"p"},"variant = default, size = $md"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isLoading, setIsLoading] = useState(true);\n  const toggleLoading = () => {\n    setIsLoading(!isLoading);\n  };\n\n  return (\n    <Layout.Stack space={20}>\n      <Layout.Group space={20}>\n        <LoadingSpinner\n          size="$sm"\n          isLoading={isLoading}\n          ariaLoadingLabel="Downloading files"\n        />\n        <LoadingSpinner\n          isLoading={isLoading}\n          ariaLoadingLabel="Importing data"\n        />\n        <LoadingSpinner\n          size="$lg"\n          isLoading={isLoading}\n          ariaLoadingLabel="Submitting form"\n        />\n      </Layout.Group>\n      <Box color="$primary1">\n        <Layout.Group space={20}>\n          <LoadingSpinner\n            size="$sm"\n            variant="light"\n            isLoading={isLoading}\n            ariaLoadingLabel="Downloading files"\n          />\n          <LoadingSpinner\n            variant="light"\n            isLoading={isLoading}\n            ariaLoadingLabel="Importing data"\n          />\n          <LoadingSpinner\n            size="$lg"\n            variant="light"\n            isLoading={isLoading}\n            ariaLoadingLabel="Submitting form"\n          />\n        </Layout.Group>\n      </Box>\n    </Layout.Stack>\n  );\n};\n')),(0,o.kt)("h2",{id:"button"},"Button"),(0,o.kt)("p",null,"The Button component has Loading Spinner integration. Head over to the ",(0,o.kt)("a",{parentName:"p",href:"button/"},"Button")," component documentation to learn more."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  return (\n    <Layout.Group space={20}>\n      <Layout.Stack space={20}>\n        <Button\n          isLoading={isLoading}\n          ariaLoadingLabel="Importing data"\n          onClick={() => setIsLoading(!isLoading)}\n        >\n          Submit\n        </Button>\n      </Layout.Stack>\n    </Layout.Group>\n  );\n};\n'))),(0,o.kt)(c,{label:"Integration",mdxType:"Tab"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={LoadingSpinner}\n  rows={[\n    {\n      name: 'children',\n      type: 'node',\n      description: 'The contents of the spinner component',\n    },\n    {\n      name: 'isLoading',\n      type: 'boolean',\n      description:\n        'Flag to show or hide the loading spinner. If true, spinner is visible',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the spinner',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description: 'Default sizes of the spinner',\n    },\n    {\n      name: 'variant',\n      type: 'string',\n      description: 'Set what color the spinner will be. `light` or `default`',\n    },\n    {\n      name: 'ariaLoadingLabel',\n      type: 'string',\n      description:\n        'Text to describe what is happening while the loading spinner is active',\n    },\n  ]}\n/>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={LoadingSpinner}\n  rows={[\n    {\n      name: 'loading-spinner-root',\n      description: 'Spinner root element',\n    },\n  ]}\n/>\n"))),(0,o.kt)(c,{label:"Accessibility",mdxType:"Tab"},(0,o.kt)("p",null,"Following the requirements of WAI-ARIA, Loading Spinner follows the requirements 4.1.3: Status Messages. Status messages are defined by WCAG as messages that provide information on the success or results of a user action, but do not change the users context (i.e. take focus)."),(0,o.kt)("p",null,"Loading Spinner is programmed through the ",(0,o.kt)("inlineCode",{parentName:"p"},"ariaLoadingLabel")," property, and has been tested using a screen reader to present a status message to assistive technology without receiving focus."),(0,o.kt)("p",null,"Adheres to the ",(0,o.kt)(u,{href:"https://www.w3.org/WAI/WCAG21/Understanding/status-messages.html",mdxType:"ExitLink"},"Status messages WAI-ARIA design pattern"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isLoading, setIsLoading] = useState(true);\n  const toggleLoading = () => {\n    setIsLoading(!isLoading);\n  };\n\n  return (\n    <LoadingSpinner\n      size="$lg"\n      isLoading={isLoading}\n      ariaLoadingLabel="Downloading files"\n    >\n      <IconMaterial color="$primary1" icon="upload_file" size="35px" />\n    </LoadingSpinner>\n  );\n};\n'))))}L.isMDXComponent=!0}}]);