"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[2208],{30876:(e,n,a)=>{a.d(n,{Zo:()=>g,kt:()=>d});var t=a(67294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function p(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=t.createContext({}),l=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},g=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,g=p(e,["components","mdxType","originalType","parentName"]),u=l(a),d=i,m=u["".concat(s,".").concat(d)]||u[d]||c[d]||r;return a?t.createElement(m,o(o({ref:n},g),{},{components:a})):t.createElement(m,o({ref:n},g))}));function d(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=u;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var l=2;l<r;l++)o[l]=a[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},825:(e,n,a)=>{a.r(n),a.d(n,{contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>g,toc:()=>c});var t,i=a(7896),r=a(31461),o=(a(67294),a(30876)),p=["components"],s={id:"pagination",category:"Navigation",title:"Pagination",description:"Navigates between a set number of pages.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1564",pagination_prev:"web/ui/nav-menu",pagination_next:"web/ui/router"},l=void 0,g={unversionedId:"web/ui/pagination",id:"web/ui/pagination",isDocsHomePage:!1,title:"Pagination",description:"Navigates between a set number of pages.",source:"@site/docs/web/ui/Pagination.md",sourceDirName:"web/ui",slug:"/web/ui/pagination",permalink:"/web/ui/pagination",tags:[],version:"current",frontMatter:{id:"pagination",category:"Navigation",title:"Pagination",description:"Navigates between a set number of pages.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1564",pagination_prev:"web/ui/nav-menu",pagination_next:"web/ui/router"},sidebar:"docs",previous:{title:"NavMenu",permalink:"/web/ui/nav-menu"},next:{title:"Router",permalink:"/web/ui/router"}},c=[{value:"Pagination",id:"pagination",children:[],level:2},{value:"Callback Functions",id:"callback-functions",children:[],level:2},{value:"Boolean Checks",id:"boolean-checks",children:[],level:2},{value:"Variants",id:"variants",children:[],level:2},{value:"PageSize",id:"pagesize",children:[],level:2},{value:"ResultCount",id:"resultcount",children:[{value:"Additional Text",id:"additional-text",children:[],level:3}],level:2},{value:"RowCount",id:"rowcount",children:[],level:2}],u=(t="Tab",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)}),d={toc:c};function m(e){var n=e.components,a=(0,r.Z)(e,p);return(0,o.kt)("wrapper",(0,i.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(u,{label:"Overview",mdxType:"Tab"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Pagination } from '@abyss/web/ui/Pagination';\n")),(0,o.kt)("h2",{id:"pagination"},"Pagination"),(0,o.kt)("p",null,"Pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"pages")," variable into the ",(0,o.kt)("inlineCode",{parentName:"p"},"usePagination")," hook to match how many pages you would like to display. Find additional resources on ",(0,o.kt)("inlineCode",{parentName:"p"},"usePagination")," ",(0,o.kt)("a",{parentName:"p",href:"/web/hooks/use-pagination"},"here"),"."),(0,o.kt)("p",null,"Examples of pagination being used can be seen in ",(0,o.kt)("a",{parentName:"p",href:"/web/ui/data-table"},"DataTable")," and ",(0,o.kt)("a",{parentName:"p",href:"/web/ui/search-results"},"Search Results"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const paginationProps = usePagination({ pages: 10 });\n\n  return (\n    <React.Fragment>\n      <Card>\n        <Card.Title>Page {paginationProps.state.currentPage}</Card.Title>\n        <Card.Section>\n          <Pagination {...paginationProps} />\n        </Card.Section>\n      </Card>\n      <pre>{JSON.stringify(paginationProps, null, 2)}</pre>\n    </React.Fragment>\n  );\n};\n")),(0,o.kt)("h2",{id:"callback-functions"},"Callback Functions"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"previousPage"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"gotoPage"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"nextPage")," are callback functions to let pagination know how to navigate to certain pages."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { gotoPage, previousPage, nextPage, state, ...paginationProps } =\n    usePagination({\n      pages: 10,\n    });\n\n  const { currentPage } = state;\n\n  return (\n    <Card>\n      <Card.Title>Page {currentPage}</Card.Title>\n      <Card.Section>\n        <Pagination\n          {...paginationProps}\n          gotoPage={gotoPage}\n          previousPage={previousPage}\n          nextPage={nextPage}\n        />\n      </Card.Section>\n    </Card>\n  );\n};\n")),(0,o.kt)("h2",{id:"boolean-checks"},"Boolean Checks"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"canPreviousPage")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"canNextPage")," are used to check if the previous or next page is accessible given the current page index."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const { canPreviousPage, canNextPage, state, ...paginationProps } =\n    usePagination({ pages: 10 });\n\n  const { currentPage, pageCount } = state;\n\n  return (\n    <Card>\n      <Card.Title>Page {currentPage}</Card.Title>\n      <Card.Section>\n        <Pagination\n          {...paginationProps}\n          canPreviousPage={canPreviousPage}\n          canNextPage={canNextPage}\n        />\n      </Card.Section>\n    </Card>\n  );\n};\n")),(0,o.kt)("h2",{id:"variants"},"Variants"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"variant")," prop to change the format of the pagination display. Possible options are ",(0,o.kt)("inlineCode",{parentName:"p"},"compact")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"extended"),", and the default value is ",(0,o.kt)("inlineCode",{parentName:"p"},"extended"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 10 });\n\n  return (\n    <Card>\n      <Card.Title>\n        Page {paginationProps.state.currentPage} (Compact Variant)\n      </Card.Title>\n      <Card.Section>\n        <Pagination {...paginationProps} variant="compact" />\n      </Card.Section>\n    </Card>\n  );\n};\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const paginationProps = usePagination({ pages: 10 });\n\n  return (\n    <Card>\n      <Card.Title>\n        Page {paginationProps.state.currentPage} (Extended Variant - Default)\n      </Card.Title>\n      <Card.Section>\n        <Pagination {...paginationProps} />\n      </Card.Section>\n    </Card>\n  );\n};\n")),(0,o.kt)("h2",{id:"pagesize"},"PageSize"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PageSize")," component is used to change how many rows to display per page. For an example of its usage please visit ",(0,o.kt)("a",{parentName:"p",href:"/web/ui/data-table"},"Data Table"),"."),(0,o.kt)("p",null,"Its props are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pageSizeOptions"),": The possible values for the dropdown. The default value is ",(0,o.kt)("inlineCode",{parentName:"li"},"[10, 15, 20]"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pageSize"),": The current selected value from the ",(0,o.kt)("inlineCode",{parentName:"li"},"pageSizeOptions"),". This prop is required."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"setPageSize"),": Function to set the current value of the ",(0,o.kt)("inlineCode",{parentName:"li"},"pageSize")," prop. This prop is required.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const pageSizeOptions = [10, 15, 20];\n  const [pageSize, setPageSize] = useState(10);\n\n  return (\n    <React.Fragment>\n      <PageSize\n        pageSizeOptions={pageSizeOptions}\n        pageSize={pageSize}\n        setPageSize={setPageSize}\n      />\n    </React.Fragment>\n  );\n};\n")),(0,o.kt)("h2",{id:"resultcount"},"ResultCount"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ResultCount")," component can display information about the data being displayed. For an example of its usage please visit ",(0,o.kt)("a",{parentName:"p",href:"/web/ui/data-table"},"Data Table"),"."),(0,o.kt)("p",null,"Its props are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pageIndex"),": The current page index in the pagination. This prop is required."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pageSize"),": The current size per page. This prop is required."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"resultsTotalCount"),": The total number of rows in data set. This prop is required.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const paginationProps = usePagination({ pages: 10 });\n  const { data } = utils.useDocDataTable(5, 4);\n\n  return (\n    <React.Fragment>\n      <ResultCount\n        {...paginationProps}\n        resultsTotalCount={data.length}\n        pageSize={5}\n      />\n    </React.Fragment>\n  );\n};\n")),(0,o.kt)("h3",{id:"additional-text"},"Additional Text"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"additionalText")," prop to display additional information underneath the text."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 10 });\n  const { data } = utils.useDocDataTable(5, 4);\n\n  return (\n    <React.Fragment>\n      <ResultCount\n        additionalText="(Can insert extra text here)"\n        {...paginationProps}\n        resultsTotalCount={data.length}\n        pageSize={5}\n      />\n    </React.Fragment>\n  );\n};\n')),(0,o.kt)("h2",{id:"rowcount"},"RowCount"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"RowCount")," component displays how many rows are currently on the page. For an example of its usage please visit ",(0,o.kt)("a",{parentName:"p",href:"/web/ui/data-table"},"Data Table"),"."),(0,o.kt)("p",null,"Its props are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"rowCount"),": The number of rows currently being displayed to the user. This prop is required.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const searchResults = [\n    { id: 1 },\n    { id: 2 },\n    { id: 3 },\n    { id: 4 },\n    { id: 5 },\n    { id: 6 },\n    { id: 7 },\n  ];\n\n  const {\n    state: { rowCount },\n  } = usePagination({ data: searchResults, pages: 10, pageSize: 2 });\n\n  return (\n    <React.Fragment>\n      <RowCount rowCount={rowCount} />\n    </React.Fragment>\n  );\n};\n"))),(0,o.kt)(u,{label:"Integration",mdxType:"Tab"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Pagination}\n  rows={[\n    {\n      name: 'previousPage',\n      type: 'function',\n      description: 'Callback function to go to previous page',\n    },\n    {\n      name: 'canPreviousPage',\n      type: 'boolean',\n      description: 'Flag to check if previous page exists',\n    },\n    {\n      name: 'pageIndex',\n      type: 'number',\n      description: 'Index of page',\n    },\n    {\n      name: 'gotoPage',\n      type: 'function',\n      description: 'Function to go to a page',\n    },\n    {\n      name: 'pageCount',\n      type: 'number',\n      description: 'Number of pages',\n    },\n    {\n      name: 'nextPage',\n      type: 'function',\n      description: 'Callback function to go to next page',\n    },\n    {\n      name: 'canNextPage',\n      type: 'boolean',\n      description: 'Flag to check if next page exists',\n    },\n    {\n      name: 'variant',\n      type: \"'compact' | 'extended'\",\n      description: 'Variant for pagination display',\n    },\n  ]}\n/>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageSize}\n  rows={[\n    {\n      name: 'pageSize',\n      type: 'number',\n      description: 'Set the page size',\n    },\n    {\n      name: 'setPageSize',\n      type: 'function',\n      description: 'Function to set page size',\n    },\n    {\n      name: 'pageSizeOptions',\n      type: 'array[number]',\n      description: 'Default page size options',\n    },\n  ]}\n/>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={RowCount}\n  rows={[\n    {\n      name: 'rowCount',\n      type: 'number',\n      description: 'number of rows in the current page',\n    },\n  ]}\n/>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={ResultCount}\n  rows={[\n    {\n      name: 'pageIndex',\n      type: 'number',\n      description: 'Index of page',\n    },\n    {\n      name: 'pageSize',\n      type: 'number',\n      description: 'Set the page size',\n    },\n    {\n      name: 'additionalText',\n      type: 'string',\n      description: 'Additional text to display',\n    },\n    {\n      name: 'resultsTotalCount',\n      type: 'number',\n      description: 'Total row count',\n    },\n  ]}\n/>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Pagination}\n  rows={[\n    {\n      name: 'pagination-root',\n      description: 'Pagination root element',\n    },\n    {\n      name: 'pagination-container',\n      description: 'Pagination container',\n    },\n    {\n      name: 'pagination-text',\n      description: 'Pagination TextInput',\n    },\n    {\n      name: 'pagination-button',\n      description: 'Pagination Button',\n    },\n    {\n      name: 'pagination-page-button',\n      description: 'Page Button',\n    },\n    {\n      name: 'pagination-ellipsis',\n      description: 'Pagination ellipsis',\n    },\n    {\n      name: 'pagination-abbreviated-container',\n      description: 'Pagination abbreviated container',\n    },\n    {\n      name: 'pagination-arrow',\n      description: 'Pagination arrow icon',\n    },\n    {\n      name: 'pagination-icon-left',\n      description: 'Pagination left arrow icon',\n    },\n    {\n      name: 'pagination-text-left',\n      description: 'Pagination previous button text',\n    },\n    {\n      name: 'pagination-divider',\n      description: 'Pagination divider',\n    },\n    {\n      name: 'pagination-text-right',\n      description: 'Pagination next button text',\n    },\n    {\n      name: 'pagination-icon-right',\n      description: 'Pagination right arrow icon',\n    },\n  ]}\n/>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageSize}\n  rows={[\n    {\n      name: 'pagination-page-size-root',\n      description: 'Page size root element',\n    },\n    {\n      name: 'pagination-page-size-label',\n      description: 'Label',\n    },\n    {\n      name: 'pagination-page-size-select-list',\n      description: 'Select List',\n    },\n  ]}\n/>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={ResultCount}\n  rows={[\n    {\n      name: 'pagination-results-root',\n      description: 'Pagination results root element',\n    },\n    {\n      name: 'pagination-results-text',\n      description: 'Text',\n    },\n  ]}\n/>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={RowCount}\n  rows={[\n    {\n      name: 'pagination-row-count-root',\n      description: 'Pagination RowCount root element',\n    },\n    {\n      name: 'pagination-row-count-text',\n      description: 'Pagination RowCount text element',\n    },\n  ]}\n/>\n"))),(0,o.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,o.kt)("p",null,"The pagination container must have a descriptive accessible name. For example, if the pagination control is used for a table, the accessible name might be \u201ctable\u201c pagination. If the pagination control is used for search results, the accessible name might be \u201csearch results\u201c pagination."),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," prop to provide your pagination container with an accessibile ",(0,o.kt)("inlineCode",{parentName:"p"},"aria-label"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 10 });\n  return (\n    <Card>\n      <Card.Title>Page {paginationProps.state.currentPage}</Card.Title>\n      <Card.Section>\n        <Pagination {...paginationProps} type="accessible" />\n      </Card.Section>\n    </Card>\n  );\n};\n'))))}m.isMDXComponent=!0}}]);