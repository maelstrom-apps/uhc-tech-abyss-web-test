"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[2803],{30876:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>c});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(t),c=o,f=p["".concat(s,".").concat(c)]||p[c]||m[c]||r;return t?a.createElement(f,l(l({ref:n},d),{},{components:t})):a.createElement(f,l({ref:n},d))}));function c(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<r;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},84645:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>u,default:()=>f,frontMatter:()=>s,metadata:()=>d,toc:()=>m});var a,o=t(7896),r=t(31461),l=(t(67294),t(30876)),i=["components"],s={id:"use-form-field-Array",category:"State Management",title:"useFormFieldArray",description:"The useFormFieldArray is custom hook for working with uncontrolled Field Arrays (dynamic inputs). This hook supplies you with functions for manipulating the array/list of fields.",pagination_prev:"web/hooks/use-form",pagination_next:"web/hooks/use-overlay"},u=void 0,d={unversionedId:"web/hooks/use-form-field-Array",id:"web/hooks/use-form-field-Array",isDocsHomePage:!1,title:"useFormFieldArray",description:"The useFormFieldArray is custom hook for working with uncontrolled Field Arrays (dynamic inputs). This hook supplies you with functions for manipulating the array/list of fields.",source:"@site/docs/web/hooks/useFormFieldArray.md",sourceDirName:"web/hooks",slug:"/web/hooks/use-form-field-Array",permalink:"/web/hooks/use-form-field-Array",tags:[],version:"current",frontMatter:{id:"use-form-field-Array",category:"State Management",title:"useFormFieldArray",description:"The useFormFieldArray is custom hook for working with uncontrolled Field Arrays (dynamic inputs). This hook supplies you with functions for manipulating the array/list of fields.",pagination_prev:"web/hooks/use-form",pagination_next:"web/hooks/use-overlay"},sidebar:"docs",previous:{title:"useForm",permalink:"/web/hooks/use-form"},next:{title:"useOverlay",permalink:"/web/hooks/use-overlay"}},m=[{value:"Usage",id:"usage",children:[],level:2},{value:"Fields",id:"fields",children:[],level:2},{value:"Append",id:"append",children:[],level:2},{value:"Prepend",id:"prepend",children:[],level:2},{value:"Insert",id:"insert",children:[],level:2},{value:"Swap",id:"swap",children:[],level:2},{value:"Move",id:"move",children:[],level:2},{value:"Replace",id:"replace",children:[],level:2},{value:"Remove",id:"remove",children:[],level:2},{value:"Additional Documentation",id:"additional-documentation",children:[],level:2}],p=(a="ExitLink",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.kt)("div",e)}),c={toc:m};function f(e){var n=e.components,t=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useFormFieldArray } from '@abyss/web/hooks/useFormFieldArray';\n")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const defaultFormValues = {\n    data: [{ firstName: 'Bill', lastName: 'Lou' }],\n  };\n\n  const replaceFormValues = [\n    { firstName: 'replaceBill', lastName: 'replaceLou' },\n    { firstName: 'replaceBill-2', lastName: 'replaceLou-2' },\n  ];\n\n  const form = useForm({\n    defaultValues: defaultFormValues,\n  });\n\n  const { fields, append, prepend, insert, swap, move, replace, remove } =\n    useFormFieldArray({\n      control: form.control,\n      name: 'data',\n    });\n\n  const handleSubmit = (data) => {\n    console.log('Submitted', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        <Layout.Group style={{ marginBotton: 50 }}>\n          <Button\n            onClick={() => {\n              append({\n                firstName: 'appendBill',\n                lastName: 'appendLuo',\n              });\n            }}\n          >\n            Append\n          </Button>\n          <Button\n            onClick={() => {\n              prepend({\n                firstName: 'prependBill',\n                lastName: 'prependLou',\n              });\n            }}\n          >\n            Prepend\n          </Button>\n          <Button\n            onClick={() => {\n              insert(parseInt(1, 10), {\n                firstName: 'insertBill',\n                lastName: 'insertLuo',\n              });\n            }}\n          >\n            Insert\n          </Button>\n          <Button\n            onClick={() => {\n              swap(0, 1);\n            }}\n          >\n            Swap\n          </Button>\n          <Button\n            onClick={() => {\n              move(0, 1);\n            }}\n          >\n            Move\n          </Button>\n        </Layout.Group>\n        {fields.map((field, index) => {\n          return (\n            <div key={field.id} style={{ marginTop: 20 }}>\n              <div>Row #{index + 1}</div>\n              <TextInput\n                label=\"First Name\"\n                isClearable\n                model={`data.${index}.firstName`}\n              />\n              <TextInput\n                label=\"Last Name\"\n                isClearable\n                model={`data.${index}.lastName`}\n              />\n            </div>\n          );\n        })}\n        <Layout.Group css={{ marginTop: 20, marginLeft: 5 }}>\n          <Button isDisabled={!(fields.length > 0)} type=\"submit\">\n            Submit\n          </Button>\n          <Button\n            onClick={() => {\n              form.reset(defaultFormValues);\n            }}\n          >\n            Reset\n          </Button>\n          <Button\n            isDisabled={!(fields.length > 0)}\n            onClick={() => {\n              remove();\n            }}\n          >\n            Remove All Rows\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,l.kt)("h2",{id:"fields"},"Fields"),(0,l.kt)("p",null,"This object contains the defaultValue and key for all your inputs. It's important to assign defaultValue to the inputs."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The field.id (and not index) must be added as the component key to prevent re-renders breaking the fields.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"// \u2705 correct:\n{fields.map((field, index) => (\n  <div key={field.id}>\n    <TextInput ... />\n  </div>\n))}\n// \u2705 correct:\n{fields.map((field, index) => <TextInput key={field.id} ... />)}\n// \u274c incorrect:\n{fields.map((field, index) => <TextInput key={index} ... />)}\n")),(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"useFieldArray automatically generates a unique identifier named id which is used for key prop. For more information why this is required: ",(0,l.kt)(p,{href:"https://reactjs.org/docs/lists-and-keys.html#keys",mdxType:"ExitLink"},"React lists and keys"),".",(0,l.kt)("br",null),(0,l.kt)("br",null),"When your array field contains objects with the key name id, useFieldArray will overwrite and remove it. If you want to keep the id field in your array of objects, you must use keyName prop to change to other name. Refer to the following example:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const { fields } = useFieldArray({\n  keyName: 'key', // by default key name is id, and input value with name id will be omitted\n});\n\n{\n  fields.map((field, index) => (\n    <div key={field.key}>\n      // key name changed\n      <TextInput {...register('test.id')} /> // input value id will be retained\n    </div>\n  ));\n}\n")),(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"When you append, prepend, insert and update the field array, the obj can't be empty object rather need to supply all your input's defaultValues.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"append(); \u274c\nappend({}); \u274c\nappend({ firstName: 'bill', lastName: 'luo' }); \u2705\n")),(0,l.kt)("h2",{id:"append"},"Append"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"append()")," function to append input/inputs to the end of your fields and focus."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const defaultFormValues = {\n    append: [{ firstName: 'Bill', lastName: 'Lou' }],\n  };\n\n  const form = useForm({\n    defaultValues: defaultFormValues,\n  });\n\n  const { fields, append } = useFormFieldArray({\n    control: form.control,\n    name: 'append',\n  });\n\n  const handleSubmit = (data) => {\n    console.log('Submitted', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        {fields.map((field, index) => {\n          return (\n            <div key={field.id} style={{ marginTop: 20 }}>\n              <div>Row #{index + 1}</div>\n              <TextInput\n                label=\"First Name\"\n                isClearable\n                model={`append.${index}.firstName`}\n              />\n              <TextInput\n                label=\"Last Name\"\n                isClearable\n                model={`append.${index}.lastName`}\n              />\n            </div>\n          );\n        })}\n        <Layout.Group css={{ marginTop: 20 }}>\n          <Button type=\"submit\">Submit</Button>\n          <Button\n            onClick={() => {\n              form.reset(defaultFormValues);\n            }}\n          >\n            Reset\n          </Button>\n          <Button\n            onClick={() => {\n              append({\n                firstName: 'appendBill',\n                lastName: 'appendLuo',\n              });\n            }}\n          >\n            Append\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,l.kt)("h2",{id:"prepend"},"Prepend"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"prepend()")," function to prepend input/inputs to the start of your fields and focus."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const defaultFormValues = {\n    prepend: [{ firstName: 'Bill', lastName: 'Lou' }],\n  };\n\n  const form = useForm({\n    defaultValues: defaultFormValues,\n  });\n\n  const { fields, prepend } = useFormFieldArray({\n    control: form.control,\n    name: 'prepend',\n  });\n\n  const handleSubmit = (data) => {\n    console.log('Submitted', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        {fields.map((field, index) => {\n          return (\n            <div key={field.id} style={{ marginTop: 20 }}>\n              <div>Row #{index + 1}</div>\n              <TextInput\n                label=\"First Name\"\n                isClearable\n                model={`prepend.${index}.firstName`}\n              />\n              <TextInput\n                label=\"Last Name\"\n                isClearable\n                model={`prepend.${index}.lastName`}\n              />\n            </div>\n          );\n        })}\n        <Layout.Group css={{ marginTop: 20 }}>\n          <Button type=\"submit\">Submit</Button>\n          <Button\n            onClick={() => {\n              form.reset(defaultFormValues);\n            }}\n          >\n            Reset\n          </Button>\n          <Button\n            onClick={() => {\n              prepend({ firstName: 'prependBill', lastName: 'prependLou' });\n            }}\n          >\n            Prepend\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,l.kt)("h2",{id:"insert"},"Insert"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"insert()")," function to insert input/inputs at particular position and focus."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const defaultFormValues = {\n    insert: [\n      { firstName: 'Bill', lastName: 'Lou' },\n      { firstName: 'Bill-2', lastName: 'Lou-2' },\n    ],\n  };\n\n  const form = useForm({\n    defaultValues: defaultFormValues,\n  });\n\n  const { fields, insert, remove } = useFormFieldArray({\n    control: form.control,\n    name: 'insert',\n  });\n\n  const handleSubmit = (data) => {\n    console.log('Submitted', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        {fields.map((field, index) => {\n          return (\n            <div key={field.id} style={{ marginTop: 20 }}>\n              <div>Row #{index + 1}</div>\n              <TextInput\n                label=\"First Name\"\n                isClearable\n                model={`insert.${index}.firstName`}\n              />\n              <TextInput\n                label=\"Last Name\"\n                isClearable\n                model={`insert.${index}.lastName`}\n              />\n            </div>\n          );\n        })}\n        <Layout.Group css={{ marginTop: 20 }}>\n          <Button type=\"submit\">Submit</Button>\n          <Button\n            onClick={() => {\n              form.reset(defaultFormValues);\n            }}\n          >\n            Reset\n          </Button>\n          <Button\n            onClick={() => {\n              insert(parseInt(1, 10), {\n                firstName: 'insertBill',\n                lastName: 'insertLuo',\n              });\n            }}\n          >\n            Insert\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,l.kt)("h2",{id:"swap"},"Swap"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"swap()")," function to swap input/inputs position."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const defaultFormValues = {\n    swap: [\n      { firstName: 'Bill', lastName: 'Lou' },\n      { firstName: 'swapBill', lastName: 'swapLou' },\n    ],\n  };\n\n  const form = useForm({\n    defaultValues: defaultFormValues,\n  });\n\n  const { fields, swap, remove } = useFormFieldArray({\n    control: form.control,\n    name: 'swap',\n  });\n\n  const handleSubmit = (data) => {\n    console.log('Submitted', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        {fields.map((field, index) => {\n          return (\n            <div key={field.id} style={{ marginTop: 20 }}>\n              <div>Row #{index + 1}</div>\n              <TextInput\n                label=\"First Name\"\n                isClearable\n                model={`swap.${index}.firstName`}\n              />\n              <TextInput\n                label=\"Last Name\"\n                isClearable\n                model={`swap.${index}.lastName`}\n              />\n            </div>\n          );\n        })}\n        <Layout.Group css={{ marginTop: 20 }}>\n          <Button type=\"submit\">Submit</Button>\n          <Button\n            onClick={() => {\n              swap(0, 1);\n            }}\n          >\n            Swap\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,l.kt)("h2",{id:"move"},"Move"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"move()")," function to move input/inputs to another position."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const defaultFormValues = {\n    move: [\n      { firstName: 'Bill', lastName: 'Lou' },\n      { firstName: 'moveBill', lastName: 'moveLou' },\n    ],\n  };\n\n  const form = useForm({\n    defaultValues: defaultFormValues,\n  });\n\n  const { fields, move } = useFormFieldArray({\n    control: form.control,\n    name: 'move',\n  });\n\n  const handleSubmit = (data) => {\n    console.log('Submitted', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        {fields.map((field, index) => {\n          return (\n            <div key={field.id} style={{ marginTop: 20 }}>\n              <div>Row #{index + 1}</div>\n              <TextInput\n                label=\"First Name\"\n                isClearable\n                model={`move.${index}.firstName`}\n              />\n              <TextInput\n                label=\"Last Name\"\n                isClearable\n                model={`move.${index}.lastName`}\n              />\n            </div>\n          );\n        })}\n        <Layout.Group css={{ marginTop: 20 }}>\n          <Button type=\"submit\">Submit</Button>\n          <Button\n            onClick={() => {\n              move(0, 1);\n            }}\n          >\n            Move\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,l.kt)("h2",{id:"replace"},"Replace"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"replace()")," function to replace the entire field array values with a custom list of objects."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const replaceFormValues = [\n    { firstName: 'replaceBill', lastName: 'replaceLou' },\n    { firstName: 'replaceBill-2', lastName: 'replaceLou-2' },\n  ];\n\n  const defaultFormValues = {\n    data: [\n      { firstName: 'Bill', lastName: 'Lou' },\n      { firstName: 'Bill-2', lastName: 'Lou-2' },\n    ],\n  };\n  const form = useForm({\n    defaultValues: defaultFormValues,\n  });\n\n  const { fields, replace } = useFormFieldArray({\n    control: form.control,\n    name: 'data',\n  });\n\n  const handleSubmit = (data) => {\n    console.log('Submitted', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        {fields.map((field, index) => {\n          return (\n            <div key={field.id} style={{ marginTop: 20 }}>\n              <div>Row #{index + 1}</div>\n              <TextInput\n                label=\"First Name\"\n                isClearable\n                model={`data.${index}.firstName`}\n              />\n              <TextInput\n                label=\"Last Name\"\n                isClearable\n                model={`data.${index}.lastName`}\n              />\n            </div>\n          );\n        })}\n        <Layout.Group css={{ marginTop: 20 }}>\n          <Button type=\"submit\">Submit</Button>\n          <Button\n            onClick={() => {\n              form.reset(defaultFormValues);\n            }}\n          >\n            Reset\n          </Button>\n          <Button\n            onClick={() => {\n              replace(replaceFormValues);\n            }}\n          >\n            Replace All Values\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,l.kt)("h2",{id:"remove"},"Remove"),(0,l.kt)("p",null,"Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"remove()")," function to remove elements at a particular position (or positions) in the list, or remove all of them when no index is provided."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const defaultFormValues = {\n    remove: [\n      { firstName: 'removeBill', lastName: 'removeLou' },\n      { firstName: 'removeBill-2', lastName: 'removeLou-2' },\n      { firstName: 'removeBill-3', lastName: 'removeLou-3' },\n    ],\n  };\n  const form = useForm({\n    defaultValues: defaultFormValues,\n  });\n\n  const { fields, remove } = useFormFieldArray({\n    control: form.control,\n    name: 'remove',\n  });\n\n  const handleSubmit = (data) => {\n    console.log('Submitted', data);\n  };\n\n  return (\n    <React.Fragment>\n      <FormProvider state={form} onSubmit={handleSubmit}>\n        {fields.map((field, index) => {\n          return (\n            <div key={field.id} style={{ marginTop: 20 }}>\n              <Layout.Group>\n                <div>Row #{index + 1}</div>\n                <Button\n                  size=\"$sm\"\n                  onClick={() => {\n                    remove(index);\n                  }}\n                >\n                  Remove\n                </Button>\n              </Layout.Group>\n              <TextInput\n                label=\"First Name\"\n                isClearable\n                model={`remove.${index}.firstName`}\n              />\n              <TextInput\n                label=\"Last Name\"\n                isClearable\n                model={`remove.${index}.lastName`}\n              />\n            </div>\n          );\n        })}\n        <Layout.Group css={{ marginTop: 20 }}>\n          <Button isDisabled={!(fields.length > 0)} type=\"submit\">\n            Submit\n          </Button>\n          <Button\n            onClick={() => {\n              form.reset(defaultFormValues);\n            }}\n          >\n            Reset\n          </Button>\n          <Button\n            isDisabled={!(fields.length > 1)}\n            onClick={() => {\n              remove([0, 1]);\n            }}\n          >\n            Remove First Two Rows\n          </Button>\n          <Button\n            isDisabled={!(fields.length > 0)}\n            onClick={() => {\n              remove();\n            }}\n          >\n            Remove All Rows\n          </Button>\n        </Layout.Group>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,l.kt)("h2",{id:"additional-documentation"},"Additional Documentation"),(0,l.kt)("p",null,"This hook is a renaming of the useFieldArray hook from ",(0,l.kt)(p,{href:"https://react-hook-form.com/",mdxType:"ExitLink"},"React Form Hook"),". If you would like to see a more detailed description for the usage of this hook, you can view the ",(0,l.kt)(p,{href:"https://react-hook-form.com/api/usefieldarray",mdxType:"ExitLink"},"documentation here"),"."))}f.isMDXComponent=!0}}]);