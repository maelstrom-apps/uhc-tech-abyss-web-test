"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[7531],{30876:(n,e,o)=>{o.d(e,{Zo:()=>d,kt:()=>m});var t=o(67294);function a(n,e,o){return e in n?Object.defineProperty(n,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):n[e]=o,n}function r(n,e){var o=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.push.apply(o,t)}return o}function i(n){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?r(Object(o),!0).forEach((function(e){a(n,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(o,e))}))}return n}function c(n,e){if(null==n)return{};var o,t,a=function(n,e){if(null==n)return{};var o,t,a={},r=Object.keys(n);for(t=0;t<r.length;t++)o=r[t],e.indexOf(o)>=0||(a[o]=n[o]);return a}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(t=0;t<r.length;t++)o=r[t],e.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(n,o)&&(a[o]=n[o])}return a}var s=t.createContext({}),l=function(n){var e=t.useContext(s),o=e;return n&&(o="function"==typeof n?n(e):i(i({},e),n)),o},d=function(n){var e=l(n.components);return t.createElement(s.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},u=t.forwardRef((function(n,e){var o=n.components,a=n.mdxType,r=n.originalType,s=n.parentName,d=c(n,["components","mdxType","originalType","parentName"]),u=l(o),m=a,g=u["".concat(s,".").concat(m)]||u[m]||p[m]||r;return o?t.createElement(g,i(i({ref:e},d),{},{components:o})):t.createElement(g,i({ref:e},d))}));function m(n,e){var o=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var r=o.length,i=new Array(r);i[0]=u;var c={};for(var s in e)hasOwnProperty.call(e,s)&&(c[s]=e[s]);c.originalType=n,c.mdxType="string"==typeof n?n:a,i[1]=c;for(var l=2;l<r;l++)i[l]=o[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}u.displayName="MDXCreateElement"},49355:(n,e,o)=>{o.r(e),o.d(e,{contentTitle:()=>s,default:()=>y,frontMatter:()=>c,metadata:()=>l,toc:()=>d});var t=o(7896),a=o(31461),r=(o(67294),o(30876)),i=["components"],c={id:"icon-brand",slug:"/foundations/optum/icon-brand",category:"Foundations",title:"IconBrand",description:"Used to implement Brand icons and adapt their properties.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A10709",pagination_prev:"foundations/optum/typography",pagination_next:null},s=void 0,l={unversionedId:"foundations/optum/icon-brand",id:"foundations/optum/icon-brand",isDocsHomePage:!1,title:"IconBrand",description:"Used to implement Brand icons and adapt their properties.",source:"@site/docs/foundations/optum/IconBrand.md",sourceDirName:"foundations/optum",slug:"/foundations/optum/icon-brand",permalink:"/foundations/optum/icon-brand",tags:[],version:"current",frontMatter:{id:"icon-brand",slug:"/foundations/optum/icon-brand",category:"Foundations",title:"IconBrand",description:"Used to implement Brand icons and adapt their properties.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A10709",pagination_prev:"foundations/optum/typography",pagination_next:null},sidebar:"docs",previous:{title:"Typography",permalink:"/foundations/optum/typography"}},d=[{value:"Icons",id:"icons",children:[],level:2},{value:"Size",id:"size",children:[],level:2},{value:"Brand Icon Variants",id:"brand-icon-variants",children:[],level:2},{value:"Meaningful or Control Icons",id:"meaningful-or-control-icons",children:[],level:2},{value:"Decorative Icons",id:"decorative-icons",children:[],level:2}],p=function(n){return function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}},u=p("Tab"),m=p("ExitLink"),g=p("IconLibrary"),h={toc:d};function y(n){var e=n.components,o=(0,a.Z)(n,i);return(0,r.kt)("wrapper",(0,t.Z)({},h,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { IconBrand } from '@abyss/web/ui/IconBrand';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'IconBrand',\n  inputs: [\n    {\n      prop: 'size',\n      type: 'size',\n    },\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'one tone', value: 'onetone' },\n        { label: 'two tone', value: 'twotone' },\n        { label: 'one tone w/ dark circle', value: 'onetonedarkcircle' },\n        { label: 'two tone w/ dark circle', value: 'twotonedarkcircle' },\n        { label: 'two tone w/ light circle', value: 'twotonelightcircle' },\n      ],\n    },\n    {\n      prop: 'icon',\n      type: 'string',\n    },\n  ]\n}\n\n<IconBrand icon=\"home\" size=\"24px\" variant=\"twotonedarkcircle\"/>\n")),(0,r.kt)("h2",{id:"icons"},"Icons"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"icon")," property to adjust which icon is being selected."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="alert" size={48} />\n  <IconBrand icon="piggy_bank" size={48} />\n  <IconBrand icon="music" size={48} />\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"size"},"Size"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"size")," property to adjust the size of an icon by setting it to a specific number. The default size is set to 24."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="home" />\n  <IconBrand icon="home" size={32} />\n  <IconBrand icon="home" size={48} />\n  <IconBrand icon="home" size={64} />\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"brand-icon-variants"},"Brand Icon Variants"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"variant")," property to change the style of Brand icons. Available variants are ",(0,r.kt)("inlineCode",{parentName:"p"},"twotonedarkcircle"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"twotonelightcircle"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"twotone"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"onetonedarkcircle"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"onetone"),". The default variant is ",(0,r.kt)("inlineCode",{parentName:"p"},"twotonedarkcircle"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Grid columns={5} span={{ md: \'50%\', lg: \'20%\' }}>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        onetonedarkcircle\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetonedarkcircle" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetonedarkcircle" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetonedarkcircle" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetonedarkcircle" />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        twotonedarkcircle\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonedarkcircle" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonedarkcircle" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonedarkcircle" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonedarkcircle" />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        twotonelightcircle\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonelightcircle" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonelightcircle" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonelightcircle" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotonelightcircle" />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        onetone\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetone" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetone" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="onetone" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <Layout.Space space={48} />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack grow space={0}>\n      <Box padding="$sm" color="$white">\n        twotone\n      </Box>\n      <Box padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotone" />\n      </Box>\n      <Box color="$tint3" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotone" />\n      </Box>\n      <Box color="$tint4" padding="$sm">\n        <IconBrand icon="airplane" size={48} variant="twotone" />\n      </Box>\n      <Box color="$primary1" padding="$sm">\n        <Layout.Space space={48} />\n      </Box>\n    </Layout.Stack>\n  </Grid.Col>\n</Grid>\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Icon}\n  rows={[\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the icon',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The svg content of the icon',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the icon',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the icon',\n    },\n    {\n      name: 'isScreenReadable',\n      type: 'boolean',\n      description:\n        'Indicate whether the icon is screen readable or not. If the icon is Screen Readable, then provide a title',\n    },\n    {\n      name: 'onProcessSVG',\n      type: 'function',\n      description: 'The svg content of the icon',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description:\n        '(not currently functioning) Pre programmed sizes for the icons',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={IconBrand}\n  rows={[\n    {\n      name: 'icon',\n      type: 'string',\n      description: 'Name of the brand icon',\n    },\n    {\n      name: 'variant',\n      type: 'twotonedarkcircle | twotonelightcircle | twotone | onetonedarkcircle | onetone',\n      description: 'The style/color variation of the brand icon',\n    },\n    {\n      name: 'brand',\n      type: 'uhc | optum',\n      description:\n        'indicates which brand you want your icon from. This changes the colors of the icon to match the brand you select',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the brand icon',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set color option 1 of the brand icon',\n    },\n    {\n      name: 'color2',\n      type: 'string',\n      description: 'Set color option 2 of the brand icon',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the brand icon',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Icon}\n  rows={[\n    {\n      name: 'icon-root',\n      description: 'Icon root element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={IconBrand}\n  rows={[\n    {\n      name: 'icon-brand-root',\n      description: 'IconBrand root element',\n    },\n  ]}\n/>\n"))),(0,r.kt)(u,{label:"Accessibility",mdxType:"Tab"},(0,r.kt)("h2",{id:"meaningful-or-control-icons"},"Meaningful or Control Icons"),(0,r.kt)("p",null,"If the icon is being used in a setting where it is the only element providing meaning, then that same meaning should be conveyed to screen reader users. The below implementation provides examples of situations in which the property ",(0,r.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," should be set to true and the ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," property is required and should describe the purpose of the image."),(0,r.kt)("p",null,"Example 1: An alert icon is used to convey a sense of urgency; there is adjacent text (\u201cThere is a data outage\u201d) but the text doesn't include any words that convey urgency. So, in this case, the icon should have a text alternative such as \u201cAlert\u201d or \u201cWarning\u201d."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand title="alert" icon="alert" isScreenReadable={true} size={24} />\n  <div>There is a data outage</div>\n</Layout.Group>\n')),(0,r.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog. There is no adjacent text, so the icon should have a text alternative of \u201cclose\u201d or \u201cclose window\u201d.",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial title="close" icon="close" isScreenReadable={true} size={24} />\n</Layout.Group>\n')),(0,r.kt)("h2",{id:"decorative-icons"},"Decorative Icons"),(0,r.kt)("p",null,"If the icon is being used in a setting in which it just a decorative element (which is the default case for icons), then the icon should be ignored by screen readers. The below implementation provides example of which situations would be classified as decorative. Since the default of ",(0,r.kt)("inlineCode",{parentName:"p"},"isScreenReadable")," is set to false no specific changes need to be made for decorative icons."),(0,r.kt)("p",null,"Example 1: An alert icon is used next to an urgent message and the word \u201cAlert\u201d is included in the adjacent text. In this case, the icon becomes decorative in nature and should be ignored by screen readers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconBrand icon="alert" size={24} />\n  <div>Alert: There is a data outage</div>\n</Layout.Group>\n')),(0,r.kt)("br",null),"Example 2: An \u201cX\u201d material icon is used as a close button on a modal dialog; the word \u201cClose\u201d appears to the right of the button. In this case, the icon should be considered decorative and ignored by screen readers.",(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <IconMaterial icon="close" size={24} />\n  <div>Close</div>\n</Layout.Group>\n'))),(0,r.kt)(u,{label:"Brand Icons",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<h2>Brand Icons</h2>\n")),(0,r.kt)("p",null,"Abyss uses Brand's branded iconography that is designed to aid wayfinding, draw attention and support messaging."),(0,r.kt)("p",null,"The source for these design icons can be found in the ",(0,r.kt)(m,{href:"https://brand.optum.com/content/iconography",mdxType:"ExitLink"},"Brand Icons Library"),"."),(0,r.kt)(g,{brand:"optum",mdxType:"IconLibrary"})))}y.isMDXComponent=!0}}]);