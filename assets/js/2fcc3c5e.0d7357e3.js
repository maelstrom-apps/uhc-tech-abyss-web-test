"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[8833],{30876:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(t),u=o,m=c["".concat(d,".").concat(u)]||c[u]||g[u]||r;return t?a.createElement(m,i(i({ref:n},p),{},{components:t})):a.createElement(m,i({ref:n},p))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=c;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},46587:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>d,default:()=>y,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=t(7896),o=t(31461),r=(t(67294),t(30876)),i=["components"],l={id:"page-body-intro",category:"Content",title:"PageBodyIntro",description:"Used to create a layout of introductory content at the top of your page body.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=13068%3A50542",pagination_prev:"web/ui/page-body",pagination_next:"web/ui/page-footer"},d=void 0,s={unversionedId:"web/ui/page-body-intro",id:"web/ui/page-body-intro",isDocsHomePage:!1,title:"PageBodyIntro",description:"Used to create a layout of introductory content at the top of your page body.",source:"@site/docs/web/ui/PageBodyIntro.md",sourceDirName:"web/ui",slug:"/web/ui/page-body-intro",permalink:"/web/ui/page-body-intro",tags:[],version:"current",frontMatter:{id:"page-body-intro",category:"Content",title:"PageBodyIntro",description:"Used to create a layout of introductory content at the top of your page body.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=13068%3A50542",pagination_prev:"web/ui/page-body",pagination_next:"web/ui/page-footer"},sidebar:"docs",previous:{title:"PageBody",permalink:"/web/ui/page-body"},next:{title:"PageFooter",permalink:"/web/ui/page-footer"}},p=[{value:"PageBodyIntro",id:"pagebodyintro",children:[{value:"Sticky",id:"sticky",children:[],level:3}],level:2},{value:"PageBodyIntro.Row",id:"pagebodyintrorow",children:[],level:2},{value:"PageBodyIntro.Title",id:"pagebodyintrotitle",children:[],level:2},{value:"PageBodyIntro.Profile",id:"pagebodyintroprofile",children:[{value:"Profile Heading",id:"profile-heading",children:[],level:3},{value:"Profile Data",id:"profile-data",children:[],level:3},{value:"Profile Status",id:"profile-status",children:[],level:3}],level:2},{value:"PageBodyIntro.Links",id:"pagebodyintrolinks",children:[],level:2},{value:"PageBodyIntro.RequiredKey",id:"pagebodyintrorequiredkey",children:[],level:2},{value:"Full Page Layout",id:"full-page-layout",children:[],level:2}],g=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",n)}},c=g("Tab"),u=g("FullPageLayout"),m={toc:p};function y(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(c,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { PageBodyIntro } from '@abyss/web/ui/PageBodyIntro';\n")),(0,r.kt)("h2",{id:"pagebodyintro"},"PageBodyIntro"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro")," to wrap all the corresponding sub-components and construct an introductory collection of content for your page body. To increase or decrease the default spacing for the individual rows use the ",(0,r.kt)("inlineCode",{parentName:"p"},"rowSpace")," prop. To apply sticky positioning to ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro")," please use the ",(0,r.kt)("inlineCode",{parentName:"p"},"sticky")," prop and see the ",(0,r.kt)("a",{parentName:"p",href:"#sticky"},"Sticky")," section below for details on implementation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const subNavLinks = [\n    { label: 'Jump Link 1', href: '#pagebodyintroprofile' },\n    { label: 'Jump Link 2', href: '#pagebodyintrolinks' },\n    { label: 'Jump Link 3', href: '#pagebodyintrorequiredkey' },\n    { label: 'External Link', href: 'https://www.google.com' },\n  ];\n\n  const profileDataListOne = [\n    { label: 'MPIN', value: '1234457' },\n    { label: 'NPI', value: '28737823' },\n    { label: 'TIN', value: '827382847' },\n    { label: 'Primary Specialty', value: 'Internal Medicine' },\n    { label: 'Demographic/Contract Status', value: 'Active' },\n    { label: 'Provider Hold', value: 'No' },\n  ];\n\n  const profileDataListTwo = [\n    { label: 'Gender', value: 'Male' },\n    { label: 'Date of Birth', value: '07-12-1973' },\n    { label: 'Social Security Number', value: '83498484' },\n    { label: 'Primary Specialty', value: 'Internal Medicine' },\n    { label: 'Degree', value: 'Medical Doctor' },\n  ];\n\n  const dataSectionContent = (\n    <Layout.Stack alignItems=\"left\">\n      <PageBodyIntro.ProfileData profileData={profileDataListOne} />\n      <PageBodyIntro.ProfileData profileData={profileDataListTwo} />\n    </Layout.Stack>\n  );\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n    },\n    {\n      title: 'Open New Tab',\n      onClick: () => {\n        console.log('Open New Tab!');\n      },\n    },\n    {\n      title: 'Save As...',\n      onClick: () => {\n        console.log('Save As...');\n      },\n      icon: <IconMaterial icon=\"save\" />,\n    },\n  ];\n\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <Breadcrumbs\n          size={14}\n          divider=\"/\"\n          items={[\n            { title: 'Home', href: '/' },\n            {\n              title: 'Getting Started',\n              href: '/developers/getting-started/',\n            },\n            { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n          ]}\n        />\n        <DropdownMenu\n          label=\"Table Actions\"\n          hideLabel\n          after={<IconMaterial icon=\"more_vert\" />}\n          menuItems={menuItems}\n        />\n      </PageBodyIntro.Row>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Title>Page Title</PageBodyIntro.Title>\n        <DropdownMenu\n          label=\"Options\"\n          before={<IconMaterial icon=\"grid_view\" />}\n          after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n          menuItems={menuItems}\n        />\n      </PageBodyIntro.Row>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Profile\n          headingSection={\n            <PageBodyIntro.ProfileHeading>\n              Profile Name\n            </PageBodyIntro.ProfileHeading>\n          }\n          dataSection={dataSectionContent}\n          statusSection={<Badge variant=\"success\">Verified</Badge>}\n        />\n      </PageBodyIntro.Row>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Links linkData={subNavLinks} />\n        <PageBodyIntro.RequiredKey />\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,r.kt)("h3",{id:"sticky"},"Sticky"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"sticky")," prop to assign a sticky position to the ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro")," root element. To enable the default settings simply add the ",(0,r.kt)("inlineCode",{parentName:"p"},"sticky")," prop to ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro")," and the following css properties will be applied:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"{\n  position: 'sticky',\n  boxShadow: 'rgb(0 0 0 / 10%) 0px 1px 2px 0px',\n  top: 0,\n  zIndex: 200,\n}\n")),(0,r.kt)("p",null,"You can override any of these properties and/or include new css properties by passing them in as an object to the ",(0,r.kt)("inlineCode",{parentName:"p"},"sticky")," prop. For example ",(0,r.kt)("inlineCode",{parentName:"p"},"sticky={{ top: 55 }}"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const subNavLinks = [\n    { label: 'Jump Link 1', href: '#pagebodyintroprofile' },\n    { label: 'Jump Link 2', href: '#pagebodyintrolinks' },\n    { label: 'Jump Link 3', href: '#pagebodyintrorequiredkey' },\n    { label: 'External Link', href: 'https://www.google.com' },\n  ];\n\n  const profileDataListOne = [\n    { label: 'MPIN', value: '1234457' },\n    { label: 'NPI', value: '28737823' },\n    { label: 'TIN', value: '827382847' },\n    { label: 'Primary Specialty', value: 'Internal Medicine' },\n    { label: 'Demographic/Contract Status', value: 'Active' },\n    { label: 'Provider Hold', value: 'No' },\n  ];\n\n  const profileDataListTwo = [\n    { label: 'Gender', value: 'Male' },\n    { label: 'Date of Birth', value: '07-12-1973' },\n    { label: 'Social Security Number', value: '83498484' },\n    { label: 'Primary Specialty', value: 'Internal Medicine' },\n    { label: 'Degree', value: 'Medical Doctor' },\n  ];\n\n  const dataSectionContent = (\n    <Layout.Stack alignItems=\"left\">\n      <PageBodyIntro.ProfileData profileData={profileDataListOne} />\n      <PageBodyIntro.ProfileData profileData={profileDataListTwo} />\n    </Layout.Stack>\n  );\n\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n    },\n    {\n      title: 'Open New Tab',\n      onClick: () => {\n        console.log('Open New Tab!');\n      },\n    },\n    {\n      title: 'Save As...',\n      onClick: () => {\n        console.log('Save As...');\n      },\n      icon: <IconMaterial icon=\"save\" />,\n    },\n  ];\n\n  const form = useForm({});\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  const options = [\n    { value: 'react', label: 'React' },\n    { value: 'ng', label: 'Angular' },\n    { value: 'svelte', label: 'Svelte' },\n    { value: 'vue', label: 'Vue' },\n    { value: 'alpine', label: 'Alpine' },\n    { value: 'ember', label: 'Ember' },\n    { value: 'stimulus', label: 'Stimulus' },\n    { value: 'preact', label: 'Preact' },\n  ];\n\n  return (\n    <PageBody>\n      <PageBodyIntro\n        sticky={{\n          top: 55,\n        }}\n      >\n        <PageBodyIntro.Row>\n          <Breadcrumbs\n            size={14}\n            divider=\"/\"\n            items={[\n              { title: 'Home', href: '/' },\n              {\n                title: 'Getting Started',\n                href: '/developers/getting-started/',\n              },\n              { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n            ]}\n          />\n          <DropdownMenu\n            label=\"Table Actions\"\n            hideLabel\n            after={<IconMaterial icon=\"more_vert\" />}\n            menuItems={menuItems}\n          />\n        </PageBodyIntro.Row>\n        <PageBodyIntro.Row>\n          <PageBodyIntro.Title>Page Title</PageBodyIntro.Title>\n          <DropdownMenu\n            label=\"Options\"\n            before={<IconMaterial icon=\"grid_view\" />}\n            after={<IconMaterial icon=\"keyboard_arrow_down\" />}\n            menuItems={menuItems}\n          />\n        </PageBodyIntro.Row>\n        <PageBodyIntro.Row>\n          <PageBodyIntro.Profile\n            headingSection={\n              <PageBodyIntro.ProfileHeading>\n                Profile Name\n              </PageBodyIntro.ProfileHeading>\n            }\n            dataSection={dataSectionContent}\n            statusSection={<Badge variant=\"success\">Verified</Badge>}\n          />\n        </PageBodyIntro.Row>\n        <PageBodyIntro.Row>\n          <PageBodyIntro.Links linkData={subNavLinks} />\n          <PageBodyIntro.RequiredKey />\n        </PageBodyIntro.Row>\n      </PageBodyIntro>\n      <div\n        style={{\n          padding: '48px 24px',\n          backgroundColor: 'white',\n        }}\n      >\n        <Layout.Stack alignItems=\"left\" grow>\n          <Heading offset={2}>Fill Out Form</Heading>\n          <FormProvider state={form} onSubmit={onSubmit} highlighted>\n            <SelectInput\n              label=\"Select List Usage\"\n              model=\"selectlist\"\n              placeholder=\"Select List Form Provider\"\n              options={options}\n              validators={{ required: true }}\n            />\n            <SelectInputMulti\n              label=\"Your favorite framework/library\"\n              placeholder=\"Pick one\"\n              model=\"frameworks\"\n              isSearchable\n              options={options}\n              validators={{ required: true }}\n            />\n            <DateInput model=\"test-date\" validators={{ required: true }} />\n            <TextInput\n              label=\"TextInput Form\"\n              placeholder=\"Form\"\n              model=\"textForm\"\n              isClearable\n              validators={{ required: true }}\n            />\n            <Button type=\"submit\" style={{ marginTop: '15px' }}>\n              Submit\n            </Button>\n          </FormProvider>\n        </Layout.Stack>\n      </div>\n    </PageBody>\n  );\n};\n")),(0,r.kt)("h2",{id:"pagebodyintrorow"},"PageBodyIntro.Row"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Row")," to create a new row. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"alignLayout")," prop to change the left-to-right layout and ",(0,r.kt)("inlineCode",{parentName:"p"},"alignItems")," to adjust the top-to-bottom alignment. The default ",(0,r.kt)("inlineCode",{parentName:"p"},"alignLayout")," setting is ",(0,r.kt)("inlineCode",{parentName:"p"},"spaced")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"alignItems")," defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"center"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const menuItems = [\n    {\n      title: 'New Window',\n      onClick: () => {\n        console.log('Clicked New Window!');\n      },\n    },\n    {\n      title: 'Open New Tab',\n      onClick: () => {\n        console.log('Open New Tab!');\n      },\n    },\n    {\n      title: 'Save As...',\n      onClick: () => {\n        console.log('Save As...');\n      },\n      icon: <IconMaterial icon=\"save\" />,\n    },\n  ];\n\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <Breadcrumbs\n          size={14}\n          divider=\"/\"\n          items={[\n            { title: 'Home', href: '/' },\n            {\n              title: 'Getting Started',\n              href: '/developers/getting-started/',\n            },\n            { title: 'Breadcrumbs', href: '/web/ui/breadcrumbs/' },\n          ]}\n        />\n        <DropdownMenu\n          label=\"Table Actions\"\n          hideLabel\n          after={<IconMaterial icon=\"more_vert\" />}\n          menuItems={menuItems}\n        />\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,r.kt)("h2",{id:"pagebodyintrotitle"},"PageBodyIntro.Title"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Title")," for the page title text. If you need to change the heading-level pass the desired heading-level string to the ",(0,r.kt)("inlineCode",{parentName:"p"},"headingLevel")," prop. The default setting is ",(0,r.kt)("inlineCode",{parentName:"p"},"h2"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Title>Page Title</PageBodyIntro.Title>\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,r.kt)("h2",{id:"pagebodyintroprofile"},"PageBodyIntro.Profile"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Profile")," is used to hold all content related to profile information and maintain the recommended layout for this section. It is comprised of three primary sections and includes a prop to supply the content for each, ",(0,r.kt)("inlineCode",{parentName:"p"},"headingSection"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"dataSection")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"statusSection"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const profileData = [\n    { label: 'MPIN', value: '1234457' },\n    { label: 'NPI', value: '28737823' },\n    { label: 'TIN', value: '827382847' },\n    { label: 'Primary Specialty', value: 'Internal Medicine' },\n    { label: 'Demographic/Contract Status', value: 'Active' },\n    { label: 'Provider Hold', value: 'No' },\n  ];\n\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Profile\n          headingSection={\n            <PageBodyIntro.ProfileHeading>\n              Profile Name\n            </PageBodyIntro.ProfileHeading>\n          }\n          dataSection={<PageBodyIntro.ProfileData profileData={profileData} />}\n          statusSection={<Badge variant=\"success\">Verified</Badge>}\n        />\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,r.kt)("p",null,"See the following sub-sections for further detail on the associated sub-components and the implementation of each."),(0,r.kt)("h3",{id:"profile-heading"},"Profile Heading"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.ProfileHeading")," for the profile heading text. If you need to change the heading-level pass the desired heading-level string to the ",(0,r.kt)("inlineCode",{parentName:"p"},"headingLevel")," prop. The default setting is ",(0,r.kt)("inlineCode",{parentName:"p"},"h3"),"."),(0,r.kt)("p",null,"To insert into the profile section layout pass this component into the ",(0,r.kt)("inlineCode",{parentName:"p"},"headingSection")," prop within ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Profile"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Profile\n          headingSection={\n            <PageBodyIntro.ProfileHeading>\n              Profile Name\n            </PageBodyIntro.ProfileHeading>\n          }\n        />\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,r.kt)("h3",{id:"profile-data"},"Profile Data"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.ProfileData")," is used to provide a list of meta-data associated with the current profile. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"profileData")," prop to pass in an array of objects that include the following two properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"label")," : label that will be displayed for the item"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"value")," : corresponding value that will be displayed for the item")),(0,r.kt)("p",null,"To insert into the profile section layout pass this component into the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataSection")," prop within ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Profile"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const profileData = [\n    { label: 'MPIN', value: '1234457' },\n    { label: 'NPI', value: '28737823' },\n    { label: 'TIN', value: '827382847' },\n    { label: 'Primary Specialty', value: 'Internal Medicine' },\n    { label: 'Demographic/Contract Status', value: 'Active' },\n    { label: 'Provider Hold', value: 'No' },\n  ];\n\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Profile\n          dataSection={<PageBodyIntro.ProfileData profileData={profileData} />}\n        />\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,r.kt)("h3",{id:"profile-status"},"Profile Status"),(0,r.kt)("p",null,"There is no sub-component to handle this section but rather it is recommended a ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/badge"},"Badge")," or something similar be utilized and passed into the ",(0,r.kt)("inlineCode",{parentName:"p"},"statusSection")," prop within ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Profile"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const profileData = [\n    { label: 'MPIN', value: '1234457' },\n    { label: 'NPI', value: '28737823' },\n    { label: 'TIN', value: '827382847' },\n    { label: 'Primary Specialty', value: 'Internal Medicine' },\n    { label: 'Demographic/Contract Status', value: 'Active' },\n    { label: 'Provider Hold', value: 'No' },\n  ];\n\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Profile\n          headingSection={\n            <PageBodyIntro.ProfileHeading>\n              Profile Name\n            </PageBodyIntro.ProfileHeading>\n          }\n          dataSection={<PageBodyIntro.ProfileData profileData={profileData} />}\n          statusSection={<Badge variant=\"success\">Verified</Badge>}\n        />\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,r.kt)("p",null,"If the available space below the profile heading is not sufficient and you prefer to have the status located at the bottom of this section simply add it within a new ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Row"),". In the example below the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/status-indicator/#width"},"StatusIndicator")," is being used in full-width."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const profileData = [\n    { label: 'MPIN', value: '1234457' },\n    { label: 'NPI', value: '28737823' },\n    { label: 'TIN', value: '827382847' },\n    { label: 'Primary Specialty', value: 'Internal Medicine' },\n    { label: 'Demographic/Contract Status', value: 'Active' },\n    { label: 'Provider Hold', value: 'No' },\n  ];\n\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Profile\n          headingSection={\n            <PageBodyIntro.ProfileHeading>\n              Profile Name\n            </PageBodyIntro.ProfileHeading>\n          }\n          dataSection={<PageBodyIntro.ProfileData profileData={profileData} />}\n        />\n      </PageBodyIntro.Row>\n      <PageBodyIntro.Row alignItems=\"top\">\n        <StatusIndicator\n          variant=\"success\"\n          statusLabel=\"Status label\"\n          width=\"100%\"\n        >\n          <StatusIndicator.Icon title=\"success\" />\n          <StatusIndicator.Text>Status</StatusIndicator.Text>\n          <StatusIndicator.Link href=\"#\">Link</StatusIndicator.Link>\n        </StatusIndicator>\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,r.kt)("h2",{id:"pagebodyintrolinks"},"PageBodyIntro.Links"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Links")," to add a row of links. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"linkData")," prop to pass in an array of objects that include the following two properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"label")," : label that will be displayed for the item"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"href")," : sets the url of desired location")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const linkData = [\n    { label: 'Jump Link 1', href: '#pagebodyintrorow' },\n    { label: 'Jump Link 2', href: '#pagebodyintrotitle' },\n    { label: 'Jump Link 3', href: '#pagebodyintroprofile' },\n    { label: 'External Link', href: 'https://www.google.com' },\n  ];\n\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.Links linkData={linkData} />\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,r.kt)("p",null,"One common alternative to ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.Links")," would be the usage of ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/toggle-tabs"},"ToggleTabs")," as seen in the following example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [toggleValue, setToggleValue] = useState(\'low-d\');\n\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <ToggleTabs\n          onChange={(e) => setToggleValue(e.target.value)}\n          value={toggleValue}\n        >\n          <ToggleTabs.Tab label="Demographics" value="low-d" />\n          <ToggleTabs.Tab label="Policy" value="bind" />\n          <ToggleTabs.Tab label="Care Provider" value="bal" />\n          <ToggleTabs.Tab label="Coverage" value="low-p" />\n          <ToggleTabs.Tab label="Benefits" value="full" />\n        </ToggleTabs>\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n')),(0,r.kt)("h2",{id:"pagebodyintrorequiredkey"},"PageBodyIntro.RequiredKey"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.RequiredKey")," to display a key that corresponds with required fields from an associated form. The default message text is ",(0,r.kt)("inlineCode",{parentName:"p"},"Required")," but a custom message can be utilized by wrapping the text in ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro.RequiredKey"),".\nThis component can be utilized outside of ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro")," and is only recommended to be placed within ",(0,r.kt)("inlineCode",{parentName:"p"},"PageBodyIntro")," if a sticky position is used and the key will be visible while the user navigates through the associated form located below. Please see the ",(0,r.kt)("a",{parentName:"p",href:"#sticky"},"Sticky")," section for an example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  return (\n    <PageBodyIntro>\n      <PageBodyIntro.Row>\n        <PageBodyIntro.RequiredKey />\n      </PageBodyIntro.Row>\n    </PageBodyIntro>\n  );\n};\n")),(0,r.kt)("h2",{id:"full-page-layout"},"Full Page Layout"),(0,r.kt)(u,{mdxType:"FullPageLayout"})),(0,r.kt)(c,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBodyIntro}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element(s) PageBodyIntro wraps',\n    },\n    {\n      name: 'rowSpace',\n      type: 'number | string',\n      description: 'Set the spacing between rows within PageBodyIntro',\n    },\n    {\n      name: 'sticky',\n      type: 'boolean | object',\n      description: 'Apply sticky positioning to PageBodyIntro root element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBodyIntro.Row}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The element(s) PageBodyIntro.Row wraps',\n    },\n    {\n      name: 'alignLayout',\n      type: \"'spaced' | 'left' | 'center' | 'right'\",\n      description: 'Set the left-to-right alignment of items on the main axis',\n    },\n    {\n      name: 'alignItems',\n      type: \"'top' | 'center' | 'bottom'\",\n      description: 'Set the top-to-bottom alignment of items on the cross axis',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBodyIntro.Title}\n  rows={[\n    {\n      name: 'children',\n      type: 'string',\n      description: 'The heading text content of PageBodyIntro.Title',\n    },\n    {\n      name: 'headingLevel',\n      type: \"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\",\n      description: 'Set the heading level',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBodyIntro.Profile}\n  rows={[\n    {\n      name: 'headingSection',\n      type: 'ReactNode',\n      description:\n        'Set the content for the heading section within PageBodyIntro.Profile',\n    },\n    {\n      name: 'dataSection',\n      type: 'ReactNode',\n      description:\n        'Set the content for the data section within PageBodyIntro.Profile',\n    },\n    {\n      name: 'statusSection',\n      type: 'ReactNode',\n      description:\n        'Set the content for the status section within PageBodyIntro.Profile',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBodyIntro.ProfileHeading}\n  rows={[\n    {\n      name: 'children',\n      type: 'string',\n      description: 'The heading text content of PageBodyIntro.ProfileHeading',\n    },\n    {\n      name: 'headingLevel',\n      type: \"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\",\n      description: 'Set the heading level',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBodyIntro.ProfileData}\n  rows={[\n    {\n      name: 'profileData',\n      type: 'array[object]',\n      description:\n        'Array of objects to be formatted and displayed within PageBodyIntro.ProfileData { label: string, value: string }',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBodyIntro.Links}\n  rows={[\n    {\n      name: 'linkData',\n      type: 'array[object]',\n      description:\n        'Array of objects to be formatted and displayed as links within PageBodyIntro.Links { label: string, href: string }',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PageBodyIntro.RequiredKey}\n  rows={[\n    {\n      name: 'children',\n      type: 'string',\n      description: 'The text content of PageBodyIntro.RequiredKey',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBodyIntro}\n  rows={[\n    {\n      name: 'page-body-intro-root',\n      description: 'Page body intro root element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBodyIntro.Row}\n  rows={[\n    {\n      name: 'page-body-intro-row-container',\n      description: 'Page body intro row container element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBodyIntro.Title}\n  rows={[\n    {\n      name: 'page-body-intro-title-container',\n      description: 'Page body intro title container element',\n    },\n    {\n      name: 'page-body-intro-title-text',\n      description: 'Page body intro title text element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBodyIntro.Profile}\n  rows={[\n    {\n      name: 'page-body-intro-profile-container',\n      description: 'Page body intro profile container element',\n    },\n    {\n      name: 'page-body-intro-profile-heading-status-container',\n      description:\n        'Page body intro profile heading and status container element',\n    },\n    {\n      name: 'page-body-intro-profile-data-container',\n      description: 'Page body intro profile data container element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBodyIntro.ProfileHeading}\n  rows={[\n    {\n      name: 'page-body-intro-profile-heading-text',\n      description: 'Page body intro profile-heading text element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBodyIntro.ProfileData}\n  rows={[\n    {\n      name: 'page-body-intro-profile-data-list-container',\n      description: 'Page body intro profile-data list container element',\n    },\n    {\n      name: 'page-body-intro-profile-data-list-item',\n      description: 'Page body intro profile-data list item element',\n    },\n    {\n      name: 'page-body-intro-profile-data-list-item-label-text',\n      description: 'Page body intro profile-data list item label text element',\n    },\n    {\n      name: 'page-body-intro-profile-data-list-item-value-text',\n      description: 'Page body intro profile-data list item value text element',\n    },\n    {\n      name: 'page-body-intro-profile-data-list-item-divider',\n      description: 'Page body intro profile-data list item divider element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBodyIntro.Links}\n  rows={[\n    {\n      name: 'page-body-intro-links-list-container',\n      description: 'Page body intro links list container element',\n    },\n    {\n      name: 'page-body-intro-links-list-item',\n      description: 'Page body intro links list item element',\n    },\n    {\n      name: 'page-body-intro-links-list-item-link',\n      description: 'Page body intro links list item link element',\n    },\n    {\n      name: 'page-body-intro-links-list-item-divider',\n      description: 'Page body intro links list item divider element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={PageBodyIntro.RequiredKey}\n  rows={[\n    {\n      name: 'page-body-intro-required-key-container',\n      description: 'Page body intro required key container element',\n    },\n    {\n      name: 'page-body-intro-required-key-color-box',\n      description: 'Page body intro required key color box element',\n    },\n    {\n      name: 'page-body-intro-required-key-text-asterisk-container',\n      description:\n        'Page body intro required key text and asterisk container element',\n    },\n    {\n      name: 'page-body-intro-required-key-text',\n      description: 'Page body intro required key text element',\n    },\n    {\n      name: 'page-body-intro-required-key-asterisk',\n      description: 'Page body intro required key asterisk element',\n    },\n  ]}\n/>\n"))))}y.isMDXComponent=!0}}]);