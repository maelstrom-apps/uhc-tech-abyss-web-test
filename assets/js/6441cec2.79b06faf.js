"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[1186],{27216:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>c,default:()=>f,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var l,r=t(7896),o=t(31461),a=(t(2784),t(3905)),s=["components"],i={id:"fullscreen",category:"Overlay",title:"Fullscreen",description:"Displays an overlay that takes up the entire screen.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11860",pagination_prev:"web/ui/drawer",pagination_next:"web/ui/loading-overlay"},c=void 0,u={unversionedId:"web/ui/fullscreen",id:"web/ui/fullscreen",isDocsHomePage:!1,title:"Fullscreen",description:"Displays an overlay that takes up the entire screen.",source:"@site/docs/web/ui/Fullscreen.md",sourceDirName:"web/ui",slug:"/web/ui/fullscreen",permalink:"/web/ui/fullscreen",tags:[],version:"current",frontMatter:{id:"fullscreen",category:"Overlay",title:"Fullscreen",description:"Displays an overlay that takes up the entire screen.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=510%3A11860",pagination_prev:"web/ui/drawer",pagination_next:"web/ui/loading-overlay"},sidebar:"docs",previous:{title:"Drawer",permalink:"/web/ui/drawer"},next:{title:"LoadingOverlay",permalink:"/web/ui/loading-overlay"}},p=[{value:"useOverlay",id:"useoverlay",children:[],level:2},{value:"useState",id:"usestate",children:[],level:2},{value:"Title",id:"title",children:[],level:2},{value:"Passing Data",id:"passing-data",children:[],level:2},{value:"Title Align",id:"title-align",children:[],level:2},{value:"Overflow",id:"overflow",children:[],level:2},{value:"Footer",id:"footer",children:[],level:2}],m=(l="Tab",function(e){return console.warn("Component "+l+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",e)}),d={toc:p};function f(e){var n=e.components,t=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(m,{label:"Overview",mdxType:"Tab"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Fullscreen } from '@abyss/web/ui/Fullscreen';\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Fullscreen',\n  inputs: [\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'title',\n      type: 'string',\n    },\n  ],\n}\n\n() => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Fullscreen\n        title=\"Enter title here\"\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n      >\n        Press escape to close the fullscreen\n      </Fullscreen>\n      <Button onClick={() => setIsOpen(true)}>\n        Toggle Fullscreen\n      </Button>\n    </React.Fragment>\n  );\n}\n")),(0,a.kt)("h2",{id:"useoverlay"},"useOverlay"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useOverlay")," hook lets the DOM handle form data and the overlays state. To utilize the ",(0,a.kt)("a",{parentName:"p",href:"/web/hooks/use-overlay"},"useOverlay")," hook the root/parent must be wrapped with the ",(0,a.kt)("a",{parentName:"p",href:"/web/ui/overlay-provider"},"OverlayProvider"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const fullscreen = useOverlay(\'fullscreen-form\');\n\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => fullscreen.open()}>Toggle Fullscreen</Button>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <Fullscreen title="Register" model="fullscreen-form">\n          <Fullscreen.Section>\n            <TextInput\n              label="First Name"\n              model="first-name"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Last Name"\n              model="last-name"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Email"\n              type="email"\n              model="email"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Password"\n              type="password"\n              model="password"\n              validators={{ required: true }}\n            />\n            <div style={{ marginTop: 20, marginBottom: 20 }}>\n              <Checkbox\n                label="I agree to terms and conditions"\n                model="terms-condition"\n                validators={{ required: true }}\n              />\n            </div>\n          </Fullscreen.Section>\n          <Fullscreen.Section>\n            <Layout.Group alignLayout="right">\n              <Button variant="outline" onClick={() => fullscreen.close()}>\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  form.handleSubmit(onSubmit)();\n                  if (form.formState.isValid) {\n                    fullscreen.close();\n                  }\n                }}\n              >\n                Submit\n              </Button>\n            </Layout.Group>\n          </Fullscreen.Section>\n        </Fullscreen>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n')),(0,a.kt)("h2",{id:"usestate"},"useState"),(0,a.kt)("p",null,"Using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useState")," hook to set the open state of the fullscreen."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const form = useForm();\n\n  const onSubmit = (data) => {\n    console.log(\'data\', data);\n  };\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => setIsOpen(true)}>Toggle Fullscreen</Button>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <Fullscreen\n          title="Register"\n          isOpen={isOpen}\n          onClose={() => setIsOpen(false)}\n        >\n          <Fullscreen.Section>\n            <TextInput\n              label="First Name"\n              model="first-name"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Last Name"\n              model="last-name"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Email"\n              type="email"\n              model="email"\n              validators={{ required: true }}\n            />\n            <TextInput\n              label="Password"\n              type="password"\n              model="password"\n              validators={{ required: true }}\n            />\n            <div style={{ marginTop: 20, marginBottom: 20 }}>\n              <Checkbox\n                label="I agree to terms and conditions"\n                model="terms-condition"\n                validators={{ required: true }}\n              />\n            </div>\n          </Fullscreen.Section>\n          <Fullscreen.Section>\n            <Layout.Group alignLayout="right">\n              <Button onClick={() => setIsOpen(false)} variant="outline">\n                Cancel\n              </Button>\n              <Button onClick={() => setIsOpen(false)}>Submit</Button>\n            </Layout.Group>\n          </Fullscreen.Section>\n        </Fullscreen>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n')),(0,a.kt)("h2",{id:"title"},"Title"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"title")," prop to set the title of the fullscreen."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const fullscreen = useOverlay(\'title-fullscreen\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => fullscreen.open()}>Toggle Fullscreen</Button>\n      <Fullscreen title="Custom Title" model="title-fullscreen">\n        <Fullscreen.Section>Custom Title</Fullscreen.Section>\n      </Fullscreen>\n    </React.Fragment>\n  );\n};\n')),(0,a.kt)("h2",{id:"passing-data"},"Passing Data"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"getState")," method retrieve the state of the fullscreen. Structure: ",(0,a.kt)("inlineCode",{parentName:"p"},"{ isOpen: Boolean, data: Object }"),". Pass data into the open/toggle methods to use in the fullscreen."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const fullscreen = useOverlay('data-fullscreen');\n  const { data } = fullscreen.getState();\n\n  return (\n    <React.Fragment>\n      <Button\n        onClick={() => fullscreen.open({ firstName: 'John', lastName: 'Doe' })}\n      >\n        Toggle Fullscreen\n      </Button>\n      <Fullscreen title=\"Passing Data to Fullscreen\" model=\"data-fullscreen\">\n        <Fullscreen.Section>\n          <p>First Name: {data && data.firstName}</p>\n          <p>Last Name: {data && data.lastName}</p>\n        </Fullscreen.Section>\n      </Fullscreen>\n    </React.Fragment>\n  );\n};\n")),(0,a.kt)("h2",{id:"title-align"},"Title Align"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"titleAlign")," prop to align the position of the title."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const form = useForm();\n  const fullscreen = useOverlay('title-aligment');\n\n  const [align, setAlign] = useState('left');\n\n  const onSubmit = (data) => {\n    console.log('data', data);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button\n          onClick={() => {\n            fullscreen.open();\n            setAlign('left');\n          }}\n        >\n          Left\n        </Button>\n        <Button\n          onClick={() => {\n            fullscreen.open();\n            setAlign('center');\n          }}\n        >\n          Center\n        </Button>\n        <Button\n          onClick={() => {\n            fullscreen.open();\n            setAlign('right');\n          }}\n        >\n          Right\n        </Button>\n      </Layout.Group>\n      <FormProvider state={form} onSubmit={onSubmit}>\n        <Fullscreen\n          title=\"Title Alignment\"\n          position=\"top\"\n          titleAlign={align}\n          model=\"title-aligment\"\n        >\n          <Fullscreen.Section>Title Alignment</Fullscreen.Section>\n        </Fullscreen>\n      </FormProvider>\n    </React.Fragment>\n  );\n};\n")),(0,a.kt)("h2",{id:"overflow"},"Overflow"),(0,a.kt)("p",null,"Overflow is handled within the content of the fullscreen. The title will remain static."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const fullscreen = useOverlay(\'overflow-fullscreen\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => fullscreen.open()}>Toggle Fullscreen</Button>\n      <Fullscreen title="Overflow" model="overflow-fullscreen">\n        <Fullscreen.Section>\n          {Array.from(Array(50).keys()).map((item) => {\n            return (\n              <p key={item} style={{ marginBottom: 65 }}>\n                Overflow Example - Scroll\n              </p>\n            );\n          })}\n        </Fullscreen.Section>\n      </Fullscreen>\n    </React.Fragment>\n  );\n};\n')),(0,a.kt)("h2",{id:"footer"},"Footer"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"footer")," to add a footer container to a fullscreen."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const fullscreen = useOverlay(\'fullscreen-footer\');\n\n  return (\n    <React.Fragment>\n      <Button onClick={() => fullscreen.open()}>Toggle Fullscreen</Button>\n      <Fullscreen\n        title="Fullscreen With Footer "\n        model="fullscreen-footer"\n        footer={\n          <Fullscreen.Section>\n            <Layout.Group alignLayout="right">\n              <Button onClick={() => fullscreen.close()}>Cancel</Button>\n            </Layout.Group>\n          </Fullscreen.Section>\n        }\n      >\n        <Fullscreen.Section>\n          {Array.from(Array(30).keys()).map((item) => {\n            return (\n              <p key={item} style={{ marginBottom: 65 }}>\n                Fullscreen footer with cancel button\n              </p>\n            );\n          })}\n        </Fullscreen.Section>\n      </Fullscreen>\n    </React.Fragment>\n  );\n};\n'))),(0,a.kt)(m,{label:"Integration",mdxType:"Tab"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Fullscreen}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Fullscreen component',\n    },\n    {\n      name: 'footer',\n      type: 'node',\n      description: 'The contents of the Fullscreen footer',\n    },\n    {\n      name: 'title',\n      type: 'string',\n      description: 'Set the title of the fullscreen',\n    },\n    {\n      name: 'isOpen',\n      type: 'boolean',\n      description: 'Flag to check if fullscreen is opened',\n    },\n    {\n      name: 'onClose',\n      type: 'function',\n      description: 'Callback fired everytime fullscreen is closed',\n    },\n    {\n      name: 'model',\n      type: 'string',\n      description: 'Unique identifier used for FormProvider',\n    },\n    {\n      name: 'titleAlign',\n      type: 'string',\n      description: 'Set the alignment of the title',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Fullscreen.Section}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Fullscreen Section component',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Fullscreen}\n  rows={[\n    {\n      name: 'modal-root',\n      description: 'Fullscreen root element',\n    },\n    {\n      name: 'modal-overlay',\n      description: 'Fullscreen overlay element',\n    },\n    {\n      name: 'modal-content-container',\n      description: 'Fullscreen content container',\n    },\n    {\n      name: 'modal-header-container',\n      description: 'Fullscreen header container',\n    },\n    {\n      name: 'modal-header-title',\n      description: 'Fullscreen title element',\n    },\n    {\n      name: 'modal-body',\n      description: 'Fullscreen body element',\n    },\n    {\n      name: 'modal-footer',\n      description: 'Fullscreen footer element',\n    },\n    {\n      name: 'modal-close-button',\n      description: 'Fullscreen close button element',\n    },\n    {\n      name: 'modal-close-icon',\n      description: 'Fullscreen close icon element',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Fullscreen.Section}\n  rows={[\n    {\n      name: 'modal-section-root',\n      description: 'Fullscreen Section root element',\n    },\n  ]}\n/>\n"))),(0,a.kt)(m,{label:"Accessibility",mdxType:"Tab"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.AccessibilityTable\n  rows={[\n    {\n      name: 'Esc',\n      description: 'Closes the Fullscreen.',\n    },\n    {\n      name: 'Tab',\n      description:\n        'Moves focus to the next interactive element within the Fullscreen.  Once the last interactive element in the Fullscreen is reached, pressing Tab again moves focus to the first interactive element within the Fullscreen.',\n    },\n    {\n      name: 'Shift + Tab',\n      description:\n        'Moves focus to the previous interactive element within the Fullscreen.  Once the first interactive element in the Fullscreen is reached, pressing Shift + Tab again moves focus to the last interactive element within the Fullscreen.',\n    },\n  ]}\n/>\n")),(0,a.kt)("h3",null,"Fullscreen Content"),(0,a.kt)("p",null,"The content included on the Fullscreen must be accessible."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const fullscreen = useOverlay(\'accessible-fullscreen\');\n\n  return (\n    <>\n      <Button onClick={() => fullscreen.open()}>Toggle Fullscreen</Button>\n      <Fullscreen title="Accessible Fullscreen" model="accessible-fullscreen">\n        <Fullscreen.Section>\n          <Button>Button is accessible in fullscreen</Button>\n        </Fullscreen.Section>\n      </Fullscreen>\n    </>\n  );\n};\n'))))}f.isMDXComponent=!0},3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var l=t(2784);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},o=Object.keys(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=l.createContext({}),c=function(e){var n=l.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return l.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},m=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=r,f=m["".concat(i,".").concat(d)]||m[d]||p[d]||o;return t?l.createElement(f,a(a({ref:n},u),{},{components:t})):l.createElement(f,a({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=m;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var c=2;c<o;c++)a[c]=t[c];return l.createElement.apply(null,a)}return l.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);