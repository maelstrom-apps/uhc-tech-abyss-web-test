"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[4588],{30876:(n,e,t)=>{t.d(e,{Zo:()=>s,kt:()=>P});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var p=r.createContext({}),c=function(n){var e=r.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},s=function(n){var e=c(n.components);return r.createElement(p.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,i=n.originalType,p=n.parentName,s=l(n,["components","mdxType","originalType","parentName"]),d=c(t),P=o,m=d["".concat(p,".").concat(P)]||d[P]||u[P]||i;return t?r.createElement(m,a(a({ref:e},s),{},{components:t})):r.createElement(m,a({ref:e},s))}));function P(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=n,l.mdxType="string"==typeof n?n:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},24204:(n,e,t)=>{t.r(e),t.d(e,{contentTitle:()=>c,default:()=>m,frontMatter:()=>p,metadata:()=>s,toc:()=>u});var r,o=t(7896),i=t(31461),a=(t(67294),t(30876)),l=["components"],p={id:"print-provider",category:"Providers",title:"PrintProvider",description:"Allows print functionality.",pagination_prev:"web/ui/overlay-provider",pagination_next:"web/ui/router-provider"},c=void 0,s={unversionedId:"web/ui/print-provider",id:"web/ui/print-provider",isDocsHomePage:!1,title:"PrintProvider",description:"Allows print functionality.",source:"@site/docs/web/ui/PrintProvider.md",sourceDirName:"web/ui",slug:"/web/ui/print-provider",permalink:"/web/ui/print-provider",tags:[],version:"current",frontMatter:{id:"print-provider",category:"Providers",title:"PrintProvider",description:"Allows print functionality.",pagination_prev:"web/ui/overlay-provider",pagination_next:"web/ui/router-provider"},sidebar:"docs",previous:{title:"OverlayProvider",permalink:"/web/ui/overlay-provider"},next:{title:"RouterProvider",permalink:"/web/ui/router-provider"}},u=[{value:"Usage",id:"usage",children:[],level:2},{value:"usePrint",id:"useprint",children:[],level:2},{value:"Print Elements",id:"print-elements",children:[{value:"Print.Section",id:"printsection",children:[],level:3},{value:"Print.Title",id:"printtitle",children:[],level:3},{value:"Print.Label",id:"printlabel",children:[],level:3},{value:"Print.Value",id:"printvalue",children:[],level:3},{value:"Print.Table",id:"printtable",children:[],level:3},{value:"Print.Image",id:"printimage",children:[],level:3},{value:"Print.ListItem",id:"printlistitem",children:[],level:3},{value:"Print.Box",id:"printbox",children:[],level:3}],level:2}],d=(r="Tab",function(n){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",n)}),P={toc:u};function m(n){var e=n.components,t=(0,i.Z)(n,l);return(0,a.kt)("wrapper",(0,o.Z)({},P,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)(d,{label:"Overview",mdxType:"Tab"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { PrintProvider } from '@abyss/web/ui/PrintProvider';\n")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Applications must be wrapped in the ",(0,a.kt)("inlineCode",{parentName:"p"},"PrintProvider")," in order to manage the print view for your application."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"<PrintProvider>\n  <AppRoot />\n</PrintProvider>\n")),(0,a.kt)("h2",{id:"useprint"},"usePrint"),(0,a.kt)("p",null,"Through usage of the ",(0,a.kt)("inlineCode",{parentName:"p"},"usePrint")," hook you can either trigger the native browser print capability, or activate a PDF download."),(0,a.kt)("p",null,"Refer to ",(0,a.kt)("a",{parentName:"p",href:"/web/hooks/use-print"},"usePrint")," for more details."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"import { usePrint } from '@abyss/web/hooks/usePrint';\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const print = usePrint();\n\n  const logPDF = (pdf) => {\n    console.log(\'pdf\', pdf);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align="left">\n        <Text color="$primary1" fontWeight="$bold">\n          Hello World\n        </Text>\n      </Box>\n\n      <Print.Section>\n        <Print.Value>Hello World</Print.Value>\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n')),(0,a.kt)("h2",{id:"print-elements"},"Print Elements"),(0,a.kt)("p",null,"Using the Print Elements, we are able to customize how our content appears when printed/saved as a PDF."),(0,a.kt)("h3",{id:"printsection"},"Print.Section"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"Print.Section")," to section out content in the print area."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const print = usePrint();\n\n  const logPDF = (pdf) => {\n    console.log(\'pdf\', pdf);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align="left">\n        <Text color="$primary1" fontWeight="$bold">\n          Hello World\n        </Text>\n      </Box>\n\n      <Print.Section>\n        <Print.Value>Hello World (Print Section)</Print.Value>\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n')),(0,a.kt)("h3",{id:"printtitle"},"Print.Title"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"Print.Title")," to put a title in your printable section."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const print = usePrint();\n\n  const logPDF = (pdf) => {\n    console.log(\'pdf\', pdf);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align="left">\n        <Heading offset={1} color="$primary1" fontWeight="$bold">\n          Hello World\n        </Heading>\n      </Box>\n\n      <Print.Section>\n        <Print.Title>Hello World (Print Title)</Print.Title>\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n')),(0,a.kt)("h3",{id:"printlabel"},"Print.Label"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"Print.Label")," to put a label in your printable section."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const print = usePrint();\n\n  const logPDF = (pdf) => {\n    console.log('pdf', pdf);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align=\"left\">\n        <Label>Hello World: </Label>\n      </Box>\n\n      <Print.Section>\n        <Print.Label>Hello World: (Print Label)</Print.Label>\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n")),(0,a.kt)("h3",{id:"printvalue"},"Print.Value"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"Print.Value")," to put a normal text element in your printable section."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const print = usePrint();\n\n  const logPDF = (pdf) => {\n    console.log(\'pdf\', pdf);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align="left">\n        <Text color="$primary1" fontWeight="$bold">\n          Hello World\n        </Text>\n      </Box>\n\n      <Print.Section>\n        <Print.Value>Hello World (Print Value)</Print.Value>\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n')),(0,a.kt)("h3",{id:"printtable"},"Print.Table"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"Print.Table")," to put a table in your printable section. ",(0,a.kt)("inlineCode",{parentName:"p"},"columns")," should be objects that have a name and value and ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," should be the row values."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const print = usePrint();\n\n  const logPDF = (pdf) => {\n    console.log('pdf', pdf);\n  };\n\n  const columns = [\n    { name: 'Name', key: 'name' },\n    { name: 'Type', key: 'type' },\n    { name: 'Date Modified', key: 'date' },\n  ];\n\n  const rows = [\n    { id: 1, name: 'Games', date: '6/7/2020', type: 'File folder' },\n    { id: 2, name: 'Program Files', date: '4/7/2021', type: 'File folder' },\n    { id: 3, name: 'bootmgr', date: '11/20/2010', type: 'System file' },\n    { id: 4, name: 'log.txt', date: '1/18/2016', type: 'Text Document' },\n  ];\n  const printCols = [\n    { name: 'Name', value: '{{name}}' },\n    { name: 'Type', value: '{{type}}' },\n    { name: 'Date Modified', value: '{{date}}' },\n  ];\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align=\"left\">\n        <Table title=\"Base Static Table\" columns={columns} rows={rows} />\n      </Box>\n\n      <Print.Section>\n        <Print.Table data={rows} columns={printCols} />\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n")),(0,a.kt)("h3",{id:"printimage"},"Print.Image"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"Print.Image")," to put a image in your printable section."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const print = usePrint();\n\n  const img = utils.useBaseUrl(`img/logo.png`);\n\n  const logPDF = (pdf) => {\n    console.log(\'pdf\', pdf);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align="left">\n        <img src={img} alt="abyss.png" />\n      </Box>\n\n      <Print.Section>\n        <Print.Image>{img}</Print.Image>\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n')),(0,a.kt)("h3",{id:"printlistitem"},"Print.ListItem"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"Print.ListItem")," to put a list into your printable section."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"() => {\n  const print = usePrint();\n\n  const logPDF = (pdf) => {\n    console.log('pdf', pdf);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align=\"left\">\n        <ul>\n          <li>Alpha</li>\n          <li>Beta</li>\n          <li>Charlie</li>\n        </ul>\n      </Box>\n\n      <Print.Section>\n        <Print.ListItem>Alpha</Print.ListItem>\n        <Print.ListItem>Beta</Print.ListItem>\n        <Print.ListItem>Charlie</Print.ListItem>\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n")),(0,a.kt)("h3",{id:"printbox"},"Print.Box"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"Print.Box")," to create a box around content you want to print"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const print = usePrint();\n\n  const logPDF = (pdf) => {\n    console.log(\'pdf\', pdf);\n  };\n\n  return (\n    <React.Fragment>\n      <Layout.Group>\n        <Button onClick={() => print.printPage()}>Print Page</Button>\n        <Button onClick={() => print.savePDF(logPDF)}>Save PDF</Button>\n        <Button onClick={() => print.createPDF(logPDF)}>Create PDF</Button>\n      </Layout.Group>\n      <Layout.Space />\n\n      <Box align="left">\n        <Text color="$primary1" fontWeight="$bold">\n          Hello World\n        </Text>\n      </Box>\n\n      <Print.Section>\n        <Print.Box>Hello World (Print Box)</Print.Box>\n      </Print.Section>\n    </React.Fragment>\n  );\n};\n'))),(0,a.kt)(d,{label:"Integration",mdxType:"Tab"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={PrintProvider}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'Application contents',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Print.Section}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Section component',\n    },\n    {\n      name: 'showPrint',\n      type: 'boolean',\n      description: 'decides if section shows up in the print or not',\n    },\n    {\n      name: 'hideBorder',\n      type: 'boolean',\n      description: 'decides if border is shown or not',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Print.Title}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Title component',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Print.Label}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Label component',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Print.Value}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Value component',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Print.Table}\n  rows={[\n    {\n      name: 'columns',\n      type: 'array[object]',\n      description: 'Array of column data. { name: string, value: valueKey }',\n    },\n    {\n      name: 'data',\n      type: 'array[object]',\n      description: 'Array of row data. { id: number, valueKey: string }',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Print.Image}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Image component',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Print.ListItem}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the ListItem component',\n    },\n  ]}\n/>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Print.Box}\n  rows={[\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The contents of the Box component',\n    },\n  ]}\n/>\n"))))}m.isMDXComponent=!0}}]);