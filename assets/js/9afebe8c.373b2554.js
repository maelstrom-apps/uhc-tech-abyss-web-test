"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[986],{30876:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(t),m=i,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(g,r(r({ref:n},c),{},{components:t})):a.createElement(g,r({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=u;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,r[1]=p;for(var l=2;l<o;l++)r[l]=t[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},74538:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var a,i=t(7896),o=t(31461),r=(t(67294),t(30876)),p=["components"],s={id:"step-indicator",category:"Content",title:"StepIndicator",description:"Used to indicate a users progress through a multi step process. (Also referred to as a progress tracker or stepper)",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1578",pagination_prev:"web/ui/page-header",pagination_next:"web/ui/tabs"},l=void 0,c={unversionedId:"web/ui/step-indicator",id:"web/ui/step-indicator",isDocsHomePage:!1,title:"StepIndicator",description:"Used to indicate a users progress through a multi step process. (Also referred to as a progress tracker or stepper)",source:"@site/docs/web/ui/StepIndicator.md",sourceDirName:"web/ui",slug:"/web/ui/step-indicator",permalink:"/web/ui/step-indicator",tags:[],version:"current",frontMatter:{id:"step-indicator",category:"Content",title:"StepIndicator",description:"Used to indicate a users progress through a multi step process. (Also referred to as a progress tracker or stepper)",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A1578",pagination_prev:"web/ui/page-header",pagination_next:"web/ui/tabs"},sidebar:"docs",previous:{title:"PageHeader",permalink:"/web/ui/page-header"},next:{title:"Tabs",permalink:"/web/ui/tabs"}},d=[{value:"Usage",id:"usage",children:[],level:2},{value:"Minimal Variant",id:"minimal-variant",children:[],level:2},{value:"Custom Incomplete Step Icons",id:"custom-incomplete-step-icons",children:[],level:2},{value:"Custom Completed Step Icons",id:"custom-completed-step-icons",children:[],level:2},{value:"Pagination",id:"pagination",children:[],level:2},{value:"Final Text in Button",id:"final-text-in-button",children:[],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)}),m={toc:d};function g(e){var n=e.components,t=(0,o.Z)(e,p);return(0,r.kt)("wrapper",(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(u,{label:"Overview",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StepIndicator } from '@abyss/web/ui/StepIndicator';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'StepIndicator',\n  inputs: [\n    {\n      prop: 'barColor',\n      type: 'string',\n    },\n    {\n      prop: 'barSize',\n      type: 'number',\n    },\n    {\n      prop: 'currentStep',\n      type: 'number',\n    },\n    {\n      prop: 'stepSize',\n      type: 'number',\n    },\n       {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'Default', value: 'default' },\n        { label: 'Minimal', value: 'minimal' },\n      ]\n    },\n  ],\n}\n\n<StepIndicator currentStep={3}>\n  <StepIndicator.Step label=\"Personal Information\" />\n  <StepIndicator.Step label=\"Qualifications\" />\n  <StepIndicator.Step label=\"Practice Information\" />\n  <StepIndicator.Step label=\"Locations\" />\n  <StepIndicator.Step label=\"Review & Confirm\"/>\n</StepIndicator>\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"StepIndicator.Step")," like shown below to create as many steps as are desired."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 6 });\n  return (\n    <React.Fragment>\n      <StepIndicator currentStep={paginationProps.state.currentPage}>\n        <StepIndicator.Step label="Personal Information" />\n        <StepIndicator.Step label="Qualifications" />\n        <StepIndicator.Step label="Practice Information" />\n        <StepIndicator.Step label="Locations" />\n        <StepIndicator.Step label="Review & Confirm" />\n      </StepIndicator>\n      <Layout.Group style={{ marginTop: 10 }}>\n        <Button\n          data-id="1"\n          onClick={paginationProps.previousPage}\n          variant="outline"\n          isDisabled={!paginationProps.canPreviousPage}\n        >\n          Previous\n        </Button>\n        <Button\n          data-id="2"\n          onClick={paginationProps.nextPage}\n          isDisabled={!paginationProps.canNextPage}\n        >\n          Next\n        </Button>\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"minimal-variant"},"Minimal Variant"),(0,r.kt)("p",null,"To use the minimal variant style pass in the ",(0,r.kt)("inlineCode",{parentName:"p"},"variant")," prop with a value of ",(0,r.kt)("inlineCode",{parentName:"p"},"minimal")," into the ",(0,r.kt)("inlineCode",{parentName:"p"},"StepIndicator")," component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 6, start: 1 });\n  return (\n    <React.Fragment>\n      <StepIndicator\n        currentStep={paginationProps.state.currentPage}\n        variant="minimal"\n      >\n        <StepIndicator.Step label="Personal Information" />\n        <StepIndicator.Step label="Qualifications" />\n        <StepIndicator.Step label="Practice Information" />\n        <StepIndicator.Step label="Locations" />\n        <StepIndicator.Step label="Review & Confirm" />\n      </StepIndicator>\n      <Layout.Group style={{ marginTop: 10 }}>\n        <Button\n          data-id="1"\n          onClick={paginationProps.previousPage}\n          variant="outline"\n          isDisabled={!paginationProps.canPreviousPage}\n        >\n          Previous\n        </Button>\n        <Button\n          data-id="2"\n          onClick={paginationProps.nextPage}\n          isDisabled={!paginationProps.canNextPage}\n        >\n          Next\n        </Button>\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"custom-incomplete-step-icons"},"Custom Incomplete Step Icons"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"icon")," within ",(0,r.kt)("inlineCode",{parentName:"p"},"StepIndicator.Step")," to change the icon of an incomplete step. A full list of icons can be found in the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/icon"},"Icon Component"),". The default for ",(0,r.kt)("inlineCode",{parentName:"p"},"icon")," is set to each step's position in the list (starting at 1)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 4 });\n  return (\n    <React.Fragment>\n      <StepIndicator currentStep={paginationProps.state.currentPage}>\n        <StepIndicator.Step\n          label="Menu"\n          icon={<IconMaterial icon="local_pizza" />}\n        />\n        <StepIndicator.Step\n          label="Checkout"\n          icon={<IconMaterial icon="add_shopping_cart" />}\n        />\n        <StepIndicator.Step\n          label="Delivery"\n          icon={<IconMaterial icon="local_shipping" />}\n        />\n      </StepIndicator>\n      <Layout.Group style={{ marginTop: 10 }}>\n        <Button\n          data-id="1"\n          onClick={paginationProps.previousPage}\n          variant="outline"\n          isDisabled={!paginationProps.canPreviousPage}\n        >\n          Previous\n        </Button>\n        <Button\n          data-id="2"\n          onClick={paginationProps.nextPage}\n          isDisabled={!paginationProps.canNextPage}\n        >\n          Next\n        </Button>\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"custom-completed-step-icons"},"Custom Completed Step Icons"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"icon")," within ",(0,r.kt)("inlineCode",{parentName:"p"},"StepIndicator")," to change the icon for all completed steps. A full list of icons can be found in the ",(0,r.kt)("a",{parentName:"p",href:"/web/ui/icon"},"Icon Component"),". The default for ",(0,r.kt)("inlineCode",{parentName:"p"},"icon")," is set to a check mark."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  return (\n    <React.Fragment>\n      <StepIndicator icon={<IconMaterial icon="local_pizza" />} currentStep={3}>\n        <StepIndicator.Step />\n        <StepIndicator.Step />\n        <StepIndicator.Step />\n      </StepIndicator>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"pagination"},"Pagination"),(0,r.kt)("p",null,"Set the ",(0,r.kt)("inlineCode",{parentName:"p"},"pages")," variable to match how many pages you would like to display and ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," to set the starting page. Find resources on pagination in the ",(0,r.kt)("a",{parentName:"p",href:"/web/hooks/use-pagination"},"usePagination")," tab."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 6 });\n  return (\n    <React.Fragment>\n      <StepIndicator currentStep={paginationProps.state.currentPage}>\n        <StepIndicator.Step label="Personal Information" />\n        <StepIndicator.Step label="Qualifications" />\n        <StepIndicator.Step label="Practice Information" />\n        <StepIndicator.Step label="Locations" />\n        <StepIndicator.Step label="Review & Confirm" />\n      </StepIndicator>\n      <Layout.Group style={{ marginTop: 10 }}>\n        <Button\n          data-id="1"\n          onClick={paginationProps.previousPage}\n          variant="outline"\n          isDisabled={!paginationProps.canPreviousPage}\n        >\n          Previous\n        </Button>\n        <Button\n          data-id="2"\n          onClick={paginationProps.nextPage}\n          isDisabled={!paginationProps.canNextPage}\n        >\n          Next\n        </Button>\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"pages"),' is set to the number of steps plus one then the step indicator will be able create a bar that is completely filled which would usually be implemented on a "response submitted" style of page.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 6, start: 6 });\n  return (\n    <React.Fragment>\n      <StepIndicator currentStep={paginationProps.state.currentPage}>\n        <StepIndicator.Step label="Personal Information" />\n        <StepIndicator.Step label="Qualifications" />\n        <StepIndicator.Step label="Practice Information" />\n        <StepIndicator.Step label="Locations" />\n        <StepIndicator.Step label="Review & Confirm" />\n      </StepIndicator>\n      <Layout.Group style={{ marginTop: 10 }}>\n        <Button\n          data-id="1"\n          onClick={paginationProps.previousPage}\n          variant="outline"\n          isDisabled={!paginationProps.canPreviousPage}\n        >\n          Previous\n        </Button>\n        <Button\n          data-id="2"\n          onClick={paginationProps.nextPage}\n          isDisabled={!paginationProps.canNextPage}\n        >\n          Next\n        </Button>\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("br",null),(0,r.kt)("p",null,"Otherwise if pages is set to the number of steps as shown below the final page will not be able to get checked."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 5, start: 5 });\n  return (\n    <React.Fragment>\n      <StepIndicator currentStep={paginationProps.state.currentPage}>\n        <StepIndicator.Step label="Personal Information" />\n        <StepIndicator.Step label="Qualifications" />\n        <StepIndicator.Step label="Practice Information" />\n        <StepIndicator.Step label="Locations" />\n        <StepIndicator.Step label="Review & Confirm" />\n      </StepIndicator>\n      <Layout.Group style={{ marginTop: 10 }}>\n        <Button\n          data-id="1"\n          onClick={paginationProps.previousPage}\n          variant="outline"\n          isDisabled={!paginationProps.canPreviousPage}\n        >\n          Previous\n        </Button>\n        <Button\n          data-id="2"\n          onClick={paginationProps.nextPage}\n          isDisabled={!paginationProps.canNextPage}\n        >\n          Next\n        </Button>\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n')),(0,r.kt)("h2",{id:"final-text-in-button"},"Final Text in Button"),(0,r.kt)("p",null,'Use code similar to that below to change the button on the final page to say something like "Submit" instead of "Next"'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'() => {\n  const paginationProps = usePagination({ pages: 6, start: 2 });\n  const buttonMessage =\n    paginationProps.state.currentPage >= paginationProps.state.pageCount - 1\n      ? \'Submit\'\n      : \'Next\';\n  return (\n    <React.Fragment>\n      <StepIndicator currentStep={paginationProps.state.currentPage}>\n        <StepIndicator.Step label="Personal Information" />\n        <StepIndicator.Step label="Qualifications" />\n        <StepIndicator.Step label="Practice Information" />\n        <StepIndicator.Step label="Locations" />\n        <StepIndicator.Step label="Review & Confirm" />\n      </StepIndicator>\n      <Layout.Group style={{ marginTop: 10 }}>\n        <Button\n          data-id="1"\n          onClick={paginationProps.previousPage}\n          variant="outline"\n          isDisabled={!paginationProps.canPreviousPage}\n        >\n          Previous\n        </Button>\n        <Button\n          data-id="2"\n          onClick={paginationProps.nextPage}\n          isDisabled={!paginationProps.canNextPage}\n        >\n          {buttonMessage}\n        </Button>\n      </Layout.Group>\n    </React.Fragment>\n  );\n};\n'))),(0,r.kt)(u,{label:"Integration",mdxType:"Tab"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={StepIndicator}\n  rows={[\n    {\n      name: 'barSize',\n      type: 'number',\n      description: 'The size of the bar between the icons',\n      default: 'default = 3 | minimal = 2',\n    },\n    {\n      name: 'barColor',\n      type: 'string',\n      description: 'The color of the bar between the icons',\n    },\n    {\n      name: 'children',\n      type: 'ReactNode',\n      description: 'The stepper children of StepIndicator',\n    },\n    {\n      name: 'currentStep',\n      type: 'number',\n      description: 'The current step on the indicator',\n    },\n    {\n      name: 'stepSize',\n      type: 'number',\n      description: 'Use to set the size of the step icons',\n      default: 'default = 32 | minimal = 16',\n    },\n    {\n      name: 'icon',\n      type: 'ReactNode',\n      description: 'Use to set the icon',\n      default: '<IconMaterial icon=\"check\" size=\"100%\" />',\n    },\n    {\n      name: 'variant',\n      type: \"'default' | 'minimal'\",\n      description: 'Use to set variant style',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={StepIndicator.Step}\n  rows={[\n    {\n      name: 'barColor',\n      type: 'string',\n      description: 'The color of the bar between the icons',\n    },\n    {\n      name: 'currentStep',\n      type: 'number',\n      description: 'The current step/page on the indicator',\n    },\n    {\n      name: 'icon',\n      type: 'ReactNode',\n      description: 'Use to adjust the icon in the stepper at each step',\n    },\n    {\n      name: 'stepSize',\n      type: 'number',\n      description: 'Use to set the size of the step icons',\n    },\n    {\n      name: 'iconComplete',\n      type: 'ReactNode',\n      description: 'Set completed step icon',\n    },\n    {\n      name: 'label',\n      type: 'ReactNode',\n      description: 'The labeled text of each step',\n    },\n    {\n      name: 'stepNumber',\n      type: 'number',\n      description:\n        'The step the stepper is on. Used to determine what color each step should be',\n    },\n    {\n      name: 'stepCount',\n      type: 'number',\n      description: 'The number of steps',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={StepIndicator}\n  rows={[\n    {\n      name: 'step-indicator-root',\n      description: 'Step indicator root element',\n    },\n  ]}\n/>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={StepIndicator.Step}\n  rows={[\n    {\n      name: 'step-indicator-step-root',\n      description: 'Step indicator step root element',\n    },\n    {\n      name: 'step-indicator-step-bar',\n      description: 'Step indicator step bar element',\n    },\n    {\n      name: 'step-indicator-step-icon',\n      description: 'Step indicator step icon element',\n    },\n    {\n      name: 'step-indicator-step-icon-value',\n      description: 'Step indicator step icon value element',\n    },\n    {\n      name: 'step-indicator-step-label',\n      description: 'Step indicator step label element',\n    },\n  ]}\n/>\n"))))}g.isMDXComponent=!0}}]);