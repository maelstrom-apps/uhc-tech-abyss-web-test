"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[7811],{5364:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>p,default:()=>x,frontMatter:()=>l,metadata:()=>c,toc:()=>m});var r,a=n(7896),o=n(31461),i=(n(2784),n(3905)),s=["components"],l={id:"text",category:"Typography",title:"Text",description:"Used to create segments of text such as phrases, sentences, and paragraphs.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A367",pagination_prev:"web/ui/label",pagination_next:null},p=void 0,c={unversionedId:"web/ui/text",id:"web/ui/text",isDocsHomePage:!1,title:"Text",description:"Used to create segments of text such as phrases, sentences, and paragraphs.",source:"@site/docs/web/ui/Text.md",sourceDirName:"web/ui",slug:"/web/ui/text",permalink:"/web/ui/text",tags:[],version:"current",frontMatter:{id:"text",category:"Typography",title:"Text",description:"Used to create segments of text such as phrases, sentences, and paragraphs.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=0%3A367",pagination_prev:"web/ui/label",pagination_next:null},sidebar:"docs",previous:{title:"Label",permalink:"/web/ui/label"}},m=[{value:"Color",id:"color",children:[],level:2},{value:"Sizes",id:"sizes",children:[],level:2},{value:"Transform",id:"transform",children:[],level:2}],u=(r="Tab",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),d={toc:m};function x(e){var t=e.components,n=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(u,{label:"Overview",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Text } from '@abyss/web/ui/Text';\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Text',\n  inputs: [\n    {\n     prop: 'children',\n     type: 'string',\n    },\n    {\n      prop: 'color',\n      type: 'string',\n    },\n    {\n      prop: 'fontWeight',\n      type: 'string',\n    },\n    {\n      prop: 'size',\n      type: 'string',\n    },\n    {\n      prop: 'transform',\n      type: 'select',\n      options: [\n        { label: 'default', value: null },\n        { label: 'capitalize', value: 'capitalize' },\n        { label: 'lowercase', value: 'lowercase' },\n        { label: 'uppercase', value: 'uppercase' },\n      ],\n    },\n  ],\n}\n\n<Text>Enter message here</Text>\n")),(0,i.kt)("h2",{id:"color"},"Color"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"color")," property to set the color of the text. The default is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"black"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Text>Some filler text - Black</Text>\n  <Text color="$error1">Some filler text - error</Text>\n  <Text color="#FF00FF">Some filler text - hex</Text>\n  <Text color="blue">Some filler text - color</Text>\n</Layout.Stack>\n')),(0,i.kt)("h2",{id:"sizes"},"Sizes"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," property to change the size of the text. The default is set to md which is 16px. The values for each size are represented by ",(0,i.kt)("inlineCode",{parentName:"p"},"FontSize - LineHeight"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Text size="$lg">Body 1 - Large / 18px - 24px</Text>\n  <Text size="$md">Body 2 - Medium / 16px - 20px</Text>\n  <Text size="$sm">Body 3 - Small / 14.22px - 16px</Text>\n  <Text size="$xs">Small 1 - Extra Small / 12.64px - 16px</Text>\n</Layout.Stack>\n')),(0,i.kt)("h2",{id:"transform"},"Transform"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"transform")," property to change the formatting of the text. Variants available include the default case, ",(0,i.kt)("inlineCode",{parentName:"p"},"capitalize")," the first letter of each word, ",(0,i.kt)("inlineCode",{parentName:"p"},"lowercase")," all letters, or ",(0,i.kt)("inlineCode",{parentName:"p"},"uppercase")," all letters."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Stack alignItems="left">\n  <Text>Default text</Text>\n  <Text transform="capitalize">Capitalize text</Text>\n  <Text transform="lowercase">Lowercase text</Text>\n  <Text transform="uppercase">Uppercase text</Text>\n</Layout.Stack>\n'))),(0,i.kt)(u,{label:"Integration",mdxType:"Tab"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Text}\n  rows={[\n    {\n      name: 'children',\n      type: 'string',\n      description: 'The contents of the text component',\n    },\n    {\n      name: 'color',\n      type: 'string',\n      description: 'Set the color of the text',\n    },\n    {\n      name: 'size',\n      type: 'number | string',\n      description: 'Set the size of the text',\n    },\n    {\n      name: 'sizes',\n      type: 'shape',\n      description: 'Default size options for text',\n    },\n    {\n      name: 'transform',\n      type: 'string',\n      description:\n        'Reformat the text by changing whether letters are capitalized or not',\n    },\n    {\n      name: 'fontWeight',\n      type: 'string',\n      description: 'Set the font weight of text',\n    },\n  ]}\n/>\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Text}\n  rows={[\n    {\n      name: 'text-root',\n      description: 'Text root element',\n    },\n  ]}\n/>\n"))))}x.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,x=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(x,i(i({ref:t},c),{},{components:n})):r.createElement(x,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);