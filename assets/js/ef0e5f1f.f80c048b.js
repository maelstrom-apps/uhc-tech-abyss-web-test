"use strict";(self.webpackChunkabyss_docs=self.webpackChunkabyss_docs||[]).push([[7428],{30876:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(t),g=i,m=u["".concat(s,".").concat(g)]||u[g]||p[g]||r;return t?a.createElement(m,o(o({ref:n},c),{},{components:t})):a.createElement(m,o({ref:n},c))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},58074:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>d,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var a,i=t(7896),r=t(31461),o=(t(67294),t(30876)),l=["components"],s={id:"badge",category:"Data Display",title:"Badge",description:"Provides a small descriptor for UI elements.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=8892%3A42895",pagination_prev:"web/ui/tabs",pagination_next:"web/ui/chip"},d=void 0,c={unversionedId:"web/ui/badge",id:"web/ui/badge",isDocsHomePage:!1,title:"Badge",description:"Provides a small descriptor for UI elements.",source:"@site/docs/web/ui/Badge.md",sourceDirName:"web/ui",slug:"/web/ui/badge",permalink:"/web/ui/badge",tags:[],version:"current",frontMatter:{id:"badge",category:"Data Display",title:"Badge",description:"Provides a small descriptor for UI elements.",design:"https://www.figma.com/file/tk08Md4NBBVUPNHQYthmqp/Abyss-Design-System?node-id=8892%3A42895",pagination_prev:"web/ui/tabs",pagination_next:"web/ui/chip"},sidebar:"docs",previous:{title:"Tabs",permalink:"/web/ui/tabs"},next:{title:"Chip",permalink:"/web/ui/chip"}},p=[{value:"Variants",id:"variants",children:[],level:2},{value:"Rounded",id:"rounded",children:[],level:2},{value:"Outline",id:"outline",children:[],level:2},{value:"Icons",id:"icons",children:[],level:2},{value:"Width",id:"width",children:[],level:2},{value:"Accessibility",id:"accessibility",children:[{value:"Decorative Icons",id:"decorative-icons",children:[],level:4},{value:"Meaningful Colors",id:"meaningful-colors",children:[],level:4}],level:2}],u=(a="Tab",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.kt)("div",e)}),g={toc:p};function m(e){var n=e.components,t=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,i.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(u,{label:"Overview",mdxType:"Tab"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { Badge } from '@abyss/web/ui/Badge';\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"sandbox",sandbox:!0},"{\n  component: 'Badge',\n  inputs: [\n    {\n      prop: 'children',\n      type: 'string',\n    },\n    {\n      prop: 'variant',\n      type: 'select',\n      options: [\n        { label: 'success', value: 'success' },\n        { label: 'warning', value: 'warning' },\n        { label: 'error', value: 'error' },\n        { label: 'info', value: 'info' },\n        { label: 'neutral', value: 'neutral' },\n      ]\n    },\n    {\n      prop: 'rounded',\n      type: 'boolean',\n    },\n    {\n      prop: 'outline',\n      type: 'boolean',\n    },\n  ]\n}\n\n<Badge>Badge Sandbox</Badge>\n")),(0,o.kt)("h2",{id:"variants"},"Variants"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"variant")," property to set the color of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Badge"),".\nThe options are ",(0,o.kt)("inlineCode",{parentName:"p"},"success"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"warning"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"error"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"info"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"neutral"),". The default is ",(0,o.kt)("inlineCode",{parentName:"p"},"success"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Grid columns={2}>\n  <Grid.Col>\n    <Layout.Stack alignItems="left" space={20}>\n      <Badge variant="success">Success Badge</Badge>\n      <Badge variant="warning">Warning Badge</Badge>\n      <Badge variant="error">Error Badge</Badge>\n      <Badge variant="info">Info Badge</Badge>\n      <Badge variant="neutral">Neutral Badge</Badge>\n    </Layout.Stack>\n  </Grid.Col>\n  <Grid.Col>\n    <Layout.Stack alignItems="left" space={20}>\n      <Badge variant="success" outline>\n        Success Badge\n      </Badge>\n      <Badge variant="warning" outline>\n        Warning Badge\n      </Badge>\n      <Badge variant="error" outline>\n        Error Badge\n      </Badge>\n      <Badge variant="info" outline>\n        Info Badge\n      </Badge>\n      <Badge variant="neutral" outline>\n        Neutral Badge\n      </Badge>\n    </Layout.Stack>\n  </Grid.Col>\n</Grid>\n')),(0,o.kt)("h2",{id:"rounded"},"Rounded"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"rounded")," property to change the style of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Badge")," from rounded or squared. The default is ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Badge variant="info" outline ariaText="information">\n    Squared Badge\n  </Badge>\n  <Badge rounded variant="info" outline ariaText="information">\n    Rounded Badge\n  </Badge>\n</Layout.Group>\n')),(0,o.kt)("h2",{id:"outline"},"Outline"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"outline")," property to turn on the outline of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Badge"),". The default is ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Badge variant="info" ariaText="information">\n    Badge\n  </Badge>\n  <Badge outline variant="info" ariaText="information">\n    Outline Badge\n  </Badge>\n</Layout.Group>\n')),(0,o.kt)("h2",{id:"icons"},"Icons"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"icon")," property to set the icon of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Badge"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Layout.Group>\n  <Badge\n    icon={\n      <IconMaterial\n        icon="check_circle"\n        size="$sm"\n        color="$success1"\n        variant="filled"\n      />\n    }\n    variant="success"\n  >\n    Complete\n  </Badge>\n  <Badge\n    icon={\n      <IconMaterial\n        icon="remove_circle"\n        size="$sm"\n        color="$error1"\n        variant="filled"\n      />\n    }\n    variant="error"\n  >\n    Incomplete\n  </Badge>\n</Layout.Group>\n')),(0,o.kt)("h2",{id:"width"},"Width"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Badge")," component has a max width of 200px. Excess text will truncate."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Badge\n  icon={\n    <IconMaterial\n      ariaText="information"\n      icon="info"\n      size="$sm"\n      color="$info1"\n      variant="filled"\n    />\n  }\n  variant="info"\n>\n  Max width of 200 pixels. excess text will truncate.\n</Badge>\n')),(0,o.kt)("h2",{id:"accessibility"},"Accessibility"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ariaText")," prop to provide additional information denoted by the color. For more information visit the accessibility tab."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Badge ariaText="warning" variant="warning" outline>\n  Warning\n</Badge>\n'))),(0,o.kt)(u,{label:"Integration",mdxType:"Tab"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.PropsTable\n  of={Badge}\n  rows={[\n    {\n      name: 'rounded',\n      type: 'boolean',\n      description: 'Change the badge style',\n    },\n    {\n      name: 'outline',\n      type: 'boolean',\n      description: 'Add an outline to the badge.',\n    },\n    {\n      name: 'variant',\n      type: '\"success\" | \"warning\" | \"error\" | \"info\" | \"neutral\"',\n      description: 'Set the color of the badge',\n    },\n    {\n      name: 'icon',\n      type: 'node',\n      description: 'Adds an icon to the Badge component',\n    },\n    {\n      name: 'children',\n      type: 'node',\n      description: 'The text to be input into the Badge component',\n    },\n    {\n      name: 'ariaText',\n      type: 'string',\n      description: 'Sets the hidden text used for accessibility purposes',\n    },\n  ]}\n/>\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"render",render:!0},"<Docs.ClassesTable\n  of={Badge}\n  rows={[\n    {\n      name: 'badge-root',\n      description: 'Badge root element',\n    },\n    {\n      name: 'badge-icon',\n      description: 'Badge icon element',\n    },\n    {\n      name: 'badge-content',\n      description: 'Badge content element',\n    },\n  ]}\n/>\n"))),(0,o.kt)(u,{label:"Accessibility",mdxType:"Tab"},"Badges are not focusable, visual text elements used to show a status for quick recognition. Avoid using badge for text truncated beyond 200 pixels, because it will not be accessible.",(0,o.kt)("h4",{id:"decorative-icons"},"Decorative Icons"),(0,o.kt)("p",null,"In the badge below, since there is sufficient text next to the icon, the icon is considered decorative and and does not need to be exposed to assistive technology."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Badge\n  icon={\n    <IconMaterial\n      icon="warning"\n      size="$sm"\n      color="$warning1"\n      variant="filled"\n    />\n  }\n  variant="warning"\n  outline\n>\n  Warning\n</Badge>\n')),(0,o.kt)("h4",{id:"meaningful-colors"},"Meaningful Colors"),(0,o.kt)("p",null,"Conveying Meaning Via Color Alone: Color must not used as the only means of conveying information, actions, prompting a response, or distinguishing elements. Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies \u2013 such as screen readers. Ensure that information denoted by the color is either obvious from the content itself (e.g. the visible text), or is included through alternative means, such as additional text hidden with the .sr-only class. This can also be done by using the ariaText prop."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Badge ariaText="warning" variant="warning" outline>\n  Warning\n</Badge>\n'))))}m.isMDXComponent=!0}}]);